
SimpleHttp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e67c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c28  0800e87c  0800e87c  0001e87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080114a4  080114a4  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  080114a4  080114a4  000214a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080114ac  080114ac  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080114ac  080114ac  000214ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080114b0  080114b0  000214b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080114b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08011544  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  080115e4  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a3a0  200001d0  08011684  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000a570  08011684  0003a570  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019bb2  00000000  00000000  000301fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004abd  00000000  00000000  00049db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001208  00000000  00000000  0004e870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001168  00000000  00000000  0004fa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000326fa  00000000  00000000  00050be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fc2d  00000000  00000000  000832da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001046a3  00000000  00000000  000a2f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001a75aa  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005048  00000000  00000000  001a75fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d0 	.word	0x200001d0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e864 	.word	0x0800e864

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d4 	.word	0x200001d4
 800023c:	0800e864 	.word	0x0800e864

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
}
 80005ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ee:	f3bf 8f6f 	isb	sy
}
 80005f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <SCB_EnableICache+0x48>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <SCB_EnableICache+0x48>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <SCB_EnableICache+0x48>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000614:	f3bf 8f4f 	dsb	sy
}
 8000618:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061a:	f3bf 8f6f 	isb	sy
}
 800061e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000638:	2200      	movs	r2, #0
 800063a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
}
 8000642:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800064a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0b5b      	lsrs	r3, r3, #13
 8000650:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000654:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	015a      	lsls	r2, r3, #5
 8000664:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000668:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066e:	4911      	ldr	r1, [pc, #68]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000670:	4313      	orrs	r3, r2
 8000672:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ef      	bne.n	8000660 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	1e5a      	subs	r2, r3, #1
 8000684:	60fa      	str	r2, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e5      	bne.n	8000656 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
}
 800068e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
}
 80006a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a2:	f3bf 8f6f 	isb	sy
}
 80006a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006bc:	f000 f8be 	bl	800083c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006c0:	f7ff ff90 	bl	80005e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006c4:	f7ff ffb4 	bl	8000630 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 fbaa 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f80c 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f878 	bl	80007c4 <MX_GPIO_Init>
  MX_LWIP_Init();
 80006d4:	f002 fe02 	bl	80032dc <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 80006d8:	4802      	ldr	r0, [pc, #8]	; (80006e4 <main+0x2c>)
 80006da:	f003 f89b 	bl	8003814 <ethernetif_input>

	  sys_check_timeouts();
 80006de:	f00a fb65 	bl	800adac <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80006e2:	e7f9      	b.n	80006d8 <main+0x20>
 80006e4:	200001f4 	.word	0x200001f4

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f00d f85c 	bl	800d7b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <SystemClock_Config+0xd4>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <SystemClock_Config+0xd4>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemClock_Config+0xd4>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <SystemClock_Config+0xd8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <SystemClock_Config+0xd8>)
 800072a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemClock_Config+0xd8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000754:	23d8      	movs	r3, #216	; 0xd8
 8000756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4618      	mov	r0, r3
 800076a:	f002 f94b 	bl	8002a04 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000774:	f000 f890 	bl	8000898 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000778:	f002 f8f4 	bl	8002964 <HAL_PWREx_EnableOverDrive>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000782:	f000 f889 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000792:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2107      	movs	r1, #7
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 fbdb 	bl	8002f60 <HAL_RCC_ClockConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007b0:	f000 f872 	bl	8000898 <Error_Handler>
  }
}
 80007b4:	bf00      	nop
 80007b6:	3750      	adds	r7, #80	; 0x50
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_GPIO_Init+0x74>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <MX_GPIO_Init+0x74>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_GPIO_Init+0x74>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_GPIO_Init+0x74>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <MX_GPIO_Init+0x74>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_GPIO_Init+0x74>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_GPIO_Init+0x74>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <MX_GPIO_Init+0x74>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_GPIO_Init+0x74>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_GPIO_Init+0x74>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <MX_GPIO_Init+0x74>)
 8000818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_GPIO_Init+0x74>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000842:	463b      	mov	r3, r7
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800084e:	f000 fc7b 	bl	8001148 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000852:	2301      	movs	r3, #1
 8000854:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000856:	2300      	movs	r3, #0
 8000858:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MPU_Config+0x58>)
 800085c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;
 800085e:	2304      	movs	r3, #4
 8000860:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000862:	2300      	movs	r3, #0
 8000864:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000866:	2301      	movs	r3, #1
 8000868:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800086a:	2303      	movs	r3, #3
 800086c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800086e:	2301      	movs	r3, #1
 8000870:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000872:	2301      	movs	r3, #1
 8000874:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800087e:	463b      	mov	r3, r7
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fc99 	bl	80011b8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000886:	2004      	movs	r0, #4
 8000888:	f000 fc76 	bl	8001178 <HAL_MPU_Enable>

}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2007c000 	.word	0x2007c000

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x44>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_MspInit+0x44>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x44>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x44>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 fab0 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <ETH_IRQHandler+0x10>)
 8000946:	f000 ff7b 	bl	8001840 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20004bcc 	.word	0x20004bcc

08000954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return 1;
 8000958:	2301      	movs	r3, #1
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <_kill>:

int _kill(int pid, int sig)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <_kill+0x20>)
 8000970:	2216      	movs	r2, #22
 8000972:	601a      	str	r2, [r3, #0]
  return -1;
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	2000a560 	.word	0x2000a560

08000988 <_exit>:

void _exit (int status)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ffe5 	bl	8000964 <_kill>
  while (1) {}    /* Make sure we hang here */
 800099a:	e7fe      	b.n	800099a <_exit+0x12>

0800099c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	e00a      	b.n	80009c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ae:	f3af 8000 	nop.w
 80009b2:	4601      	mov	r1, r0
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	60ba      	str	r2, [r7, #8]
 80009ba:	b2ca      	uxtb	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf0      	blt.n	80009ae <_read+0x12>
  }

  return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	e009      	b.n	80009fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	60ba      	str	r2, [r7, #8]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbf1      	blt.n	80009e8 <_write+0x12>
  }
  return len;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_close>:

int _close(int file)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a36:	605a      	str	r2, [r3, #4]
  return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_isatty>:

int _isatty(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d205      	bcs.n	8000ab4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <_sbrk+0x6c>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a06      	ldr	r2, [pc, #24]	; (8000adc <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	371c      	adds	r7, #28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	20080000 	.word	0x20080000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	200001ec 	.word	0x200001ec
 8000ae0:	2000a570 	.word	0x2000a570
 8000ae4:	2000a560 	.word	0x2000a560

08000ae8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <SystemInit+0x20>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <SystemInit+0x20>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b12:	490e      	ldr	r1, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b28:	4c0b      	ldr	r4, [pc, #44]	; (8000b58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b36:	f7ff ffd7 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f00c fdf9 	bl	800d730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff fdbb 	bl	80006b8 <main>
  bx  lr    
 8000b42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b44:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000b50:	080114b4 	.word	0x080114b4
  ldr r2, =_sbss
 8000b54:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000b58:	2000a570 	.word	0x2000a570

08000b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC_IRQHandler>

08000b5e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00b      	beq.n	8000b86 <LAN8742_RegisterBusIO+0x28>
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d007      	beq.n	8000b86 <LAN8742_RegisterBusIO+0x28>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <LAN8742_RegisterBusIO+0x28>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d102      	bne.n	8000b8c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e014      	b.n	8000bb6 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	691a      	ldr	r2, [r3, #16]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d17c      	bne.n	8000cdc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e01c      	b.n	8000c36 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	f107 0208 	add.w	r2, r7, #8
 8000c04:	2112      	movs	r1, #18
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	4798      	blx	r3
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	da03      	bge.n	8000c18 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000c10:	f06f 0304 	mvn.w	r3, #4
 8000c14:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000c16:	e00b      	b.n	8000c30 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	f003 031f 	and.w	r3, r3, #31
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d105      	bne.n	8000c30 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
         break;
 8000c2e:	e005      	b.n	8000c3c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3301      	adds	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	2b1f      	cmp	r3, #31
 8000c3a:	d9df      	bls.n	8000bfc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b1f      	cmp	r3, #31
 8000c42:	d902      	bls.n	8000c4a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000c44:	f06f 0302 	mvn.w	r3, #2
 8000c48:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d145      	bne.n	8000cdc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	6810      	ldr	r0, [r2, #0]
 8000c58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4798      	blx	r3
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db37      	blt.n	8000cd6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	6810      	ldr	r0, [r2, #0]
 8000c6e:	f107 0208 	add.w	r2, r7, #8
 8000c72:	2100      	movs	r1, #0
 8000c74:	4798      	blx	r3
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db28      	blt.n	8000cce <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4798      	blx	r3
 8000c82:	4603      	mov	r3, r0
 8000c84:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000c86:	e01c      	b.n	8000cc2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4798      	blx	r3
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c9a:	d80e      	bhi.n	8000cba <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	6810      	ldr	r0, [r2, #0]
 8000ca4:	f107 0208 	add.w	r2, r7, #8
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4798      	blx	r3
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	da07      	bge.n	8000cc2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000cb2:	f06f 0304 	mvn.w	r3, #4
 8000cb6:	613b      	str	r3, [r7, #16]
                 break;
 8000cb8:	e010      	b.n	8000cdc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000cba:	f06f 0301 	mvn.w	r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
               break;
 8000cc0:	e00c      	b.n	8000cdc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1dd      	bne.n	8000c88 <LAN8742_Init+0xc6>
 8000ccc:	e006      	b.n	8000cdc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000cce:	f06f 0304 	mvn.w	r3, #4
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	e002      	b.n	8000cdc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000cd6:	f06f 0303 	mvn.w	r3, #3
 8000cda:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d112      	bne.n	8000d08 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	4798      	blx	r3
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000cec:	bf00      	nop
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	4798      	blx	r3
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d00:	d9f5      	bls.n	8000cee <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2201      	movs	r2, #1
 8000d06:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000d08:	693b      	ldr	r3, [r7, #16]
 }
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	6810      	ldr	r0, [r2, #0]
 8000d26:	f107 020c 	add.w	r2, r7, #12
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4798      	blx	r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	da02      	bge.n	8000d3a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d34:	f06f 0304 	mvn.w	r3, #4
 8000d38:	e06e      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	6810      	ldr	r0, [r2, #0]
 8000d42:	f107 020c 	add.w	r2, r7, #12
 8000d46:	2101      	movs	r1, #1
 8000d48:	4798      	blx	r3
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	da02      	bge.n	8000d56 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d50:	f06f 0304 	mvn.w	r3, #4
 8000d54:	e060      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000d60:	2301      	movs	r3, #1
 8000d62:	e059      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6810      	ldr	r0, [r2, #0]
 8000d6c:	f107 020c 	add.w	r2, r7, #12
 8000d70:	2100      	movs	r1, #0
 8000d72:	4798      	blx	r3
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	da02      	bge.n	8000d80 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d7a:	f06f 0304 	mvn.w	r3, #4
 8000d7e:	e04b      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d11b      	bne.n	8000dc2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <LAN8742_GetLinkState+0x90>
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e03a      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e033      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	e02c      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	e02a      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6810      	ldr	r0, [r2, #0]
 8000dca:	f107 020c 	add.w	r2, r7, #12
 8000dce:	211f      	movs	r1, #31
 8000dd0:	4798      	blx	r3
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	da02      	bge.n	8000dde <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000dd8:	f06f 0304 	mvn.w	r3, #4
 8000ddc:	e01c      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000de8:	2306      	movs	r3, #6
 8000dea:	e015      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 031c 	and.w	r3, r3, #28
 8000df2:	2b18      	cmp	r3, #24
 8000df4:	d101      	bne.n	8000dfa <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000df6:	2302      	movs	r3, #2
 8000df8:	e00e      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f003 031c 	and.w	r3, r3, #28
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d101      	bne.n	8000e08 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e007      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 031c 	and.w	r3, r3, #28
 8000e0e:	2b14      	cmp	r3, #20
 8000e10:	d101      	bne.n	8000e16 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e12:	2304      	movs	r3, #4
 8000e14:	e000      	b.n	8000e18 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e16:	2305      	movs	r3, #5
    }				
  }
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f94d 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f000 f806 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fd38 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f967 	bl	800112e <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f92f 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	200001f0 	.word	0x200001f0

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200001f0 	.word	0x200001f0

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriorityGrouping>:
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <__NVIC_SetPriorityGrouping+0x40>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x40>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00
 8000f68:	05fa0000 	.word	0x05fa0000

08000f6c <__NVIC_GetPriorityGrouping>:
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff29 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff3e 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff31 	bl	8000f88 <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffa2 	bl	8001080 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800114c:	f3bf 8f5f 	dmb	sy
}
 8001150:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_MPU_Disable+0x28>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_MPU_Disable+0x28>)
 8001158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800115c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_MPU_Disable+0x2c>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00
 8001174:	e000ed90 	.word	0xe000ed90

08001178 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <HAL_MPU_Enable+0x38>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_MPU_Enable+0x3c>)
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <HAL_MPU_Enable+0x3c>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001196:	f3bf 8f4f 	dsb	sy
}
 800119a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800119c:	f3bf 8f6f 	isb	sy
}
 80011a0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed90 	.word	0xe000ed90
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	785a      	ldrb	r2, [r3, #1]
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
 80011c6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d029      	beq.n	8001224 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80011d0:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7b1b      	ldrb	r3, [r3, #12]
 80011dc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7adb      	ldrb	r3, [r3, #11]
 80011e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7a9b      	ldrb	r3, [r3, #10]
 80011ea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7b5b      	ldrb	r3, [r3, #13]
 80011f2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7b9b      	ldrb	r3, [r3, #14]
 80011fa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7bdb      	ldrb	r3, [r3, #15]
 8001202:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001204:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7a5b      	ldrb	r3, [r3, #9]
 800120a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800120c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7a1b      	ldrb	r3, [r3, #8]
 8001212:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001214:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	7812      	ldrb	r2, [r2, #0]
 800121a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800121e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001220:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001222:	e005      	b.n	8001230 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_MPU_ConfigRegion+0x84>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed90 	.word	0xe000ed90

08001240 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e06a      	b.n	8001328 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001258:	2b00      	cmp	r3, #0
 800125a:	d106      	bne.n	800126a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2223      	movs	r2, #35	; 0x23
 8001260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f002 fb45 	bl	80038f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <HAL_ETH_Init+0xf0>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a30      	ldr	r2, [pc, #192]	; (8001330 <HAL_ETH_Init+0xf0>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <HAL_ETH_Init+0xf0>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001282:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <HAL_ETH_Init+0xf4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4a2b      	ldr	r2, [pc, #172]	; (8001334 <HAL_ETH_Init+0xf4>)
 8001288:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800128c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <HAL_ETH_Init+0xf4>)
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4927      	ldr	r1, [pc, #156]	; (8001334 <HAL_ETH_Init+0xf4>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <HAL_ETH_Init+0xf4>)
 800129e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b8:	f7ff fe04 	bl	8000ec4 <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012be:	e011      	b.n	80012e4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012c0:	f7ff fe00 	bl	8000ec4 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012ce:	d909      	bls.n	80012e4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2204      	movs	r2, #4
 80012d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	22e0      	movs	r2, #224	; 0xe0
 80012dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e021      	b.n	8001328 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1e4      	bne.n	80012c0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fee4 	bl	80020c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 ff8b 	bl	8002218 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 ffe1 	bl	80022ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	461a      	mov	r2, r3
 800130e:	2100      	movs	r1, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 ff49 	bl	80021a8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2210      	movs	r2, #16
 8001322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	40013800 	.word	0x40013800

08001338 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001346:	2b10      	cmp	r3, #16
 8001348:	d150      	bne.n	80013ec <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2223      	movs	r2, #35	; 0x23
 800134e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2204      	movs	r2, #4
 8001356:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f9fd 	bl	8001758 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f042 0208 	orr.w	r2, r2, #8
 800136c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fdb0 	bl	8000edc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0204 	orr.w	r2, r2, #4
 8001392:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff fd9d 	bl	8000edc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fd2a 	bl	8001e04 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6812      	ldr	r2, [r2, #0]
 80013be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013c6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013de:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2223      	movs	r2, #35	; 0x23
 80013e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e000      	b.n	80013ee <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
  }
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001404:	2b23      	cmp	r3, #35	; 0x23
 8001406:	d14a      	bne.n	800149e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2223      	movs	r2, #35	; 0x23
 800140c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001422:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001426:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	f023 0302 	bic.w	r3, r3, #2
 800143a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800143e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0204 	bic.w	r2, r2, #4
 800144e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff fd3f 	bl	8000edc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 fccc 	bl	8001e04 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0208 	bic.w	r2, r2, #8
 800147a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff fd29 	bl	8000edc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2210      	movs	r2, #16
 8001496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
  }
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e07c      	b.n	80015c8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014d4:	2b23      	cmp	r3, #35	; 0x23
 80014d6:	d176      	bne.n	80015c6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80014d8:	2200      	movs	r2, #0
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 ff61 	bl	80023a4 <ETH_Prepare_Tx_Descriptors>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d009      	beq.n	80014fc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ee:	f043 0202 	orr.w	r2, r3, #2
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e065      	b.n	80015c8 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80014fc:	f3bf 8f4f 	dsb	sy
}
 8001500:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3206      	adds	r2, #6
 800150a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151e:	2b03      	cmp	r3, #3
 8001520:	d904      	bls.n	800152c <HAL_ETH_Transmit+0x84>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	1f1a      	subs	r2, r3, #4
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3106      	adds	r1, #6
 8001538:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800153c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001540:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001542:	f7ff fcbf 	bl	8000ec4 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001548:	e037      	b.n	80015ba <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d011      	beq.n	8001580 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001562:	f043 0208 	orr.w	r2, r3, #8
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e023      	b.n	80015c8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001586:	d018      	beq.n	80015ba <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001588:	f7ff fc9c 	bl	8000ec4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	d302      	bcc.n	800159e <HAL_ETH_Transmit+0xf6>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10d      	bne.n	80015ba <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a4:	f043 0204 	orr.w	r2, r3, #4
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80015b4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e006      	b.n	80015c8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	dbc3      	blt.n	800154a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
  }
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d109      	bne.n	80015fc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0a8      	b.n	800174e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001602:	2b23      	cmp	r3, #35	; 0x23
 8001604:	d001      	beq.n	800160a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0a1      	b.n	800174e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	3212      	adds	r2, #18
 8001616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001620:	f1c3 0304 	rsb	r3, r3, #4
 8001624:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001626:	e06a      	b.n	80016fe <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d007      	beq.n	8001644 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	699a      	ldr	r2, [r3, #24]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	69da      	ldr	r2, [r3, #28]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164c:	2b00      	cmp	r3, #0
 800164e:	d103      	bne.n	8001658 <HAL_ETH_ReadData+0x88>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d040      	beq.n	80016da <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00c      	beq.n	800169c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	0c1b      	lsrs	r3, r3, #16
 8001688:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800168c:	3b04      	subs	r3, #4
 800168e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016b4:	461a      	mov	r2, r3
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	f002 fae5 	bl	8003c88 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	441a      	add	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3301      	adds	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d902      	bls.n	80016ec <HAL_ETH_ReadData+0x11c>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b04      	subs	r3, #4
 80016ea:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	3212      	adds	r2, #18
 80016f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	db06      	blt.n	8001714 <HAL_ETH_ReadData+0x144>
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	429a      	cmp	r2, r3
 800170c:	d202      	bcs.n	8001714 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d089      	beq.n	8001628 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	441a      	add	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f815 	bl	8001758 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d108      	bne.n	800174c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	e000      	b.n	800174e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
}
 800174e:	4618      	mov	r0, r3
 8001750:	3720      	adds	r7, #32
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001764:	2301      	movs	r3, #1
 8001766:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800176c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	3212      	adds	r2, #18
 8001774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001778:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800177e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001780:	e040      	b.n	8001804 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d112      	bne.n	80017b0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fa4a 	bl	8003c28 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	74fb      	strb	r3, [r7, #19]
 800179e:	e007      	b.n	80017b0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	461a      	mov	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	461a      	mov	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80017b0:	7cfb      	ldrb	r3, [r7, #19]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d026      	beq.n	8001804 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d103      	bne.n	80017c6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	4a1e      	ldr	r2, [pc, #120]	; (800183c <ETH_UpdateDescriptor+0xe4>)
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	e003      	b.n	80017ce <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80017cc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 80017ce:	f3bf 8f5f 	dmb	sy
}
 80017d2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	3301      	adds	r3, #1
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d902      	bls.n	80017f2 <ETH_UpdateDescriptor+0x9a>
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	3b04      	subs	r3, #4
 80017f0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	3212      	adds	r2, #18
 80017f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fc:	617b      	str	r3, [r7, #20]
      desccount--;
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	3b01      	subs	r3, #1
 8001802:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <ETH_UpdateDescriptor+0xb8>
 800180a:	7cfb      	ldrb	r3, [r7, #19]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1b8      	bne.n	8001782 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	429a      	cmp	r2, r3
 8001818:	d00c      	beq.n	8001834 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001822:	461a      	mov	r2, r3
 8001824:	2300      	movs	r3, #0
 8001826:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001834:	bf00      	nop
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	80004600 	.word	0x80004600

08001840 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001856:	2b40      	cmp	r3, #64	; 0x40
 8001858:	d112      	bne.n	8001880 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001868:	2b40      	cmp	r3, #64	; 0x40
 800186a:	d109      	bne.n	8001880 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001874:	461a      	mov	r2, r3
 8001876:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <HAL_ETH_IRQHandler+0x178>)
 8001878:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f8ac 	bl	80019d8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b01      	cmp	r3, #1
 8001890:	d113      	bne.n	80018ba <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10a      	bne.n	80018ba <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ac:	461a      	mov	r2, r3
 80018ae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80018b2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f885 	bl	80019c4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018cc:	d14c      	bne.n	8001968 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e0:	d142      	bne.n	8001968 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e8:	f043 0208 	orr.w	r2, r3, #8
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001904:	d11a      	bne.n	800193c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <HAL_ETH_IRQHandler+0x17c>)
 8001912:	4013      	ands	r3, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800192c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001930:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	22e0      	movs	r2, #224	; 0xe0
 8001936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800193a:	e012      	b.n	8001962 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001944:	695a      	ldr	r2, [r3, #20]
 8001946:	f248 6380 	movw	r3, #34432	; 0x8680
 800194a:	4013      	ands	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195a:	461a      	mov	r2, r3
 800195c:	f248 6380 	movw	r3, #34432	; 0x8680
 8001960:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f842 	bl	80019ec <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b08      	cmp	r3, #8
 8001974:	d10e      	bne.n	8001994 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f83a 	bl	8001a00 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_ETH_IRQHandler+0x180>)
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <HAL_ETH_IRQHandler+0x180>)
 80019a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019a6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f833 	bl	8001a14 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	00010040 	.word	0x00010040
 80019bc:	007e2000 	.word	0x007e2000
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 031c 	and.w	r3, r3, #28
 8001a44:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	02db      	lsls	r3, r3, #11
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	019b      	lsls	r3, r3, #6
 8001a56:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f023 0302 	bic.w	r3, r3, #2
 8001a66:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001a78:	f7ff fa24 	bl	8000ec4 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a7e:	e00d      	b.n	8001a9c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a80:	f7ff fa20 	bl	8000ec4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8e:	d301      	bcc.n	8001a94 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e010      	b.n	8001ab6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ec      	bne.n	8001a80 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 031c 	and.w	r3, r3, #28
 8001ada:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	02db      	lsls	r3, r3, #11
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	019b      	lsls	r3, r3, #6
 8001aec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b18:	f7ff f9d4 	bl	8000ec4 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b1e:	e00d      	b.n	8001b3c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b20:	f7ff f9d0 	bl	8000ec4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2e:	d301      	bcc.n	8001b34 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e009      	b.n	8001b48 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ec      	bne.n	8001b20 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0d9      	b.n	8001d18 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf14      	ite	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	2300      	moveq	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf0c      	ite	eq
 8001b9c:	2301      	moveq	r3, #1
 8001b9e:	2300      	movne	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf14      	ite	ne
 8001bb8:	2301      	movne	r3, #1
 8001bba:	2300      	moveq	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf0c      	ite	eq
 8001bd2:	2301      	moveq	r3, #1
 8001bd4:	2300      	movne	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf14      	ite	ne
 8001bec:	2301      	movne	r3, #1
 8001bee:	2300      	moveq	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	bf0c      	ite	eq
 8001c22:	2301      	moveq	r3, #1
 8001c24:	2300      	movne	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf0c      	ite	eq
 8001c3c:	2301      	moveq	r3, #1
 8001c3e:	2300      	movne	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf14      	ite	ne
 8001c7e:	2301      	movne	r3, #1
 8001c80:	2300      	moveq	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	0c1b      	lsrs	r3, r3, #16
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf14      	ite	ne
 8001d08:	2301      	movne	r3, #1
 8001d0a:	2300      	moveq	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e00b      	b.n	8001d50 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d105      	bne.n	8001d4e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f883 	bl	8001e50 <ETH_SetMACConfig>

    return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e000      	b.n	8001d50 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
  }
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f023 031c 	bic.w	r3, r3, #28
 8001d6e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d70:	f001 faa8 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 8001d74:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d908      	bls.n	8001d90 <HAL_ETH_SetMDIOClockRange+0x38>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d804      	bhi.n	8001d90 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f043 0308 	orr.w	r3, r3, #8
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	e027      	b.n	8001de0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4a18      	ldr	r2, [pc, #96]	; (8001df4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d908      	bls.n	8001daa <HAL_ETH_SetMDIOClockRange+0x52>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d204      	bcs.n	8001daa <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f043 030c 	orr.w	r3, r3, #12
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	e01a      	b.n	8001de0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d303      	bcc.n	8001dba <HAL_ETH_SetMDIOClockRange+0x62>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d911      	bls.n	8001dde <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d908      	bls.n	8001dd4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d804      	bhi.n	8001dd4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	e005      	b.n	8001de0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f043 0310 	orr.w	r3, r3, #16
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	e000      	b.n	8001de0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001dde:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	611a      	str	r2, [r3, #16]
}
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	01312cff 	.word	0x01312cff
 8001df4:	02160ebf 	.word	0x02160ebf
 8001df8:	03938700 	.word	0x03938700
 8001dfc:	05f5e0ff 	.word	0x05f5e0ff
 8001e00:	08f0d17f 	.word	0x08f0d17f

08001e04 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e26:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff f851 	bl	8000edc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e44:	6193      	str	r3, [r2, #24]
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4b51      	ldr	r3, [pc, #324]	; (8001fac <ETH_SetMACConfig+0x15c>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	7c1b      	ldrb	r3, [r3, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <ETH_SetMACConfig+0x28>
 8001e72:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e76:	e000      	b.n	8001e7a <ETH_SetMACConfig+0x2a>
 8001e78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	7c5b      	ldrb	r3, [r3, #17]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <ETH_SetMACConfig+0x38>
 8001e82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e86:	e000      	b.n	8001e8a <ETH_SetMACConfig+0x3a>
 8001e88:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e8a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	7fdb      	ldrb	r3, [r3, #31]
 8001e96:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e98:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	7f92      	ldrb	r2, [r2, #30]
 8001ea4:	2a00      	cmp	r2, #0
 8001ea6:	d102      	bne.n	8001eae <ETH_SetMACConfig+0x5e>
 8001ea8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eac:	e000      	b.n	8001eb0 <ETH_SetMACConfig+0x60>
 8001eae:	2200      	movs	r2, #0
                        macconf->Speed |
 8001eb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	7f1b      	ldrb	r3, [r3, #28]
 8001eb6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001eb8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ebe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	791b      	ldrb	r3, [r3, #4]
 8001ec4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ec6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ece:	2a00      	cmp	r2, #0
 8001ed0:	d102      	bne.n	8001ed8 <ETH_SetMACConfig+0x88>
 8001ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed6:	e000      	b.n	8001eda <ETH_SetMACConfig+0x8a>
 8001ed8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001eda:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	7bdb      	ldrb	r3, [r3, #15]
 8001ee0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ee2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ee8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ef0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f7fe ffe6 	bl	8000edc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f26:	4013      	ands	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f36:	2a00      	cmp	r2, #0
 8001f38:	d101      	bne.n	8001f3e <ETH_SetMACConfig+0xee>
 8001f3a:	2280      	movs	r2, #128	; 0x80
 8001f3c:	e000      	b.n	8001f40 <ETH_SetMACConfig+0xf0>
 8001f3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f40:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001f4e:	2a01      	cmp	r2, #1
 8001f50:	d101      	bne.n	8001f56 <ETH_SetMACConfig+0x106>
 8001f52:	2208      	movs	r2, #8
 8001f54:	e000      	b.n	8001f58 <ETH_SetMACConfig+0x108>
 8001f56:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f58:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001f60:	2a01      	cmp	r2, #1
 8001f62:	d101      	bne.n	8001f68 <ETH_SetMACConfig+0x118>
 8001f64:	2204      	movs	r2, #4
 8001f66:	e000      	b.n	8001f6a <ETH_SetMACConfig+0x11a>
 8001f68:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001f72:	2a01      	cmp	r2, #1
 8001f74:	d101      	bne.n	8001f7a <ETH_SetMACConfig+0x12a>
 8001f76:	2202      	movs	r2, #2
 8001f78:	e000      	b.n	8001f7c <ETH_SetMACConfig+0x12c>
 8001f7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7fe ffa1 	bl	8000edc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	619a      	str	r2, [r3, #24]
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	ff20810f 	.word	0xff20810f

08001fb0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <ETH_SetDMAConfig+0x110>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	7b1b      	ldrb	r3, [r3, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <ETH_SetDMAConfig+0x2c>
 8001fd6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fda:	e000      	b.n	8001fde <ETH_SetDMAConfig+0x2e>
 8001fdc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	7b5b      	ldrb	r3, [r3, #13]
 8001fe2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fe4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	7f52      	ldrb	r2, [r2, #29]
 8001fea:	2a00      	cmp	r2, #0
 8001fec:	d102      	bne.n	8001ff4 <ETH_SetDMAConfig+0x44>
 8001fee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ff2:	e000      	b.n	8001ff6 <ETH_SetDMAConfig+0x46>
 8001ff4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ff6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	7b9b      	ldrb	r3, [r3, #14]
 8001ffc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ffe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002004:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	7f1b      	ldrb	r3, [r3, #28]
 800200a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800200c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	7f9b      	ldrb	r3, [r3, #30]
 8002012:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002014:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800201a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002022:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002024:	4313      	orrs	r3, r2
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002034:	461a      	mov	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002046:	2001      	movs	r0, #1
 8002048:	f7fe ff48 	bl	8000edc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002054:	461a      	mov	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	791b      	ldrb	r3, [r3, #4]
 800205e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002064:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800206a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002070:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002078:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800207a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002082:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002088:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002092:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002096:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020a4:	2001      	movs	r0, #1
 80020a6:	f7fe ff19 	bl	8000edc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	f8de3f23 	.word	0xf8de3f23

080020c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0a6      	sub	sp, #152	; 0x98
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020d8:	2300      	movs	r3, #0
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002100:	2300      	movs	r3, #0
 8002102:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800210a:	2300      	movs	r3, #0
 800210c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002126:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800212a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800212c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002130:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002138:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800213c:	4619      	mov	r1, r3
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fe86 	bl	8001e50 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002144:	2301      	movs	r3, #1
 8002146:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002148:	2301      	movs	r3, #1
 800214a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800214c:	2301      	movs	r3, #1
 800214e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002152:	2301      	movs	r3, #1
 8002154:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002166:	2300      	movs	r3, #0
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800216a:	2301      	movs	r3, #1
 800216c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002170:	2301      	movs	r3, #1
 8002172:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002178:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800217a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800217e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002184:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002186:	2301      	movs	r3, #1
 8002188:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800218c:	2300      	movs	r3, #0
 800218e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002194:	f107 0308 	add.w	r3, r7, #8
 8002198:	4619      	mov	r1, r3
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ff08 	bl	8001fb0 <ETH_SetDMAConfig>
}
 80021a0:	bf00      	nop
 80021a2:	3798      	adds	r7, #152	; 0x98
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3305      	adds	r3, #5
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	3204      	adds	r2, #4
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <ETH_MACAddressConfig+0x68>)
 80021ca:	4413      	add	r3, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3303      	adds	r3, #3
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	061a      	lsls	r2, r3, #24
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3302      	adds	r3, #2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	041b      	lsls	r3, r3, #16
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3301      	adds	r3, #1
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	4313      	orrs	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	7812      	ldrb	r2, [r2, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <ETH_MACAddressConfig+0x6c>)
 80021fa:	4413      	add	r3, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	6013      	str	r3, [r2, #0]
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40028040 	.word	0x40028040
 8002214:	40028044 	.word	0x40028044

08002218 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e03e      	b.n	80022a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68d9      	ldr	r1, [r3, #12]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2200      	movs	r2, #0
 8002242:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	3206      	adds	r2, #6
 8002258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d80c      	bhi.n	8002288 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68d9      	ldr	r1, [r3, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	461a      	mov	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	e004      	b.n	8002292 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3301      	adds	r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d9bd      	bls.n	8002226 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022bc:	611a      	str	r2, [r3, #16]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	e046      	b.n	8002366 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6919      	ldr	r1, [r3, #16]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2200      	movs	r2, #0
 80022f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002314:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800231c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	3212      	adds	r2, #18
 8002332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d80c      	bhi.n	8002356 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6919      	ldr	r1, [r3, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	e004      	b.n	8002360 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	461a      	mov	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3301      	adds	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d9b5      	bls.n	80022d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002396:	60da      	str	r2, [r3, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b08d      	sub	sp, #52	; 0x34
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3318      	adds	r3, #24
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ce:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023e6:	d007      	beq.n	80023f8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	3304      	adds	r3, #4
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80023f8:	2302      	movs	r3, #2
 80023fa:	e0ff      	b.n	80025fc <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	3301      	adds	r3, #1
 8002400:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4b7d      	ldr	r3, [pc, #500]	; (8002608 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002412:	4013      	ands	r3, r2
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	6852      	ldr	r2, [r2, #4]
 8002418:	431a      	orrs	r2, r3
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	431a      	orrs	r2, r3
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	431a      	orrs	r2, r3
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800247e:	f3bf 8f5f 	dmb	sy
}
 8002482:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002490:	e082      	b.n	8002598 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d006      	beq.n	80024b2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e005      	b.n	80024be <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	3301      	adds	r3, #1
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d902      	bls.n	80024d0 <ETH_Prepare_Tx_Descriptors+0x12c>
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	3b04      	subs	r3, #4
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024f2:	d007      	beq.n	8002504 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f8:	3304      	adds	r3, #4
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d029      	beq.n	8002558 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002512:	2300      	movs	r3, #0
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
 8002516:	e019      	b.n	800254c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002518:	f3bf 8f5f 	dmb	sy
}
 800251c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252c:	3301      	adds	r3, #1
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	2b03      	cmp	r3, #3
 8002534:	d902      	bls.n	800253c <ETH_Prepare_Tx_Descriptors+0x198>
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002538:	3b04      	subs	r3, #4
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002544:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	3301      	adds	r3, #1
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
 800254c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	429a      	cmp	r2, r3
 8002552:	d3e1      	bcc.n	8002518 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002554:	2302      	movs	r3, #2
 8002556:	e051      	b.n	80025fc <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	3301      	adds	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4b25      	ldr	r3, [pc, #148]	; (8002608 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002574:	4013      	ands	r3, r2
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	6852      	ldr	r2, [r2, #4]
 800257a:	431a      	orrs	r2, r3
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	3301      	adds	r3, #1
 8002584:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002586:	f3bf 8f5f 	dmb	sy
}
 800258a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	f47f af78 	bne.w	8002492 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e005      	b.n	80025c2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d2:	6979      	ldr	r1, [r7, #20]
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	3304      	adds	r3, #4
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80025e4:	b672      	cpsid	i
}
 80025e6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80025f6:	b662      	cpsie	i
}
 80025f8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3734      	adds	r7, #52	; 0x34
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	ffffe000 	.word	0xffffe000

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e175      	b.n	8002918 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	f040 8164 	bne.w	8002912 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d005      	beq.n	8002662 <HAL_GPIO_Init+0x56>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d130      	bne.n	80026c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2203      	movs	r2, #3
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002698:	2201      	movs	r2, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 0201 	and.w	r2, r3, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d017      	beq.n	8002700 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d123      	bne.n	8002754 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	220f      	movs	r2, #15
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	08da      	lsrs	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3208      	adds	r2, #8
 800274e:	69b9      	ldr	r1, [r7, #24]
 8002750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80be 	beq.w	8002912 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	4b66      	ldr	r3, [pc, #408]	; (8002930 <HAL_GPIO_Init+0x324>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	4a65      	ldr	r2, [pc, #404]	; (8002930 <HAL_GPIO_Init+0x324>)
 800279c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a0:	6453      	str	r3, [r2, #68]	; 0x44
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_GPIO_Init+0x324>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027ae:	4a61      	ldr	r2, [pc, #388]	; (8002934 <HAL_GPIO_Init+0x328>)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	3302      	adds	r3, #2
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	220f      	movs	r2, #15
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a58      	ldr	r2, [pc, #352]	; (8002938 <HAL_GPIO_Init+0x32c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d037      	beq.n	800284a <HAL_GPIO_Init+0x23e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a57      	ldr	r2, [pc, #348]	; (800293c <HAL_GPIO_Init+0x330>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d031      	beq.n	8002846 <HAL_GPIO_Init+0x23a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a56      	ldr	r2, [pc, #344]	; (8002940 <HAL_GPIO_Init+0x334>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d02b      	beq.n	8002842 <HAL_GPIO_Init+0x236>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a55      	ldr	r2, [pc, #340]	; (8002944 <HAL_GPIO_Init+0x338>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d025      	beq.n	800283e <HAL_GPIO_Init+0x232>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a54      	ldr	r2, [pc, #336]	; (8002948 <HAL_GPIO_Init+0x33c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01f      	beq.n	800283a <HAL_GPIO_Init+0x22e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a53      	ldr	r2, [pc, #332]	; (800294c <HAL_GPIO_Init+0x340>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d019      	beq.n	8002836 <HAL_GPIO_Init+0x22a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a52      	ldr	r2, [pc, #328]	; (8002950 <HAL_GPIO_Init+0x344>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_GPIO_Init+0x226>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a51      	ldr	r2, [pc, #324]	; (8002954 <HAL_GPIO_Init+0x348>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00d      	beq.n	800282e <HAL_GPIO_Init+0x222>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a50      	ldr	r2, [pc, #320]	; (8002958 <HAL_GPIO_Init+0x34c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <HAL_GPIO_Init+0x21e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4f      	ldr	r2, [pc, #316]	; (800295c <HAL_GPIO_Init+0x350>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_GPIO_Init+0x21a>
 8002822:	2309      	movs	r3, #9
 8002824:	e012      	b.n	800284c <HAL_GPIO_Init+0x240>
 8002826:	230a      	movs	r3, #10
 8002828:	e010      	b.n	800284c <HAL_GPIO_Init+0x240>
 800282a:	2308      	movs	r3, #8
 800282c:	e00e      	b.n	800284c <HAL_GPIO_Init+0x240>
 800282e:	2307      	movs	r3, #7
 8002830:	e00c      	b.n	800284c <HAL_GPIO_Init+0x240>
 8002832:	2306      	movs	r3, #6
 8002834:	e00a      	b.n	800284c <HAL_GPIO_Init+0x240>
 8002836:	2305      	movs	r3, #5
 8002838:	e008      	b.n	800284c <HAL_GPIO_Init+0x240>
 800283a:	2304      	movs	r3, #4
 800283c:	e006      	b.n	800284c <HAL_GPIO_Init+0x240>
 800283e:	2303      	movs	r3, #3
 8002840:	e004      	b.n	800284c <HAL_GPIO_Init+0x240>
 8002842:	2302      	movs	r3, #2
 8002844:	e002      	b.n	800284c <HAL_GPIO_Init+0x240>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_GPIO_Init+0x240>
 800284a:	2300      	movs	r3, #0
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	f002 0203 	and.w	r2, r2, #3
 8002852:	0092      	lsls	r2, r2, #2
 8002854:	4093      	lsls	r3, r2
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800285c:	4935      	ldr	r1, [pc, #212]	; (8002934 <HAL_GPIO_Init+0x328>)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	3302      	adds	r3, #2
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800286a:	4b3d      	ldr	r3, [pc, #244]	; (8002960 <HAL_GPIO_Init+0x354>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288e:	4a34      	ldr	r2, [pc, #208]	; (8002960 <HAL_GPIO_Init+0x354>)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002894:	4b32      	ldr	r3, [pc, #200]	; (8002960 <HAL_GPIO_Init+0x354>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b8:	4a29      	ldr	r2, [pc, #164]	; (8002960 <HAL_GPIO_Init+0x354>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028be:	4b28      	ldr	r3, [pc, #160]	; (8002960 <HAL_GPIO_Init+0x354>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028e2:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_GPIO_Init+0x354>)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_GPIO_Init+0x354>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_GPIO_Init+0x354>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3301      	adds	r3, #1
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	2b0f      	cmp	r3, #15
 800291c:	f67f ae86 	bls.w	800262c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	3724      	adds	r7, #36	; 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	40013800 	.word	0x40013800
 8002938:	40020000 	.word	0x40020000
 800293c:	40020400 	.word	0x40020400
 8002940:	40020800 	.word	0x40020800
 8002944:	40020c00 	.word	0x40020c00
 8002948:	40021000 	.word	0x40021000
 800294c:	40021400 	.word	0x40021400
 8002950:	40021800 	.word	0x40021800
 8002954:	40021c00 	.word	0x40021c00
 8002958:	40022000 	.word	0x40022000
 800295c:	40022400 	.word	0x40022400
 8002960:	40013c00 	.word	0x40013c00

08002964 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1d      	ldr	r2, [pc, #116]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002992:	f7fe fa97 	bl	8000ec4 <HAL_GetTick>
 8002996:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002998:	e009      	b.n	80029ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800299a:	f7fe fa93 	bl	8000ec4 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a8:	d901      	bls.n	80029ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e022      	b.n	80029f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ba:	d1ee      	bne.n	800299a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029c8:	f7fe fa7c 	bl	8000ec4 <HAL_GetTick>
 80029cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029ce:	e009      	b.n	80029e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029d0:	f7fe fa78 	bl	8000ec4 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029de:	d901      	bls.n	80029e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e007      	b.n	80029f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029f0:	d1ee      	bne.n	80029d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40007000 	.word	0x40007000

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e29b      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8087 	beq.w	8002b36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a28:	4b96      	ldr	r3, [pc, #600]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d00c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a34:	4b93      	ldr	r3, [pc, #588]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d112      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62>
 8002a40:	4b90      	ldr	r3, [pc, #576]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a4c:	d10b      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4e:	4b8d      	ldr	r3, [pc, #564]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d06c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x130>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d168      	bne.n	8002b34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e275      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x7a>
 8002a70:	4b84      	ldr	r3, [pc, #528]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a83      	ldr	r2, [pc, #524]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e02e      	b.n	8002adc <HAL_RCC_OscConfig+0xd8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x9c>
 8002a86:	4b7f      	ldr	r3, [pc, #508]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7e      	ldr	r2, [pc, #504]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b7c      	ldr	r3, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7b      	ldr	r2, [pc, #492]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xd8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xc0>
 8002aaa:	4b76      	ldr	r3, [pc, #472]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a75      	ldr	r2, [pc, #468]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a72      	ldr	r2, [pc, #456]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xd8>
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b6c      	ldr	r3, [pc, #432]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6b      	ldr	r2, [pc, #428]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe f9ee 	bl	8000ec4 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe f9ea 	bl	8000ec4 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e229      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b61      	ldr	r3, [pc, #388]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xe8>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe f9da 	bl	8000ec4 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe f9d6 	bl	8000ec4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e215      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b57      	ldr	r3, [pc, #348]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x110>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d069      	beq.n	8002c16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b42:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x190>
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1e9      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	493d      	ldr	r1, [pc, #244]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e040      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d023      	beq.n	8002be4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a38      	ldr	r2, [pc, #224]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe f98c 	bl	8000ec4 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7fe f988 	bl	8000ec4 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1c7      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4929      	ldr	r1, [pc, #164]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
 8002be2:	e018      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe f968 	bl	8000ec4 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe f964 	bl	8000ec4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e1a3      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d038      	beq.n	8002c94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2e:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7fe f945 	bl	8000ec4 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3e:	f7fe f941 	bl	8000ec4 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e180      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x23a>
 8002c5c:	e01a      	b.n	8002c94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c62:	4a08      	ldr	r2, [pc, #32]	; (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6a:	f7fe f92b 	bl	8000ec4 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c72:	f7fe f927 	bl	8000ec4 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d903      	bls.n	8002c88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e166      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
 8002c84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	4b92      	ldr	r3, [pc, #584]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ee      	bne.n	8002c72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80a4 	beq.w	8002dea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b8c      	ldr	r3, [pc, #560]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10d      	bne.n	8002cca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	4b89      	ldr	r3, [pc, #548]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	4a88      	ldr	r2, [pc, #544]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cba:	4b86      	ldr	r3, [pc, #536]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cca:	4b83      	ldr	r3, [pc, #524]	; (8002ed8 <HAL_RCC_OscConfig+0x4d4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cd6:	4b80      	ldr	r3, [pc, #512]	; (8002ed8 <HAL_RCC_OscConfig+0x4d4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a7f      	ldr	r2, [pc, #508]	; (8002ed8 <HAL_RCC_OscConfig+0x4d4>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe f8ef 	bl	8000ec4 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7fe f8eb 	bl	8000ec4 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e12a      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfc:	4b76      	ldr	r3, [pc, #472]	; (8002ed8 <HAL_RCC_OscConfig+0x4d4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x31a>
 8002d10:	4b70      	ldr	r3, [pc, #448]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	4a6f      	ldr	r2, [pc, #444]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1c:	e02d      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x33c>
 8002d26:	4b6b      	ldr	r3, [pc, #428]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2a:	4a6a      	ldr	r2, [pc, #424]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	; 0x70
 8002d32:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d36:	4a67      	ldr	r2, [pc, #412]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3e:	e01c      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x35e>
 8002d48:	4b62      	ldr	r3, [pc, #392]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	4a61      	ldr	r2, [pc, #388]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	6713      	str	r3, [r2, #112]	; 0x70
 8002d54:	4b5f      	ldr	r3, [pc, #380]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d58:	4a5e      	ldr	r2, [pc, #376]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d60:	e00b      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
 8002d62:	4b5c      	ldr	r3, [pc, #368]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d66:	4a5b      	ldr	r2, [pc, #364]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6e:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	4a58      	ldr	r2, [pc, #352]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d015      	beq.n	8002dae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fe f89f 	bl	8000ec4 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe f89b 	bl	8000ec4 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0d8      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ee      	beq.n	8002d8a <HAL_RCC_OscConfig+0x386>
 8002dac:	e014      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dae:	f7fe f889 	bl	8000ec4 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fe f885 	bl	8000ec4 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0c2      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	4b41      	ldr	r3, [pc, #260]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d105      	bne.n	8002dea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a3c      	ldr	r2, [pc, #240]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80ae 	beq.w	8002f50 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df4:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d06d      	beq.n	8002edc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d14b      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a31      	ldr	r2, [pc, #196]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe f856 	bl	8000ec4 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe f852 	bl	8000ec4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e091      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	019b      	lsls	r3, r3, #6
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	3b01      	subs	r3, #1
 8002e54:	041b      	lsls	r3, r3, #16
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	061b      	lsls	r3, r3, #24
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	071b      	lsls	r3, r3, #28
 8002e66:	491b      	ldr	r1, [pc, #108]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe f824 	bl	8000ec4 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe f820 	bl	8000ec4 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e05f      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x47c>
 8002e9e:	e057      	b.n	8002f50 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe f80a 	bl	8000ec4 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe f806 	bl	8000ec4 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e045      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4b0>
 8002ed2:	e03d      	b.n	8002f50 <HAL_RCC_OscConfig+0x54c>
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002edc:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <HAL_RCC_OscConfig+0x558>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d030      	beq.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d129      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d122      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d119      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	3b01      	subs	r3, #1
 8002f26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d10f      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800

08002f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0d0      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d910      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b67      	ldr	r3, [pc, #412]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 020f 	bic.w	r2, r3, #15
 8002f8e:	4965      	ldr	r1, [pc, #404]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b8      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc0:	4b59      	ldr	r3, [pc, #356]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a58      	ldr	r2, [pc, #352]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd8:	4b53      	ldr	r3, [pc, #332]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b50      	ldr	r3, [pc, #320]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	494d      	ldr	r1, [pc, #308]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d040      	beq.n	8003084 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07f      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e073      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b3d      	ldr	r3, [pc, #244]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06b      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4936      	ldr	r1, [pc, #216]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fd ff36 	bl	8000ec4 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fd ff32 	bl	8000ec4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e053      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d210      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 020f 	bic.w	r2, r3, #15
 800309a:	4922      	ldr	r1, [pc, #136]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e032      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4916      	ldr	r1, [pc, #88]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490e      	ldr	r1, [pc, #56]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f2:	f000 f821 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490a      	ldr	r1, [pc, #40]	; (800312c <HAL_RCC_ClockConfig+0x1cc>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a09      	ldr	r2, [pc, #36]	; (8003130 <HAL_RCC_ClockConfig+0x1d0>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1d4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fe92 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023c00 	.word	0x40023c00
 8003128:	40023800 	.word	0x40023800
 800312c:	0801125c 	.word	0x0801125c
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004

08003138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800313c:	b090      	sub	sp, #64	; 0x40
 800313e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	637b      	str	r3, [r7, #52]	; 0x34
 8003144:	2300      	movs	r3, #0
 8003146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003148:	2300      	movs	r3, #0
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003150:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b08      	cmp	r3, #8
 800315a:	d00d      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x40>
 800315c:	2b08      	cmp	r3, #8
 800315e:	f200 80a1 	bhi.w	80032a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x34>
 8003166:	2b04      	cmp	r3, #4
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x3a>
 800316a:	e09b      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b53      	ldr	r3, [pc, #332]	; (80032bc <HAL_RCC_GetSysClockFreq+0x184>)
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003170:	e09b      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003172:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003174:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003176:	e098      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003178:	4b4f      	ldr	r3, [pc, #316]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003182:	4b4d      	ldr	r3, [pc, #308]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d028      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b4a      	ldr	r3, [pc, #296]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	2200      	movs	r2, #0
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	627a      	str	r2, [r7, #36]	; 0x24
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031a0:	2100      	movs	r1, #0
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031a4:	fb03 f201 	mul.w	r2, r3, r1
 80031a8:	2300      	movs	r3, #0
 80031aa:	fb00 f303 	mul.w	r3, r0, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	4a43      	ldr	r2, [pc, #268]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80031b2:	fba0 1202 	umull	r1, r2, r0, r2
 80031b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031b8:	460a      	mov	r2, r1
 80031ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80031bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031be:	4413      	add	r3, r2
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c4:	2200      	movs	r2, #0
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	61fa      	str	r2, [r7, #28]
 80031ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031d2:	f7fd f885 	bl	80002e0 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4613      	mov	r3, r2
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031de:	e053      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e0:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	2200      	movs	r2, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	617a      	str	r2, [r7, #20]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031f2:	f04f 0b00 	mov.w	fp, #0
 80031f6:	4652      	mov	r2, sl
 80031f8:	465b      	mov	r3, fp
 80031fa:	f04f 0000 	mov.w	r0, #0
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	0159      	lsls	r1, r3, #5
 8003204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003208:	0150      	lsls	r0, r2, #5
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	ebb2 080a 	subs.w	r8, r2, sl
 8003212:	eb63 090b 	sbc.w	r9, r3, fp
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003222:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003226:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800322a:	ebb2 0408 	subs.w	r4, r2, r8
 800322e:	eb63 0509 	sbc.w	r5, r3, r9
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	00eb      	lsls	r3, r5, #3
 800323c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003240:	00e2      	lsls	r2, r4, #3
 8003242:	4614      	mov	r4, r2
 8003244:	461d      	mov	r5, r3
 8003246:	eb14 030a 	adds.w	r3, r4, sl
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	eb45 030b 	adc.w	r3, r5, fp
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800325e:	4629      	mov	r1, r5
 8003260:	028b      	lsls	r3, r1, #10
 8003262:	4621      	mov	r1, r4
 8003264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003268:	4621      	mov	r1, r4
 800326a:	028a      	lsls	r2, r1, #10
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003272:	2200      	movs	r2, #0
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	60fa      	str	r2, [r7, #12]
 8003278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800327c:	f7fd f830 	bl	80002e0 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4613      	mov	r3, r2
 8003286:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	3301      	adds	r3, #1
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003298:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032a2:	e002      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetSysClockFreq+0x184>)
 80032a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3740      	adds	r7, #64	; 0x40
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	00f42400 	.word	0x00f42400
 80032c0:	017d7840 	.word	0x017d7840

080032c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000000 	.word	0x20000000

080032dc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80032e2:	4b8d      	ldr	r3, [pc, #564]	; (8003518 <MX_LWIP_Init+0x23c>)
 80032e4:	22c0      	movs	r2, #192	; 0xc0
 80032e6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80032e8:	4b8b      	ldr	r3, [pc, #556]	; (8003518 <MX_LWIP_Init+0x23c>)
 80032ea:	22a8      	movs	r2, #168	; 0xa8
 80032ec:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80032ee:	4b8a      	ldr	r3, [pc, #552]	; (8003518 <MX_LWIP_Init+0x23c>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 112;
 80032f4:	4b88      	ldr	r3, [pc, #544]	; (8003518 <MX_LWIP_Init+0x23c>)
 80032f6:	2270      	movs	r2, #112	; 0x70
 80032f8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80032fa:	4b88      	ldr	r3, [pc, #544]	; (800351c <MX_LWIP_Init+0x240>)
 80032fc:	22ff      	movs	r2, #255	; 0xff
 80032fe:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003300:	4b86      	ldr	r3, [pc, #536]	; (800351c <MX_LWIP_Init+0x240>)
 8003302:	22ff      	movs	r2, #255	; 0xff
 8003304:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003306:	4b85      	ldr	r3, [pc, #532]	; (800351c <MX_LWIP_Init+0x240>)
 8003308:	22ff      	movs	r2, #255	; 0xff
 800330a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800330c:	4b83      	ldr	r3, [pc, #524]	; (800351c <MX_LWIP_Init+0x240>)
 800330e:	2200      	movs	r2, #0
 8003310:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003312:	4b83      	ldr	r3, [pc, #524]	; (8003520 <MX_LWIP_Init+0x244>)
 8003314:	22c0      	movs	r2, #192	; 0xc0
 8003316:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003318:	4b81      	ldr	r3, [pc, #516]	; (8003520 <MX_LWIP_Init+0x244>)
 800331a:	22a8      	movs	r2, #168	; 0xa8
 800331c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800331e:	4b80      	ldr	r3, [pc, #512]	; (8003520 <MX_LWIP_Init+0x244>)
 8003320:	2201      	movs	r2, #1
 8003322:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003324:	4b7e      	ldr	r3, [pc, #504]	; (8003520 <MX_LWIP_Init+0x244>)
 8003326:	2201      	movs	r2, #1
 8003328:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800332a:	f000 fd1d 	bl	8003d68 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800332e:	4b7a      	ldr	r3, [pc, #488]	; (8003518 <MX_LWIP_Init+0x23c>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	061a      	lsls	r2, r3, #24
 8003334:	4b78      	ldr	r3, [pc, #480]	; (8003518 <MX_LWIP_Init+0x23c>)
 8003336:	785b      	ldrb	r3, [r3, #1]
 8003338:	041b      	lsls	r3, r3, #16
 800333a:	431a      	orrs	r2, r3
 800333c:	4b76      	ldr	r3, [pc, #472]	; (8003518 <MX_LWIP_Init+0x23c>)
 800333e:	789b      	ldrb	r3, [r3, #2]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	4313      	orrs	r3, r2
 8003344:	4a74      	ldr	r2, [pc, #464]	; (8003518 <MX_LWIP_Init+0x23c>)
 8003346:	78d2      	ldrb	r2, [r2, #3]
 8003348:	4313      	orrs	r3, r2
 800334a:	061a      	lsls	r2, r3, #24
 800334c:	4b72      	ldr	r3, [pc, #456]	; (8003518 <MX_LWIP_Init+0x23c>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	0619      	lsls	r1, r3, #24
 8003352:	4b71      	ldr	r3, [pc, #452]	; (8003518 <MX_LWIP_Init+0x23c>)
 8003354:	785b      	ldrb	r3, [r3, #1]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	4319      	orrs	r1, r3
 800335a:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <MX_LWIP_Init+0x23c>)
 800335c:	789b      	ldrb	r3, [r3, #2]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	430b      	orrs	r3, r1
 8003362:	496d      	ldr	r1, [pc, #436]	; (8003518 <MX_LWIP_Init+0x23c>)
 8003364:	78c9      	ldrb	r1, [r1, #3]
 8003366:	430b      	orrs	r3, r1
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800336e:	431a      	orrs	r2, r3
 8003370:	4b69      	ldr	r3, [pc, #420]	; (8003518 <MX_LWIP_Init+0x23c>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	0619      	lsls	r1, r3, #24
 8003376:	4b68      	ldr	r3, [pc, #416]	; (8003518 <MX_LWIP_Init+0x23c>)
 8003378:	785b      	ldrb	r3, [r3, #1]
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	4319      	orrs	r1, r3
 800337e:	4b66      	ldr	r3, [pc, #408]	; (8003518 <MX_LWIP_Init+0x23c>)
 8003380:	789b      	ldrb	r3, [r3, #2]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	430b      	orrs	r3, r1
 8003386:	4964      	ldr	r1, [pc, #400]	; (8003518 <MX_LWIP_Init+0x23c>)
 8003388:	78c9      	ldrb	r1, [r1, #3]
 800338a:	430b      	orrs	r3, r1
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003392:	431a      	orrs	r2, r3
 8003394:	4b60      	ldr	r3, [pc, #384]	; (8003518 <MX_LWIP_Init+0x23c>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	0619      	lsls	r1, r3, #24
 800339a:	4b5f      	ldr	r3, [pc, #380]	; (8003518 <MX_LWIP_Init+0x23c>)
 800339c:	785b      	ldrb	r3, [r3, #1]
 800339e:	041b      	lsls	r3, r3, #16
 80033a0:	4319      	orrs	r1, r3
 80033a2:	4b5d      	ldr	r3, [pc, #372]	; (8003518 <MX_LWIP_Init+0x23c>)
 80033a4:	789b      	ldrb	r3, [r3, #2]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	430b      	orrs	r3, r1
 80033aa:	495b      	ldr	r1, [pc, #364]	; (8003518 <MX_LWIP_Init+0x23c>)
 80033ac:	78c9      	ldrb	r1, [r1, #3]
 80033ae:	430b      	orrs	r3, r1
 80033b0:	0e1b      	lsrs	r3, r3, #24
 80033b2:	4313      	orrs	r3, r2
 80033b4:	4a5b      	ldr	r2, [pc, #364]	; (8003524 <MX_LWIP_Init+0x248>)
 80033b6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80033b8:	4b58      	ldr	r3, [pc, #352]	; (800351c <MX_LWIP_Init+0x240>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	061a      	lsls	r2, r3, #24
 80033be:	4b57      	ldr	r3, [pc, #348]	; (800351c <MX_LWIP_Init+0x240>)
 80033c0:	785b      	ldrb	r3, [r3, #1]
 80033c2:	041b      	lsls	r3, r3, #16
 80033c4:	431a      	orrs	r2, r3
 80033c6:	4b55      	ldr	r3, [pc, #340]	; (800351c <MX_LWIP_Init+0x240>)
 80033c8:	789b      	ldrb	r3, [r3, #2]
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	4313      	orrs	r3, r2
 80033ce:	4a53      	ldr	r2, [pc, #332]	; (800351c <MX_LWIP_Init+0x240>)
 80033d0:	78d2      	ldrb	r2, [r2, #3]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	061a      	lsls	r2, r3, #24
 80033d6:	4b51      	ldr	r3, [pc, #324]	; (800351c <MX_LWIP_Init+0x240>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	0619      	lsls	r1, r3, #24
 80033dc:	4b4f      	ldr	r3, [pc, #316]	; (800351c <MX_LWIP_Init+0x240>)
 80033de:	785b      	ldrb	r3, [r3, #1]
 80033e0:	041b      	lsls	r3, r3, #16
 80033e2:	4319      	orrs	r1, r3
 80033e4:	4b4d      	ldr	r3, [pc, #308]	; (800351c <MX_LWIP_Init+0x240>)
 80033e6:	789b      	ldrb	r3, [r3, #2]
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	430b      	orrs	r3, r1
 80033ec:	494b      	ldr	r1, [pc, #300]	; (800351c <MX_LWIP_Init+0x240>)
 80033ee:	78c9      	ldrb	r1, [r1, #3]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033f8:	431a      	orrs	r2, r3
 80033fa:	4b48      	ldr	r3, [pc, #288]	; (800351c <MX_LWIP_Init+0x240>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	0619      	lsls	r1, r3, #24
 8003400:	4b46      	ldr	r3, [pc, #280]	; (800351c <MX_LWIP_Init+0x240>)
 8003402:	785b      	ldrb	r3, [r3, #1]
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	4319      	orrs	r1, r3
 8003408:	4b44      	ldr	r3, [pc, #272]	; (800351c <MX_LWIP_Init+0x240>)
 800340a:	789b      	ldrb	r3, [r3, #2]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	430b      	orrs	r3, r1
 8003410:	4942      	ldr	r1, [pc, #264]	; (800351c <MX_LWIP_Init+0x240>)
 8003412:	78c9      	ldrb	r1, [r1, #3]
 8003414:	430b      	orrs	r3, r1
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800341c:	431a      	orrs	r2, r3
 800341e:	4b3f      	ldr	r3, [pc, #252]	; (800351c <MX_LWIP_Init+0x240>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	0619      	lsls	r1, r3, #24
 8003424:	4b3d      	ldr	r3, [pc, #244]	; (800351c <MX_LWIP_Init+0x240>)
 8003426:	785b      	ldrb	r3, [r3, #1]
 8003428:	041b      	lsls	r3, r3, #16
 800342a:	4319      	orrs	r1, r3
 800342c:	4b3b      	ldr	r3, [pc, #236]	; (800351c <MX_LWIP_Init+0x240>)
 800342e:	789b      	ldrb	r3, [r3, #2]
 8003430:	021b      	lsls	r3, r3, #8
 8003432:	430b      	orrs	r3, r1
 8003434:	4939      	ldr	r1, [pc, #228]	; (800351c <MX_LWIP_Init+0x240>)
 8003436:	78c9      	ldrb	r1, [r1, #3]
 8003438:	430b      	orrs	r3, r1
 800343a:	0e1b      	lsrs	r3, r3, #24
 800343c:	4313      	orrs	r3, r2
 800343e:	4a3a      	ldr	r2, [pc, #232]	; (8003528 <MX_LWIP_Init+0x24c>)
 8003440:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003442:	4b37      	ldr	r3, [pc, #220]	; (8003520 <MX_LWIP_Init+0x244>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	061a      	lsls	r2, r3, #24
 8003448:	4b35      	ldr	r3, [pc, #212]	; (8003520 <MX_LWIP_Init+0x244>)
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	4b33      	ldr	r3, [pc, #204]	; (8003520 <MX_LWIP_Init+0x244>)
 8003452:	789b      	ldrb	r3, [r3, #2]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	4313      	orrs	r3, r2
 8003458:	4a31      	ldr	r2, [pc, #196]	; (8003520 <MX_LWIP_Init+0x244>)
 800345a:	78d2      	ldrb	r2, [r2, #3]
 800345c:	4313      	orrs	r3, r2
 800345e:	061a      	lsls	r2, r3, #24
 8003460:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <MX_LWIP_Init+0x244>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	0619      	lsls	r1, r3, #24
 8003466:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <MX_LWIP_Init+0x244>)
 8003468:	785b      	ldrb	r3, [r3, #1]
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	4319      	orrs	r1, r3
 800346e:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <MX_LWIP_Init+0x244>)
 8003470:	789b      	ldrb	r3, [r3, #2]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	430b      	orrs	r3, r1
 8003476:	492a      	ldr	r1, [pc, #168]	; (8003520 <MX_LWIP_Init+0x244>)
 8003478:	78c9      	ldrb	r1, [r1, #3]
 800347a:	430b      	orrs	r3, r1
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003482:	431a      	orrs	r2, r3
 8003484:	4b26      	ldr	r3, [pc, #152]	; (8003520 <MX_LWIP_Init+0x244>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	0619      	lsls	r1, r3, #24
 800348a:	4b25      	ldr	r3, [pc, #148]	; (8003520 <MX_LWIP_Init+0x244>)
 800348c:	785b      	ldrb	r3, [r3, #1]
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	4319      	orrs	r1, r3
 8003492:	4b23      	ldr	r3, [pc, #140]	; (8003520 <MX_LWIP_Init+0x244>)
 8003494:	789b      	ldrb	r3, [r3, #2]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	430b      	orrs	r3, r1
 800349a:	4921      	ldr	r1, [pc, #132]	; (8003520 <MX_LWIP_Init+0x244>)
 800349c:	78c9      	ldrb	r1, [r1, #3]
 800349e:	430b      	orrs	r3, r1
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80034a6:	431a      	orrs	r2, r3
 80034a8:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <MX_LWIP_Init+0x244>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	0619      	lsls	r1, r3, #24
 80034ae:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <MX_LWIP_Init+0x244>)
 80034b0:	785b      	ldrb	r3, [r3, #1]
 80034b2:	041b      	lsls	r3, r3, #16
 80034b4:	4319      	orrs	r1, r3
 80034b6:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <MX_LWIP_Init+0x244>)
 80034b8:	789b      	ldrb	r3, [r3, #2]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	430b      	orrs	r3, r1
 80034be:	4918      	ldr	r1, [pc, #96]	; (8003520 <MX_LWIP_Init+0x244>)
 80034c0:	78c9      	ldrb	r1, [r1, #3]
 80034c2:	430b      	orrs	r3, r1
 80034c4:	0e1b      	lsrs	r3, r3, #24
 80034c6:	4313      	orrs	r3, r2
 80034c8:	4a18      	ldr	r2, [pc, #96]	; (800352c <MX_LWIP_Init+0x250>)
 80034ca:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80034cc:	4b18      	ldr	r3, [pc, #96]	; (8003530 <MX_LWIP_Init+0x254>)
 80034ce:	9302      	str	r3, [sp, #8]
 80034d0:	4b18      	ldr	r3, [pc, #96]	; (8003534 <MX_LWIP_Init+0x258>)
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	2300      	movs	r3, #0
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	4b14      	ldr	r3, [pc, #80]	; (800352c <MX_LWIP_Init+0x250>)
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <MX_LWIP_Init+0x24c>)
 80034dc:	4911      	ldr	r1, [pc, #68]	; (8003524 <MX_LWIP_Init+0x248>)
 80034de:	4816      	ldr	r0, [pc, #88]	; (8003538 <MX_LWIP_Init+0x25c>)
 80034e0:	f001 f92e 	bl	8004740 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80034e4:	4814      	ldr	r0, [pc, #80]	; (8003538 <MX_LWIP_Init+0x25c>)
 80034e6:	f001 fadd 	bl	8004aa4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80034ea:	4b13      	ldr	r3, [pc, #76]	; (8003538 <MX_LWIP_Init+0x25c>)
 80034ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80034fc:	480e      	ldr	r0, [pc, #56]	; (8003538 <MX_LWIP_Init+0x25c>)
 80034fe:	f001 fae1 	bl	8004ac4 <netif_set_up>
 8003502:	e002      	b.n	800350a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003504:	480c      	ldr	r0, [pc, #48]	; (8003538 <MX_LWIP_Init+0x25c>)
 8003506:	f001 fb49 	bl	8004b9c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800350a:	490c      	ldr	r1, [pc, #48]	; (800353c <MX_LWIP_Init+0x260>)
 800350c:	480a      	ldr	r0, [pc, #40]	; (8003538 <MX_LWIP_Init+0x25c>)
 800350e:	f001 fbdb 	bl	8004cc8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000234 	.word	0x20000234
 800351c:	20000238 	.word	0x20000238
 8003520:	2000023c 	.word	0x2000023c
 8003524:	20000228 	.word	0x20000228
 8003528:	2000022c 	.word	0x2000022c
 800352c:	20000230 	.word	0x20000230
 8003530:	0800d585 	.word	0x0800d585
 8003534:	08003855 	.word	0x08003855
 8003538:	200001f4 	.word	0x200001f4
 800353c:	08003541 	.word	0x08003541

08003540 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <SCB_InvalidateDCache_by_Addr>:
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8003566:	2320      	movs	r3, #32
 8003568:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800356a:	f3bf 8f4f 	dsb	sy
}
 800356e:	bf00      	nop
    while (op_size > 0) {
 8003570:	e00b      	b.n	800358a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8003572:	4a0d      	ldr	r2, [pc, #52]	; (80035a8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	dcf0      	bgt.n	8003572 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003590:	f3bf 8f4f 	dsb	sy
}
 8003594:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003596:	f3bf 8f6f 	isb	sy
}
 800359a:	bf00      	nop
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80035b8:	4b40      	ldr	r3, [pc, #256]	; (80036bc <low_level_init+0x110>)
 80035ba:	4a41      	ldr	r2, [pc, #260]	; (80036c0 <low_level_init+0x114>)
 80035bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80035be:	2300      	movs	r3, #0
 80035c0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80035c6:	23e1      	movs	r3, #225	; 0xe1
 80035c8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80035ca:	2300      	movs	r3, #0
 80035cc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80035ce:	2300      	movs	r3, #0
 80035d0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80035d2:	2300      	movs	r3, #0
 80035d4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80035d6:	4a39      	ldr	r2, [pc, #228]	; (80036bc <low_level_init+0x110>)
 80035d8:	f107 0308 	add.w	r3, r7, #8
 80035dc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80035de:	4b37      	ldr	r3, [pc, #220]	; (80036bc <low_level_init+0x110>)
 80035e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80035e4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80035e6:	4b35      	ldr	r3, [pc, #212]	; (80036bc <low_level_init+0x110>)
 80035e8:	4a36      	ldr	r2, [pc, #216]	; (80036c4 <low_level_init+0x118>)
 80035ea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80035ec:	4b33      	ldr	r3, [pc, #204]	; (80036bc <low_level_init+0x110>)
 80035ee:	4a36      	ldr	r2, [pc, #216]	; (80036c8 <low_level_init+0x11c>)
 80035f0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80035f2:	4b32      	ldr	r3, [pc, #200]	; (80036bc <low_level_init+0x110>)
 80035f4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80035f8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80035fa:	4830      	ldr	r0, [pc, #192]	; (80036bc <low_level_init+0x110>)
 80035fc:	f7fd fe20 	bl	8001240 <HAL_ETH_Init>
 8003600:	4603      	mov	r3, r0
 8003602:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003604:	2238      	movs	r2, #56	; 0x38
 8003606:	2100      	movs	r1, #0
 8003608:	4830      	ldr	r0, [pc, #192]	; (80036cc <low_level_init+0x120>)
 800360a:	f00a f8d3 	bl	800d7b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800360e:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <low_level_init+0x120>)
 8003610:	2221      	movs	r2, #33	; 0x21
 8003612:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003614:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <low_level_init+0x120>)
 8003616:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800361a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800361c:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <low_level_init+0x120>)
 800361e:	2200      	movs	r2, #0
 8003620:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003622:	482b      	ldr	r0, [pc, #172]	; (80036d0 <low_level_init+0x124>)
 8003624:	f000 ff54 	bl	80044d0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2206      	movs	r2, #6
 800362c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003630:	4b22      	ldr	r3, [pc, #136]	; (80036bc <low_level_init+0x110>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	781a      	ldrb	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800363c:	4b1f      	ldr	r3, [pc, #124]	; (80036bc <low_level_init+0x110>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	785a      	ldrb	r2, [r3, #1]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003648:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <low_level_init+0x110>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	789a      	ldrb	r2, [r3, #2]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <low_level_init+0x110>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	78da      	ldrb	r2, [r3, #3]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003660:	4b16      	ldr	r3, [pc, #88]	; (80036bc <low_level_init+0x110>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	791a      	ldrb	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <low_level_init+0x110>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	795a      	ldrb	r2, [r3, #5]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800367e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003686:	f043 030a 	orr.w	r3, r3, #10
 800368a:	b2da      	uxtb	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003692:	4910      	ldr	r1, [pc, #64]	; (80036d4 <low_level_init+0x128>)
 8003694:	4810      	ldr	r0, [pc, #64]	; (80036d8 <low_level_init+0x12c>)
 8003696:	f7fd fa62 	bl	8000b5e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800369a:	480f      	ldr	r0, [pc, #60]	; (80036d8 <low_level_init+0x12c>)
 800369c:	f7fd fa91 	bl	8000bc2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fa32 	bl	8003b10 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80036ac:	e001      	b.n	80036b2 <low_level_init+0x106>
    Error_Handler();
 80036ae:	f7fd f8f3 	bl	8000898 <Error_Handler>
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20004bcc 	.word	0x20004bcc
 80036c0:	40028000 	.word	0x40028000
 80036c4:	20000130 	.word	0x20000130
 80036c8:	20000090 	.word	0x20000090
 80036cc:	20004c7c 	.word	0x20004c7c
 80036d0:	0801126c 	.word	0x0801126c
 80036d4:	2000000c 	.word	0x2000000c
 80036d8:	20004cb4 	.word	0x20004cb4

080036dc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b092      	sub	sp, #72	; 0x48
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80036f4:	f107 030c 	add.w	r3, r7, #12
 80036f8:	2230      	movs	r2, #48	; 0x30
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f00a f859 	bl	800d7b4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003702:	f107 030c 	add.w	r3, r7, #12
 8003706:	2230      	movs	r2, #48	; 0x30
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f00a f852 	bl	800d7b4 <memset>

  for(q = p; q != NULL; q = q->next)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	643b      	str	r3, [r7, #64]	; 0x40
 8003714:	e045      	b.n	80037a2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003718:	2b03      	cmp	r3, #3
 800371a:	d902      	bls.n	8003722 <low_level_output+0x46>
      return ERR_IF;
 800371c:	f06f 030b 	mvn.w	r3, #11
 8003720:	e055      	b.n	80037ce <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8003722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003724:	6859      	ldr	r1, [r3, #4]
 8003726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	3348      	adds	r3, #72	; 0x48
 8003732:	443b      	add	r3, r7
 8003734:	3b3c      	subs	r3, #60	; 0x3c
 8003736:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800373a:	895b      	ldrh	r3, [r3, #10]
 800373c:	4619      	mov	r1, r3
 800373e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3348      	adds	r3, #72	; 0x48
 800374a:	443b      	add	r3, r7
 800374c:	3b38      	subs	r3, #56	; 0x38
 800374e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003752:	2b00      	cmp	r3, #0
 8003754:	d011      	beq.n	800377a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003758:	1e5a      	subs	r2, r3, #1
 800375a:	f107 000c 	add.w	r0, r7, #12
 800375e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003760:	460b      	mov	r3, r1
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	440b      	add	r3, r1
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	18c1      	adds	r1, r0, r3
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	3348      	adds	r3, #72	; 0x48
 8003774:	443b      	add	r3, r7
 8003776:	3b34      	subs	r3, #52	; 0x34
 8003778:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800377a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003784:	4613      	mov	r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	3348      	adds	r3, #72	; 0x48
 800378e:	443b      	add	r3, r7
 8003790:	3b34      	subs	r3, #52	; 0x34
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003798:	3301      	adds	r3, #1
 800379a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800379c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	643b      	str	r3, [r7, #64]	; 0x40
 80037a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1b6      	bne.n	8003716 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	891b      	ldrh	r3, [r3, #8]
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <low_level_output+0xfc>)
 80037b0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <low_level_output+0xfc>)
 80037b4:	f107 030c 	add.w	r3, r7, #12
 80037b8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <low_level_output+0xfc>)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80037c0:	2214      	movs	r2, #20
 80037c2:	4905      	ldr	r1, [pc, #20]	; (80037d8 <low_level_output+0xfc>)
 80037c4:	4805      	ldr	r0, [pc, #20]	; (80037dc <low_level_output+0x100>)
 80037c6:	f7fd fe6f 	bl	80014a8 <HAL_ETH_Transmit>

  return errval;
 80037ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3748      	adds	r7, #72	; 0x48
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20004c7c 	.word	0x20004c7c
 80037dc:	20004bcc 	.word	0x20004bcc

080037e0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80037ec:	4b07      	ldr	r3, [pc, #28]	; (800380c <low_level_input+0x2c>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d105      	bne.n	8003800 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	4619      	mov	r1, r3
 80037fa:	4805      	ldr	r0, [pc, #20]	; (8003810 <low_level_input+0x30>)
 80037fc:	f7fd fee8 	bl	80015d0 <HAL_ETH_ReadData>
  }

  return p;
 8003800:	68fb      	ldr	r3, [r7, #12]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20004bc8 	.word	0x20004bc8
 8003810:	20004bcc 	.word	0x20004bcc

08003814 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ffdd 	bl	80037e0 <low_level_input>
 8003826:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	4798      	blx	r3
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f001 fdc2 	bl	80053c8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1ea      	bne.n	8003820 <ethernetif_input+0xc>
}
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <ethernetif_init+0x1c>
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <ethernetif_init+0x48>)
 8003864:	f44f 72bd 	mov.w	r2, #378	; 0x17a
 8003868:	490d      	ldr	r1, [pc, #52]	; (80038a0 <ethernetif_init+0x4c>)
 800386a:	480e      	ldr	r0, [pc, #56]	; (80038a4 <ethernetif_init+0x50>)
 800386c:	f009 ffaa 	bl	800d7c4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2273      	movs	r2, #115	; 0x73
 8003874:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2274      	movs	r2, #116	; 0x74
 800387c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <ethernetif_init+0x54>)
 8003884:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a08      	ldr	r2, [pc, #32]	; (80038ac <ethernetif_init+0x58>)
 800388a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff fe8d 	bl	80035ac <low_level_init>

  return ERR_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	0800e87c 	.word	0x0800e87c
 80038a0:	0800e898 	.word	0x0800e898
 80038a4:	0800e8a8 	.word	0x0800e8a8
 80038a8:	0800ba3d 	.word	0x0800ba3d
 80038ac:	080036dd 	.word	0x080036dd

080038b0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80038bc:	68f9      	ldr	r1, [r7, #12]
 80038be:	4807      	ldr	r0, [pc, #28]	; (80038dc <pbuf_free_custom+0x2c>)
 80038c0:	f000 fee8 	bl	8004694 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <pbuf_free_custom+0x30>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d102      	bne.n	80038d2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80038cc:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <pbuf_free_custom+0x30>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
  }
}
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	0801126c 	.word	0x0801126c
 80038e0:	20004bc8 	.word	0x20004bc8

080038e4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80038e8:	f7fd faec 	bl	8000ec4 <HAL_GetTick>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08e      	sub	sp, #56	; 0x38
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a52      	ldr	r2, [pc, #328]	; (8003a5c <HAL_ETH_MspInit+0x168>)
 8003912:	4293      	cmp	r3, r2
 8003914:	f040 809e 	bne.w	8003a54 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003918:	4b51      	ldr	r3, [pc, #324]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	4a50      	ldr	r2, [pc, #320]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 800391e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003922:	6313      	str	r3, [r2, #48]	; 0x30
 8003924:	4b4e      	ldr	r3, [pc, #312]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392c:	623b      	str	r3, [r7, #32]
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	4a4a      	ldr	r2, [pc, #296]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 8003936:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800393a:	6313      	str	r3, [r2, #48]	; 0x30
 800393c:	4b48      	ldr	r3, [pc, #288]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4b45      	ldr	r3, [pc, #276]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4a44      	ldr	r2, [pc, #272]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 800394e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003952:	6313      	str	r3, [r2, #48]	; 0x30
 8003954:	4b42      	ldr	r3, [pc, #264]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003960:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 8003962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003964:	4a3e      	ldr	r2, [pc, #248]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 8003966:	f043 0304 	orr.w	r3, r3, #4
 800396a:	6313      	str	r3, [r2, #48]	; 0x30
 800396c:	4b3c      	ldr	r3, [pc, #240]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003978:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	4a38      	ldr	r2, [pc, #224]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	6313      	str	r3, [r2, #48]	; 0x30
 8003984:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003990:	4b33      	ldr	r3, [pc, #204]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	4a32      	ldr	r2, [pc, #200]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 8003996:	f043 0302 	orr.w	r3, r3, #2
 800399a:	6313      	str	r3, [r2, #48]	; 0x30
 800399c:	4b30      	ldr	r3, [pc, #192]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039a8:	4b2d      	ldr	r3, [pc, #180]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	4a2c      	ldr	r2, [pc, #176]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 80039ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b2:	6313      	str	r3, [r2, #48]	; 0x30
 80039b4:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <HAL_ETH_MspInit+0x16c>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80039c0:	2332      	movs	r3, #50	; 0x32
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c4:	2302      	movs	r3, #2
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039cc:	2303      	movs	r3, #3
 80039ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039d0:	230b      	movs	r3, #11
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d8:	4619      	mov	r1, r3
 80039da:	4822      	ldr	r0, [pc, #136]	; (8003a64 <HAL_ETH_MspInit+0x170>)
 80039dc:	f7fe fe16 	bl	800260c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80039e0:	2386      	movs	r3, #134	; 0x86
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ec:	2303      	movs	r3, #3
 80039ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039f0:	230b      	movs	r3, #11
 80039f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f8:	4619      	mov	r1, r3
 80039fa:	481b      	ldr	r0, [pc, #108]	; (8003a68 <HAL_ETH_MspInit+0x174>)
 80039fc:	f7fe fe06 	bl	800260c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a06:	2302      	movs	r3, #2
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a12:	230b      	movs	r3, #11
 8003a14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4813      	ldr	r0, [pc, #76]	; (8003a6c <HAL_ETH_MspInit+0x178>)
 8003a1e:	f7fe fdf5 	bl	800260c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003a22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a30:	2303      	movs	r3, #3
 8003a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a34:	230b      	movs	r3, #11
 8003a36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	480c      	ldr	r0, [pc, #48]	; (8003a70 <HAL_ETH_MspInit+0x17c>)
 8003a40:	f7fe fde4 	bl	800260c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8003a44:	2200      	movs	r2, #0
 8003a46:	2100      	movs	r1, #0
 8003a48:	203d      	movs	r0, #61	; 0x3d
 8003a4a:	f7fd fb46 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003a4e:	203d      	movs	r0, #61	; 0x3d
 8003a50:	f7fd fb5f 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003a54:	bf00      	nop
 8003a56:	3738      	adds	r7, #56	; 0x38
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40028000 	.word	0x40028000
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40020800 	.word	0x40020800
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	40020400 	.word	0x40020400
 8003a70:	40021800 	.word	0x40021800

08003a74 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <ETH_PHY_IO_Init+0x10>)
 8003a7a:	f7fe f96d 	bl	8001d58 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20004bcc 	.word	0x20004bcc

08003a88 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return 0;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	68f9      	ldr	r1, [r7, #12]
 8003aaa:	4807      	ldr	r0, [pc, #28]	; (8003ac8 <ETH_PHY_IO_ReadReg+0x30>)
 8003aac:	f7fd ffbc 	bl	8001a28 <HAL_ETH_ReadPHYRegister>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aba:	e000      	b.n	8003abe <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20004bcc 	.word	0x20004bcc

08003acc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	68f9      	ldr	r1, [r7, #12]
 8003ade:	4807      	ldr	r0, [pc, #28]	; (8003afc <ETH_PHY_IO_WriteReg+0x30>)
 8003ae0:	f7fd ffed 	bl	8001abe <HAL_ETH_WritePHYRegister>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295
 8003aee:	e000      	b.n	8003af2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20004bcc 	.word	0x20004bcc

08003b00 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003b04:	f7fd f9de 	bl	8000ec4 <HAL_GetTick>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b0a0      	sub	sp, #128	; 0x80
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	2264      	movs	r2, #100	; 0x64
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f009 fe47 	bl	800d7b4 <memset>
  int32_t PHYLinkState = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b2e:	2300      	movs	r3, #0
 8003b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b32:	2300      	movs	r3, #0
 8003b34:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003b36:	483a      	ldr	r0, [pc, #232]	; (8003c20 <ethernet_link_check_state+0x110>)
 8003b38:	f7fd f8eb 	bl	8000d12 <LAN8742_GetLinkState>
 8003b3c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00c      	beq.n	8003b6a <ethernet_link_check_state+0x5a>
 8003b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	dc09      	bgt.n	8003b6a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8003b56:	4833      	ldr	r0, [pc, #204]	; (8003c24 <ethernet_link_check_state+0x114>)
 8003b58:	f7fd fc4d 	bl	80013f6 <HAL_ETH_Stop>
    netif_set_down(netif);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f001 f81d 	bl	8004b9c <netif_set_down>
    netif_set_link_down(netif);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f001 f880 	bl	8004c68 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003b68:	e055      	b.n	8003c16 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d14e      	bne.n	8003c16 <ethernet_link_check_state+0x106>
 8003b78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	dd4b      	ble.n	8003c16 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b80:	3b02      	subs	r3, #2
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d82a      	bhi.n	8003bdc <ethernet_link_check_state+0xcc>
 8003b86:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <ethernet_link_check_state+0x7c>)
 8003b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8c:	08003b9d 	.word	0x08003b9d
 8003b90:	08003baf 	.word	0x08003baf
 8003b94:	08003bbf 	.word	0x08003bbf
 8003b98:	08003bcf 	.word	0x08003bcf
      duplex = ETH_FULLDUPLEX_MODE;
 8003b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ba0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003ba2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ba6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003bac:	e017      	b.n	8003bde <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003bb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bb6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003bbc:	e00f      	b.n	8003bde <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003bbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bc2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003bcc:	e007      	b.n	8003bde <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003bda:	e000      	b.n	8003bde <ethernet_link_check_state+0xce>
      break;
 8003bdc:	bf00      	nop
    if(linkchanged)
 8003bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d018      	beq.n	8003c16 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	4619      	mov	r1, r3
 8003bea:	480e      	ldr	r0, [pc, #56]	; (8003c24 <ethernet_link_check_state+0x114>)
 8003bec:	f7fd ffb0 	bl	8001b50 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8003bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bf6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003bf8:	f107 030c 	add.w	r3, r7, #12
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4809      	ldr	r0, [pc, #36]	; (8003c24 <ethernet_link_check_state+0x114>)
 8003c00:	f7fe f890 	bl	8001d24 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003c04:	4807      	ldr	r0, [pc, #28]	; (8003c24 <ethernet_link_check_state+0x114>)
 8003c06:	f7fd fb97 	bl	8001338 <HAL_ETH_Start>
      netif_set_up(netif);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 ff5a 	bl	8004ac4 <netif_set_up>
      netif_set_link_up(netif);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fff5 	bl	8004c00 <netif_set_link_up>
}
 8003c16:	bf00      	nop
 8003c18:	3780      	adds	r7, #128	; 0x80
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20004cb4 	.word	0x20004cb4
 8003c24:	20004bcc 	.word	0x20004bcc

08003c28 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af02      	add	r7, sp, #8
 8003c2e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003c30:	4812      	ldr	r0, [pc, #72]	; (8003c7c <HAL_ETH_RxAllocateCallback+0x54>)
 8003c32:	f000 fcc1 	bl	80045b8 <memp_malloc_pool>
 8003c36:	60f8      	str	r0, [r7, #12]
  if (p)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d014      	beq.n	8003c68 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f103 0220 	add.w	r2, r3, #32
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <HAL_ETH_RxAllocateCallback+0x58>)
 8003c4c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003c56:	9201      	str	r2, [sp, #4]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2241      	movs	r2, #65	; 0x41
 8003c5e:	2100      	movs	r1, #0
 8003c60:	2000      	movs	r0, #0
 8003c62:	f001 f9f7 	bl	8005054 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003c66:	e005      	b.n	8003c74 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_ETH_RxAllocateCallback+0x5c>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	0801126c 	.word	0x0801126c
 8003c80:	080038b1 	.word	0x080038b1
 8003c84:	20004bc8 	.word	0x20004bc8

08003c88 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3b20      	subs	r3, #32
 8003ca6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d103      	bne.n	8003cca <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	e003      	b.n	8003cd2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	e009      	b.n	8003cf4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	891a      	ldrh	r2, [r3, #8]
 8003ce4:	887b      	ldrh	r3, [r7, #2]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f2      	bne.n	8003ce0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fc28 	bl	8003554 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003d04:	bf00      	nop
 8003d06:	3720      	adds	r7, #32
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	b21a      	sxth	r2, r3
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	b21b      	sxth	r3, r3
 8003d24:	4313      	orrs	r3, r2
 8003d26:	b21b      	sxth	r3, r3
 8003d28:	b29b      	uxth	r3, r3
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	061a      	lsls	r2, r3, #24
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	0e1b      	lsrs	r3, r3, #24
 8003d5a:	4313      	orrs	r3, r2
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003d72:	f000 f8d5 	bl	8003f20 <mem_init>
  memp_init();
 8003d76:	f000 fbdb 	bl	8004530 <memp_init>
  pbuf_init();
  netif_init();
 8003d7a:	f000 fcd9 	bl	8004730 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003d7e:	f007 f857 	bl	800ae30 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003d82:	f001 fdaf 	bl	80058e4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003d86:	f006 ffc9 	bl	800ad1c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <ptr_to_mem+0x20>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	4413      	add	r3, r2
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20007500 	.word	0x20007500

08003db8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <mem_to_ptr+0x20>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	b29b      	uxth	r3, r3
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20007500 	.word	0x20007500

08003ddc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003de4:	4b45      	ldr	r3, [pc, #276]	; (8003efc <plug_holes+0x120>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d206      	bcs.n	8003dfc <plug_holes+0x20>
 8003dee:	4b44      	ldr	r3, [pc, #272]	; (8003f00 <plug_holes+0x124>)
 8003df0:	f240 12df 	movw	r2, #479	; 0x1df
 8003df4:	4943      	ldr	r1, [pc, #268]	; (8003f04 <plug_holes+0x128>)
 8003df6:	4844      	ldr	r0, [pc, #272]	; (8003f08 <plug_holes+0x12c>)
 8003df8:	f009 fce4 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003dfc:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <plug_holes+0x130>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d306      	bcc.n	8003e14 <plug_holes+0x38>
 8003e06:	4b3e      	ldr	r3, [pc, #248]	; (8003f00 <plug_holes+0x124>)
 8003e08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003e0c:	4940      	ldr	r1, [pc, #256]	; (8003f10 <plug_holes+0x134>)
 8003e0e:	483e      	ldr	r0, [pc, #248]	; (8003f08 <plug_holes+0x12c>)
 8003e10:	f009 fcd8 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	791b      	ldrb	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d006      	beq.n	8003e2a <plug_holes+0x4e>
 8003e1c:	4b38      	ldr	r3, [pc, #224]	; (8003f00 <plug_holes+0x124>)
 8003e1e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003e22:	493c      	ldr	r1, [pc, #240]	; (8003f14 <plug_holes+0x138>)
 8003e24:	4838      	ldr	r0, [pc, #224]	; (8003f08 <plug_holes+0x12c>)
 8003e26:	f009 fccd 	bl	800d7c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003e32:	d906      	bls.n	8003e42 <plug_holes+0x66>
 8003e34:	4b32      	ldr	r3, [pc, #200]	; (8003f00 <plug_holes+0x124>)
 8003e36:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003e3a:	4937      	ldr	r1, [pc, #220]	; (8003f18 <plug_holes+0x13c>)
 8003e3c:	4832      	ldr	r0, [pc, #200]	; (8003f08 <plug_holes+0x12c>)
 8003e3e:	f009 fcc1 	bl	800d7c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff ffa4 	bl	8003d94 <ptr_to_mem>
 8003e4c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d024      	beq.n	8003ea0 <plug_holes+0xc4>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	791b      	ldrb	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d120      	bne.n	8003ea0 <plug_holes+0xc4>
 8003e5e:	4b2b      	ldr	r3, [pc, #172]	; (8003f0c <plug_holes+0x130>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d01b      	beq.n	8003ea0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003e68:	4b2c      	ldr	r3, [pc, #176]	; (8003f1c <plug_holes+0x140>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d102      	bne.n	8003e78 <plug_holes+0x9c>
      lfree = mem;
 8003e72:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <plug_holes+0x140>)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	881a      	ldrh	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003e88:	d00a      	beq.n	8003ea0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff ff80 	bl	8003d94 <ptr_to_mem>
 8003e94:	4604      	mov	r4, r0
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ff8e 	bl	8003db8 <mem_to_ptr>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	885b      	ldrh	r3, [r3, #2]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ff75 	bl	8003d94 <ptr_to_mem>
 8003eaa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d01f      	beq.n	8003ef4 <plug_holes+0x118>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	791b      	ldrb	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11b      	bne.n	8003ef4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003ebc:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <plug_holes+0x140>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d102      	bne.n	8003ecc <plug_holes+0xf0>
      lfree = pmem;
 8003ec6:	4a15      	ldr	r2, [pc, #84]	; (8003f1c <plug_holes+0x140>)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	881a      	ldrh	r2, [r3, #0]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003edc:	d00a      	beq.n	8003ef4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff56 	bl	8003d94 <ptr_to_mem>
 8003ee8:	4604      	mov	r4, r0
 8003eea:	68b8      	ldr	r0, [r7, #8]
 8003eec:	f7ff ff64 	bl	8003db8 <mem_to_ptr>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd90      	pop	{r4, r7, pc}
 8003efc:	20007500 	.word	0x20007500
 8003f00:	0800e8d0 	.word	0x0800e8d0
 8003f04:	0800e900 	.word	0x0800e900
 8003f08:	0800e918 	.word	0x0800e918
 8003f0c:	20007504 	.word	0x20007504
 8003f10:	0800e940 	.word	0x0800e940
 8003f14:	0800e95c 	.word	0x0800e95c
 8003f18:	0800e978 	.word	0x0800e978
 8003f1c:	20007508 	.word	0x20007508

08003f20 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003f26:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <mem_init+0x68>)
 8003f28:	3303      	adds	r3, #3
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <mem_init+0x6c>)
 8003f32:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003f34:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <mem_init+0x6c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003f40:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003f4e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8003f52:	f7ff ff1f 	bl	8003d94 <ptr_to_mem>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <mem_init+0x70>)
 8003f5a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <mem_init+0x70>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2201      	movs	r2, #1
 8003f62:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <mem_init+0x70>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003f6c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <mem_init+0x70>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003f76:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <mem_init+0x6c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a05      	ldr	r2, [pc, #20]	; (8003f94 <mem_init+0x74>)
 8003f7e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20004cec 	.word	0x20004cec
 8003f8c:	20007500 	.word	0x20007500
 8003f90:	20007504 	.word	0x20007504
 8003f94:	20007508 	.word	0x20007508

08003f98 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff ff09 	bl	8003db8 <mem_to_ptr>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fef0 	bl	8003d94 <ptr_to_mem>
 8003fb4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	885b      	ldrh	r3, [r3, #2]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff feea 	bl	8003d94 <ptr_to_mem>
 8003fc0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003fca:	d818      	bhi.n	8003ffe <mem_link_valid+0x66>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	885b      	ldrh	r3, [r3, #2]
 8003fd0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003fd4:	d813      	bhi.n	8003ffe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003fda:	8afa      	ldrh	r2, [r7, #22]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d004      	beq.n	8003fea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	8afa      	ldrh	r2, [r7, #22]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d109      	bne.n	8003ffe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003fea:	4b08      	ldr	r3, [pc, #32]	; (800400c <mem_link_valid+0x74>)
 8003fec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d006      	beq.n	8004002 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	885b      	ldrh	r3, [r3, #2]
 8003ff8:	8afa      	ldrh	r2, [r7, #22]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d001      	beq.n	8004002 <mem_link_valid+0x6a>
    return 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <mem_link_valid+0x6c>
  }
  return 1;
 8004002:	2301      	movs	r3, #1
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20007504 	.word	0x20007504

08004010 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d04c      	beq.n	80040b8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004028:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <mem_free+0xb0>)
 800402a:	f240 2273 	movw	r2, #627	; 0x273
 800402e:	4925      	ldr	r1, [pc, #148]	; (80040c4 <mem_free+0xb4>)
 8004030:	4825      	ldr	r0, [pc, #148]	; (80040c8 <mem_free+0xb8>)
 8004032:	f009 fbc7 	bl	800d7c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004036:	e040      	b.n	80040ba <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3b08      	subs	r3, #8
 800403c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800403e:	4b23      	ldr	r3, [pc, #140]	; (80040cc <mem_free+0xbc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	429a      	cmp	r2, r3
 8004046:	d306      	bcc.n	8004056 <mem_free+0x46>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f103 020c 	add.w	r2, r3, #12
 800404e:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <mem_free+0xc0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d907      	bls.n	8004066 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004056:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <mem_free+0xb0>)
 8004058:	f240 227f 	movw	r2, #639	; 0x27f
 800405c:	491d      	ldr	r1, [pc, #116]	; (80040d4 <mem_free+0xc4>)
 800405e:	481a      	ldr	r0, [pc, #104]	; (80040c8 <mem_free+0xb8>)
 8004060:	f009 fbb0 	bl	800d7c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004064:	e029      	b.n	80040ba <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	791b      	ldrb	r3, [r3, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d107      	bne.n	800407e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800406e:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <mem_free+0xb0>)
 8004070:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004074:	4918      	ldr	r1, [pc, #96]	; (80040d8 <mem_free+0xc8>)
 8004076:	4814      	ldr	r0, [pc, #80]	; (80040c8 <mem_free+0xb8>)
 8004078:	f009 fba4 	bl	800d7c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800407c:	e01d      	b.n	80040ba <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f7ff ff8a 	bl	8003f98 <mem_link_valid>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <mem_free+0xb0>)
 800408c:	f240 2295 	movw	r2, #661	; 0x295
 8004090:	4912      	ldr	r1, [pc, #72]	; (80040dc <mem_free+0xcc>)
 8004092:	480d      	ldr	r0, [pc, #52]	; (80040c8 <mem_free+0xb8>)
 8004094:	f009 fb96 	bl	800d7c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004098:	e00f      	b.n	80040ba <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <mem_free+0xd0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d202      	bcs.n	80040b0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80040aa:	4a0d      	ldr	r2, [pc, #52]	; (80040e0 <mem_free+0xd0>)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff fe93 	bl	8003ddc <plug_holes>
 80040b6:	e000      	b.n	80040ba <mem_free+0xaa>
    return;
 80040b8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	0800e8d0 	.word	0x0800e8d0
 80040c4:	0800e9a4 	.word	0x0800e9a4
 80040c8:	0800e918 	.word	0x0800e918
 80040cc:	20007500 	.word	0x20007500
 80040d0:	20007504 	.word	0x20007504
 80040d4:	0800e9c8 	.word	0x0800e9c8
 80040d8:	0800e9e4 	.word	0x0800e9e4
 80040dc:	0800ea0c 	.word	0x0800ea0c
 80040e0:	20007508 	.word	0x20007508

080040e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80040f0:	887b      	ldrh	r3, [r7, #2]
 80040f2:	3303      	adds	r3, #3
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80040fc:	8bfb      	ldrh	r3, [r7, #30]
 80040fe:	2b0b      	cmp	r3, #11
 8004100:	d801      	bhi.n	8004106 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004102:	230c      	movs	r3, #12
 8004104:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004106:	8bfb      	ldrh	r3, [r7, #30]
 8004108:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800410c:	d803      	bhi.n	8004116 <mem_trim+0x32>
 800410e:	8bfa      	ldrh	r2, [r7, #30]
 8004110:	887b      	ldrh	r3, [r7, #2]
 8004112:	429a      	cmp	r2, r3
 8004114:	d201      	bcs.n	800411a <mem_trim+0x36>
    return NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	e0cc      	b.n	80042b4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800411a:	4b68      	ldr	r3, [pc, #416]	; (80042bc <mem_trim+0x1d8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	d304      	bcc.n	800412e <mem_trim+0x4a>
 8004124:	4b66      	ldr	r3, [pc, #408]	; (80042c0 <mem_trim+0x1dc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	429a      	cmp	r2, r3
 800412c:	d306      	bcc.n	800413c <mem_trim+0x58>
 800412e:	4b65      	ldr	r3, [pc, #404]	; (80042c4 <mem_trim+0x1e0>)
 8004130:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004134:	4964      	ldr	r1, [pc, #400]	; (80042c8 <mem_trim+0x1e4>)
 8004136:	4865      	ldr	r0, [pc, #404]	; (80042cc <mem_trim+0x1e8>)
 8004138:	f009 fb44 	bl	800d7c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800413c:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <mem_trim+0x1d8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	429a      	cmp	r2, r3
 8004144:	d304      	bcc.n	8004150 <mem_trim+0x6c>
 8004146:	4b5e      	ldr	r3, [pc, #376]	; (80042c0 <mem_trim+0x1dc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	429a      	cmp	r2, r3
 800414e:	d301      	bcc.n	8004154 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	e0af      	b.n	80042b4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3b08      	subs	r3, #8
 8004158:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800415a:	69b8      	ldr	r0, [r7, #24]
 800415c:	f7ff fe2c 	bl	8003db8 <mem_to_ptr>
 8004160:	4603      	mov	r3, r0
 8004162:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	881a      	ldrh	r2, [r3, #0]
 8004168:	8afb      	ldrh	r3, [r7, #22]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b08      	subs	r3, #8
 8004170:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004172:	8bfa      	ldrh	r2, [r7, #30]
 8004174:	8abb      	ldrh	r3, [r7, #20]
 8004176:	429a      	cmp	r2, r3
 8004178:	d906      	bls.n	8004188 <mem_trim+0xa4>
 800417a:	4b52      	ldr	r3, [pc, #328]	; (80042c4 <mem_trim+0x1e0>)
 800417c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004180:	4953      	ldr	r1, [pc, #332]	; (80042d0 <mem_trim+0x1ec>)
 8004182:	4852      	ldr	r0, [pc, #328]	; (80042cc <mem_trim+0x1e8>)
 8004184:	f009 fb1e 	bl	800d7c4 <iprintf>
  if (newsize > size) {
 8004188:	8bfa      	ldrh	r2, [r7, #30]
 800418a:	8abb      	ldrh	r3, [r7, #20]
 800418c:	429a      	cmp	r2, r3
 800418e:	d901      	bls.n	8004194 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	e08f      	b.n	80042b4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004194:	8bfa      	ldrh	r2, [r7, #30]
 8004196:	8abb      	ldrh	r3, [r7, #20]
 8004198:	429a      	cmp	r2, r3
 800419a:	d101      	bne.n	80041a0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	e089      	b.n	80042b4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fdf5 	bl	8003d94 <ptr_to_mem>
 80041aa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	791b      	ldrb	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d13f      	bne.n	8004234 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80041bc:	d106      	bne.n	80041cc <mem_trim+0xe8>
 80041be:	4b41      	ldr	r3, [pc, #260]	; (80042c4 <mem_trim+0x1e0>)
 80041c0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80041c4:	4943      	ldr	r1, [pc, #268]	; (80042d4 <mem_trim+0x1f0>)
 80041c6:	4841      	ldr	r0, [pc, #260]	; (80042cc <mem_trim+0x1e8>)
 80041c8:	f009 fafc 	bl	800d7c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80041d2:	8afa      	ldrh	r2, [r7, #22]
 80041d4:	8bfb      	ldrh	r3, [r7, #30]
 80041d6:	4413      	add	r3, r2
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3308      	adds	r3, #8
 80041dc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80041de:	4b3e      	ldr	r3, [pc, #248]	; (80042d8 <mem_trim+0x1f4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d106      	bne.n	80041f6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80041e8:	89fb      	ldrh	r3, [r7, #14]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fdd2 	bl	8003d94 <ptr_to_mem>
 80041f0:	4603      	mov	r3, r0
 80041f2:	4a39      	ldr	r2, [pc, #228]	; (80042d8 <mem_trim+0x1f4>)
 80041f4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80041f6:	89fb      	ldrh	r3, [r7, #14]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fdcb 	bl	8003d94 <ptr_to_mem>
 80041fe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2200      	movs	r2, #0
 8004204:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	89ba      	ldrh	r2, [r7, #12]
 800420a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	8afa      	ldrh	r2, [r7, #22]
 8004210:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	89fa      	ldrh	r2, [r7, #14]
 8004216:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004220:	d047      	beq.n	80042b2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fdb4 	bl	8003d94 <ptr_to_mem>
 800422c:	4602      	mov	r2, r0
 800422e:	89fb      	ldrh	r3, [r7, #14]
 8004230:	8053      	strh	r3, [r2, #2]
 8004232:	e03e      	b.n	80042b2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004234:	8bfb      	ldrh	r3, [r7, #30]
 8004236:	f103 0214 	add.w	r2, r3, #20
 800423a:	8abb      	ldrh	r3, [r7, #20]
 800423c:	429a      	cmp	r2, r3
 800423e:	d838      	bhi.n	80042b2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004240:	8afa      	ldrh	r2, [r7, #22]
 8004242:	8bfb      	ldrh	r3, [r7, #30]
 8004244:	4413      	add	r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	3308      	adds	r3, #8
 800424a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004254:	d106      	bne.n	8004264 <mem_trim+0x180>
 8004256:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <mem_trim+0x1e0>)
 8004258:	f240 3216 	movw	r2, #790	; 0x316
 800425c:	491d      	ldr	r1, [pc, #116]	; (80042d4 <mem_trim+0x1f0>)
 800425e:	481b      	ldr	r0, [pc, #108]	; (80042cc <mem_trim+0x1e8>)
 8004260:	f009 fab0 	bl	800d7c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004264:	89fb      	ldrh	r3, [r7, #14]
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fd94 	bl	8003d94 <ptr_to_mem>
 800426c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800426e:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <mem_trim+0x1f4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d202      	bcs.n	800427e <mem_trim+0x19a>
      lfree = mem2;
 8004278:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <mem_trim+0x1f4>)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2200      	movs	r2, #0
 8004282:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	881a      	ldrh	r2, [r3, #0]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	8afa      	ldrh	r2, [r7, #22]
 8004290:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	89fa      	ldrh	r2, [r7, #14]
 8004296:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80042a0:	d007      	beq.n	80042b2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fd74 	bl	8003d94 <ptr_to_mem>
 80042ac:	4602      	mov	r2, r0
 80042ae:	89fb      	ldrh	r3, [r7, #14]
 80042b0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80042b2:	687b      	ldr	r3, [r7, #4]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20007500 	.word	0x20007500
 80042c0:	20007504 	.word	0x20007504
 80042c4:	0800e8d0 	.word	0x0800e8d0
 80042c8:	0800ea40 	.word	0x0800ea40
 80042cc:	0800e918 	.word	0x0800e918
 80042d0:	0800ea58 	.word	0x0800ea58
 80042d4:	0800ea78 	.word	0x0800ea78
 80042d8:	20007508 	.word	0x20007508

080042dc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <mem_malloc+0x14>
    return NULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e0d9      	b.n	80044a4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	3303      	adds	r3, #3
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80042fc:	8bbb      	ldrh	r3, [r7, #28]
 80042fe:	2b0b      	cmp	r3, #11
 8004300:	d801      	bhi.n	8004306 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004302:	230c      	movs	r3, #12
 8004304:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004306:	8bbb      	ldrh	r3, [r7, #28]
 8004308:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800430c:	d803      	bhi.n	8004316 <mem_malloc+0x3a>
 800430e:	8bba      	ldrh	r2, [r7, #28]
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	429a      	cmp	r2, r3
 8004314:	d201      	bcs.n	800431a <mem_malloc+0x3e>
    return NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	e0c4      	b.n	80044a4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800431a:	4b64      	ldr	r3, [pc, #400]	; (80044ac <mem_malloc+0x1d0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fd4a 	bl	8003db8 <mem_to_ptr>
 8004324:	4603      	mov	r3, r0
 8004326:	83fb      	strh	r3, [r7, #30]
 8004328:	e0b4      	b.n	8004494 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800432a:	8bfb      	ldrh	r3, [r7, #30]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fd31 	bl	8003d94 <ptr_to_mem>
 8004332:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	791b      	ldrb	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f040 80a4 	bne.w	8004486 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	8bfb      	ldrh	r3, [r7, #30]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f1a3 0208 	sub.w	r2, r3, #8
 800434c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800434e:	429a      	cmp	r2, r3
 8004350:	f0c0 8099 	bcc.w	8004486 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	8bfb      	ldrh	r3, [r7, #30]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f1a3 0208 	sub.w	r2, r3, #8
 8004362:	8bbb      	ldrh	r3, [r7, #28]
 8004364:	3314      	adds	r3, #20
 8004366:	429a      	cmp	r2, r3
 8004368:	d333      	bcc.n	80043d2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800436a:	8bfa      	ldrh	r2, [r7, #30]
 800436c:	8bbb      	ldrh	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	b29b      	uxth	r3, r3
 8004372:	3308      	adds	r3, #8
 8004374:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004376:	8a7b      	ldrh	r3, [r7, #18]
 8004378:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800437c:	d106      	bne.n	800438c <mem_malloc+0xb0>
 800437e:	4b4c      	ldr	r3, [pc, #304]	; (80044b0 <mem_malloc+0x1d4>)
 8004380:	f240 3287 	movw	r2, #903	; 0x387
 8004384:	494b      	ldr	r1, [pc, #300]	; (80044b4 <mem_malloc+0x1d8>)
 8004386:	484c      	ldr	r0, [pc, #304]	; (80044b8 <mem_malloc+0x1dc>)
 8004388:	f009 fa1c 	bl	800d7c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800438c:	8a7b      	ldrh	r3, [r7, #18]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fd00 	bl	8003d94 <ptr_to_mem>
 8004394:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	881a      	ldrh	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8bfa      	ldrh	r2, [r7, #30]
 80043a8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	8a7a      	ldrh	r2, [r7, #18]
 80043ae:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2201      	movs	r2, #1
 80043b4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80043be:	d00b      	beq.n	80043d8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fce5 	bl	8003d94 <ptr_to_mem>
 80043ca:	4602      	mov	r2, r0
 80043cc:	8a7b      	ldrh	r3, [r7, #18]
 80043ce:	8053      	strh	r3, [r2, #2]
 80043d0:	e002      	b.n	80043d8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2201      	movs	r2, #1
 80043d6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80043d8:	4b34      	ldr	r3, [pc, #208]	; (80044ac <mem_malloc+0x1d0>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d127      	bne.n	8004432 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80043e2:	4b32      	ldr	r3, [pc, #200]	; (80044ac <mem_malloc+0x1d0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80043e8:	e005      	b.n	80043f6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fcd0 	bl	8003d94 <ptr_to_mem>
 80043f4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	791b      	ldrb	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <mem_malloc+0x12c>
 80043fe:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <mem_malloc+0x1e0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	429a      	cmp	r2, r3
 8004406:	d1f0      	bne.n	80043ea <mem_malloc+0x10e>
          }
          lfree = cur;
 8004408:	4a28      	ldr	r2, [pc, #160]	; (80044ac <mem_malloc+0x1d0>)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800440e:	4b27      	ldr	r3, [pc, #156]	; (80044ac <mem_malloc+0x1d0>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <mem_malloc+0x1e0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d00b      	beq.n	8004432 <mem_malloc+0x156>
 800441a:	4b24      	ldr	r3, [pc, #144]	; (80044ac <mem_malloc+0x1d0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	791b      	ldrb	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d006      	beq.n	8004432 <mem_malloc+0x156>
 8004424:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <mem_malloc+0x1d4>)
 8004426:	f240 32b5 	movw	r2, #949	; 0x3b5
 800442a:	4925      	ldr	r1, [pc, #148]	; (80044c0 <mem_malloc+0x1e4>)
 800442c:	4822      	ldr	r0, [pc, #136]	; (80044b8 <mem_malloc+0x1dc>)
 800442e:	f009 f9c9 	bl	800d7c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004432:	8bba      	ldrh	r2, [r7, #28]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	4413      	add	r3, r2
 8004438:	3308      	adds	r3, #8
 800443a:	4a20      	ldr	r2, [pc, #128]	; (80044bc <mem_malloc+0x1e0>)
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	4293      	cmp	r3, r2
 8004440:	d906      	bls.n	8004450 <mem_malloc+0x174>
 8004442:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <mem_malloc+0x1d4>)
 8004444:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004448:	491e      	ldr	r1, [pc, #120]	; (80044c4 <mem_malloc+0x1e8>)
 800444a:	481b      	ldr	r0, [pc, #108]	; (80044b8 <mem_malloc+0x1dc>)
 800444c:	f009 f9ba 	bl	800d7c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d006      	beq.n	8004468 <mem_malloc+0x18c>
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <mem_malloc+0x1d4>)
 800445c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004460:	4919      	ldr	r1, [pc, #100]	; (80044c8 <mem_malloc+0x1ec>)
 8004462:	4815      	ldr	r0, [pc, #84]	; (80044b8 <mem_malloc+0x1dc>)
 8004464:	f009 f9ae 	bl	800d7c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d006      	beq.n	8004480 <mem_malloc+0x1a4>
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <mem_malloc+0x1d4>)
 8004474:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004478:	4914      	ldr	r1, [pc, #80]	; (80044cc <mem_malloc+0x1f0>)
 800447a:	480f      	ldr	r0, [pc, #60]	; (80044b8 <mem_malloc+0x1dc>)
 800447c:	f009 f9a2 	bl	800d7c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	3308      	adds	r3, #8
 8004484:	e00e      	b.n	80044a4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004486:	8bfb      	ldrh	r3, [r7, #30]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fc83 	bl	8003d94 <ptr_to_mem>
 800448e:	4603      	mov	r3, r0
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004494:	8bfa      	ldrh	r2, [r7, #30]
 8004496:	8bbb      	ldrh	r3, [r7, #28]
 8004498:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800449c:	429a      	cmp	r2, r3
 800449e:	f4ff af44 	bcc.w	800432a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3720      	adds	r7, #32
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20007508 	.word	0x20007508
 80044b0:	0800e8d0 	.word	0x0800e8d0
 80044b4:	0800ea78 	.word	0x0800ea78
 80044b8:	0800e918 	.word	0x0800e918
 80044bc:	20007504 	.word	0x20007504
 80044c0:	0800ea8c 	.word	0x0800ea8c
 80044c4:	0800eaa8 	.word	0x0800eaa8
 80044c8:	0800ead8 	.word	0x0800ead8
 80044cc:	0800eb08 	.word	0x0800eb08

080044d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	3303      	adds	r3, #3
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	e011      	b.n	8004516 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4413      	add	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	885b      	ldrh	r3, [r3, #2]
 800451a:	461a      	mov	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4293      	cmp	r3, r2
 8004520:	dbe7      	blt.n	80044f2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004522:	bf00      	nop
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004536:	2300      	movs	r3, #0
 8004538:	80fb      	strh	r3, [r7, #6]
 800453a:	e009      	b.n	8004550 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	4a08      	ldr	r2, [pc, #32]	; (8004560 <memp_init+0x30>)
 8004540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff ffc3 	bl	80044d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	3301      	adds	r3, #1
 800454e:	80fb      	strh	r3, [r7, #6]
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	2b08      	cmp	r3, #8
 8004554:	d9f2      	bls.n	800453c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	080112e4 	.word	0x080112e4

08004564 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d012      	beq.n	80045a0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	6812      	ldr	r2, [r2, #0]
 8004582:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d006      	beq.n	800459c <do_memp_malloc_pool+0x38>
 800458e:	4b07      	ldr	r3, [pc, #28]	; (80045ac <do_memp_malloc_pool+0x48>)
 8004590:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004594:	4906      	ldr	r1, [pc, #24]	; (80045b0 <do_memp_malloc_pool+0x4c>)
 8004596:	4807      	ldr	r0, [pc, #28]	; (80045b4 <do_memp_malloc_pool+0x50>)
 8004598:	f009 f914 	bl	800d7c4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	e000      	b.n	80045a2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	0800eb2c 	.word	0x0800eb2c
 80045b0:	0800eb5c 	.word	0x0800eb5c
 80045b4:	0800eb80 	.word	0x0800eb80

080045b8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <memp_malloc_pool+0x1c>
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <memp_malloc_pool+0x38>)
 80045c8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80045cc:	4909      	ldr	r1, [pc, #36]	; (80045f4 <memp_malloc_pool+0x3c>)
 80045ce:	480a      	ldr	r0, [pc, #40]	; (80045f8 <memp_malloc_pool+0x40>)
 80045d0:	f009 f8f8 	bl	800d7c4 <iprintf>
  if (desc == NULL) {
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <memp_malloc_pool+0x26>
    return NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	e003      	b.n	80045e6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff ffc0 	bl	8004564 <do_memp_malloc_pool>
 80045e4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	0800eb2c 	.word	0x0800eb2c
 80045f4:	0800eba8 	.word	0x0800eba8
 80045f8:	0800eb80 	.word	0x0800eb80

080045fc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	2b08      	cmp	r3, #8
 800460a:	d908      	bls.n	800461e <memp_malloc+0x22>
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <memp_malloc+0x3c>)
 800460e:	f240 1257 	movw	r2, #343	; 0x157
 8004612:	490a      	ldr	r1, [pc, #40]	; (800463c <memp_malloc+0x40>)
 8004614:	480a      	ldr	r0, [pc, #40]	; (8004640 <memp_malloc+0x44>)
 8004616:	f009 f8d5 	bl	800d7c4 <iprintf>
 800461a:	2300      	movs	r3, #0
 800461c:	e008      	b.n	8004630 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	4a08      	ldr	r2, [pc, #32]	; (8004644 <memp_malloc+0x48>)
 8004622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff ff9c 	bl	8004564 <do_memp_malloc_pool>
 800462c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800462e:	68fb      	ldr	r3, [r7, #12]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	0800eb2c 	.word	0x0800eb2c
 800463c:	0800ebbc 	.word	0x0800ebbc
 8004640:	0800eb80 	.word	0x0800eb80
 8004644:	080112e4 	.word	0x080112e4

08004648 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d006      	beq.n	800466a <do_memp_free_pool+0x22>
 800465c:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <do_memp_free_pool+0x40>)
 800465e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004662:	490a      	ldr	r1, [pc, #40]	; (800468c <do_memp_free_pool+0x44>)
 8004664:	480a      	ldr	r0, [pc, #40]	; (8004690 <do_memp_free_pool+0x48>)
 8004666:	f009 f8ad 	bl	800d7c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	0800eb2c 	.word	0x0800eb2c
 800468c:	0800ebdc 	.word	0x0800ebdc
 8004690:	0800eb80 	.word	0x0800eb80

08004694 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <memp_free_pool+0x1e>
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <memp_free_pool+0x3c>)
 80046a6:	f240 1295 	movw	r2, #405	; 0x195
 80046aa:	490a      	ldr	r1, [pc, #40]	; (80046d4 <memp_free_pool+0x40>)
 80046ac:	480a      	ldr	r0, [pc, #40]	; (80046d8 <memp_free_pool+0x44>)
 80046ae:	f009 f889 	bl	800d7c4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <memp_free_pool+0x34>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80046be:	6839      	ldr	r1, [r7, #0]
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ffc1 	bl	8004648 <do_memp_free_pool>
 80046c6:	e000      	b.n	80046ca <memp_free_pool+0x36>
    return;
 80046c8:	bf00      	nop
}
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	0800eb2c 	.word	0x0800eb2c
 80046d4:	0800eba8 	.word	0x0800eba8
 80046d8:	0800eb80 	.word	0x0800eb80

080046dc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	6039      	str	r1, [r7, #0]
 80046e6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d907      	bls.n	80046fe <memp_free+0x22>
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <memp_free+0x44>)
 80046f0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80046f4:	490b      	ldr	r1, [pc, #44]	; (8004724 <memp_free+0x48>)
 80046f6:	480c      	ldr	r0, [pc, #48]	; (8004728 <memp_free+0x4c>)
 80046f8:	f009 f864 	bl	800d7c4 <iprintf>
 80046fc:	e00c      	b.n	8004718 <memp_free+0x3c>

  if (mem == NULL) {
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <memp_free+0x50>)
 8004708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470c:	6839      	ldr	r1, [r7, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff ff9a 	bl	8004648 <do_memp_free_pool>
 8004714:	e000      	b.n	8004718 <memp_free+0x3c>
    return;
 8004716:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	0800eb2c 	.word	0x0800eb2c
 8004724:	0800ebfc 	.word	0x0800ebfc
 8004728:	0800eb80 	.word	0x0800eb80
 800472c:	080112e4 	.word	0x080112e4

08004730 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004734:	bf00      	nop
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d108      	bne.n	8004766 <netif_add+0x26>
 8004754:	4b57      	ldr	r3, [pc, #348]	; (80048b4 <netif_add+0x174>)
 8004756:	f240 1227 	movw	r2, #295	; 0x127
 800475a:	4957      	ldr	r1, [pc, #348]	; (80048b8 <netif_add+0x178>)
 800475c:	4857      	ldr	r0, [pc, #348]	; (80048bc <netif_add+0x17c>)
 800475e:	f009 f831 	bl	800d7c4 <iprintf>
 8004762:	2300      	movs	r3, #0
 8004764:	e0a2      	b.n	80048ac <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	2b00      	cmp	r3, #0
 800476a:	d108      	bne.n	800477e <netif_add+0x3e>
 800476c:	4b51      	ldr	r3, [pc, #324]	; (80048b4 <netif_add+0x174>)
 800476e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004772:	4953      	ldr	r1, [pc, #332]	; (80048c0 <netif_add+0x180>)
 8004774:	4851      	ldr	r0, [pc, #324]	; (80048bc <netif_add+0x17c>)
 8004776:	f009 f825 	bl	800d7c4 <iprintf>
 800477a:	2300      	movs	r3, #0
 800477c:	e096      	b.n	80048ac <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004784:	4b4f      	ldr	r3, [pc, #316]	; (80048c4 <netif_add+0x184>)
 8004786:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800478e:	4b4d      	ldr	r3, [pc, #308]	; (80048c4 <netif_add+0x184>)
 8004790:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004798:	4b4a      	ldr	r3, [pc, #296]	; (80048c4 <netif_add+0x184>)
 800479a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4a45      	ldr	r2, [pc, #276]	; (80048c8 <netif_add+0x188>)
 80047b2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a3a      	ldr	r2, [r7, #32]
 80047cc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80047ce:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <netif_add+0x18c>)
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047dc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f913 	bl	8004a10 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	4798      	blx	r3
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <netif_add+0xba>
    return NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e058      	b.n	80048ac <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004800:	2bff      	cmp	r3, #255	; 0xff
 8004802:	d103      	bne.n	800480c <netif_add+0xcc>
        netif->num = 0;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004810:	4b2f      	ldr	r3, [pc, #188]	; (80048d0 <netif_add+0x190>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e02b      	b.n	8004870 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	429a      	cmp	r2, r3
 800481e:	d106      	bne.n	800482e <netif_add+0xee>
 8004820:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <netif_add+0x174>)
 8004822:	f240 128b 	movw	r2, #395	; 0x18b
 8004826:	492b      	ldr	r1, [pc, #172]	; (80048d4 <netif_add+0x194>)
 8004828:	4824      	ldr	r0, [pc, #144]	; (80048bc <netif_add+0x17c>)
 800482a:	f008 ffcb 	bl	800d7c4 <iprintf>
        num_netifs++;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	3301      	adds	r3, #1
 8004832:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2bff      	cmp	r3, #255	; 0xff
 8004838:	dd06      	ble.n	8004848 <netif_add+0x108>
 800483a:	4b1e      	ldr	r3, [pc, #120]	; (80048b4 <netif_add+0x174>)
 800483c:	f240 128d 	movw	r2, #397	; 0x18d
 8004840:	4925      	ldr	r1, [pc, #148]	; (80048d8 <netif_add+0x198>)
 8004842:	481e      	ldr	r0, [pc, #120]	; (80048bc <netif_add+0x17c>)
 8004844:	f008 ffbe 	bl	800d7c4 <iprintf>
        if (netif2->num == netif->num) {
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004854:	429a      	cmp	r2, r3
 8004856:	d108      	bne.n	800486a <netif_add+0x12a>
          netif->num++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800485e:	3301      	adds	r3, #1
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004868:	e005      	b.n	8004876 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1d0      	bne.n	8004818 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1be      	bne.n	80047fa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004882:	2bfe      	cmp	r3, #254	; 0xfe
 8004884:	d103      	bne.n	800488e <netif_add+0x14e>
    netif_num = 0;
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <netif_add+0x18c>)
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	e006      	b.n	800489c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004894:	3301      	adds	r3, #1
 8004896:	b2da      	uxtb	r2, r3
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <netif_add+0x18c>)
 800489a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800489c:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <netif_add+0x190>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80048a4:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <netif_add+0x190>)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	0800ec18 	.word	0x0800ec18
 80048b8:	0800ecac 	.word	0x0800ecac
 80048bc:	0800ec68 	.word	0x0800ec68
 80048c0:	0800ecc8 	.word	0x0800ecc8
 80048c4:	08011348 	.word	0x08011348
 80048c8:	08004ceb 	.word	0x08004ceb
 80048cc:	2000a400 	.word	0x2000a400
 80048d0:	2000a3f8 	.word	0x2000a3f8
 80048d4:	0800ecec 	.word	0x0800ecec
 80048d8:	0800ed00 	.word	0x0800ed00

080048dc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80048e6:	6839      	ldr	r1, [r7, #0]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f002 fb43 	bl	8006f74 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80048ee:	6839      	ldr	r1, [r7, #0]
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f006 fc27 	bl	800b144 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <netif_do_set_ipaddr+0x20>
 8004912:	4b1d      	ldr	r3, [pc, #116]	; (8004988 <netif_do_set_ipaddr+0x88>)
 8004914:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004918:	491c      	ldr	r1, [pc, #112]	; (800498c <netif_do_set_ipaddr+0x8c>)
 800491a:	481d      	ldr	r0, [pc, #116]	; (8004990 <netif_do_set_ipaddr+0x90>)
 800491c:	f008 ff52 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <netif_do_set_ipaddr+0x34>
 8004926:	4b18      	ldr	r3, [pc, #96]	; (8004988 <netif_do_set_ipaddr+0x88>)
 8004928:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800492c:	4917      	ldr	r1, [pc, #92]	; (800498c <netif_do_set_ipaddr+0x8c>)
 800492e:	4818      	ldr	r0, [pc, #96]	; (8004990 <netif_do_set_ipaddr+0x90>)
 8004930:	f008 ff48 	bl	800d7c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3304      	adds	r3, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d01c      	beq.n	800497c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3304      	adds	r3, #4
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004952:	f107 0314 	add.w	r3, r7, #20
 8004956:	4619      	mov	r1, r3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ffbf 	bl	80048dc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <netif_do_set_ipaddr+0x6a>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	e000      	b.n	800496c <netif_do_set_ipaddr+0x6c>
 800496a:	2300      	movs	r3, #0
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004970:	2101      	movs	r1, #1
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f8d2 	bl	8004b1c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	0800ec18 	.word	0x0800ec18
 800498c:	0800ed30 	.word	0x0800ed30
 8004990:	0800ec68 	.word	0x0800ec68

08004994 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3308      	adds	r3, #8
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d00a      	beq.n	80049c4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <netif_do_set_netmask+0x26>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	e000      	b.n	80049bc <netif_do_set_netmask+0x28>
 80049ba:	2300      	movs	r3, #0
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b085      	sub	sp, #20
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	330c      	adds	r3, #12
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d00a      	beq.n	8004a02 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <netif_do_set_gw+0x26>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	e000      	b.n	80049fa <netif_do_set_gw+0x28>
 80049f8:	2300      	movs	r3, #0
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004a2c:	4b1c      	ldr	r3, [pc, #112]	; (8004aa0 <netif_set_addr+0x90>)
 8004a2e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004a36:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <netif_set_addr+0x90>)
 8004a38:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004a40:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <netif_set_addr+0x90>)
 8004a42:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <netif_set_addr+0x42>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <netif_set_addr+0x46>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <netif_set_addr+0x48>
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d006      	beq.n	8004a6e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004a60:	f107 0310 	add.w	r3, r7, #16
 8004a64:	461a      	mov	r2, r3
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff ff49 	bl	8004900 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f7ff ff8e 	bl	8004994 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	6839      	ldr	r1, [r7, #0]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff ffa8 	bl	80049d2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d106      	bne.n	8004a96 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004a88:	f107 0310 	add.w	r3, r7, #16
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7ff ff35 	bl	8004900 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004a96:	bf00      	nop
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	08011348 	.word	0x08011348

08004aa4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004aac:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <netif_set_default+0x1c>)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	2000a3fc 	.word	0x2000a3fc

08004ac4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d107      	bne.n	8004ae2 <netif_set_up+0x1e>
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <netif_set_up+0x4c>)
 8004ad4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004ad8:	490e      	ldr	r1, [pc, #56]	; (8004b14 <netif_set_up+0x50>)
 8004ada:	480f      	ldr	r0, [pc, #60]	; (8004b18 <netif_set_up+0x54>)
 8004adc:	f008 fe72 	bl	800d7c4 <iprintf>
 8004ae0:	e013      	b.n	8004b0a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10c      	bne.n	8004b0a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004b02:	2103      	movs	r1, #3
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f809 	bl	8004b1c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	0800ec18 	.word	0x0800ec18
 8004b14:	0800eda0 	.word	0x0800eda0
 8004b18:	0800ec68 	.word	0x0800ec68

08004b1c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <netif_issue_reports+0x20>
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <netif_issue_reports+0x74>)
 8004b30:	f240 326d 	movw	r2, #877	; 0x36d
 8004b34:	4917      	ldr	r1, [pc, #92]	; (8004b94 <netif_issue_reports+0x78>)
 8004b36:	4818      	ldr	r0, [pc, #96]	; (8004b98 <netif_issue_reports+0x7c>)
 8004b38:	f008 fe44 	bl	800d7c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01e      	beq.n	8004b88 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b50:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d017      	beq.n	8004b88 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d013      	beq.n	8004b8a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3304      	adds	r3, #4
 8004b66:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00e      	beq.n	8004b8a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f007 fa49 	bl	800c018 <etharp_request>
 8004b86:	e000      	b.n	8004b8a <netif_issue_reports+0x6e>
    return;
 8004b88:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	0800ec18 	.word	0x0800ec18
 8004b94:	0800edbc 	.word	0x0800edbc
 8004b98:	0800ec68 	.word	0x0800ec68

08004b9c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d107      	bne.n	8004bba <netif_set_down+0x1e>
 8004baa:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <netif_set_down+0x58>)
 8004bac:	f240 329b 	movw	r2, #923	; 0x39b
 8004bb0:	4911      	ldr	r1, [pc, #68]	; (8004bf8 <netif_set_down+0x5c>)
 8004bb2:	4812      	ldr	r0, [pc, #72]	; (8004bfc <netif_set_down+0x60>)
 8004bb4:	f008 fe06 	bl	800d7c4 <iprintf>
 8004bb8:	e019      	b.n	8004bee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d012      	beq.n	8004bee <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f006 fdd3 	bl	800b794 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	0800ec18 	.word	0x0800ec18
 8004bf8:	0800ede0 	.word	0x0800ede0
 8004bfc:	0800ec68 	.word	0x0800ec68

08004c00 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d107      	bne.n	8004c1e <netif_set_link_up+0x1e>
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <netif_set_link_up+0x5c>)
 8004c10:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8004c14:	4912      	ldr	r1, [pc, #72]	; (8004c60 <netif_set_link_up+0x60>)
 8004c16:	4813      	ldr	r0, [pc, #76]	; (8004c64 <netif_set_link_up+0x64>)
 8004c18:	f008 fdd4 	bl	800d7c4 <iprintf>
 8004c1c:	e01b      	b.n	8004c56 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d114      	bne.n	8004c56 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c32:	f043 0304 	orr.w	r3, r3, #4
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004c3e:	2103      	movs	r1, #3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff ff6b 	bl	8004b1c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <netif_set_link_up+0x56>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	0800ec18 	.word	0x0800ec18
 8004c60:	0800ee00 	.word	0x0800ee00
 8004c64:	0800ec68 	.word	0x0800ec68

08004c68 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d107      	bne.n	8004c86 <netif_set_link_down+0x1e>
 8004c76:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <netif_set_link_down+0x54>)
 8004c78:	f240 4206 	movw	r2, #1030	; 0x406
 8004c7c:	4910      	ldr	r1, [pc, #64]	; (8004cc0 <netif_set_link_down+0x58>)
 8004c7e:	4811      	ldr	r0, [pc, #68]	; (8004cc4 <netif_set_link_down+0x5c>)
 8004c80:	f008 fda0 	bl	800d7c4 <iprintf>
 8004c84:	e017      	b.n	8004cb6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d010      	beq.n	8004cb6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c9a:	f023 0304 	bic.w	r3, r3, #4
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <netif_set_link_down+0x4e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	0800ec18 	.word	0x0800ec18
 8004cc0:	0800ee24 	.word	0x0800ee24
 8004cc4:	0800ec68 	.word	0x0800ec68

08004cc8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	61da      	str	r2, [r3, #28]
  }
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b085      	sub	sp, #20
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004cf6:	f06f 030b 	mvn.w	r3, #11
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d013      	beq.n	8004d40 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004d18:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <netif_get_by_index+0x48>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	e00c      	b.n	8004d3a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d26:	3301      	adds	r3, #1
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	79fa      	ldrb	r2, [r7, #7]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d101      	bne.n	8004d34 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	e006      	b.n	8004d42 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1ef      	bne.n	8004d20 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	2000a3f8 	.word	0x2000a3f8

08004d54 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004d5a:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <pbuf_free_ooseq+0x38>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <pbuf_free_ooseq+0x3c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	607b      	str	r3, [r7, #4]
 8004d66:	e00a      	b.n	8004d7e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f002 f93d 	bl	8006ff0 <tcp_free_ooseq>
      return;
 8004d76:	e005      	b.n	8004d84 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f1      	bne.n	8004d68 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	2000a401 	.word	0x2000a401
 8004d90:	2000a410 	.word	0x2000a410

08004d94 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <pbuf_pool_is_empty+0x14>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004d9e:	bf00      	nop
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	2000a401 	.word	0x2000a401

08004dac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	4611      	mov	r1, r2
 8004db8:	461a      	mov	r2, r3
 8004dba:	460b      	mov	r3, r1
 8004dbc:	80fb      	strh	r3, [r7, #6]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	88fa      	ldrh	r2, [r7, #6]
 8004dd2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88ba      	ldrh	r2, [r7, #4]
 8004dd8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004dda:	8b3b      	ldrh	r3, [r7, #24]
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	7f3a      	ldrb	r2, [r7, #28]
 8004de6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2201      	movs	r2, #1
 8004dec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	73da      	strb	r2, [r3, #15]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	; 0x30
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	4603      	mov	r3, r0
 8004e08:	71fb      	strb	r3, [r7, #7]
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	80bb      	strh	r3, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004e16:	887b      	ldrh	r3, [r7, #2]
 8004e18:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004e1c:	d07f      	beq.n	8004f1e <pbuf_alloc+0x11e>
 8004e1e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004e22:	f300 80c8 	bgt.w	8004fb6 <pbuf_alloc+0x1b6>
 8004e26:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004e2a:	d010      	beq.n	8004e4e <pbuf_alloc+0x4e>
 8004e2c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004e30:	f300 80c1 	bgt.w	8004fb6 <pbuf_alloc+0x1b6>
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d002      	beq.n	8004e3e <pbuf_alloc+0x3e>
 8004e38:	2b41      	cmp	r3, #65	; 0x41
 8004e3a:	f040 80bc 	bne.w	8004fb6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004e3e:	887a      	ldrh	r2, [r7, #2]
 8004e40:	88bb      	ldrh	r3, [r7, #4]
 8004e42:	4619      	mov	r1, r3
 8004e44:	2000      	movs	r0, #0
 8004e46:	f000 f8d1 	bl	8004fec <pbuf_alloc_reference>
 8004e4a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004e4c:	e0bd      	b.n	8004fca <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004e56:	88bb      	ldrh	r3, [r7, #4]
 8004e58:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004e5a:	2008      	movs	r0, #8
 8004e5c:	f7ff fbce 	bl	80045fc <memp_malloc>
 8004e60:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d109      	bne.n	8004e7c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004e68:	f7ff ff94 	bl	8004d94 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004e72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e74:	f000 faa8 	bl	80053c8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e0a7      	b.n	8004fcc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004e7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e7e:	3303      	adds	r3, #3
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	8b7a      	ldrh	r2, [r7, #26]
 8004e90:	4293      	cmp	r3, r2
 8004e92:	bf28      	it	cs
 8004e94:	4613      	movcs	r3, r2
 8004e96:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004e98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e9a:	3310      	adds	r3, #16
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3303      	adds	r3, #3
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	89f9      	ldrh	r1, [r7, #14]
 8004eaa:	8b7a      	ldrh	r2, [r7, #26]
 8004eac:	2300      	movs	r3, #0
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	887b      	ldrh	r3, [r7, #2]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4601      	mov	r1, r0
 8004eb8:	6938      	ldr	r0, [r7, #16]
 8004eba:	f7ff ff77 	bl	8004dac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d006      	beq.n	8004ed8 <pbuf_alloc+0xd8>
 8004eca:	4b42      	ldr	r3, [pc, #264]	; (8004fd4 <pbuf_alloc+0x1d4>)
 8004ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ed0:	4941      	ldr	r1, [pc, #260]	; (8004fd8 <pbuf_alloc+0x1d8>)
 8004ed2:	4842      	ldr	r0, [pc, #264]	; (8004fdc <pbuf_alloc+0x1dc>)
 8004ed4:	f008 fc76 	bl	800d7c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004ed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004eda:	3303      	adds	r3, #3
 8004edc:	f023 0303 	bic.w	r3, r3, #3
 8004ee0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004ee4:	d106      	bne.n	8004ef4 <pbuf_alloc+0xf4>
 8004ee6:	4b3b      	ldr	r3, [pc, #236]	; (8004fd4 <pbuf_alloc+0x1d4>)
 8004ee8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004eec:	493c      	ldr	r1, [pc, #240]	; (8004fe0 <pbuf_alloc+0x1e0>)
 8004eee:	483b      	ldr	r0, [pc, #236]	; (8004fdc <pbuf_alloc+0x1dc>)
 8004ef0:	f008 fc68 	bl	800d7c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d102      	bne.n	8004f00 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
 8004efe:	e002      	b.n	8004f06 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004f0a:	8b7a      	ldrh	r2, [r7, #26]
 8004f0c:	89fb      	ldrh	r3, [r7, #14]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004f16:	8b7b      	ldrh	r3, [r7, #26]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d19e      	bne.n	8004e5a <pbuf_alloc+0x5a>
      break;
 8004f1c:	e055      	b.n	8004fca <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004f1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f20:	3303      	adds	r3, #3
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f023 0303 	bic.w	r3, r3, #3
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	88bb      	ldrh	r3, [r7, #4]
 8004f2c:	3303      	adds	r3, #3
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f023 0303 	bic.w	r3, r3, #3
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004f3a:	8b3b      	ldrh	r3, [r7, #24]
 8004f3c:	3310      	adds	r3, #16
 8004f3e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004f40:	8b3a      	ldrh	r2, [r7, #24]
 8004f42:	88bb      	ldrh	r3, [r7, #4]
 8004f44:	3303      	adds	r3, #3
 8004f46:	f023 0303 	bic.w	r3, r3, #3
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d306      	bcc.n	8004f5c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004f4e:	8afa      	ldrh	r2, [r7, #22]
 8004f50:	88bb      	ldrh	r3, [r7, #4]
 8004f52:	3303      	adds	r3, #3
 8004f54:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d201      	bcs.n	8004f60 <pbuf_alloc+0x160>
        return NULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e035      	b.n	8004fcc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004f60:	8afb      	ldrh	r3, [r7, #22]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff f9ba 	bl	80042dc <mem_malloc>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <pbuf_alloc+0x174>
        return NULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e02b      	b.n	8004fcc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004f74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f76:	3310      	adds	r3, #16
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3303      	adds	r3, #3
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	4618      	mov	r0, r3
 8004f84:	88b9      	ldrh	r1, [r7, #4]
 8004f86:	88ba      	ldrh	r2, [r7, #4]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	887b      	ldrh	r3, [r7, #2]
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	460b      	mov	r3, r1
 8004f92:	4601      	mov	r1, r0
 8004f94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f96:	f7ff ff09 	bl	8004dac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d010      	beq.n	8004fc8 <pbuf_alloc+0x1c8>
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <pbuf_alloc+0x1d4>)
 8004fa8:	f44f 7291 	mov.w	r2, #290	; 0x122
 8004fac:	490d      	ldr	r1, [pc, #52]	; (8004fe4 <pbuf_alloc+0x1e4>)
 8004fae:	480b      	ldr	r0, [pc, #44]	; (8004fdc <pbuf_alloc+0x1dc>)
 8004fb0:	f008 fc08 	bl	800d7c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004fb4:	e008      	b.n	8004fc8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <pbuf_alloc+0x1d4>)
 8004fb8:	f240 1227 	movw	r2, #295	; 0x127
 8004fbc:	490a      	ldr	r1, [pc, #40]	; (8004fe8 <pbuf_alloc+0x1e8>)
 8004fbe:	4807      	ldr	r0, [pc, #28]	; (8004fdc <pbuf_alloc+0x1dc>)
 8004fc0:	f008 fc00 	bl	800d7c4 <iprintf>
      return NULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e001      	b.n	8004fcc <pbuf_alloc+0x1cc>
      break;
 8004fc8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3728      	adds	r7, #40	; 0x28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	0800ee48 	.word	0x0800ee48
 8004fd8:	0800ee78 	.word	0x0800ee78
 8004fdc:	0800eea8 	.word	0x0800eea8
 8004fe0:	0800eed0 	.word	0x0800eed0
 8004fe4:	0800ef04 	.word	0x0800ef04
 8004fe8:	0800ef30 	.word	0x0800ef30

08004fec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	807b      	strh	r3, [r7, #2]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004ffc:	883b      	ldrh	r3, [r7, #0]
 8004ffe:	2b41      	cmp	r3, #65	; 0x41
 8005000:	d009      	beq.n	8005016 <pbuf_alloc_reference+0x2a>
 8005002:	883b      	ldrh	r3, [r7, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d006      	beq.n	8005016 <pbuf_alloc_reference+0x2a>
 8005008:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <pbuf_alloc_reference+0x5c>)
 800500a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800500e:	490f      	ldr	r1, [pc, #60]	; (800504c <pbuf_alloc_reference+0x60>)
 8005010:	480f      	ldr	r0, [pc, #60]	; (8005050 <pbuf_alloc_reference+0x64>)
 8005012:	f008 fbd7 	bl	800d7c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005016:	2007      	movs	r0, #7
 8005018:	f7ff faf0 	bl	80045fc <memp_malloc>
 800501c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005024:	2300      	movs	r3, #0
 8005026:	e00b      	b.n	8005040 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005028:	8879      	ldrh	r1, [r7, #2]
 800502a:	887a      	ldrh	r2, [r7, #2]
 800502c:	2300      	movs	r3, #0
 800502e:	9301      	str	r3, [sp, #4]
 8005030:	883b      	ldrh	r3, [r7, #0]
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	460b      	mov	r3, r1
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff feb7 	bl	8004dac <pbuf_init_alloced_pbuf>
  return p;
 800503e:	68fb      	ldr	r3, [r7, #12]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	0800ee48 	.word	0x0800ee48
 800504c:	0800ef4c 	.word	0x0800ef4c
 8005050:	0800eea8 	.word	0x0800eea8

08005054 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af02      	add	r7, sp, #8
 800505a:	607b      	str	r3, [r7, #4]
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	460b      	mov	r3, r1
 8005062:	81bb      	strh	r3, [r7, #12]
 8005064:	4613      	mov	r3, r2
 8005066:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800506c:	8a7b      	ldrh	r3, [r7, #18]
 800506e:	3303      	adds	r3, #3
 8005070:	f023 0203 	bic.w	r2, r3, #3
 8005074:	89bb      	ldrh	r3, [r7, #12]
 8005076:	441a      	add	r2, r3
 8005078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800507a:	429a      	cmp	r2, r3
 800507c:	d901      	bls.n	8005082 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	e018      	b.n	80050b4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d007      	beq.n	8005098 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005088:	8a7b      	ldrh	r3, [r7, #18]
 800508a:	3303      	adds	r3, #3
 800508c:	f023 0303 	bic.w	r3, r3, #3
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	4413      	add	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e001      	b.n	800509c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	89b9      	ldrh	r1, [r7, #12]
 80050a0:	89ba      	ldrh	r2, [r7, #12]
 80050a2:	2302      	movs	r3, #2
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	897b      	ldrh	r3, [r7, #10]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	460b      	mov	r3, r1
 80050ac:	6979      	ldr	r1, [r7, #20]
 80050ae:	f7ff fe7d 	bl	8004dac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80050b2:	687b      	ldr	r3, [r7, #4]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <pbuf_realloc+0x20>
 80050ce:	4b3a      	ldr	r3, [pc, #232]	; (80051b8 <pbuf_realloc+0xfc>)
 80050d0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80050d4:	4939      	ldr	r1, [pc, #228]	; (80051bc <pbuf_realloc+0x100>)
 80050d6:	483a      	ldr	r0, [pc, #232]	; (80051c0 <pbuf_realloc+0x104>)
 80050d8:	f008 fb74 	bl	800d7c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	891b      	ldrh	r3, [r3, #8]
 80050e0:	887a      	ldrh	r2, [r7, #2]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d263      	bcs.n	80051ae <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	891a      	ldrh	r2, [r3, #8]
 80050ea:	887b      	ldrh	r3, [r7, #2]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	817b      	strh	r3, [r7, #10]
  q = p;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80050f8:	e018      	b.n	800512c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	895b      	ldrh	r3, [r3, #10]
 80050fe:	897a      	ldrh	r2, [r7, #10]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	891a      	ldrh	r2, [r3, #8]
 8005108:	893b      	ldrh	r3, [r7, #8]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <pbuf_realloc+0x70>
 800511e:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <pbuf_realloc+0xfc>)
 8005120:	f240 12af 	movw	r2, #431	; 0x1af
 8005124:	4927      	ldr	r1, [pc, #156]	; (80051c4 <pbuf_realloc+0x108>)
 8005126:	4826      	ldr	r0, [pc, #152]	; (80051c0 <pbuf_realloc+0x104>)
 8005128:	f008 fb4c 	bl	800d7c4 <iprintf>
  while (rem_len > q->len) {
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	895b      	ldrh	r3, [r3, #10]
 8005130:	897a      	ldrh	r2, [r7, #10]
 8005132:	429a      	cmp	r2, r3
 8005134:	d8e1      	bhi.n	80050fa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	7b1b      	ldrb	r3, [r3, #12]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	2b00      	cmp	r3, #0
 8005140:	d121      	bne.n	8005186 <pbuf_realloc+0xca>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	895b      	ldrh	r3, [r3, #10]
 8005146:	897a      	ldrh	r2, [r7, #10]
 8005148:	429a      	cmp	r2, r3
 800514a:	d01c      	beq.n	8005186 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	7b5b      	ldrb	r3, [r3, #13]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d116      	bne.n	8005186 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	b29a      	uxth	r2, r3
 8005162:	897b      	ldrh	r3, [r7, #10]
 8005164:	4413      	add	r3, r2
 8005166:	b29b      	uxth	r3, r3
 8005168:	4619      	mov	r1, r3
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7fe ffba 	bl	80040e4 <mem_trim>
 8005170:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <pbuf_realloc+0xca>
 8005178:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <pbuf_realloc+0xfc>)
 800517a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800517e:	4912      	ldr	r1, [pc, #72]	; (80051c8 <pbuf_realloc+0x10c>)
 8005180:	480f      	ldr	r0, [pc, #60]	; (80051c0 <pbuf_realloc+0x104>)
 8005182:	f008 fb1f 	bl	800d7c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	897a      	ldrh	r2, [r7, #10]
 800518a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	895a      	ldrh	r2, [r3, #10]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d004      	beq.n	80051a6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 f911 	bl	80053c8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	e000      	b.n	80051b0 <pbuf_realloc+0xf4>
    return;
 80051ae:	bf00      	nop

}
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	0800ee48 	.word	0x0800ee48
 80051bc:	0800ef60 	.word	0x0800ef60
 80051c0:	0800eea8 	.word	0x0800eea8
 80051c4:	0800ef78 	.word	0x0800ef78
 80051c8:	0800ef90 	.word	0x0800ef90

080051cc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	4613      	mov	r3, r2
 80051d8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d106      	bne.n	80051ee <pbuf_add_header_impl+0x22>
 80051e0:	4b2b      	ldr	r3, [pc, #172]	; (8005290 <pbuf_add_header_impl+0xc4>)
 80051e2:	f240 12df 	movw	r2, #479	; 0x1df
 80051e6:	492b      	ldr	r1, [pc, #172]	; (8005294 <pbuf_add_header_impl+0xc8>)
 80051e8:	482b      	ldr	r0, [pc, #172]	; (8005298 <pbuf_add_header_impl+0xcc>)
 80051ea:	f008 faeb 	bl	800d7c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <pbuf_add_header_impl+0x30>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fa:	d301      	bcc.n	8005200 <pbuf_add_header_impl+0x34>
    return 1;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e043      	b.n	8005288 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <pbuf_add_header_impl+0x3e>
    return 0;
 8005206:	2300      	movs	r3, #0
 8005208:	e03e      	b.n	8005288 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	891a      	ldrh	r2, [r3, #8]
 8005212:	8a7b      	ldrh	r3, [r7, #18]
 8005214:	4413      	add	r3, r2
 8005216:	b29b      	uxth	r3, r3
 8005218:	8a7a      	ldrh	r2, [r7, #18]
 800521a:	429a      	cmp	r2, r3
 800521c:	d901      	bls.n	8005222 <pbuf_add_header_impl+0x56>
    return 1;
 800521e:	2301      	movs	r3, #1
 8005220:	e032      	b.n	8005288 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	7b1b      	ldrb	r3, [r3, #12]
 8005226:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005228:	8a3b      	ldrh	r3, [r7, #16]
 800522a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00c      	beq.n	800524c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	425b      	negs	r3, r3
 800523a:	4413      	add	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3310      	adds	r3, #16
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	429a      	cmp	r2, r3
 8005246:	d20d      	bcs.n	8005264 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005248:	2301      	movs	r3, #1
 800524a:	e01d      	b.n	8005288 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d006      	beq.n	8005260 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	425b      	negs	r3, r3
 800525a:	4413      	add	r3, r2
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	e001      	b.n	8005264 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005260:	2301      	movs	r3, #1
 8005262:	e011      	b.n	8005288 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	895a      	ldrh	r2, [r3, #10]
 800526e:	8a7b      	ldrh	r3, [r7, #18]
 8005270:	4413      	add	r3, r2
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	891a      	ldrh	r2, [r3, #8]
 800527c:	8a7b      	ldrh	r3, [r7, #18]
 800527e:	4413      	add	r3, r2
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	811a      	strh	r2, [r3, #8]


  return 0;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	0800ee48 	.word	0x0800ee48
 8005294:	0800efac 	.word	0x0800efac
 8005298:	0800eea8 	.word	0x0800eea8

0800529c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80052a6:	2200      	movs	r2, #0
 80052a8:	6839      	ldr	r1, [r7, #0]
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff ff8e 	bl	80051cc <pbuf_add_header_impl>
 80052b0:	4603      	mov	r3, r0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <pbuf_remove_header+0x1e>
 80052cc:	4b20      	ldr	r3, [pc, #128]	; (8005350 <pbuf_remove_header+0x94>)
 80052ce:	f240 224b 	movw	r2, #587	; 0x24b
 80052d2:	4920      	ldr	r1, [pc, #128]	; (8005354 <pbuf_remove_header+0x98>)
 80052d4:	4820      	ldr	r0, [pc, #128]	; (8005358 <pbuf_remove_header+0x9c>)
 80052d6:	f008 fa75 	bl	800d7c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <pbuf_remove_header+0x2c>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e6:	d301      	bcc.n	80052ec <pbuf_remove_header+0x30>
    return 1;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e02c      	b.n	8005346 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <pbuf_remove_header+0x3a>
    return 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e027      	b.n	8005346 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	895b      	ldrh	r3, [r3, #10]
 80052fe:	89fa      	ldrh	r2, [r7, #14]
 8005300:	429a      	cmp	r2, r3
 8005302:	d908      	bls.n	8005316 <pbuf_remove_header+0x5a>
 8005304:	4b12      	ldr	r3, [pc, #72]	; (8005350 <pbuf_remove_header+0x94>)
 8005306:	f240 2255 	movw	r2, #597	; 0x255
 800530a:	4914      	ldr	r1, [pc, #80]	; (800535c <pbuf_remove_header+0xa0>)
 800530c:	4812      	ldr	r0, [pc, #72]	; (8005358 <pbuf_remove_header+0x9c>)
 800530e:	f008 fa59 	bl	800d7c4 <iprintf>
 8005312:	2301      	movs	r3, #1
 8005314:	e017      	b.n	8005346 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	441a      	add	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	895a      	ldrh	r2, [r3, #10]
 800532c:	89fb      	ldrh	r3, [r7, #14]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	b29a      	uxth	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	891a      	ldrh	r2, [r3, #8]
 800533a:	89fb      	ldrh	r3, [r7, #14]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	b29a      	uxth	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	0800ee48 	.word	0x0800ee48
 8005354:	0800efac 	.word	0x0800efac
 8005358:	0800eea8 	.word	0x0800eea8
 800535c:	0800efb8 	.word	0x0800efb8

08005360 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	807b      	strh	r3, [r7, #2]
 800536c:	4613      	mov	r3, r2
 800536e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005370:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005374:	2b00      	cmp	r3, #0
 8005376:	da08      	bge.n	800538a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005378:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800537c:	425b      	negs	r3, r3
 800537e:	4619      	mov	r1, r3
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7ff ff9b 	bl	80052bc <pbuf_remove_header>
 8005386:	4603      	mov	r3, r0
 8005388:	e007      	b.n	800539a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800538a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800538e:	787a      	ldrb	r2, [r7, #1]
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff ff1a 	bl	80051cc <pbuf_add_header_impl>
 8005398:	4603      	mov	r3, r0
  }
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80053ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053b2:	2201      	movs	r2, #1
 80053b4:	4619      	mov	r1, r3
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff ffd2 	bl	8005360 <pbuf_header_impl>
 80053bc:	4603      	mov	r3, r0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <pbuf_free+0x22>
 80053dc:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <pbuf_free+0xf8>)
 80053de:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80053e2:	4938      	ldr	r1, [pc, #224]	; (80054c4 <pbuf_free+0xfc>)
 80053e4:	4838      	ldr	r0, [pc, #224]	; (80054c8 <pbuf_free+0x100>)
 80053e6:	f008 f9ed 	bl	800d7c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	e063      	b.n	80054b6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80053f2:	e05c      	b.n	80054ae <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	7b9b      	ldrb	r3, [r3, #14]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d106      	bne.n	800540a <pbuf_free+0x42>
 80053fc:	4b30      	ldr	r3, [pc, #192]	; (80054c0 <pbuf_free+0xf8>)
 80053fe:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005402:	4932      	ldr	r1, [pc, #200]	; (80054cc <pbuf_free+0x104>)
 8005404:	4830      	ldr	r0, [pc, #192]	; (80054c8 <pbuf_free+0x100>)
 8005406:	f008 f9dd 	bl	800d7c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	7b9b      	ldrb	r3, [r3, #14]
 800540e:	3b01      	subs	r3, #1
 8005410:	b2da      	uxtb	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	739a      	strb	r2, [r3, #14]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	7b9b      	ldrb	r3, [r3, #14]
 800541a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800541c:	7dbb      	ldrb	r3, [r7, #22]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d143      	bne.n	80054aa <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	7b1b      	ldrb	r3, [r3, #12]
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	7b5b      	ldrb	r3, [r3, #13]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d011      	beq.n	8005462 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <pbuf_free+0x90>
 800544a:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <pbuf_free+0xf8>)
 800544c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005450:	491f      	ldr	r1, [pc, #124]	; (80054d0 <pbuf_free+0x108>)
 8005452:	481d      	ldr	r0, [pc, #116]	; (80054c8 <pbuf_free+0x100>)
 8005454:	f008 f9b6 	bl	800d7c4 <iprintf>
        pc->custom_free_function(p);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
 8005460:	e01d      	b.n	800549e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d104      	bne.n	8005472 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	2008      	movs	r0, #8
 800546c:	f7ff f936 	bl	80046dc <memp_free>
 8005470:	e015      	b.n	800549e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d104      	bne.n	8005482 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	2007      	movs	r0, #7
 800547c:	f7ff f92e 	bl	80046dc <memp_free>
 8005480:	e00d      	b.n	800549e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d103      	bne.n	8005490 <pbuf_free+0xc8>
          mem_free(p);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7fe fdc1 	bl	8004010 <mem_free>
 800548e:	e006      	b.n	800549e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <pbuf_free+0xf8>)
 8005492:	f240 320f 	movw	r2, #783	; 0x30f
 8005496:	490f      	ldr	r1, [pc, #60]	; (80054d4 <pbuf_free+0x10c>)
 8005498:	480b      	ldr	r0, [pc, #44]	; (80054c8 <pbuf_free+0x100>)
 800549a:	f008 f993 	bl	800d7c4 <iprintf>
        }
      }
      count++;
 800549e:	7dfb      	ldrb	r3, [r7, #23]
 80054a0:	3301      	adds	r3, #1
 80054a2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	607b      	str	r3, [r7, #4]
 80054a8:	e001      	b.n	80054ae <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d19f      	bne.n	80053f4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	0800ee48 	.word	0x0800ee48
 80054c4:	0800efac 	.word	0x0800efac
 80054c8:	0800eea8 	.word	0x0800eea8
 80054cc:	0800efd8 	.word	0x0800efd8
 80054d0:	0800eff0 	.word	0x0800eff0
 80054d4:	0800f014 	.word	0x0800f014

080054d8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80054e4:	e005      	b.n	80054f2 <pbuf_clen+0x1a>
    ++len;
 80054e6:	89fb      	ldrh	r3, [r7, #14]
 80054e8:	3301      	adds	r3, #1
 80054ea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f6      	bne.n	80054e6 <pbuf_clen+0xe>
  }
  return len;
 80054f8:	89fb      	ldrh	r3, [r7, #14]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d010      	beq.n	8005538 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	7b9b      	ldrb	r3, [r3, #14]
 800551a:	3301      	adds	r3, #1
 800551c:	b2da      	uxtb	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	7b9b      	ldrb	r3, [r3, #14]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <pbuf_ref+0x30>
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <pbuf_ref+0x38>)
 800552c:	f240 3242 	movw	r2, #834	; 0x342
 8005530:	4904      	ldr	r1, [pc, #16]	; (8005544 <pbuf_ref+0x3c>)
 8005532:	4805      	ldr	r0, [pc, #20]	; (8005548 <pbuf_ref+0x40>)
 8005534:	f008 f946 	bl	800d7c4 <iprintf>
  }
}
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	0800ee48 	.word	0x0800ee48
 8005544:	0800f028 	.word	0x0800f028
 8005548:	0800eea8 	.word	0x0800eea8

0800554c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <pbuf_cat+0x16>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d107      	bne.n	8005572 <pbuf_cat+0x26>
 8005562:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <pbuf_cat+0x98>)
 8005564:	f240 3259 	movw	r2, #857	; 0x359
 8005568:	491f      	ldr	r1, [pc, #124]	; (80055e8 <pbuf_cat+0x9c>)
 800556a:	4820      	ldr	r0, [pc, #128]	; (80055ec <pbuf_cat+0xa0>)
 800556c:	f008 f92a 	bl	800d7c4 <iprintf>
 8005570:	e034      	b.n	80055dc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e00a      	b.n	800558e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	891a      	ldrh	r2, [r3, #8]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	891b      	ldrh	r3, [r3, #8]
 8005580:	4413      	add	r3, r2
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	891a      	ldrh	r2, [r3, #8]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	895b      	ldrh	r3, [r3, #10]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d006      	beq.n	80055b0 <pbuf_cat+0x64>
 80055a2:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <pbuf_cat+0x98>)
 80055a4:	f240 3262 	movw	r2, #866	; 0x362
 80055a8:	4911      	ldr	r1, [pc, #68]	; (80055f0 <pbuf_cat+0xa4>)
 80055aa:	4810      	ldr	r0, [pc, #64]	; (80055ec <pbuf_cat+0xa0>)
 80055ac:	f008 f90a 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d006      	beq.n	80055c6 <pbuf_cat+0x7a>
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <pbuf_cat+0x98>)
 80055ba:	f240 3263 	movw	r2, #867	; 0x363
 80055be:	490d      	ldr	r1, [pc, #52]	; (80055f4 <pbuf_cat+0xa8>)
 80055c0:	480a      	ldr	r0, [pc, #40]	; (80055ec <pbuf_cat+0xa0>)
 80055c2:	f008 f8ff 	bl	800d7c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	891a      	ldrh	r2, [r3, #8]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	891b      	ldrh	r3, [r3, #8]
 80055ce:	4413      	add	r3, r2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	0800ee48 	.word	0x0800ee48
 80055e8:	0800f03c 	.word	0x0800f03c
 80055ec:	0800eea8 	.word	0x0800eea8
 80055f0:	0800f074 	.word	0x0800f074
 80055f4:	0800f0a4 	.word	0x0800f0a4

080055f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	2300      	movs	r3, #0
 8005608:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d008      	beq.n	8005622 <pbuf_copy+0x2a>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <pbuf_copy+0x2a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	891a      	ldrh	r2, [r3, #8]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	891b      	ldrh	r3, [r3, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	d209      	bcs.n	8005636 <pbuf_copy+0x3e>
 8005622:	4b57      	ldr	r3, [pc, #348]	; (8005780 <pbuf_copy+0x188>)
 8005624:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005628:	4956      	ldr	r1, [pc, #344]	; (8005784 <pbuf_copy+0x18c>)
 800562a:	4857      	ldr	r0, [pc, #348]	; (8005788 <pbuf_copy+0x190>)
 800562c:	f008 f8ca 	bl	800d7c4 <iprintf>
 8005630:	f06f 030f 	mvn.w	r3, #15
 8005634:	e09f      	b.n	8005776 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	895b      	ldrh	r3, [r3, #10]
 800563a:	461a      	mov	r2, r3
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	1ad2      	subs	r2, r2, r3
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	895b      	ldrh	r3, [r3, #10]
 8005644:	4619      	mov	r1, r3
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1acb      	subs	r3, r1, r3
 800564a:	429a      	cmp	r2, r3
 800564c:	d306      	bcc.n	800565c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	895b      	ldrh	r3, [r3, #10]
 8005652:	461a      	mov	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	e005      	b.n	8005668 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	895b      	ldrh	r3, [r3, #10]
 8005660:	461a      	mov	r2, r3
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	18d0      	adds	r0, r2, r3
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4413      	add	r3, r2
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4619      	mov	r1, r3
 800567c:	f008 f88c 	bl	800d798 <memcpy>
    offset_to += len;
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4413      	add	r3, r2
 8005686:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	895b      	ldrh	r3, [r3, #10]
 8005694:	461a      	mov	r2, r3
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	4293      	cmp	r3, r2
 800569a:	d906      	bls.n	80056aa <pbuf_copy+0xb2>
 800569c:	4b38      	ldr	r3, [pc, #224]	; (8005780 <pbuf_copy+0x188>)
 800569e:	f240 32d9 	movw	r2, #985	; 0x3d9
 80056a2:	493a      	ldr	r1, [pc, #232]	; (800578c <pbuf_copy+0x194>)
 80056a4:	4838      	ldr	r0, [pc, #224]	; (8005788 <pbuf_copy+0x190>)
 80056a6:	f008 f88d 	bl	800d7c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	895b      	ldrh	r3, [r3, #10]
 80056ae:	461a      	mov	r2, r3
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d906      	bls.n	80056c4 <pbuf_copy+0xcc>
 80056b6:	4b32      	ldr	r3, [pc, #200]	; (8005780 <pbuf_copy+0x188>)
 80056b8:	f240 32da 	movw	r2, #986	; 0x3da
 80056bc:	4934      	ldr	r1, [pc, #208]	; (8005790 <pbuf_copy+0x198>)
 80056be:	4832      	ldr	r0, [pc, #200]	; (8005788 <pbuf_copy+0x190>)
 80056c0:	f008 f880 	bl	800d7c4 <iprintf>
    if (offset_from >= p_from->len) {
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	895b      	ldrh	r3, [r3, #10]
 80056c8:	461a      	mov	r2, r3
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d304      	bcc.n	80056da <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	895b      	ldrh	r3, [r3, #10]
 80056de:	461a      	mov	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d114      	bne.n	8005710 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10c      	bne.n	8005710 <pbuf_copy+0x118>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d009      	beq.n	8005710 <pbuf_copy+0x118>
 80056fc:	4b20      	ldr	r3, [pc, #128]	; (8005780 <pbuf_copy+0x188>)
 80056fe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005702:	4924      	ldr	r1, [pc, #144]	; (8005794 <pbuf_copy+0x19c>)
 8005704:	4820      	ldr	r0, [pc, #128]	; (8005788 <pbuf_copy+0x190>)
 8005706:	f008 f85d 	bl	800d7c4 <iprintf>
 800570a:	f06f 030f 	mvn.w	r3, #15
 800570e:	e032      	b.n	8005776 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d013      	beq.n	800573e <pbuf_copy+0x146>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	895a      	ldrh	r2, [r3, #10]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	891b      	ldrh	r3, [r3, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	d10d      	bne.n	800573e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d009      	beq.n	800573e <pbuf_copy+0x146>
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <pbuf_copy+0x188>)
 800572c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005730:	4919      	ldr	r1, [pc, #100]	; (8005798 <pbuf_copy+0x1a0>)
 8005732:	4815      	ldr	r0, [pc, #84]	; (8005788 <pbuf_copy+0x190>)
 8005734:	f008 f846 	bl	800d7c4 <iprintf>
 8005738:	f06f 0305 	mvn.w	r3, #5
 800573c:	e01b      	b.n	8005776 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d013      	beq.n	800576c <pbuf_copy+0x174>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	895a      	ldrh	r2, [r3, #10]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	891b      	ldrh	r3, [r3, #8]
 800574c:	429a      	cmp	r2, r3
 800574e:	d10d      	bne.n	800576c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d009      	beq.n	800576c <pbuf_copy+0x174>
 8005758:	4b09      	ldr	r3, [pc, #36]	; (8005780 <pbuf_copy+0x188>)
 800575a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800575e:	490e      	ldr	r1, [pc, #56]	; (8005798 <pbuf_copy+0x1a0>)
 8005760:	4809      	ldr	r0, [pc, #36]	; (8005788 <pbuf_copy+0x190>)
 8005762:	f008 f82f 	bl	800d7c4 <iprintf>
 8005766:	f06f 0305 	mvn.w	r3, #5
 800576a:	e004      	b.n	8005776 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	f47f af61 	bne.w	8005636 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	0800ee48 	.word	0x0800ee48
 8005784:	0800f0f0 	.word	0x0800f0f0
 8005788:	0800eea8 	.word	0x0800eea8
 800578c:	0800f120 	.word	0x0800f120
 8005790:	0800f138 	.word	0x0800f138
 8005794:	0800f154 	.word	0x0800f154
 8005798:	0800f164 	.word	0x0800f164

0800579c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	4611      	mov	r1, r2
 80057a8:	461a      	mov	r2, r3
 80057aa:	460b      	mov	r3, r1
 80057ac:	80fb      	strh	r3, [r7, #6]
 80057ae:	4613      	mov	r3, r2
 80057b0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d108      	bne.n	80057d2 <pbuf_copy_partial+0x36>
 80057c0:	4b2b      	ldr	r3, [pc, #172]	; (8005870 <pbuf_copy_partial+0xd4>)
 80057c2:	f240 420a 	movw	r2, #1034	; 0x40a
 80057c6:	492b      	ldr	r1, [pc, #172]	; (8005874 <pbuf_copy_partial+0xd8>)
 80057c8:	482b      	ldr	r0, [pc, #172]	; (8005878 <pbuf_copy_partial+0xdc>)
 80057ca:	f007 fffb 	bl	800d7c4 <iprintf>
 80057ce:	2300      	movs	r3, #0
 80057d0:	e04a      	b.n	8005868 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d108      	bne.n	80057ea <pbuf_copy_partial+0x4e>
 80057d8:	4b25      	ldr	r3, [pc, #148]	; (8005870 <pbuf_copy_partial+0xd4>)
 80057da:	f240 420b 	movw	r2, #1035	; 0x40b
 80057de:	4927      	ldr	r1, [pc, #156]	; (800587c <pbuf_copy_partial+0xe0>)
 80057e0:	4825      	ldr	r0, [pc, #148]	; (8005878 <pbuf_copy_partial+0xdc>)
 80057e2:	f007 ffef 	bl	800d7c4 <iprintf>
 80057e6:	2300      	movs	r3, #0
 80057e8:	e03e      	b.n	8005868 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	61fb      	str	r3, [r7, #28]
 80057ee:	e034      	b.n	800585a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80057f0:	88bb      	ldrh	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <pbuf_copy_partial+0x70>
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	895b      	ldrh	r3, [r3, #10]
 80057fa:	88ba      	ldrh	r2, [r7, #4]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d305      	bcc.n	800580c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	895b      	ldrh	r3, [r3, #10]
 8005804:	88ba      	ldrh	r2, [r7, #4]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	80bb      	strh	r3, [r7, #4]
 800580a:	e023      	b.n	8005854 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	895a      	ldrh	r2, [r3, #10]
 8005810:	88bb      	ldrh	r3, [r7, #4]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005816:	8b3a      	ldrh	r2, [r7, #24]
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	429a      	cmp	r2, r3
 800581c:	d901      	bls.n	8005822 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800581e:	88fb      	ldrh	r3, [r7, #6]
 8005820:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005822:	8b7b      	ldrh	r3, [r7, #26]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	18d0      	adds	r0, r2, r3
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	88bb      	ldrh	r3, [r7, #4]
 800582e:	4413      	add	r3, r2
 8005830:	8b3a      	ldrh	r2, [r7, #24]
 8005832:	4619      	mov	r1, r3
 8005834:	f007 ffb0 	bl	800d798 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005838:	8afa      	ldrh	r2, [r7, #22]
 800583a:	8b3b      	ldrh	r3, [r7, #24]
 800583c:	4413      	add	r3, r2
 800583e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005840:	8b7a      	ldrh	r2, [r7, #26]
 8005842:	8b3b      	ldrh	r3, [r7, #24]
 8005844:	4413      	add	r3, r2
 8005846:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005848:	88fa      	ldrh	r2, [r7, #6]
 800584a:	8b3b      	ldrh	r3, [r7, #24]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005850:	2300      	movs	r3, #0
 8005852:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	61fb      	str	r3, [r7, #28]
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <pbuf_copy_partial+0xca>
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1c4      	bne.n	80057f0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005866:	8afb      	ldrh	r3, [r7, #22]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3720      	adds	r7, #32
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	0800ee48 	.word	0x0800ee48
 8005874:	0800f190 	.word	0x0800f190
 8005878:	0800eea8 	.word	0x0800eea8
 800587c:	0800f1b0 	.word	0x0800f1b0

08005880 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	603a      	str	r2, [r7, #0]
 800588a:	71fb      	strb	r3, [r7, #7]
 800588c:	460b      	mov	r3, r1
 800588e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	8919      	ldrh	r1, [r3, #8]
 8005894:	88ba      	ldrh	r2, [r7, #4]
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff fab1 	bl	8004e00 <pbuf_alloc>
 800589e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <pbuf_clone+0x2a>
    return NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e011      	b.n	80058ce <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff fea3 	bl	80055f8 <pbuf_copy>
 80058b2:	4603      	mov	r3, r0
 80058b4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80058b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <pbuf_clone+0x4c>
 80058be:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <pbuf_clone+0x58>)
 80058c0:	f240 5224 	movw	r2, #1316	; 0x524
 80058c4:	4905      	ldr	r1, [pc, #20]	; (80058dc <pbuf_clone+0x5c>)
 80058c6:	4806      	ldr	r0, [pc, #24]	; (80058e0 <pbuf_clone+0x60>)
 80058c8:	f007 ff7c 	bl	800d7c4 <iprintf>
  return q;
 80058cc:	68fb      	ldr	r3, [r7, #12]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	0800ee48 	.word	0x0800ee48
 80058dc:	0800f2bc 	.word	0x0800f2bc
 80058e0:	0800eea8 	.word	0x0800eea8

080058e4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80058e8:	f007 ff84 	bl	800d7f4 <rand>
 80058ec:	4603      	mov	r3, r0
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	4b01      	ldr	r3, [pc, #4]	; (8005904 <tcp_init+0x20>)
 80058fe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005900:	bf00      	nop
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000020 	.word	0x20000020

08005908 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	7d1b      	ldrb	r3, [r3, #20]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d105      	bne.n	8005924 <tcp_free+0x1c>
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <tcp_free+0x2c>)
 800591a:	22d4      	movs	r2, #212	; 0xd4
 800591c:	4906      	ldr	r1, [pc, #24]	; (8005938 <tcp_free+0x30>)
 800591e:	4807      	ldr	r0, [pc, #28]	; (800593c <tcp_free+0x34>)
 8005920:	f007 ff50 	bl	800d7c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	2001      	movs	r0, #1
 8005928:	f7fe fed8 	bl	80046dc <memp_free>
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	0800f348 	.word	0x0800f348
 8005938:	0800f378 	.word	0x0800f378
 800593c:	0800f38c 	.word	0x0800f38c

08005940 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	7d1b      	ldrb	r3, [r3, #20]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d105      	bne.n	800595c <tcp_free_listen+0x1c>
 8005950:	4b06      	ldr	r3, [pc, #24]	; (800596c <tcp_free_listen+0x2c>)
 8005952:	22df      	movs	r2, #223	; 0xdf
 8005954:	4906      	ldr	r1, [pc, #24]	; (8005970 <tcp_free_listen+0x30>)
 8005956:	4807      	ldr	r0, [pc, #28]	; (8005974 <tcp_free_listen+0x34>)
 8005958:	f007 ff34 	bl	800d7c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	2002      	movs	r0, #2
 8005960:	f7fe febc 	bl	80046dc <memp_free>
}
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	0800f348 	.word	0x0800f348
 8005970:	0800f3b4 	.word	0x0800f3b4
 8005974:	0800f38c 	.word	0x0800f38c

08005978 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800597c:	f000 fea2 	bl	80066c4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005980:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <tcp_tmr+0x28>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	b2da      	uxtb	r2, r3
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <tcp_tmr+0x28>)
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <tcp_tmr+0x28>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005998:	f000 fb54 	bl	8006044 <tcp_slowtmr>
  }
}
 800599c:	bf00      	nop
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	2000a419 	.word	0x2000a419

080059a4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <tcp_remove_listener+0x1c>
 80059b4:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <tcp_remove_listener+0x48>)
 80059b6:	22ff      	movs	r2, #255	; 0xff
 80059b8:	490d      	ldr	r1, [pc, #52]	; (80059f0 <tcp_remove_listener+0x4c>)
 80059ba:	480e      	ldr	r0, [pc, #56]	; (80059f4 <tcp_remove_listener+0x50>)
 80059bc:	f007 ff02 	bl	800d7c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	e00a      	b.n	80059dc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d102      	bne.n	80059d6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f1      	bne.n	80059c6 <tcp_remove_listener+0x22>
    }
  }
}
 80059e2:	bf00      	nop
 80059e4:	bf00      	nop
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	0800f348 	.word	0x0800f348
 80059f0:	0800f3d0 	.word	0x0800f3d0
 80059f4:	0800f38c 	.word	0x0800f38c

080059f8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <tcp_listen_closed+0x1c>
 8005a06:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <tcp_listen_closed+0x60>)
 8005a08:	f240 1211 	movw	r2, #273	; 0x111
 8005a0c:	4913      	ldr	r1, [pc, #76]	; (8005a5c <tcp_listen_closed+0x64>)
 8005a0e:	4814      	ldr	r0, [pc, #80]	; (8005a60 <tcp_listen_closed+0x68>)
 8005a10:	f007 fed8 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	7d1b      	ldrb	r3, [r3, #20]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d006      	beq.n	8005a2a <tcp_listen_closed+0x32>
 8005a1c:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <tcp_listen_closed+0x60>)
 8005a1e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005a22:	4910      	ldr	r1, [pc, #64]	; (8005a64 <tcp_listen_closed+0x6c>)
 8005a24:	480e      	ldr	r0, [pc, #56]	; (8005a60 <tcp_listen_closed+0x68>)
 8005a26:	f007 fecd 	bl	800d7c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	e00b      	b.n	8005a48 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005a30:	4a0d      	ldr	r2, [pc, #52]	; (8005a68 <tcp_listen_closed+0x70>)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff ffb1 	bl	80059a4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3301      	adds	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d9f0      	bls.n	8005a30 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	0800f348 	.word	0x0800f348
 8005a5c:	0800f3f8 	.word	0x0800f3f8
 8005a60:	0800f38c 	.word	0x0800f38c
 8005a64:	0800f404 	.word	0x0800f404
 8005a68:	08011320 	.word	0x08011320

08005a6c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005a6c:	b5b0      	push	{r4, r5, r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af04      	add	r7, sp, #16
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <tcp_close_shutdown+0x20>
 8005a7e:	4b63      	ldr	r3, [pc, #396]	; (8005c0c <tcp_close_shutdown+0x1a0>)
 8005a80:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005a84:	4962      	ldr	r1, [pc, #392]	; (8005c10 <tcp_close_shutdown+0x1a4>)
 8005a86:	4863      	ldr	r0, [pc, #396]	; (8005c14 <tcp_close_shutdown+0x1a8>)
 8005a88:	f007 fe9c 	bl	800d7c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d066      	beq.n	8005b60 <tcp_close_shutdown+0xf4>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	7d1b      	ldrb	r3, [r3, #20]
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d003      	beq.n	8005aa2 <tcp_close_shutdown+0x36>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	7d1b      	ldrb	r3, [r3, #20]
 8005a9e:	2b07      	cmp	r3, #7
 8005aa0:	d15e      	bne.n	8005b60 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <tcp_close_shutdown+0x48>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005ab2:	d055      	beq.n	8005b60 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8b5b      	ldrh	r3, [r3, #26]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d106      	bne.n	8005ace <tcp_close_shutdown+0x62>
 8005ac0:	4b52      	ldr	r3, [pc, #328]	; (8005c0c <tcp_close_shutdown+0x1a0>)
 8005ac2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005ac6:	4954      	ldr	r1, [pc, #336]	; (8005c18 <tcp_close_shutdown+0x1ac>)
 8005ac8:	4852      	ldr	r0, [pc, #328]	; (8005c14 <tcp_close_shutdown+0x1a8>)
 8005aca:	f007 fe7b 	bl	800d7c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005ad6:	687d      	ldr	r5, [r7, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	8ad2      	ldrh	r2, [r2, #22]
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	8b09      	ldrh	r1, [r1, #24]
 8005ae4:	9102      	str	r1, [sp, #8]
 8005ae6:	9201      	str	r2, [sp, #4]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	462b      	mov	r3, r5
 8005aec:	4622      	mov	r2, r4
 8005aee:	4601      	mov	r1, r0
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f004 fe91 	bl	800a818 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f001 f8c6 	bl	8006c88 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005afc:	4b47      	ldr	r3, [pc, #284]	; (8005c1c <tcp_close_shutdown+0x1b0>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d105      	bne.n	8005b12 <tcp_close_shutdown+0xa6>
 8005b06:	4b45      	ldr	r3, [pc, #276]	; (8005c1c <tcp_close_shutdown+0x1b0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4a43      	ldr	r2, [pc, #268]	; (8005c1c <tcp_close_shutdown+0x1b0>)
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	e013      	b.n	8005b3a <tcp_close_shutdown+0xce>
 8005b12:	4b42      	ldr	r3, [pc, #264]	; (8005c1c <tcp_close_shutdown+0x1b0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	e00c      	b.n	8005b34 <tcp_close_shutdown+0xc8>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d104      	bne.n	8005b2e <tcp_close_shutdown+0xc2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	60da      	str	r2, [r3, #12]
 8005b2c:	e005      	b.n	8005b3a <tcp_close_shutdown+0xce>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1ef      	bne.n	8005b1a <tcp_close_shutdown+0xae>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	60da      	str	r2, [r3, #12]
 8005b40:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <tcp_close_shutdown+0x1b4>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005b46:	4b37      	ldr	r3, [pc, #220]	; (8005c24 <tcp_close_shutdown+0x1b8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d102      	bne.n	8005b56 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005b50:	f003 fd5e 	bl	8009610 <tcp_trigger_input_pcb_close>
 8005b54:	e002      	b.n	8005b5c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff fed6 	bl	8005908 <tcp_free>
      }
      return ERR_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	e050      	b.n	8005c02 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	7d1b      	ldrb	r3, [r3, #20]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d03b      	beq.n	8005be0 <tcp_close_shutdown+0x174>
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	dc44      	bgt.n	8005bf6 <tcp_close_shutdown+0x18a>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <tcp_close_shutdown+0x10a>
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d02a      	beq.n	8005bca <tcp_close_shutdown+0x15e>
 8005b74:	e03f      	b.n	8005bf6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8adb      	ldrh	r3, [r3, #22]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d021      	beq.n	8005bc2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005b7e:	4b2a      	ldr	r3, [pc, #168]	; (8005c28 <tcp_close_shutdown+0x1bc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d105      	bne.n	8005b94 <tcp_close_shutdown+0x128>
 8005b88:	4b27      	ldr	r3, [pc, #156]	; (8005c28 <tcp_close_shutdown+0x1bc>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	4a26      	ldr	r2, [pc, #152]	; (8005c28 <tcp_close_shutdown+0x1bc>)
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e013      	b.n	8005bbc <tcp_close_shutdown+0x150>
 8005b94:	4b24      	ldr	r3, [pc, #144]	; (8005c28 <tcp_close_shutdown+0x1bc>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	e00c      	b.n	8005bb6 <tcp_close_shutdown+0x14a>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d104      	bne.n	8005bb0 <tcp_close_shutdown+0x144>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	60da      	str	r2, [r3, #12]
 8005bae:	e005      	b.n	8005bbc <tcp_close_shutdown+0x150>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1ef      	bne.n	8005b9c <tcp_close_shutdown+0x130>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff fea0 	bl	8005908 <tcp_free>
      break;
 8005bc8:	e01a      	b.n	8005c00 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff ff14 	bl	80059f8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	4816      	ldr	r0, [pc, #88]	; (8005c2c <tcp_close_shutdown+0x1c0>)
 8005bd4:	f001 f8a8 	bl	8006d28 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff feb1 	bl	8005940 <tcp_free_listen>
      break;
 8005bde:	e00f      	b.n	8005c00 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	480e      	ldr	r0, [pc, #56]	; (8005c1c <tcp_close_shutdown+0x1b0>)
 8005be4:	f001 f8a0 	bl	8006d28 <tcp_pcb_remove>
 8005be8:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <tcp_close_shutdown+0x1b4>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff fe8a 	bl	8005908 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005bf4:	e004      	b.n	8005c00 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f81a 	bl	8005c30 <tcp_close_shutdown_fin>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	e000      	b.n	8005c02 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bdb0      	pop	{r4, r5, r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	0800f348 	.word	0x0800f348
 8005c10:	0800f41c 	.word	0x0800f41c
 8005c14:	0800f38c 	.word	0x0800f38c
 8005c18:	0800f43c 	.word	0x0800f43c
 8005c1c:	2000a410 	.word	0x2000a410
 8005c20:	2000a418 	.word	0x2000a418
 8005c24:	2000a450 	.word	0x2000a450
 8005c28:	2000a408 	.word	0x2000a408
 8005c2c:	2000a40c 	.word	0x2000a40c

08005c30 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <tcp_close_shutdown_fin+0x1c>
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <tcp_close_shutdown_fin+0xc8>)
 8005c40:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005c44:	492d      	ldr	r1, [pc, #180]	; (8005cfc <tcp_close_shutdown_fin+0xcc>)
 8005c46:	482e      	ldr	r0, [pc, #184]	; (8005d00 <tcp_close_shutdown_fin+0xd0>)
 8005c48:	f007 fdbc 	bl	800d7c4 <iprintf>

  switch (pcb->state) {
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	7d1b      	ldrb	r3, [r3, #20]
 8005c50:	2b07      	cmp	r3, #7
 8005c52:	d020      	beq.n	8005c96 <tcp_close_shutdown_fin+0x66>
 8005c54:	2b07      	cmp	r3, #7
 8005c56:	dc2b      	bgt.n	8005cb0 <tcp_close_shutdown_fin+0x80>
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d002      	beq.n	8005c62 <tcp_close_shutdown_fin+0x32>
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d00d      	beq.n	8005c7c <tcp_close_shutdown_fin+0x4c>
 8005c60:	e026      	b.n	8005cb0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f003 fee6 	bl	8009a34 <tcp_send_fin>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11f      	bne.n	8005cb4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2205      	movs	r2, #5
 8005c78:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005c7a:	e01b      	b.n	8005cb4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f003 fed9 	bl	8009a34 <tcp_send_fin>
 8005c82:	4603      	mov	r3, r0
 8005c84:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d114      	bne.n	8005cb8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2205      	movs	r2, #5
 8005c92:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005c94:	e010      	b.n	8005cb8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f003 fecc 	bl	8009a34 <tcp_send_fin>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2209      	movs	r2, #9
 8005cac:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005cae:	e005      	b.n	8005cbc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e01c      	b.n	8005cee <tcp_close_shutdown_fin+0xbe>
      break;
 8005cb4:	bf00      	nop
 8005cb6:	e002      	b.n	8005cbe <tcp_close_shutdown_fin+0x8e>
      break;
 8005cb8:	bf00      	nop
 8005cba:	e000      	b.n	8005cbe <tcp_close_shutdown_fin+0x8e>
      break;
 8005cbc:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d103      	bne.n	8005cce <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f003 fff2 	bl	8009cb0 <tcp_output>
 8005ccc:	e00d      	b.n	8005cea <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d108      	bne.n	8005cea <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8b5b      	ldrh	r3, [r3, #26]
 8005cdc:	f043 0308 	orr.w	r3, r3, #8
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e001      	b.n	8005cee <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	0800f348 	.word	0x0800f348
 8005cfc:	0800f3f8 	.word	0x0800f3f8
 8005d00:	0800f38c 	.word	0x0800f38c

08005d04 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <tcp_close+0x22>
 8005d12:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <tcp_close+0x4c>)
 8005d14:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005d18:	490e      	ldr	r1, [pc, #56]	; (8005d54 <tcp_close+0x50>)
 8005d1a:	480f      	ldr	r0, [pc, #60]	; (8005d58 <tcp_close+0x54>)
 8005d1c:	f007 fd52 	bl	800d7c4 <iprintf>
 8005d20:	f06f 030f 	mvn.w	r3, #15
 8005d24:	e00f      	b.n	8005d46 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	7d1b      	ldrb	r3, [r3, #20]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d006      	beq.n	8005d3c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8b5b      	ldrh	r3, [r3, #26]
 8005d32:	f043 0310 	orr.w	r3, r3, #16
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7ff fe94 	bl	8005a6c <tcp_close_shutdown>
 8005d44:	4603      	mov	r3, r0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	0800f348 	.word	0x0800f348
 8005d54:	0800f458 	.word	0x0800f458
 8005d58:	0800f38c 	.word	0x0800f38c

08005d5c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08e      	sub	sp, #56	; 0x38
 8005d60:	af04      	add	r7, sp, #16
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d107      	bne.n	8005d7c <tcp_abandon+0x20>
 8005d6c:	4b52      	ldr	r3, [pc, #328]	; (8005eb8 <tcp_abandon+0x15c>)
 8005d6e:	f240 223d 	movw	r2, #573	; 0x23d
 8005d72:	4952      	ldr	r1, [pc, #328]	; (8005ebc <tcp_abandon+0x160>)
 8005d74:	4852      	ldr	r0, [pc, #328]	; (8005ec0 <tcp_abandon+0x164>)
 8005d76:	f007 fd25 	bl	800d7c4 <iprintf>
 8005d7a:	e099      	b.n	8005eb0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	7d1b      	ldrb	r3, [r3, #20]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d106      	bne.n	8005d92 <tcp_abandon+0x36>
 8005d84:	4b4c      	ldr	r3, [pc, #304]	; (8005eb8 <tcp_abandon+0x15c>)
 8005d86:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005d8a:	494e      	ldr	r1, [pc, #312]	; (8005ec4 <tcp_abandon+0x168>)
 8005d8c:	484c      	ldr	r0, [pc, #304]	; (8005ec0 <tcp_abandon+0x164>)
 8005d8e:	f007 fd19 	bl	800d7c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	7d1b      	ldrb	r3, [r3, #20]
 8005d96:	2b0a      	cmp	r3, #10
 8005d98:	d107      	bne.n	8005daa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	484a      	ldr	r0, [pc, #296]	; (8005ec8 <tcp_abandon+0x16c>)
 8005d9e:	f000 ffc3 	bl	8006d28 <tcp_pcb_remove>
    tcp_free(pcb);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff fdb0 	bl	8005908 <tcp_free>
 8005da8:	e082      	b.n	8005eb0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	7d1b      	ldrb	r3, [r3, #20]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d126      	bne.n	8005e22 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8adb      	ldrh	r3, [r3, #22]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d02e      	beq.n	8005e3a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005ddc:	4b3b      	ldr	r3, [pc, #236]	; (8005ecc <tcp_abandon+0x170>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d105      	bne.n	8005df2 <tcp_abandon+0x96>
 8005de6:	4b39      	ldr	r3, [pc, #228]	; (8005ecc <tcp_abandon+0x170>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	4a37      	ldr	r2, [pc, #220]	; (8005ecc <tcp_abandon+0x170>)
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	e013      	b.n	8005e1a <tcp_abandon+0xbe>
 8005df2:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <tcp_abandon+0x170>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	e00c      	b.n	8005e14 <tcp_abandon+0xb8>
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d104      	bne.n	8005e0e <tcp_abandon+0xb2>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	60da      	str	r2, [r3, #12]
 8005e0c:	e005      	b.n	8005e1a <tcp_abandon+0xbe>
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1ef      	bne.n	8005dfa <tcp_abandon+0x9e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	60da      	str	r2, [r3, #12]
 8005e20:	e00b      	b.n	8005e3a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	8adb      	ldrh	r3, [r3, #22]
 8005e2a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4828      	ldr	r0, [pc, #160]	; (8005ed0 <tcp_abandon+0x174>)
 8005e30:	f000 ff7a 	bl	8006d28 <tcp_pcb_remove>
 8005e34:	4b27      	ldr	r3, [pc, #156]	; (8005ed4 <tcp_abandon+0x178>)
 8005e36:	2201      	movs	r2, #1
 8005e38:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d004      	beq.n	8005e4c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fd1c 	bl	8006884 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fd13 	bl	8006884 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fd0a 	bl	8006884 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00e      	beq.n	8005e94 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	8b12      	ldrh	r2, [r2, #24]
 8005e80:	9202      	str	r2, [sp, #8]
 8005e82:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005e84:	9201      	str	r2, [sp, #4]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	69b9      	ldr	r1, [r7, #24]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f004 fcc2 	bl	800a818 <tcp_rst>
    }
    last_state = pcb->state;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	7d1b      	ldrb	r3, [r3, #20]
 8005e98:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff fd34 	bl	8005908 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d004      	beq.n	8005eb0 <tcp_abandon+0x154>
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f06f 010c 	mvn.w	r1, #12
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	4798      	blx	r3
  }
}
 8005eb0:	3728      	adds	r7, #40	; 0x28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	0800f348 	.word	0x0800f348
 8005ebc:	0800f48c 	.word	0x0800f48c
 8005ec0:	0800f38c 	.word	0x0800f38c
 8005ec4:	0800f4a8 	.word	0x0800f4a8
 8005ec8:	2000a414 	.word	0x2000a414
 8005ecc:	2000a408 	.word	0x2000a408
 8005ed0:	2000a410 	.word	0x2000a410
 8005ed4:	2000a418 	.word	0x2000a418

08005ed8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff ff3a 	bl	8005d5c <tcp_abandon>
}
 8005ee8:	bf00      	nop
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <tcp_update_rcv_ann_wnd+0x1c>
 8005efe:	4b25      	ldr	r3, [pc, #148]	; (8005f94 <tcp_update_rcv_ann_wnd+0xa4>)
 8005f00:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005f04:	4924      	ldr	r1, [pc, #144]	; (8005f98 <tcp_update_rcv_ann_wnd+0xa8>)
 8005f06:	4825      	ldr	r0, [pc, #148]	; (8005f9c <tcp_update_rcv_ann_wnd+0xac>)
 8005f08:	f007 fc5c 	bl	800d7c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005f14:	4413      	add	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005f20:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005f24:	bf28      	it	cs
 8005f26:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005f2a:	b292      	uxth	r2, r2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	db08      	blt.n	8005f48 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	e020      	b.n	8005f8a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dd03      	ble.n	8005f5e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f5c:	e014      	b.n	8005f88 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f70:	d306      	bcc.n	8005f80 <tcp_update_rcv_ann_wnd+0x90>
 8005f72:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <tcp_update_rcv_ann_wnd+0xa4>)
 8005f74:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005f78:	4909      	ldr	r1, [pc, #36]	; (8005fa0 <tcp_update_rcv_ann_wnd+0xb0>)
 8005f7a:	4808      	ldr	r0, [pc, #32]	; (8005f9c <tcp_update_rcv_ann_wnd+0xac>)
 8005f7c:	f007 fc22 	bl	800d7c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005f88:	2300      	movs	r3, #0
  }
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	0800f348 	.word	0x0800f348
 8005f98:	0800f5a4 	.word	0x0800f5a4
 8005f9c:	0800f38c 	.word	0x0800f38c
 8005fa0:	0800f5c8 	.word	0x0800f5c8

08005fa4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d107      	bne.n	8005fc6 <tcp_recved+0x22>
 8005fb6:	4b1f      	ldr	r3, [pc, #124]	; (8006034 <tcp_recved+0x90>)
 8005fb8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005fbc:	491e      	ldr	r1, [pc, #120]	; (8006038 <tcp_recved+0x94>)
 8005fbe:	481f      	ldr	r0, [pc, #124]	; (800603c <tcp_recved+0x98>)
 8005fc0:	f007 fc00 	bl	800d7c4 <iprintf>
 8005fc4:	e032      	b.n	800602c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	7d1b      	ldrb	r3, [r3, #20]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d106      	bne.n	8005fdc <tcp_recved+0x38>
 8005fce:	4b19      	ldr	r3, [pc, #100]	; (8006034 <tcp_recved+0x90>)
 8005fd0:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005fd4:	491a      	ldr	r1, [pc, #104]	; (8006040 <tcp_recved+0x9c>)
 8005fd6:	4819      	ldr	r0, [pc, #100]	; (800603c <tcp_recved+0x98>)
 8005fd8:	f007 fbf4 	bl	800d7c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005fe0:	887b      	ldrh	r3, [r7, #2]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005fe6:	89fb      	ldrh	r3, [r7, #14]
 8005fe8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005fec:	d804      	bhi.n	8005ff8 <tcp_recved+0x54>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff2:	89fa      	ldrh	r2, [r7, #14]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d204      	bcs.n	8006002 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005ffe:	851a      	strh	r2, [r3, #40]	; 0x28
 8006000:	e002      	b.n	8006008 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	89fa      	ldrh	r2, [r7, #14]
 8006006:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff ff71 	bl	8005ef0 <tcp_update_rcv_ann_wnd>
 800600e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006016:	d309      	bcc.n	800602c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8b5b      	ldrh	r3, [r3, #26]
 800601c:	f043 0302 	orr.w	r3, r3, #2
 8006020:	b29a      	uxth	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f003 fe42 	bl	8009cb0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	0800f348 	.word	0x0800f348
 8006038:	0800f5e4 	.word	0x0800f5e4
 800603c:	0800f38c 	.word	0x0800f38c
 8006040:	0800f5fc 	.word	0x0800f5fc

08006044 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006044:	b5b0      	push	{r4, r5, r7, lr}
 8006046:	b090      	sub	sp, #64	; 0x40
 8006048:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006050:	4b94      	ldr	r3, [pc, #592]	; (80062a4 <tcp_slowtmr+0x260>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3301      	adds	r3, #1
 8006056:	4a93      	ldr	r2, [pc, #588]	; (80062a4 <tcp_slowtmr+0x260>)
 8006058:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800605a:	4b93      	ldr	r3, [pc, #588]	; (80062a8 <tcp_slowtmr+0x264>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	3301      	adds	r3, #1
 8006060:	b2da      	uxtb	r2, r3
 8006062:	4b91      	ldr	r3, [pc, #580]	; (80062a8 <tcp_slowtmr+0x264>)
 8006064:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006066:	2300      	movs	r3, #0
 8006068:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800606a:	4b90      	ldr	r3, [pc, #576]	; (80062ac <tcp_slowtmr+0x268>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006070:	e29d      	b.n	80065ae <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	7d1b      	ldrb	r3, [r3, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <tcp_slowtmr+0x44>
 800607a:	4b8d      	ldr	r3, [pc, #564]	; (80062b0 <tcp_slowtmr+0x26c>)
 800607c:	f240 42be 	movw	r2, #1214	; 0x4be
 8006080:	498c      	ldr	r1, [pc, #560]	; (80062b4 <tcp_slowtmr+0x270>)
 8006082:	488d      	ldr	r0, [pc, #564]	; (80062b8 <tcp_slowtmr+0x274>)
 8006084:	f007 fb9e 	bl	800d7c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	7d1b      	ldrb	r3, [r3, #20]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d106      	bne.n	800609e <tcp_slowtmr+0x5a>
 8006090:	4b87      	ldr	r3, [pc, #540]	; (80062b0 <tcp_slowtmr+0x26c>)
 8006092:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006096:	4989      	ldr	r1, [pc, #548]	; (80062bc <tcp_slowtmr+0x278>)
 8006098:	4887      	ldr	r0, [pc, #540]	; (80062b8 <tcp_slowtmr+0x274>)
 800609a:	f007 fb93 	bl	800d7c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	7d1b      	ldrb	r3, [r3, #20]
 80060a2:	2b0a      	cmp	r3, #10
 80060a4:	d106      	bne.n	80060b4 <tcp_slowtmr+0x70>
 80060a6:	4b82      	ldr	r3, [pc, #520]	; (80062b0 <tcp_slowtmr+0x26c>)
 80060a8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80060ac:	4984      	ldr	r1, [pc, #528]	; (80062c0 <tcp_slowtmr+0x27c>)
 80060ae:	4882      	ldr	r0, [pc, #520]	; (80062b8 <tcp_slowtmr+0x274>)
 80060b0:	f007 fb88 	bl	800d7c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	7f9a      	ldrb	r2, [r3, #30]
 80060b8:	4b7b      	ldr	r3, [pc, #492]	; (80062a8 <tcp_slowtmr+0x264>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d105      	bne.n	80060cc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80060ca:	e270      	b.n	80065ae <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80060cc:	4b76      	ldr	r3, [pc, #472]	; (80062a8 <tcp_slowtmr+0x264>)
 80060ce:	781a      	ldrb	r2, [r3, #0]
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	7d1b      	ldrb	r3, [r3, #20]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d10a      	bne.n	80060fe <tcp_slowtmr+0xba>
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060ee:	2b05      	cmp	r3, #5
 80060f0:	d905      	bls.n	80060fe <tcp_slowtmr+0xba>
      ++pcb_remove;
 80060f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f6:	3301      	adds	r3, #1
 80060f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80060fc:	e11e      	b.n	800633c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006104:	2b0b      	cmp	r3, #11
 8006106:	d905      	bls.n	8006114 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800610c:	3301      	adds	r3, #1
 800610e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006112:	e113      	b.n	800633c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006116:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800611a:	2b00      	cmp	r3, #0
 800611c:	d075      	beq.n	800620a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006122:	2b00      	cmp	r3, #0
 8006124:	d006      	beq.n	8006134 <tcp_slowtmr+0xf0>
 8006126:	4b62      	ldr	r3, [pc, #392]	; (80062b0 <tcp_slowtmr+0x26c>)
 8006128:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800612c:	4965      	ldr	r1, [pc, #404]	; (80062c4 <tcp_slowtmr+0x280>)
 800612e:	4862      	ldr	r0, [pc, #392]	; (80062b8 <tcp_slowtmr+0x274>)
 8006130:	f007 fb48 	bl	800d7c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <tcp_slowtmr+0x106>
 800613c:	4b5c      	ldr	r3, [pc, #368]	; (80062b0 <tcp_slowtmr+0x26c>)
 800613e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006142:	4961      	ldr	r1, [pc, #388]	; (80062c8 <tcp_slowtmr+0x284>)
 8006144:	485c      	ldr	r0, [pc, #368]	; (80062b8 <tcp_slowtmr+0x274>)
 8006146:	f007 fb3d 	bl	800d7c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006150:	2b0b      	cmp	r3, #11
 8006152:	d905      	bls.n	8006160 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006158:	3301      	adds	r3, #1
 800615a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800615e:	e0ed      	b.n	800633c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006162:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006166:	3b01      	subs	r3, #1
 8006168:	4a58      	ldr	r2, [pc, #352]	; (80062cc <tcp_slowtmr+0x288>)
 800616a:	5cd3      	ldrb	r3, [r2, r3]
 800616c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006174:	7c7a      	ldrb	r2, [r7, #17]
 8006176:	429a      	cmp	r2, r3
 8006178:	d907      	bls.n	800618a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006180:	3301      	adds	r3, #1
 8006182:	b2da      	uxtb	r2, r3
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006190:	7c7a      	ldrb	r2, [r7, #17]
 8006192:	429a      	cmp	r2, r3
 8006194:	f200 80d2 	bhi.w	800633c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006198:	2301      	movs	r3, #1
 800619a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d108      	bne.n	80061b8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80061a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061a8:	f004 fc2a 	bl	800aa00 <tcp_zero_window_probe>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d014      	beq.n	80061dc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80061b2:	2300      	movs	r3, #0
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	e011      	b.n	80061dc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061be:	4619      	mov	r1, r3
 80061c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061c2:	f003 faef 	bl	80097a4 <tcp_split_unsent_seg>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d107      	bne.n	80061dc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80061cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061ce:	f003 fd6f 	bl	8009cb0 <tcp_output>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 80ac 	beq.w	800633c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80061e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80061f2:	2b06      	cmp	r3, #6
 80061f4:	f200 80a2 	bhi.w	800633c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80061fe:	3301      	adds	r3, #1
 8006200:	b2da      	uxtb	r2, r3
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006208:	e098      	b.n	800633c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006210:	2b00      	cmp	r3, #0
 8006212:	db0f      	blt.n	8006234 <tcp_slowtmr+0x1f0>
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800621a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800621e:	4293      	cmp	r3, r2
 8006220:	d008      	beq.n	8006234 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006228:	b29b      	uxth	r3, r3
 800622a:	3301      	adds	r3, #1
 800622c:	b29b      	uxth	r3, r3
 800622e:	b21a      	sxth	r2, r3
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006240:	429a      	cmp	r2, r3
 8006242:	db7b      	blt.n	800633c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006246:	f004 f825 	bl	800a294 <tcp_rexmit_rto_prepare>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <tcp_slowtmr+0x21c>
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006254:	2b00      	cmp	r3, #0
 8006256:	d171      	bne.n	800633c <tcp_slowtmr+0x2f8>
 8006258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d06d      	beq.n	800633c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	7d1b      	ldrb	r3, [r3, #20]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d03a      	beq.n	80062de <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800626e:	2b0c      	cmp	r3, #12
 8006270:	bf28      	it	cs
 8006272:	230c      	movcs	r3, #12
 8006274:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800627c:	10db      	asrs	r3, r3, #3
 800627e:	b21b      	sxth	r3, r3
 8006280:	461a      	mov	r2, r3
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006288:	4413      	add	r3, r2
 800628a:	7efa      	ldrb	r2, [r7, #27]
 800628c:	4910      	ldr	r1, [pc, #64]	; (80062d0 <tcp_slowtmr+0x28c>)
 800628e:	5c8a      	ldrb	r2, [r1, r2]
 8006290:	4093      	lsls	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800629a:	4293      	cmp	r3, r2
 800629c:	dc1a      	bgt.n	80062d4 <tcp_slowtmr+0x290>
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	b21a      	sxth	r2, r3
 80062a2:	e019      	b.n	80062d8 <tcp_slowtmr+0x294>
 80062a4:	2000a404 	.word	0x2000a404
 80062a8:	2000a41a 	.word	0x2000a41a
 80062ac:	2000a410 	.word	0x2000a410
 80062b0:	0800f348 	.word	0x0800f348
 80062b4:	0800f68c 	.word	0x0800f68c
 80062b8:	0800f38c 	.word	0x0800f38c
 80062bc:	0800f6b8 	.word	0x0800f6b8
 80062c0:	0800f6e4 	.word	0x0800f6e4
 80062c4:	0800f714 	.word	0x0800f714
 80062c8:	0800f748 	.word	0x0800f748
 80062cc:	08011318 	.word	0x08011318
 80062d0:	08011308 	.word	0x08011308
 80062d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	2200      	movs	r2, #0
 80062e2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80062ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80062f0:	4293      	cmp	r3, r2
 80062f2:	bf28      	it	cs
 80062f4:	4613      	movcs	r3, r2
 80062f6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80062f8:	8a7b      	ldrh	r3, [r7, #18]
 80062fa:	085b      	lsrs	r3, r3, #1
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006300:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006306:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	b29b      	uxth	r3, r3
 8006312:	429a      	cmp	r2, r3
 8006314:	d206      	bcs.n	8006324 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006320:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	2200      	movs	r2, #0
 8006332:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006336:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006338:	f004 f81c 	bl	800a374 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	7d1b      	ldrb	r3, [r3, #20]
 8006340:	2b06      	cmp	r3, #6
 8006342:	d111      	bne.n	8006368 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	8b5b      	ldrh	r3, [r3, #26]
 8006348:	f003 0310 	and.w	r3, r3, #16
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006350:	4b9c      	ldr	r3, [pc, #624]	; (80065c4 <tcp_slowtmr+0x580>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b28      	cmp	r3, #40	; 0x28
 800635c:	d904      	bls.n	8006368 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800635e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006362:	3301      	adds	r3, #1
 8006364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	7a5b      	ldrb	r3, [r3, #9]
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d04a      	beq.n	800640a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006378:	2b04      	cmp	r3, #4
 800637a:	d003      	beq.n	8006384 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006380:	2b07      	cmp	r3, #7
 8006382:	d142      	bne.n	800640a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006384:	4b8f      	ldr	r3, [pc, #572]	; (80065c4 <tcp_slowtmr+0x580>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006394:	4b8c      	ldr	r3, [pc, #560]	; (80065c8 <tcp_slowtmr+0x584>)
 8006396:	440b      	add	r3, r1
 8006398:	498c      	ldr	r1, [pc, #560]	; (80065cc <tcp_slowtmr+0x588>)
 800639a:	fba1 1303 	umull	r1, r3, r1, r3
 800639e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d90a      	bls.n	80063ba <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80063a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063a8:	3301      	adds	r3, #1
 80063aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80063ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063b2:	3301      	adds	r3, #1
 80063b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80063b8:	e027      	b.n	800640a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80063ba:	4b82      	ldr	r3, [pc, #520]	; (80065c4 <tcp_slowtmr+0x580>)
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80063d0:	4618      	mov	r0, r3
 80063d2:	4b7f      	ldr	r3, [pc, #508]	; (80065d0 <tcp_slowtmr+0x58c>)
 80063d4:	fb00 f303 	mul.w	r3, r0, r3
 80063d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80063da:	497c      	ldr	r1, [pc, #496]	; (80065cc <tcp_slowtmr+0x588>)
 80063dc:	fba1 1303 	umull	r1, r3, r1, r3
 80063e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d911      	bls.n	800640a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80063e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063e8:	f004 faca 	bl	800a980 <tcp_keepalive>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80063f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d107      	bne.n	800640a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006400:	3301      	adds	r3, #1
 8006402:	b2da      	uxtb	r2, r3
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640e:	2b00      	cmp	r3, #0
 8006410:	d011      	beq.n	8006436 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006412:	4b6c      	ldr	r3, [pc, #432]	; (80065c4 <tcp_slowtmr+0x580>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	1ad2      	subs	r2, r2, r3
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006422:	4619      	mov	r1, r3
 8006424:	460b      	mov	r3, r1
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	440b      	add	r3, r1
 800642a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800642c:	429a      	cmp	r2, r3
 800642e:	d302      	bcc.n	8006436 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006432:	f000 fddd 	bl	8006ff0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006438:	7d1b      	ldrb	r3, [r3, #20]
 800643a:	2b03      	cmp	r3, #3
 800643c:	d10b      	bne.n	8006456 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800643e:	4b61      	ldr	r3, [pc, #388]	; (80065c4 <tcp_slowtmr+0x580>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b28      	cmp	r3, #40	; 0x28
 800644a:	d904      	bls.n	8006456 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800644c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006450:	3301      	adds	r3, #1
 8006452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	7d1b      	ldrb	r3, [r3, #20]
 800645a:	2b09      	cmp	r3, #9
 800645c:	d10b      	bne.n	8006476 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800645e:	4b59      	ldr	r3, [pc, #356]	; (80065c4 <tcp_slowtmr+0x580>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2bf0      	cmp	r3, #240	; 0xf0
 800646a:	d904      	bls.n	8006476 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800646c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006470:	3301      	adds	r3, #1
 8006472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800647a:	2b00      	cmp	r3, #0
 800647c:	d060      	beq.n	8006540 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006484:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006488:	f000 fbfe 	bl	8006c88 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	2b00      	cmp	r3, #0
 8006490:	d010      	beq.n	80064b4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006492:	4b50      	ldr	r3, [pc, #320]	; (80065d4 <tcp_slowtmr+0x590>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006498:	429a      	cmp	r2, r3
 800649a:	d106      	bne.n	80064aa <tcp_slowtmr+0x466>
 800649c:	4b4e      	ldr	r3, [pc, #312]	; (80065d8 <tcp_slowtmr+0x594>)
 800649e:	f240 526d 	movw	r2, #1389	; 0x56d
 80064a2:	494e      	ldr	r1, [pc, #312]	; (80065dc <tcp_slowtmr+0x598>)
 80064a4:	484e      	ldr	r0, [pc, #312]	; (80065e0 <tcp_slowtmr+0x59c>)
 80064a6:	f007 f98d 	bl	800d7c4 <iprintf>
        prev->next = pcb->next;
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	60da      	str	r2, [r3, #12]
 80064b2:	e00f      	b.n	80064d4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80064b4:	4b47      	ldr	r3, [pc, #284]	; (80065d4 <tcp_slowtmr+0x590>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d006      	beq.n	80064cc <tcp_slowtmr+0x488>
 80064be:	4b46      	ldr	r3, [pc, #280]	; (80065d8 <tcp_slowtmr+0x594>)
 80064c0:	f240 5271 	movw	r2, #1393	; 0x571
 80064c4:	4947      	ldr	r1, [pc, #284]	; (80065e4 <tcp_slowtmr+0x5a0>)
 80064c6:	4846      	ldr	r0, [pc, #280]	; (80065e0 <tcp_slowtmr+0x59c>)
 80064c8:	f007 f97c 	bl	800d7c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	4a40      	ldr	r2, [pc, #256]	; (80065d4 <tcp_slowtmr+0x590>)
 80064d2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80064d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d013      	beq.n	8006504 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80064dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80064e4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	3304      	adds	r3, #4
 80064ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ec:	8ad2      	ldrh	r2, [r2, #22]
 80064ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064f0:	8b09      	ldrh	r1, [r1, #24]
 80064f2:	9102      	str	r1, [sp, #8]
 80064f4:	9201      	str	r2, [sp, #4]
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	462b      	mov	r3, r5
 80064fa:	4622      	mov	r2, r4
 80064fc:	4601      	mov	r1, r0
 80064fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006500:	f004 f98a 	bl	800a818 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	7d1b      	ldrb	r3, [r3, #20]
 800650e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800651a:	6838      	ldr	r0, [r7, #0]
 800651c:	f7ff f9f4 	bl	8005908 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006520:	4b31      	ldr	r3, [pc, #196]	; (80065e8 <tcp_slowtmr+0x5a4>)
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d004      	beq.n	8006536 <tcp_slowtmr+0x4f2>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f06f 010c 	mvn.w	r1, #12
 8006532:	68b8      	ldr	r0, [r7, #8]
 8006534:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006536:	4b2c      	ldr	r3, [pc, #176]	; (80065e8 <tcp_slowtmr+0x5a4>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d037      	beq.n	80065ae <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800653e:	e592      	b.n	8006066 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	7f1b      	ldrb	r3, [r3, #28]
 800654e:	3301      	adds	r3, #1
 8006550:	b2da      	uxtb	r2, r3
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	7f1a      	ldrb	r2, [r3, #28]
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	7f5b      	ldrb	r3, [r3, #29]
 800655e:	429a      	cmp	r2, r3
 8006560:	d325      	bcc.n	80065ae <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006568:	4b1f      	ldr	r3, [pc, #124]	; (80065e8 <tcp_slowtmr+0x5a4>)
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <tcp_slowtmr+0x54c>
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800657e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006580:	6912      	ldr	r2, [r2, #16]
 8006582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006584:	4610      	mov	r0, r2
 8006586:	4798      	blx	r3
 8006588:	4603      	mov	r3, r0
 800658a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800658e:	e002      	b.n	8006596 <tcp_slowtmr+0x552>
 8006590:	2300      	movs	r3, #0
 8006592:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <tcp_slowtmr+0x5a4>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d000      	beq.n	80065a0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800659e:	e562      	b.n	8006066 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80065a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d102      	bne.n	80065ae <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80065a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065aa:	f003 fb81 	bl	8009cb0 <tcp_output>
  while (pcb != NULL) {
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f47f ad5e 	bne.w	8006072 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80065ba:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <tcp_slowtmr+0x5a8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80065c0:	e069      	b.n	8006696 <tcp_slowtmr+0x652>
 80065c2:	bf00      	nop
 80065c4:	2000a404 	.word	0x2000a404
 80065c8:	000a4cb8 	.word	0x000a4cb8
 80065cc:	10624dd3 	.word	0x10624dd3
 80065d0:	000124f8 	.word	0x000124f8
 80065d4:	2000a410 	.word	0x2000a410
 80065d8:	0800f348 	.word	0x0800f348
 80065dc:	0800f780 	.word	0x0800f780
 80065e0:	0800f38c 	.word	0x0800f38c
 80065e4:	0800f7ac 	.word	0x0800f7ac
 80065e8:	2000a418 	.word	0x2000a418
 80065ec:	2000a414 	.word	0x2000a414
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	7d1b      	ldrb	r3, [r3, #20]
 80065f4:	2b0a      	cmp	r3, #10
 80065f6:	d006      	beq.n	8006606 <tcp_slowtmr+0x5c2>
 80065f8:	4b2b      	ldr	r3, [pc, #172]	; (80066a8 <tcp_slowtmr+0x664>)
 80065fa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80065fe:	492b      	ldr	r1, [pc, #172]	; (80066ac <tcp_slowtmr+0x668>)
 8006600:	482b      	ldr	r0, [pc, #172]	; (80066b0 <tcp_slowtmr+0x66c>)
 8006602:	f007 f8df 	bl	800d7c4 <iprintf>
    pcb_remove = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800660c:	4b29      	ldr	r3, [pc, #164]	; (80066b4 <tcp_slowtmr+0x670>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2bf0      	cmp	r3, #240	; 0xf0
 8006618:	d904      	bls.n	8006624 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800661a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800661e:	3301      	adds	r3, #1
 8006620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006628:	2b00      	cmp	r3, #0
 800662a:	d02f      	beq.n	800668c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800662c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800662e:	f000 fb2b 	bl	8006c88 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	2b00      	cmp	r3, #0
 8006636:	d010      	beq.n	800665a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006638:	4b1f      	ldr	r3, [pc, #124]	; (80066b8 <tcp_slowtmr+0x674>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800663e:	429a      	cmp	r2, r3
 8006640:	d106      	bne.n	8006650 <tcp_slowtmr+0x60c>
 8006642:	4b19      	ldr	r3, [pc, #100]	; (80066a8 <tcp_slowtmr+0x664>)
 8006644:	f240 52af 	movw	r2, #1455	; 0x5af
 8006648:	491c      	ldr	r1, [pc, #112]	; (80066bc <tcp_slowtmr+0x678>)
 800664a:	4819      	ldr	r0, [pc, #100]	; (80066b0 <tcp_slowtmr+0x66c>)
 800664c:	f007 f8ba 	bl	800d7c4 <iprintf>
        prev->next = pcb->next;
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	60da      	str	r2, [r3, #12]
 8006658:	e00f      	b.n	800667a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800665a:	4b17      	ldr	r3, [pc, #92]	; (80066b8 <tcp_slowtmr+0x674>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006660:	429a      	cmp	r2, r3
 8006662:	d006      	beq.n	8006672 <tcp_slowtmr+0x62e>
 8006664:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <tcp_slowtmr+0x664>)
 8006666:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800666a:	4915      	ldr	r1, [pc, #84]	; (80066c0 <tcp_slowtmr+0x67c>)
 800666c:	4810      	ldr	r0, [pc, #64]	; (80066b0 <tcp_slowtmr+0x66c>)
 800666e:	f007 f8a9 	bl	800d7c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4a10      	ldr	r2, [pc, #64]	; (80066b8 <tcp_slowtmr+0x674>)
 8006678:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006684:	69f8      	ldr	r0, [r7, #28]
 8006686:	f7ff f93f 	bl	8005908 <tcp_free>
 800668a:	e004      	b.n	8006696 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1a9      	bne.n	80065f0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	3730      	adds	r7, #48	; 0x30
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bdb0      	pop	{r4, r5, r7, pc}
 80066a6:	bf00      	nop
 80066a8:	0800f348 	.word	0x0800f348
 80066ac:	0800f7d8 	.word	0x0800f7d8
 80066b0:	0800f38c 	.word	0x0800f38c
 80066b4:	2000a404 	.word	0x2000a404
 80066b8:	2000a414 	.word	0x2000a414
 80066bc:	0800f808 	.word	0x0800f808
 80066c0:	0800f830 	.word	0x0800f830

080066c4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80066ca:	4b2d      	ldr	r3, [pc, #180]	; (8006780 <tcp_fasttmr+0xbc>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	3301      	adds	r3, #1
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	4b2b      	ldr	r3, [pc, #172]	; (8006780 <tcp_fasttmr+0xbc>)
 80066d4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80066d6:	4b2b      	ldr	r3, [pc, #172]	; (8006784 <tcp_fasttmr+0xc0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80066dc:	e048      	b.n	8006770 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7f9a      	ldrb	r2, [r3, #30]
 80066e2:	4b27      	ldr	r3, [pc, #156]	; (8006780 <tcp_fasttmr+0xbc>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d03f      	beq.n	800676a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80066ea:	4b25      	ldr	r3, [pc, #148]	; (8006780 <tcp_fasttmr+0xbc>)
 80066ec:	781a      	ldrb	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	8b5b      	ldrh	r3, [r3, #26]
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d010      	beq.n	8006720 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	8b5b      	ldrh	r3, [r3, #26]
 8006702:	f043 0302 	orr.w	r3, r3, #2
 8006706:	b29a      	uxth	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f003 facf 	bl	8009cb0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	8b5b      	ldrh	r3, [r3, #26]
 8006716:	f023 0303 	bic.w	r3, r3, #3
 800671a:	b29a      	uxth	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8b5b      	ldrh	r3, [r3, #26]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d009      	beq.n	8006740 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	8b5b      	ldrh	r3, [r3, #26]
 8006730:	f023 0308 	bic.w	r3, r3, #8
 8006734:	b29a      	uxth	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff fa78 	bl	8005c30 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800674e:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <tcp_fasttmr+0xc4>)
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f819 	bl	800678c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800675a:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <tcp_fasttmr+0xc4>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d000      	beq.n	8006764 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006762:	e7b8      	b.n	80066d6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	607b      	str	r3, [r7, #4]
 8006768:	e002      	b.n	8006770 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1b3      	bne.n	80066de <tcp_fasttmr+0x1a>
    }
  }
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	2000a41a 	.word	0x2000a41a
 8006784:	2000a410 	.word	0x2000a410
 8006788:	2000a418 	.word	0x2000a418

0800678c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800678c:	b590      	push	{r4, r7, lr}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d109      	bne.n	80067ae <tcp_process_refused_data+0x22>
 800679a:	4b37      	ldr	r3, [pc, #220]	; (8006878 <tcp_process_refused_data+0xec>)
 800679c:	f240 6209 	movw	r2, #1545	; 0x609
 80067a0:	4936      	ldr	r1, [pc, #216]	; (800687c <tcp_process_refused_data+0xf0>)
 80067a2:	4837      	ldr	r0, [pc, #220]	; (8006880 <tcp_process_refused_data+0xf4>)
 80067a4:	f007 f80e 	bl	800d7c4 <iprintf>
 80067a8:	f06f 030f 	mvn.w	r3, #15
 80067ac:	e060      	b.n	8006870 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067b2:	7b5b      	ldrb	r3, [r3, #13]
 80067b4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <tcp_process_refused_data+0x58>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6918      	ldr	r0, [r3, #16]
 80067d6:	2300      	movs	r3, #0
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	6879      	ldr	r1, [r7, #4]
 80067dc:	47a0      	blx	r4
 80067de:	4603      	mov	r3, r0
 80067e0:	73fb      	strb	r3, [r7, #15]
 80067e2:	e007      	b.n	80067f4 <tcp_process_refused_data+0x68>
 80067e4:	2300      	movs	r3, #0
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	2000      	movs	r0, #0
 80067ec:	f000 f8a4 	bl	8006938 <tcp_recv_null>
 80067f0:	4603      	mov	r3, r0
 80067f2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80067f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d12a      	bne.n	8006852 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80067fc:	7bbb      	ldrb	r3, [r7, #14]
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b00      	cmp	r3, #0
 8006804:	d033      	beq.n	800686e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800680a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800680e:	d005      	beq.n	800681c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006814:	3301      	adds	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00b      	beq.n	800683e <tcp_process_refused_data+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6918      	ldr	r0, [r3, #16]
 8006830:	2300      	movs	r3, #0
 8006832:	2200      	movs	r2, #0
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	47a0      	blx	r4
 8006838:	4603      	mov	r3, r0
 800683a:	73fb      	strb	r3, [r7, #15]
 800683c:	e001      	b.n	8006842 <tcp_process_refused_data+0xb6>
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006846:	f113 0f0d 	cmn.w	r3, #13
 800684a:	d110      	bne.n	800686e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800684c:	f06f 030c 	mvn.w	r3, #12
 8006850:	e00e      	b.n	8006870 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006856:	f113 0f0d 	cmn.w	r3, #13
 800685a:	d102      	bne.n	8006862 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800685c:	f06f 030c 	mvn.w	r3, #12
 8006860:	e006      	b.n	8006870 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006868:	f06f 0304 	mvn.w	r3, #4
 800686c:	e000      	b.n	8006870 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	bd90      	pop	{r4, r7, pc}
 8006878:	0800f348 	.word	0x0800f348
 800687c:	0800f858 	.word	0x0800f858
 8006880:	0800f38c 	.word	0x0800f38c

08006884 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800688c:	e007      	b.n	800689e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f80a 	bl	80068ae <tcp_seg_free>
    seg = next;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1f4      	bne.n	800688e <tcp_segs_free+0xa>
  }
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00c      	beq.n	80068d6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d004      	beq.n	80068ce <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7fe fd7d 	bl	80053c8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	2003      	movs	r0, #3
 80068d2:	f7fd ff03 	bl	80046dc <memp_free>
  }
}
 80068d6:	bf00      	nop
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d106      	bne.n	80068fc <tcp_seg_copy+0x1c>
 80068ee:	4b0f      	ldr	r3, [pc, #60]	; (800692c <tcp_seg_copy+0x4c>)
 80068f0:	f240 6282 	movw	r2, #1666	; 0x682
 80068f4:	490e      	ldr	r1, [pc, #56]	; (8006930 <tcp_seg_copy+0x50>)
 80068f6:	480f      	ldr	r0, [pc, #60]	; (8006934 <tcp_seg_copy+0x54>)
 80068f8:	f006 ff64 	bl	800d7c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80068fc:	2003      	movs	r0, #3
 80068fe:	f7fd fe7d 	bl	80045fc <memp_malloc>
 8006902:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <tcp_seg_copy+0x2e>
    return NULL;
 800690a:	2300      	movs	r3, #0
 800690c:	e00a      	b.n	8006924 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800690e:	2210      	movs	r2, #16
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f006 ff40 	bl	800d798 <memcpy>
  pbuf_ref(cseg->p);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe fdf3 	bl	8005508 <pbuf_ref>
  return cseg;
 8006922:	68fb      	ldr	r3, [r7, #12]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	0800f348 	.word	0x0800f348
 8006930:	0800f89c 	.word	0x0800f89c
 8006934:	0800f38c 	.word	0x0800f38c

08006938 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d109      	bne.n	8006960 <tcp_recv_null+0x28>
 800694c:	4b12      	ldr	r3, [pc, #72]	; (8006998 <tcp_recv_null+0x60>)
 800694e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006952:	4912      	ldr	r1, [pc, #72]	; (800699c <tcp_recv_null+0x64>)
 8006954:	4812      	ldr	r0, [pc, #72]	; (80069a0 <tcp_recv_null+0x68>)
 8006956:	f006 ff35 	bl	800d7c4 <iprintf>
 800695a:	f06f 030f 	mvn.w	r3, #15
 800695e:	e016      	b.n	800698e <tcp_recv_null+0x56>

  if (p != NULL) {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	891b      	ldrh	r3, [r3, #8]
 800696a:	4619      	mov	r1, r3
 800696c:	68b8      	ldr	r0, [r7, #8]
 800696e:	f7ff fb19 	bl	8005fa4 <tcp_recved>
    pbuf_free(p);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fe fd28 	bl	80053c8 <pbuf_free>
 8006978:	e008      	b.n	800698c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800697a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d104      	bne.n	800698c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006982:	68b8      	ldr	r0, [r7, #8]
 8006984:	f7ff f9be 	bl	8005d04 <tcp_close>
 8006988:	4603      	mov	r3, r0
 800698a:	e000      	b.n	800698e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	0800f348 	.word	0x0800f348
 800699c:	0800f8b8 	.word	0x0800f8b8
 80069a0:	0800f38c 	.word	0x0800f38c

080069a4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	4603      	mov	r3, r0
 80069ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80069ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	db01      	blt.n	80069ba <tcp_kill_prio+0x16>
 80069b6:	79fb      	ldrb	r3, [r7, #7]
 80069b8:	e000      	b.n	80069bc <tcp_kill_prio+0x18>
 80069ba:	237f      	movs	r3, #127	; 0x7f
 80069bc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80069be:	7afb      	ldrb	r3, [r7, #11]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d034      	beq.n	8006a2e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80069c4:	7afb      	ldrb	r3, [r7, #11]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80069d2:	4b19      	ldr	r3, [pc, #100]	; (8006a38 <tcp_kill_prio+0x94>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e01f      	b.n	8006a1a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	7d5b      	ldrb	r3, [r3, #21]
 80069de:	7afa      	ldrb	r2, [r7, #11]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d80c      	bhi.n	80069fe <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80069e8:	7afa      	ldrb	r2, [r7, #11]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d112      	bne.n	8006a14 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80069ee:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <tcp_kill_prio+0x98>)
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d80a      	bhi.n	8006a14 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80069fe:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <tcp_kill_prio+0x98>)
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	7d5b      	ldrb	r3, [r3, #21]
 8006a12:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1dc      	bne.n	80069da <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d004      	beq.n	8006a30 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006a26:	6938      	ldr	r0, [r7, #16]
 8006a28:	f7ff fa56 	bl	8005ed8 <tcp_abort>
 8006a2c:	e000      	b.n	8006a30 <tcp_kill_prio+0x8c>
    return;
 8006a2e:	bf00      	nop
  }
}
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	2000a410 	.word	0x2000a410
 8006a3c:	2000a404 	.word	0x2000a404

08006a40 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4603      	mov	r3, r0
 8006a48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d009      	beq.n	8006a64 <tcp_kill_state+0x24>
 8006a50:	79fb      	ldrb	r3, [r7, #7]
 8006a52:	2b09      	cmp	r3, #9
 8006a54:	d006      	beq.n	8006a64 <tcp_kill_state+0x24>
 8006a56:	4b1a      	ldr	r3, [pc, #104]	; (8006ac0 <tcp_kill_state+0x80>)
 8006a58:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006a5c:	4919      	ldr	r1, [pc, #100]	; (8006ac4 <tcp_kill_state+0x84>)
 8006a5e:	481a      	ldr	r0, [pc, #104]	; (8006ac8 <tcp_kill_state+0x88>)
 8006a60:	f006 feb0 	bl	800d7c4 <iprintf>

  inactivity = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a6c:	4b17      	ldr	r3, [pc, #92]	; (8006acc <tcp_kill_state+0x8c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	e017      	b.n	8006aa4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	7d1b      	ldrb	r3, [r3, #20]
 8006a78:	79fa      	ldrb	r2, [r7, #7]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d10f      	bne.n	8006a9e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006a7e:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <tcp_kill_state+0x90>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d807      	bhi.n	8006a9e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006a8e:	4b10      	ldr	r3, [pc, #64]	; (8006ad0 <tcp_kill_state+0x90>)
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e4      	bne.n	8006a74 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	6938      	ldr	r0, [r7, #16]
 8006ab4:	f7ff f952 	bl	8005d5c <tcp_abandon>
  }
}
 8006ab8:	bf00      	nop
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	0800f348 	.word	0x0800f348
 8006ac4:	0800f8d4 	.word	0x0800f8d4
 8006ac8:	0800f38c 	.word	0x0800f38c
 8006acc:	2000a410 	.word	0x2000a410
 8006ad0:	2000a404 	.word	0x2000a404

08006ad4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ae2:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <tcp_kill_timewait+0x58>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e012      	b.n	8006b10 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006aea:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <tcp_kill_timewait+0x5c>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d807      	bhi.n	8006b0a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006afa:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <tcp_kill_timewait+0x5c>)
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e9      	bne.n	8006aea <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006b1c:	68b8      	ldr	r0, [r7, #8]
 8006b1e:	f7ff f9db 	bl	8005ed8 <tcp_abort>
  }
}
 8006b22:	bf00      	nop
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	2000a414 	.word	0x2000a414
 8006b30:	2000a404 	.word	0x2000a404

08006b34 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006b3a:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <tcp_handle_closepend+0x48>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006b40:	e014      	b.n	8006b6c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	8b5b      	ldrh	r3, [r3, #26]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d009      	beq.n	8006b68 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	8b5b      	ldrh	r3, [r3, #26]
 8006b58:	f023 0308 	bic.w	r3, r3, #8
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff f864 	bl	8005c30 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e7      	bne.n	8006b42 <tcp_handle_closepend+0xe>
  }
}
 8006b72:	bf00      	nop
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	2000a410 	.word	0x2000a410

08006b80 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006b8a:	2001      	movs	r0, #1
 8006b8c:	f7fd fd36 	bl	80045fc <memp_malloc>
 8006b90:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d126      	bne.n	8006be6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006b98:	f7ff ffcc 	bl	8006b34 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006b9c:	f7ff ff9a 	bl	8006ad4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	f7fd fd2b 	bl	80045fc <memp_malloc>
 8006ba6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d11b      	bne.n	8006be6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006bae:	2009      	movs	r0, #9
 8006bb0:	f7ff ff46 	bl	8006a40 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006bb4:	2001      	movs	r0, #1
 8006bb6:	f7fd fd21 	bl	80045fc <memp_malloc>
 8006bba:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d111      	bne.n	8006be6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006bc2:	2008      	movs	r0, #8
 8006bc4:	f7ff ff3c 	bl	8006a40 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006bc8:	2001      	movs	r0, #1
 8006bca:	f7fd fd17 	bl	80045fc <memp_malloc>
 8006bce:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d107      	bne.n	8006be6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff fee3 	bl	80069a4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006bde:	2001      	movs	r0, #1
 8006be0:	f7fd fd0c 	bl	80045fc <memp_malloc>
 8006be4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d03f      	beq.n	8006c6c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006bec:	229c      	movs	r2, #156	; 0x9c
 8006bee:	2100      	movs	r1, #0
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f006 fddf 	bl	800d7b4 <memset>
    pcb->prio = prio;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	79fa      	ldrb	r2, [r7, #7]
 8006bfa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006c02:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	22ff      	movs	r2, #255	; 0xff
 8006c1a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006c22:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2206      	movs	r2, #6
 8006c28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2206      	movs	r2, #6
 8006c30:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c38:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006c42:	4b0d      	ldr	r3, [pc, #52]	; (8006c78 <tcp_alloc+0xf8>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006c4a:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <tcp_alloc+0xfc>)
 8006c4c:	781a      	ldrb	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006c58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4a08      	ldr	r2, [pc, #32]	; (8006c80 <tcp_alloc+0x100>)
 8006c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4a07      	ldr	r2, [pc, #28]	; (8006c84 <tcp_alloc+0x104>)
 8006c68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	2000a404 	.word	0x2000a404
 8006c7c:	2000a41a 	.word	0x2000a41a
 8006c80:	08006939 	.word	0x08006939
 8006c84:	006ddd00 	.word	0x006ddd00

08006c88 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d107      	bne.n	8006ca6 <tcp_pcb_purge+0x1e>
 8006c96:	4b21      	ldr	r3, [pc, #132]	; (8006d1c <tcp_pcb_purge+0x94>)
 8006c98:	f640 0251 	movw	r2, #2129	; 0x851
 8006c9c:	4920      	ldr	r1, [pc, #128]	; (8006d20 <tcp_pcb_purge+0x98>)
 8006c9e:	4821      	ldr	r0, [pc, #132]	; (8006d24 <tcp_pcb_purge+0x9c>)
 8006ca0:	f006 fd90 	bl	800d7c4 <iprintf>
 8006ca4:	e037      	b.n	8006d16 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	7d1b      	ldrb	r3, [r3, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d033      	beq.n	8006d16 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006cb2:	2b0a      	cmp	r3, #10
 8006cb4:	d02f      	beq.n	8006d16 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d02b      	beq.n	8006d16 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d007      	beq.n	8006cd6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fe fb7c 	bl	80053c8 <pbuf_free>
      pcb->refused_data = NULL;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f986 	bl	8006ff0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cea:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fdc7 	bl	8006884 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fdc2 	bl	8006884 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	66da      	str	r2, [r3, #108]	; 0x6c
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	0800f348 	.word	0x0800f348
 8006d20:	0800f994 	.word	0x0800f994
 8006d24:	0800f38c 	.word	0x0800f38c

08006d28 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d106      	bne.n	8006d46 <tcp_pcb_remove+0x1e>
 8006d38:	4b3e      	ldr	r3, [pc, #248]	; (8006e34 <tcp_pcb_remove+0x10c>)
 8006d3a:	f640 0283 	movw	r2, #2179	; 0x883
 8006d3e:	493e      	ldr	r1, [pc, #248]	; (8006e38 <tcp_pcb_remove+0x110>)
 8006d40:	483e      	ldr	r0, [pc, #248]	; (8006e3c <tcp_pcb_remove+0x114>)
 8006d42:	f006 fd3f 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d106      	bne.n	8006d5a <tcp_pcb_remove+0x32>
 8006d4c:	4b39      	ldr	r3, [pc, #228]	; (8006e34 <tcp_pcb_remove+0x10c>)
 8006d4e:	f640 0284 	movw	r2, #2180	; 0x884
 8006d52:	493b      	ldr	r1, [pc, #236]	; (8006e40 <tcp_pcb_remove+0x118>)
 8006d54:	4839      	ldr	r0, [pc, #228]	; (8006e3c <tcp_pcb_remove+0x114>)
 8006d56:	f006 fd35 	bl	800d7c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d105      	bne.n	8006d70 <tcp_pcb_remove+0x48>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e013      	b.n	8006d98 <tcp_pcb_remove+0x70>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	e00c      	b.n	8006d92 <tcp_pcb_remove+0x6a>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d104      	bne.n	8006d8c <tcp_pcb_remove+0x64>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	60da      	str	r2, [r3, #12]
 8006d8a:	e005      	b.n	8006d98 <tcp_pcb_remove+0x70>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1ef      	bne.n	8006d78 <tcp_pcb_remove+0x50>
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006d9e:	6838      	ldr	r0, [r7, #0]
 8006da0:	f7ff ff72 	bl	8006c88 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	7d1b      	ldrb	r3, [r3, #20]
 8006da8:	2b0a      	cmp	r3, #10
 8006daa:	d013      	beq.n	8006dd4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d00f      	beq.n	8006dd4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	8b5b      	ldrh	r3, [r3, #26]
 8006db8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d009      	beq.n	8006dd4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	8b5b      	ldrh	r3, [r3, #26]
 8006dc4:	f043 0302 	orr.w	r3, r3, #2
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006dce:	6838      	ldr	r0, [r7, #0]
 8006dd0:	f002 ff6e 	bl	8009cb0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	7d1b      	ldrb	r3, [r3, #20]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d020      	beq.n	8006e1e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d006      	beq.n	8006df2 <tcp_pcb_remove+0xca>
 8006de4:	4b13      	ldr	r3, [pc, #76]	; (8006e34 <tcp_pcb_remove+0x10c>)
 8006de6:	f640 0293 	movw	r2, #2195	; 0x893
 8006dea:	4916      	ldr	r1, [pc, #88]	; (8006e44 <tcp_pcb_remove+0x11c>)
 8006dec:	4813      	ldr	r0, [pc, #76]	; (8006e3c <tcp_pcb_remove+0x114>)
 8006dee:	f006 fce9 	bl	800d7c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d006      	beq.n	8006e08 <tcp_pcb_remove+0xe0>
 8006dfa:	4b0e      	ldr	r3, [pc, #56]	; (8006e34 <tcp_pcb_remove+0x10c>)
 8006dfc:	f640 0294 	movw	r2, #2196	; 0x894
 8006e00:	4911      	ldr	r1, [pc, #68]	; (8006e48 <tcp_pcb_remove+0x120>)
 8006e02:	480e      	ldr	r0, [pc, #56]	; (8006e3c <tcp_pcb_remove+0x114>)
 8006e04:	f006 fcde 	bl	800d7c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d006      	beq.n	8006e1e <tcp_pcb_remove+0xf6>
 8006e10:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <tcp_pcb_remove+0x10c>)
 8006e12:	f640 0296 	movw	r2, #2198	; 0x896
 8006e16:	490d      	ldr	r1, [pc, #52]	; (8006e4c <tcp_pcb_remove+0x124>)
 8006e18:	4808      	ldr	r0, [pc, #32]	; (8006e3c <tcp_pcb_remove+0x114>)
 8006e1a:	f006 fcd3 	bl	800d7c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2200      	movs	r2, #0
 8006e22:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2200      	movs	r2, #0
 8006e28:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	0800f348 	.word	0x0800f348
 8006e38:	0800f9b0 	.word	0x0800f9b0
 8006e3c:	0800f38c 	.word	0x0800f38c
 8006e40:	0800f9cc 	.word	0x0800f9cc
 8006e44:	0800f9ec 	.word	0x0800f9ec
 8006e48:	0800fa04 	.word	0x0800fa04
 8006e4c:	0800fa20 	.word	0x0800fa20

08006e50 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <tcp_next_iss+0x1c>
 8006e5e:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <tcp_next_iss+0x38>)
 8006e60:	f640 02af 	movw	r2, #2223	; 0x8af
 8006e64:	4909      	ldr	r1, [pc, #36]	; (8006e8c <tcp_next_iss+0x3c>)
 8006e66:	480a      	ldr	r0, [pc, #40]	; (8006e90 <tcp_next_iss+0x40>)
 8006e68:	f006 fcac 	bl	800d7c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006e6c:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <tcp_next_iss+0x44>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <tcp_next_iss+0x48>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4413      	add	r3, r2
 8006e76:	4a07      	ldr	r2, [pc, #28]	; (8006e94 <tcp_next_iss+0x44>)
 8006e78:	6013      	str	r3, [r2, #0]
  return iss;
 8006e7a:	4b06      	ldr	r3, [pc, #24]	; (8006e94 <tcp_next_iss+0x44>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	0800f348 	.word	0x0800f348
 8006e8c:	0800fa38 	.word	0x0800fa38
 8006e90:	0800f38c 	.word	0x0800f38c
 8006e94:	20000024 	.word	0x20000024
 8006e98:	2000a404 	.word	0x2000a404

08006e9c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d106      	bne.n	8006ebe <tcp_eff_send_mss_netif+0x22>
 8006eb0:	4b14      	ldr	r3, [pc, #80]	; (8006f04 <tcp_eff_send_mss_netif+0x68>)
 8006eb2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006eb6:	4914      	ldr	r1, [pc, #80]	; (8006f08 <tcp_eff_send_mss_netif+0x6c>)
 8006eb8:	4814      	ldr	r0, [pc, #80]	; (8006f0c <tcp_eff_send_mss_netif+0x70>)
 8006eba:	f006 fc83 	bl	800d7c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006ec4:	89fb      	ldrh	r3, [r7, #14]
 8006ec6:	e019      	b.n	8006efc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006ecc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006ece:	8afb      	ldrh	r3, [r7, #22]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d012      	beq.n	8006efa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006ed4:	2328      	movs	r3, #40	; 0x28
 8006ed6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006ed8:	8afa      	ldrh	r2, [r7, #22]
 8006eda:	8abb      	ldrh	r3, [r7, #20]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d904      	bls.n	8006eea <tcp_eff_send_mss_netif+0x4e>
 8006ee0:	8afa      	ldrh	r2, [r7, #22]
 8006ee2:	8abb      	ldrh	r3, [r7, #20]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	e000      	b.n	8006eec <tcp_eff_send_mss_netif+0x50>
 8006eea:	2300      	movs	r3, #0
 8006eec:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006eee:	8a7a      	ldrh	r2, [r7, #18]
 8006ef0:	89fb      	ldrh	r3, [r7, #14]
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	bf28      	it	cs
 8006ef6:	4613      	movcs	r3, r2
 8006ef8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006efa:	89fb      	ldrh	r3, [r7, #14]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	0800f348 	.word	0x0800f348
 8006f08:	0800fa54 	.word	0x0800fa54
 8006f0c:	0800f38c 	.word	0x0800f38c

08006f10 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d119      	bne.n	8006f58 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006f24:	4b10      	ldr	r3, [pc, #64]	; (8006f68 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006f26:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006f2a:	4910      	ldr	r1, [pc, #64]	; (8006f6c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006f2c:	4810      	ldr	r0, [pc, #64]	; (8006f70 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006f2e:	f006 fc49 	bl	800d7c4 <iprintf>

  while (pcb != NULL) {
 8006f32:	e011      	b.n	8006f58 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d108      	bne.n	8006f52 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f7fe ffc6 	bl	8005ed8 <tcp_abort>
      pcb = next;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	e002      	b.n	8006f58 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1ea      	bne.n	8006f34 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006f5e:	bf00      	nop
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	0800f348 	.word	0x0800f348
 8006f6c:	0800fa7c 	.word	0x0800fa7c
 8006f70:	0800f38c 	.word	0x0800f38c

08006f74 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02a      	beq.n	8006fda <tcp_netif_ip_addr_changed+0x66>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d026      	beq.n	8006fda <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006f8c:	4b15      	ldr	r3, [pc, #84]	; (8006fe4 <tcp_netif_ip_addr_changed+0x70>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff ffbc 	bl	8006f10 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006f98:	4b13      	ldr	r3, [pc, #76]	; (8006fe8 <tcp_netif_ip_addr_changed+0x74>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff ffb6 	bl	8006f10 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d017      	beq.n	8006fda <tcp_netif_ip_addr_changed+0x66>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d013      	beq.n	8006fda <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006fb2:	4b0e      	ldr	r3, [pc, #56]	; (8006fec <tcp_netif_ip_addr_changed+0x78>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	e00c      	b.n	8006fd4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d103      	bne.n	8006fce <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1ef      	bne.n	8006fba <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	2000a410 	.word	0x2000a410
 8006fe8:	2000a408 	.word	0x2000a408
 8006fec:	2000a40c 	.word	0x2000a40c

08006ff0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d007      	beq.n	8007010 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007004:	4618      	mov	r0, r3
 8007006:	f7ff fc3d 	bl	8006884 <tcp_segs_free>
    pcb->ooseq = NULL;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007010:	bf00      	nop
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007018:	b590      	push	{r4, r7, lr}
 800701a:	b08d      	sub	sp, #52	; 0x34
 800701c:	af04      	add	r7, sp, #16
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d105      	bne.n	8007034 <tcp_input+0x1c>
 8007028:	4b9b      	ldr	r3, [pc, #620]	; (8007298 <tcp_input+0x280>)
 800702a:	2283      	movs	r2, #131	; 0x83
 800702c:	499b      	ldr	r1, [pc, #620]	; (800729c <tcp_input+0x284>)
 800702e:	489c      	ldr	r0, [pc, #624]	; (80072a0 <tcp_input+0x288>)
 8007030:	f006 fbc8 	bl	800d7c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	4a9a      	ldr	r2, [pc, #616]	; (80072a4 <tcp_input+0x28c>)
 800703a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	895b      	ldrh	r3, [r3, #10]
 8007040:	2b13      	cmp	r3, #19
 8007042:	f240 83d1 	bls.w	80077e8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007046:	4b98      	ldr	r3, [pc, #608]	; (80072a8 <tcp_input+0x290>)
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	4a97      	ldr	r2, [pc, #604]	; (80072a8 <tcp_input+0x290>)
 800704c:	6812      	ldr	r2, [r2, #0]
 800704e:	4611      	mov	r1, r2
 8007050:	4618      	mov	r0, r3
 8007052:	f005 fc17 	bl	800c884 <ip4_addr_isbroadcast_u32>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	f040 83c7 	bne.w	80077ec <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800705e:	4b92      	ldr	r3, [pc, #584]	; (80072a8 <tcp_input+0x290>)
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007066:	2be0      	cmp	r3, #224	; 0xe0
 8007068:	f000 83c0 	beq.w	80077ec <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800706c:	4b8d      	ldr	r3, [pc, #564]	; (80072a4 <tcp_input+0x28c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	899b      	ldrh	r3, [r3, #12]
 8007072:	b29b      	uxth	r3, r3
 8007074:	4618      	mov	r0, r3
 8007076:	f7fc fe49 	bl	8003d0c <lwip_htons>
 800707a:	4603      	mov	r3, r0
 800707c:	0b1b      	lsrs	r3, r3, #12
 800707e:	b29b      	uxth	r3, r3
 8007080:	b2db      	uxtb	r3, r3
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007086:	7cbb      	ldrb	r3, [r7, #18]
 8007088:	2b13      	cmp	r3, #19
 800708a:	f240 83b1 	bls.w	80077f0 <tcp_input+0x7d8>
 800708e:	7cbb      	ldrb	r3, [r7, #18]
 8007090:	b29a      	uxth	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	891b      	ldrh	r3, [r3, #8]
 8007096:	429a      	cmp	r2, r3
 8007098:	f200 83aa 	bhi.w	80077f0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800709c:	7cbb      	ldrb	r3, [r7, #18]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	3b14      	subs	r3, #20
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	4b81      	ldr	r3, [pc, #516]	; (80072ac <tcp_input+0x294>)
 80070a6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80070a8:	4b81      	ldr	r3, [pc, #516]	; (80072b0 <tcp_input+0x298>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	895a      	ldrh	r2, [r3, #10]
 80070b2:	7cbb      	ldrb	r3, [r7, #18]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d309      	bcc.n	80070ce <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80070ba:	4b7c      	ldr	r3, [pc, #496]	; (80072ac <tcp_input+0x294>)
 80070bc:	881a      	ldrh	r2, [r3, #0]
 80070be:	4b7d      	ldr	r3, [pc, #500]	; (80072b4 <tcp_input+0x29c>)
 80070c0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80070c2:	7cbb      	ldrb	r3, [r7, #18]
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fe f8f8 	bl	80052bc <pbuf_remove_header>
 80070cc:	e04e      	b.n	800716c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d105      	bne.n	80070e2 <tcp_input+0xca>
 80070d6:	4b70      	ldr	r3, [pc, #448]	; (8007298 <tcp_input+0x280>)
 80070d8:	22c2      	movs	r2, #194	; 0xc2
 80070da:	4977      	ldr	r1, [pc, #476]	; (80072b8 <tcp_input+0x2a0>)
 80070dc:	4870      	ldr	r0, [pc, #448]	; (80072a0 <tcp_input+0x288>)
 80070de:	f006 fb71 	bl	800d7c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80070e2:	2114      	movs	r1, #20
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7fe f8e9 	bl	80052bc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	895a      	ldrh	r2, [r3, #10]
 80070ee:	4b71      	ldr	r3, [pc, #452]	; (80072b4 <tcp_input+0x29c>)
 80070f0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80070f2:	4b6e      	ldr	r3, [pc, #440]	; (80072ac <tcp_input+0x294>)
 80070f4:	881a      	ldrh	r2, [r3, #0]
 80070f6:	4b6f      	ldr	r3, [pc, #444]	; (80072b4 <tcp_input+0x29c>)
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80070fe:	4b6d      	ldr	r3, [pc, #436]	; (80072b4 <tcp_input+0x29c>)
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7fe f8d9 	bl	80052bc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	895b      	ldrh	r3, [r3, #10]
 8007110:	8a3a      	ldrh	r2, [r7, #16]
 8007112:	429a      	cmp	r2, r3
 8007114:	f200 836e 	bhi.w	80077f4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	4a64      	ldr	r2, [pc, #400]	; (80072b0 <tcp_input+0x298>)
 8007120:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	8a3a      	ldrh	r2, [r7, #16]
 8007128:	4611      	mov	r1, r2
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe f8c6 	bl	80052bc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	891a      	ldrh	r2, [r3, #8]
 8007134:	8a3b      	ldrh	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	b29a      	uxth	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	895b      	ldrh	r3, [r3, #10]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <tcp_input+0x13a>
 8007146:	4b54      	ldr	r3, [pc, #336]	; (8007298 <tcp_input+0x280>)
 8007148:	22df      	movs	r2, #223	; 0xdf
 800714a:	495c      	ldr	r1, [pc, #368]	; (80072bc <tcp_input+0x2a4>)
 800714c:	4854      	ldr	r0, [pc, #336]	; (80072a0 <tcp_input+0x288>)
 800714e:	f006 fb39 	bl	800d7c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	891a      	ldrh	r2, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	891b      	ldrh	r3, [r3, #8]
 800715c:	429a      	cmp	r2, r3
 800715e:	d005      	beq.n	800716c <tcp_input+0x154>
 8007160:	4b4d      	ldr	r3, [pc, #308]	; (8007298 <tcp_input+0x280>)
 8007162:	22e0      	movs	r2, #224	; 0xe0
 8007164:	4956      	ldr	r1, [pc, #344]	; (80072c0 <tcp_input+0x2a8>)
 8007166:	484e      	ldr	r0, [pc, #312]	; (80072a0 <tcp_input+0x288>)
 8007168:	f006 fb2c 	bl	800d7c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800716c:	4b4d      	ldr	r3, [pc, #308]	; (80072a4 <tcp_input+0x28c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29b      	uxth	r3, r3
 8007174:	4a4b      	ldr	r2, [pc, #300]	; (80072a4 <tcp_input+0x28c>)
 8007176:	6814      	ldr	r4, [r2, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f7fc fdc7 	bl	8003d0c <lwip_htons>
 800717e:	4603      	mov	r3, r0
 8007180:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007182:	4b48      	ldr	r3, [pc, #288]	; (80072a4 <tcp_input+0x28c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	885b      	ldrh	r3, [r3, #2]
 8007188:	b29b      	uxth	r3, r3
 800718a:	4a46      	ldr	r2, [pc, #280]	; (80072a4 <tcp_input+0x28c>)
 800718c:	6814      	ldr	r4, [r2, #0]
 800718e:	4618      	mov	r0, r3
 8007190:	f7fc fdbc 	bl	8003d0c <lwip_htons>
 8007194:	4603      	mov	r3, r0
 8007196:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007198:	4b42      	ldr	r3, [pc, #264]	; (80072a4 <tcp_input+0x28c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	4a41      	ldr	r2, [pc, #260]	; (80072a4 <tcp_input+0x28c>)
 80071a0:	6814      	ldr	r4, [r2, #0]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fc fdc7 	bl	8003d36 <lwip_htonl>
 80071a8:	4603      	mov	r3, r0
 80071aa:	6063      	str	r3, [r4, #4]
 80071ac:	6863      	ldr	r3, [r4, #4]
 80071ae:	4a45      	ldr	r2, [pc, #276]	; (80072c4 <tcp_input+0x2ac>)
 80071b0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80071b2:	4b3c      	ldr	r3, [pc, #240]	; (80072a4 <tcp_input+0x28c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	4a3a      	ldr	r2, [pc, #232]	; (80072a4 <tcp_input+0x28c>)
 80071ba:	6814      	ldr	r4, [r2, #0]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fc fdba 	bl	8003d36 <lwip_htonl>
 80071c2:	4603      	mov	r3, r0
 80071c4:	60a3      	str	r3, [r4, #8]
 80071c6:	68a3      	ldr	r3, [r4, #8]
 80071c8:	4a3f      	ldr	r2, [pc, #252]	; (80072c8 <tcp_input+0x2b0>)
 80071ca:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80071cc:	4b35      	ldr	r3, [pc, #212]	; (80072a4 <tcp_input+0x28c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	89db      	ldrh	r3, [r3, #14]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	4a33      	ldr	r2, [pc, #204]	; (80072a4 <tcp_input+0x28c>)
 80071d6:	6814      	ldr	r4, [r2, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fc fd97 	bl	8003d0c <lwip_htons>
 80071de:	4603      	mov	r3, r0
 80071e0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80071e2:	4b30      	ldr	r3, [pc, #192]	; (80072a4 <tcp_input+0x28c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	899b      	ldrh	r3, [r3, #12]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fc fd8e 	bl	8003d0c <lwip_htons>
 80071f0:	4603      	mov	r3, r0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	4b34      	ldr	r3, [pc, #208]	; (80072cc <tcp_input+0x2b4>)
 80071fc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	891a      	ldrh	r2, [r3, #8]
 8007202:	4b33      	ldr	r3, [pc, #204]	; (80072d0 <tcp_input+0x2b8>)
 8007204:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007206:	4b31      	ldr	r3, [pc, #196]	; (80072cc <tcp_input+0x2b4>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00c      	beq.n	800722c <tcp_input+0x214>
    tcplen++;
 8007212:	4b2f      	ldr	r3, [pc, #188]	; (80072d0 <tcp_input+0x2b8>)
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	3301      	adds	r3, #1
 8007218:	b29a      	uxth	r2, r3
 800721a:	4b2d      	ldr	r3, [pc, #180]	; (80072d0 <tcp_input+0x2b8>)
 800721c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	891a      	ldrh	r2, [r3, #8]
 8007222:	4b2b      	ldr	r3, [pc, #172]	; (80072d0 <tcp_input+0x2b8>)
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	429a      	cmp	r2, r3
 8007228:	f200 82e6 	bhi.w	80077f8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800722c:	2300      	movs	r3, #0
 800722e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007230:	4b28      	ldr	r3, [pc, #160]	; (80072d4 <tcp_input+0x2bc>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	61fb      	str	r3, [r7, #28]
 8007236:	e09d      	b.n	8007374 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	7d1b      	ldrb	r3, [r3, #20]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d105      	bne.n	800724c <tcp_input+0x234>
 8007240:	4b15      	ldr	r3, [pc, #84]	; (8007298 <tcp_input+0x280>)
 8007242:	22fb      	movs	r2, #251	; 0xfb
 8007244:	4924      	ldr	r1, [pc, #144]	; (80072d8 <tcp_input+0x2c0>)
 8007246:	4816      	ldr	r0, [pc, #88]	; (80072a0 <tcp_input+0x288>)
 8007248:	f006 fabc 	bl	800d7c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	7d1b      	ldrb	r3, [r3, #20]
 8007250:	2b0a      	cmp	r3, #10
 8007252:	d105      	bne.n	8007260 <tcp_input+0x248>
 8007254:	4b10      	ldr	r3, [pc, #64]	; (8007298 <tcp_input+0x280>)
 8007256:	22fc      	movs	r2, #252	; 0xfc
 8007258:	4920      	ldr	r1, [pc, #128]	; (80072dc <tcp_input+0x2c4>)
 800725a:	4811      	ldr	r0, [pc, #68]	; (80072a0 <tcp_input+0x288>)
 800725c:	f006 fab2 	bl	800d7c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	7d1b      	ldrb	r3, [r3, #20]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d105      	bne.n	8007274 <tcp_input+0x25c>
 8007268:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <tcp_input+0x280>)
 800726a:	22fd      	movs	r2, #253	; 0xfd
 800726c:	491c      	ldr	r1, [pc, #112]	; (80072e0 <tcp_input+0x2c8>)
 800726e:	480c      	ldr	r0, [pc, #48]	; (80072a0 <tcp_input+0x288>)
 8007270:	f006 faa8 	bl	800d7c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	7a1b      	ldrb	r3, [r3, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d033      	beq.n	80072e4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	7a1a      	ldrb	r2, [r3, #8]
 8007280:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <tcp_input+0x290>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007288:	3301      	adds	r3, #1
 800728a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800728c:	429a      	cmp	r2, r3
 800728e:	d029      	beq.n	80072e4 <tcp_input+0x2cc>
      prev = pcb;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	61bb      	str	r3, [r7, #24]
      continue;
 8007294:	e06b      	b.n	800736e <tcp_input+0x356>
 8007296:	bf00      	nop
 8007298:	0800fab0 	.word	0x0800fab0
 800729c:	0800fae4 	.word	0x0800fae4
 80072a0:	0800fafc 	.word	0x0800fafc
 80072a4:	2000a42c 	.word	0x2000a42c
 80072a8:	20004cd4 	.word	0x20004cd4
 80072ac:	2000a430 	.word	0x2000a430
 80072b0:	2000a434 	.word	0x2000a434
 80072b4:	2000a432 	.word	0x2000a432
 80072b8:	0800fb24 	.word	0x0800fb24
 80072bc:	0800fb34 	.word	0x0800fb34
 80072c0:	0800fb40 	.word	0x0800fb40
 80072c4:	2000a43c 	.word	0x2000a43c
 80072c8:	2000a440 	.word	0x2000a440
 80072cc:	2000a448 	.word	0x2000a448
 80072d0:	2000a446 	.word	0x2000a446
 80072d4:	2000a410 	.word	0x2000a410
 80072d8:	0800fb60 	.word	0x0800fb60
 80072dc:	0800fb88 	.word	0x0800fb88
 80072e0:	0800fbb4 	.word	0x0800fbb4
    }

    if (pcb->remote_port == tcphdr->src &&
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	8b1a      	ldrh	r2, [r3, #24]
 80072e8:	4b72      	ldr	r3, [pc, #456]	; (80074b4 <tcp_input+0x49c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d13a      	bne.n	800736a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	8ada      	ldrh	r2, [r3, #22]
 80072f8:	4b6e      	ldr	r3, [pc, #440]	; (80074b4 <tcp_input+0x49c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	885b      	ldrh	r3, [r3, #2]
 80072fe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007300:	429a      	cmp	r2, r3
 8007302:	d132      	bne.n	800736a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	4b6b      	ldr	r3, [pc, #428]	; (80074b8 <tcp_input+0x4a0>)
 800730a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800730c:	429a      	cmp	r2, r3
 800730e:	d12c      	bne.n	800736a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	4b68      	ldr	r3, [pc, #416]	; (80074b8 <tcp_input+0x4a0>)
 8007316:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007318:	429a      	cmp	r2, r3
 800731a:	d126      	bne.n	800736a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	429a      	cmp	r2, r3
 8007324:	d106      	bne.n	8007334 <tcp_input+0x31c>
 8007326:	4b65      	ldr	r3, [pc, #404]	; (80074bc <tcp_input+0x4a4>)
 8007328:	f240 120d 	movw	r2, #269	; 0x10d
 800732c:	4964      	ldr	r1, [pc, #400]	; (80074c0 <tcp_input+0x4a8>)
 800732e:	4865      	ldr	r0, [pc, #404]	; (80074c4 <tcp_input+0x4ac>)
 8007330:	f006 fa48 	bl	800d7c4 <iprintf>
      if (prev != NULL) {
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <tcp_input+0x338>
        prev->next = pcb->next;
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007342:	4b61      	ldr	r3, [pc, #388]	; (80074c8 <tcp_input+0x4b0>)
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800734a:	4a5f      	ldr	r2, [pc, #380]	; (80074c8 <tcp_input+0x4b0>)
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	69fa      	ldr	r2, [r7, #28]
 8007356:	429a      	cmp	r2, r3
 8007358:	d111      	bne.n	800737e <tcp_input+0x366>
 800735a:	4b58      	ldr	r3, [pc, #352]	; (80074bc <tcp_input+0x4a4>)
 800735c:	f240 1215 	movw	r2, #277	; 0x115
 8007360:	495a      	ldr	r1, [pc, #360]	; (80074cc <tcp_input+0x4b4>)
 8007362:	4858      	ldr	r0, [pc, #352]	; (80074c4 <tcp_input+0x4ac>)
 8007364:	f006 fa2e 	bl	800d7c4 <iprintf>
      break;
 8007368:	e009      	b.n	800737e <tcp_input+0x366>
    }
    prev = pcb;
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f47f af5e 	bne.w	8007238 <tcp_input+0x220>
 800737c:	e000      	b.n	8007380 <tcp_input+0x368>
      break;
 800737e:	bf00      	nop
  }

  if (pcb == NULL) {
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f040 80aa 	bne.w	80074dc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007388:	4b51      	ldr	r3, [pc, #324]	; (80074d0 <tcp_input+0x4b8>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	61fb      	str	r3, [r7, #28]
 800738e:	e03f      	b.n	8007410 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	7d1b      	ldrb	r3, [r3, #20]
 8007394:	2b0a      	cmp	r3, #10
 8007396:	d006      	beq.n	80073a6 <tcp_input+0x38e>
 8007398:	4b48      	ldr	r3, [pc, #288]	; (80074bc <tcp_input+0x4a4>)
 800739a:	f240 121f 	movw	r2, #287	; 0x11f
 800739e:	494d      	ldr	r1, [pc, #308]	; (80074d4 <tcp_input+0x4bc>)
 80073a0:	4848      	ldr	r0, [pc, #288]	; (80074c4 <tcp_input+0x4ac>)
 80073a2:	f006 fa0f 	bl	800d7c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	7a1b      	ldrb	r3, [r3, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d009      	beq.n	80073c2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	7a1a      	ldrb	r2, [r3, #8]
 80073b2:	4b41      	ldr	r3, [pc, #260]	; (80074b8 <tcp_input+0x4a0>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073ba:	3301      	adds	r3, #1
 80073bc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80073be:	429a      	cmp	r2, r3
 80073c0:	d122      	bne.n	8007408 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	8b1a      	ldrh	r2, [r3, #24]
 80073c6:	4b3b      	ldr	r3, [pc, #236]	; (80074b4 <tcp_input+0x49c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d11b      	bne.n	800740a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	8ada      	ldrh	r2, [r3, #22]
 80073d6:	4b37      	ldr	r3, [pc, #220]	; (80074b4 <tcp_input+0x49c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	885b      	ldrh	r3, [r3, #2]
 80073dc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80073de:	429a      	cmp	r2, r3
 80073e0:	d113      	bne.n	800740a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	4b34      	ldr	r3, [pc, #208]	; (80074b8 <tcp_input+0x4a0>)
 80073e8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d10d      	bne.n	800740a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	4b31      	ldr	r3, [pc, #196]	; (80074b8 <tcp_input+0x4a0>)
 80073f4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d107      	bne.n	800740a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80073fa:	69f8      	ldr	r0, [r7, #28]
 80073fc:	f000 fb56 	bl	8007aac <tcp_timewait_input>
        }
        pbuf_free(p);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7fd ffe1 	bl	80053c8 <pbuf_free>
        return;
 8007406:	e1fd      	b.n	8007804 <tcp_input+0x7ec>
        continue;
 8007408:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	61fb      	str	r3, [r7, #28]
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1bc      	bne.n	8007390 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007416:	2300      	movs	r3, #0
 8007418:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800741a:	4b2f      	ldr	r3, [pc, #188]	; (80074d8 <tcp_input+0x4c0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	e02a      	b.n	8007478 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	7a1b      	ldrb	r3, [r3, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00c      	beq.n	8007444 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	7a1a      	ldrb	r2, [r3, #8]
 800742e:	4b22      	ldr	r3, [pc, #136]	; (80074b8 <tcp_input+0x4a0>)
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007436:	3301      	adds	r3, #1
 8007438:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800743a:	429a      	cmp	r2, r3
 800743c:	d002      	beq.n	8007444 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	61bb      	str	r3, [r7, #24]
        continue;
 8007442:	e016      	b.n	8007472 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	8ada      	ldrh	r2, [r3, #22]
 8007448:	4b1a      	ldr	r3, [pc, #104]	; (80074b4 <tcp_input+0x49c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	885b      	ldrh	r3, [r3, #2]
 800744e:	b29b      	uxth	r3, r3
 8007450:	429a      	cmp	r2, r3
 8007452:	d10c      	bne.n	800746e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	4b17      	ldr	r3, [pc, #92]	; (80074b8 <tcp_input+0x4a0>)
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	429a      	cmp	r2, r3
 800745e:	d00f      	beq.n	8007480 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00d      	beq.n	8007482 <tcp_input+0x46a>
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1d1      	bne.n	8007422 <tcp_input+0x40a>
 800747e:	e000      	b.n	8007482 <tcp_input+0x46a>
            break;
 8007480:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d029      	beq.n	80074dc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007496:	4b10      	ldr	r3, [pc, #64]	; (80074d8 <tcp_input+0x4c0>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800749e:	4a0e      	ldr	r2, [pc, #56]	; (80074d8 <tcp_input+0x4c0>)
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80074a4:	6978      	ldr	r0, [r7, #20]
 80074a6:	f000 fa03 	bl	80078b0 <tcp_listen_input>
      }
      pbuf_free(p);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fd ff8c 	bl	80053c8 <pbuf_free>
      return;
 80074b0:	e1a8      	b.n	8007804 <tcp_input+0x7ec>
 80074b2:	bf00      	nop
 80074b4:	2000a42c 	.word	0x2000a42c
 80074b8:	20004cd4 	.word	0x20004cd4
 80074bc:	0800fab0 	.word	0x0800fab0
 80074c0:	0800fbdc 	.word	0x0800fbdc
 80074c4:	0800fafc 	.word	0x0800fafc
 80074c8:	2000a410 	.word	0x2000a410
 80074cc:	0800fc08 	.word	0x0800fc08
 80074d0:	2000a414 	.word	0x2000a414
 80074d4:	0800fc34 	.word	0x0800fc34
 80074d8:	2000a40c 	.word	0x2000a40c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 8158 	beq.w	8007794 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80074e4:	4b95      	ldr	r3, [pc, #596]	; (800773c <tcp_input+0x724>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	891a      	ldrh	r2, [r3, #8]
 80074ee:	4b93      	ldr	r3, [pc, #588]	; (800773c <tcp_input+0x724>)
 80074f0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80074f2:	4a92      	ldr	r2, [pc, #584]	; (800773c <tcp_input+0x724>)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80074f8:	4b91      	ldr	r3, [pc, #580]	; (8007740 <tcp_input+0x728>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a8f      	ldr	r2, [pc, #572]	; (800773c <tcp_input+0x724>)
 80074fe:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007500:	4b90      	ldr	r3, [pc, #576]	; (8007744 <tcp_input+0x72c>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007506:	4b90      	ldr	r3, [pc, #576]	; (8007748 <tcp_input+0x730>)
 8007508:	2200      	movs	r2, #0
 800750a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800750c:	4b8f      	ldr	r3, [pc, #572]	; (800774c <tcp_input+0x734>)
 800750e:	2200      	movs	r2, #0
 8007510:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007512:	4b8f      	ldr	r3, [pc, #572]	; (8007750 <tcp_input+0x738>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f003 0308 	and.w	r3, r3, #8
 800751a:	2b00      	cmp	r3, #0
 800751c:	d006      	beq.n	800752c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	7b5b      	ldrb	r3, [r3, #13]
 8007522:	f043 0301 	orr.w	r3, r3, #1
 8007526:	b2da      	uxtb	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007530:	2b00      	cmp	r3, #0
 8007532:	d017      	beq.n	8007564 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007534:	69f8      	ldr	r0, [r7, #28]
 8007536:	f7ff f929 	bl	800678c <tcp_process_refused_data>
 800753a:	4603      	mov	r3, r0
 800753c:	f113 0f0d 	cmn.w	r3, #13
 8007540:	d007      	beq.n	8007552 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00c      	beq.n	8007564 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800754a:	4b82      	ldr	r3, [pc, #520]	; (8007754 <tcp_input+0x73c>)
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007556:	2b00      	cmp	r3, #0
 8007558:	f040 80e3 	bne.w	8007722 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800755c:	69f8      	ldr	r0, [r7, #28]
 800755e:	f003 f9ad 	bl	800a8bc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007562:	e0de      	b.n	8007722 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007564:	4a7c      	ldr	r2, [pc, #496]	; (8007758 <tcp_input+0x740>)
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800756a:	69f8      	ldr	r0, [r7, #28]
 800756c:	f000 fb18 	bl	8007ba0 <tcp_process>
 8007570:	4603      	mov	r3, r0
 8007572:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007574:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007578:	f113 0f0d 	cmn.w	r3, #13
 800757c:	f000 80d3 	beq.w	8007726 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007580:	4b71      	ldr	r3, [pc, #452]	; (8007748 <tcp_input+0x730>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b00      	cmp	r3, #0
 800758a:	d015      	beq.n	80075b8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007592:	2b00      	cmp	r3, #0
 8007594:	d008      	beq.n	80075a8 <tcp_input+0x590>
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	6912      	ldr	r2, [r2, #16]
 80075a0:	f06f 010d 	mvn.w	r1, #13
 80075a4:	4610      	mov	r0, r2
 80075a6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80075a8:	69f9      	ldr	r1, [r7, #28]
 80075aa:	486c      	ldr	r0, [pc, #432]	; (800775c <tcp_input+0x744>)
 80075ac:	f7ff fbbc 	bl	8006d28 <tcp_pcb_remove>
        tcp_free(pcb);
 80075b0:	69f8      	ldr	r0, [r7, #28]
 80075b2:	f7fe f9a9 	bl	8005908 <tcp_free>
 80075b6:	e0da      	b.n	800776e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80075bc:	4b63      	ldr	r3, [pc, #396]	; (800774c <tcp_input+0x734>)
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01d      	beq.n	8007600 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80075c4:	4b61      	ldr	r3, [pc, #388]	; (800774c <tcp_input+0x734>)
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00a      	beq.n	80075ea <tcp_input+0x5d2>
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	6910      	ldr	r0, [r2, #16]
 80075de:	89fa      	ldrh	r2, [r7, #14]
 80075e0:	69f9      	ldr	r1, [r7, #28]
 80075e2:	4798      	blx	r3
 80075e4:	4603      	mov	r3, r0
 80075e6:	74fb      	strb	r3, [r7, #19]
 80075e8:	e001      	b.n	80075ee <tcp_input+0x5d6>
 80075ea:	2300      	movs	r3, #0
 80075ec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80075ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80075f2:	f113 0f0d 	cmn.w	r3, #13
 80075f6:	f000 8098 	beq.w	800772a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80075fa:	4b54      	ldr	r3, [pc, #336]	; (800774c <tcp_input+0x734>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007600:	69f8      	ldr	r0, [r7, #28]
 8007602:	f000 f915 	bl	8007830 <tcp_input_delayed_close>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	f040 8090 	bne.w	800772e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800760e:	4b4d      	ldr	r3, [pc, #308]	; (8007744 <tcp_input+0x72c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d041      	beq.n	800769a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800761a:	2b00      	cmp	r3, #0
 800761c:	d006      	beq.n	800762c <tcp_input+0x614>
 800761e:	4b50      	ldr	r3, [pc, #320]	; (8007760 <tcp_input+0x748>)
 8007620:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007624:	494f      	ldr	r1, [pc, #316]	; (8007764 <tcp_input+0x74c>)
 8007626:	4850      	ldr	r0, [pc, #320]	; (8007768 <tcp_input+0x750>)
 8007628:	f006 f8cc 	bl	800d7c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	8b5b      	ldrh	r3, [r3, #26]
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2b00      	cmp	r3, #0
 8007636:	d008      	beq.n	800764a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007638:	4b42      	ldr	r3, [pc, #264]	; (8007744 <tcp_input+0x72c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	f7fd fec3 	bl	80053c8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007642:	69f8      	ldr	r0, [r7, #28]
 8007644:	f7fe fc48 	bl	8005ed8 <tcp_abort>
            goto aborted;
 8007648:	e091      	b.n	800776e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00c      	beq.n	800766e <tcp_input+0x656>
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	6918      	ldr	r0, [r3, #16]
 800765e:	4b39      	ldr	r3, [pc, #228]	; (8007744 <tcp_input+0x72c>)
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	2300      	movs	r3, #0
 8007664:	69f9      	ldr	r1, [r7, #28]
 8007666:	47a0      	blx	r4
 8007668:	4603      	mov	r3, r0
 800766a:	74fb      	strb	r3, [r7, #19]
 800766c:	e008      	b.n	8007680 <tcp_input+0x668>
 800766e:	4b35      	ldr	r3, [pc, #212]	; (8007744 <tcp_input+0x72c>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	2300      	movs	r3, #0
 8007674:	69f9      	ldr	r1, [r7, #28]
 8007676:	2000      	movs	r0, #0
 8007678:	f7ff f95e 	bl	8006938 <tcp_recv_null>
 800767c:	4603      	mov	r3, r0
 800767e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007680:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007684:	f113 0f0d 	cmn.w	r3, #13
 8007688:	d053      	beq.n	8007732 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800768a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007692:	4b2c      	ldr	r3, [pc, #176]	; (8007744 <tcp_input+0x72c>)
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800769a:	4b2b      	ldr	r3, [pc, #172]	; (8007748 <tcp_input+0x730>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d030      	beq.n	8007708 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d009      	beq.n	80076c2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076b2:	7b5a      	ldrb	r2, [r3, #13]
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076b8:	f042 0220 	orr.w	r2, r2, #32
 80076bc:	b2d2      	uxtb	r2, r2
 80076be:	735a      	strb	r2, [r3, #13]
 80076c0:	e022      	b.n	8007708 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80076ca:	d005      	beq.n	80076d8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d0:	3301      	adds	r3, #1
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00b      	beq.n	80076fa <tcp_input+0x6e2>
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	6918      	ldr	r0, [r3, #16]
 80076ec:	2300      	movs	r3, #0
 80076ee:	2200      	movs	r2, #0
 80076f0:	69f9      	ldr	r1, [r7, #28]
 80076f2:	47a0      	blx	r4
 80076f4:	4603      	mov	r3, r0
 80076f6:	74fb      	strb	r3, [r7, #19]
 80076f8:	e001      	b.n	80076fe <tcp_input+0x6e6>
 80076fa:	2300      	movs	r3, #0
 80076fc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80076fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007702:	f113 0f0d 	cmn.w	r3, #13
 8007706:	d016      	beq.n	8007736 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007708:	4b13      	ldr	r3, [pc, #76]	; (8007758 <tcp_input+0x740>)
 800770a:	2200      	movs	r2, #0
 800770c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800770e:	69f8      	ldr	r0, [r7, #28]
 8007710:	f000 f88e 	bl	8007830 <tcp_input_delayed_close>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d128      	bne.n	800776c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800771a:	69f8      	ldr	r0, [r7, #28]
 800771c:	f002 fac8 	bl	8009cb0 <tcp_output>
 8007720:	e025      	b.n	800776e <tcp_input+0x756>
        goto aborted;
 8007722:	bf00      	nop
 8007724:	e023      	b.n	800776e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007726:	bf00      	nop
 8007728:	e021      	b.n	800776e <tcp_input+0x756>
              goto aborted;
 800772a:	bf00      	nop
 800772c:	e01f      	b.n	800776e <tcp_input+0x756>
          goto aborted;
 800772e:	bf00      	nop
 8007730:	e01d      	b.n	800776e <tcp_input+0x756>
            goto aborted;
 8007732:	bf00      	nop
 8007734:	e01b      	b.n	800776e <tcp_input+0x756>
              goto aborted;
 8007736:	bf00      	nop
 8007738:	e019      	b.n	800776e <tcp_input+0x756>
 800773a:	bf00      	nop
 800773c:	2000a41c 	.word	0x2000a41c
 8007740:	2000a42c 	.word	0x2000a42c
 8007744:	2000a44c 	.word	0x2000a44c
 8007748:	2000a449 	.word	0x2000a449
 800774c:	2000a444 	.word	0x2000a444
 8007750:	2000a448 	.word	0x2000a448
 8007754:	2000a446 	.word	0x2000a446
 8007758:	2000a450 	.word	0x2000a450
 800775c:	2000a410 	.word	0x2000a410
 8007760:	0800fab0 	.word	0x0800fab0
 8007764:	0800fc64 	.word	0x0800fc64
 8007768:	0800fafc 	.word	0x0800fafc
          goto aborted;
 800776c:	bf00      	nop
    tcp_input_pcb = NULL;
 800776e:	4b27      	ldr	r3, [pc, #156]	; (800780c <tcp_input+0x7f4>)
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007774:	4b26      	ldr	r3, [pc, #152]	; (8007810 <tcp_input+0x7f8>)
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800777a:	4b26      	ldr	r3, [pc, #152]	; (8007814 <tcp_input+0x7fc>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d03f      	beq.n	8007802 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8007782:	4b24      	ldr	r3, [pc, #144]	; (8007814 <tcp_input+0x7fc>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	4618      	mov	r0, r3
 8007788:	f7fd fe1e 	bl	80053c8 <pbuf_free>
      inseg.p = NULL;
 800778c:	4b21      	ldr	r3, [pc, #132]	; (8007814 <tcp_input+0x7fc>)
 800778e:	2200      	movs	r2, #0
 8007790:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007792:	e036      	b.n	8007802 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007794:	4b20      	ldr	r3, [pc, #128]	; (8007818 <tcp_input+0x800>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	899b      	ldrh	r3, [r3, #12]
 800779a:	b29b      	uxth	r3, r3
 800779c:	4618      	mov	r0, r3
 800779e:	f7fc fab5 	bl	8003d0c <lwip_htons>
 80077a2:	4603      	mov	r3, r0
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d118      	bne.n	80077e0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80077ae:	4b1b      	ldr	r3, [pc, #108]	; (800781c <tcp_input+0x804>)
 80077b0:	6819      	ldr	r1, [r3, #0]
 80077b2:	4b1b      	ldr	r3, [pc, #108]	; (8007820 <tcp_input+0x808>)
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <tcp_input+0x80c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80077be:	4b16      	ldr	r3, [pc, #88]	; (8007818 <tcp_input+0x800>)
 80077c0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80077c2:	885b      	ldrh	r3, [r3, #2]
 80077c4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80077c6:	4a14      	ldr	r2, [pc, #80]	; (8007818 <tcp_input+0x800>)
 80077c8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80077ca:	8812      	ldrh	r2, [r2, #0]
 80077cc:	b292      	uxth	r2, r2
 80077ce:	9202      	str	r2, [sp, #8]
 80077d0:	9301      	str	r3, [sp, #4]
 80077d2:	4b15      	ldr	r3, [pc, #84]	; (8007828 <tcp_input+0x810>)
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	4b15      	ldr	r3, [pc, #84]	; (800782c <tcp_input+0x814>)
 80077d8:	4602      	mov	r2, r0
 80077da:	2000      	movs	r0, #0
 80077dc:	f003 f81c 	bl	800a818 <tcp_rst>
    pbuf_free(p);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7fd fdf1 	bl	80053c8 <pbuf_free>
  return;
 80077e6:	e00c      	b.n	8007802 <tcp_input+0x7ea>
    goto dropped;
 80077e8:	bf00      	nop
 80077ea:	e006      	b.n	80077fa <tcp_input+0x7e2>
    goto dropped;
 80077ec:	bf00      	nop
 80077ee:	e004      	b.n	80077fa <tcp_input+0x7e2>
    goto dropped;
 80077f0:	bf00      	nop
 80077f2:	e002      	b.n	80077fa <tcp_input+0x7e2>
      goto dropped;
 80077f4:	bf00      	nop
 80077f6:	e000      	b.n	80077fa <tcp_input+0x7e2>
      goto dropped;
 80077f8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fd fde4 	bl	80053c8 <pbuf_free>
 8007800:	e000      	b.n	8007804 <tcp_input+0x7ec>
  return;
 8007802:	bf00      	nop
}
 8007804:	3724      	adds	r7, #36	; 0x24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd90      	pop	{r4, r7, pc}
 800780a:	bf00      	nop
 800780c:	2000a450 	.word	0x2000a450
 8007810:	2000a44c 	.word	0x2000a44c
 8007814:	2000a41c 	.word	0x2000a41c
 8007818:	2000a42c 	.word	0x2000a42c
 800781c:	2000a440 	.word	0x2000a440
 8007820:	2000a446 	.word	0x2000a446
 8007824:	2000a43c 	.word	0x2000a43c
 8007828:	20004ce4 	.word	0x20004ce4
 800782c:	20004ce8 	.word	0x20004ce8

08007830 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <tcp_input_delayed_close+0x1c>
 800783e:	4b17      	ldr	r3, [pc, #92]	; (800789c <tcp_input_delayed_close+0x6c>)
 8007840:	f240 225a 	movw	r2, #602	; 0x25a
 8007844:	4916      	ldr	r1, [pc, #88]	; (80078a0 <tcp_input_delayed_close+0x70>)
 8007846:	4817      	ldr	r0, [pc, #92]	; (80078a4 <tcp_input_delayed_close+0x74>)
 8007848:	f005 ffbc 	bl	800d7c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800784c:	4b16      	ldr	r3, [pc, #88]	; (80078a8 <tcp_input_delayed_close+0x78>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	f003 0310 	and.w	r3, r3, #16
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01c      	beq.n	8007892 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8b5b      	ldrh	r3, [r3, #26]
 800785c:	f003 0310 	and.w	r3, r3, #16
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10d      	bne.n	8007880 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800786a:	2b00      	cmp	r3, #0
 800786c:	d008      	beq.n	8007880 <tcp_input_delayed_close+0x50>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	6912      	ldr	r2, [r2, #16]
 8007878:	f06f 010e 	mvn.w	r1, #14
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	480a      	ldr	r0, [pc, #40]	; (80078ac <tcp_input_delayed_close+0x7c>)
 8007884:	f7ff fa50 	bl	8006d28 <tcp_pcb_remove>
    tcp_free(pcb);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7fe f83d 	bl	8005908 <tcp_free>
    return 1;
 800788e:	2301      	movs	r3, #1
 8007890:	e000      	b.n	8007894 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	0800fab0 	.word	0x0800fab0
 80078a0:	0800fc80 	.word	0x0800fc80
 80078a4:	0800fafc 	.word	0x0800fafc
 80078a8:	2000a449 	.word	0x2000a449
 80078ac:	2000a410 	.word	0x2000a410

080078b0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80078b0:	b590      	push	{r4, r7, lr}
 80078b2:	b08b      	sub	sp, #44	; 0x2c
 80078b4:	af04      	add	r7, sp, #16
 80078b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80078b8:	4b6f      	ldr	r3, [pc, #444]	; (8007a78 <tcp_listen_input+0x1c8>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f040 80d2 	bne.w	8007a6a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d106      	bne.n	80078da <tcp_listen_input+0x2a>
 80078cc:	4b6b      	ldr	r3, [pc, #428]	; (8007a7c <tcp_listen_input+0x1cc>)
 80078ce:	f240 2281 	movw	r2, #641	; 0x281
 80078d2:	496b      	ldr	r1, [pc, #428]	; (8007a80 <tcp_listen_input+0x1d0>)
 80078d4:	486b      	ldr	r0, [pc, #428]	; (8007a84 <tcp_listen_input+0x1d4>)
 80078d6:	f005 ff75 	bl	800d7c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80078da:	4b67      	ldr	r3, [pc, #412]	; (8007a78 <tcp_listen_input+0x1c8>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	f003 0310 	and.w	r3, r3, #16
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d019      	beq.n	800791a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80078e6:	4b68      	ldr	r3, [pc, #416]	; (8007a88 <tcp_listen_input+0x1d8>)
 80078e8:	6819      	ldr	r1, [r3, #0]
 80078ea:	4b68      	ldr	r3, [pc, #416]	; (8007a8c <tcp_listen_input+0x1dc>)
 80078ec:	881b      	ldrh	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	4b67      	ldr	r3, [pc, #412]	; (8007a90 <tcp_listen_input+0x1e0>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80078f6:	4b67      	ldr	r3, [pc, #412]	; (8007a94 <tcp_listen_input+0x1e4>)
 80078f8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80078fa:	885b      	ldrh	r3, [r3, #2]
 80078fc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80078fe:	4a65      	ldr	r2, [pc, #404]	; (8007a94 <tcp_listen_input+0x1e4>)
 8007900:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007902:	8812      	ldrh	r2, [r2, #0]
 8007904:	b292      	uxth	r2, r2
 8007906:	9202      	str	r2, [sp, #8]
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	4b63      	ldr	r3, [pc, #396]	; (8007a98 <tcp_listen_input+0x1e8>)
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	4b63      	ldr	r3, [pc, #396]	; (8007a9c <tcp_listen_input+0x1ec>)
 8007910:	4602      	mov	r2, r0
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f002 ff80 	bl	800a818 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007918:	e0a9      	b.n	8007a6e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800791a:	4b57      	ldr	r3, [pc, #348]	; (8007a78 <tcp_listen_input+0x1c8>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 80a3 	beq.w	8007a6e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	7d5b      	ldrb	r3, [r3, #21]
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff f927 	bl	8006b80 <tcp_alloc>
 8007932:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d111      	bne.n	800795e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00a      	beq.n	8007958 <tcp_listen_input+0xa8>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6910      	ldr	r0, [r2, #16]
 800794a:	f04f 32ff 	mov.w	r2, #4294967295
 800794e:	2100      	movs	r1, #0
 8007950:	4798      	blx	r3
 8007952:	4603      	mov	r3, r0
 8007954:	73bb      	strb	r3, [r7, #14]
      return;
 8007956:	e08b      	b.n	8007a70 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007958:	23f0      	movs	r3, #240	; 0xf0
 800795a:	73bb      	strb	r3, [r7, #14]
      return;
 800795c:	e088      	b.n	8007a70 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800795e:	4b50      	ldr	r3, [pc, #320]	; (8007aa0 <tcp_listen_input+0x1f0>)
 8007960:	695a      	ldr	r2, [r3, #20]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007966:	4b4e      	ldr	r3, [pc, #312]	; (8007aa0 <tcp_listen_input+0x1f0>)
 8007968:	691a      	ldr	r2, [r3, #16]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	8ada      	ldrh	r2, [r3, #22]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007976:	4b47      	ldr	r3, [pc, #284]	; (8007a94 <tcp_listen_input+0x1e4>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29a      	uxth	r2, r3
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2203      	movs	r2, #3
 8007986:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007988:	4b41      	ldr	r3, [pc, #260]	; (8007a90 <tcp_listen_input+0x1e0>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800799a:	6978      	ldr	r0, [r7, #20]
 800799c:	f7ff fa58 	bl	8006e50 <tcp_next_iss>
 80079a0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80079ba:	4b35      	ldr	r3, [pc, #212]	; (8007a90 <tcp_listen_input+0x1e0>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	1e5a      	subs	r2, r3, #1
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	7a5b      	ldrb	r3, [r3, #9]
 80079d6:	f003 030c 	and.w	r3, r3, #12
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	7a1a      	ldrb	r2, [r3, #8]
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80079e8:	4b2e      	ldr	r3, [pc, #184]	; (8007aa4 <tcp_listen_input+0x1f4>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	60da      	str	r2, [r3, #12]
 80079f0:	4a2c      	ldr	r2, [pc, #176]	; (8007aa4 <tcp_listen_input+0x1f4>)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	f003 f8d1 	bl	800ab9c <tcp_timer_needed>
 80079fa:	4b2b      	ldr	r3, [pc, #172]	; (8007aa8 <tcp_listen_input+0x1f8>)
 80079fc:	2201      	movs	r2, #1
 80079fe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007a00:	6978      	ldr	r0, [r7, #20]
 8007a02:	f001 fd8f 	bl	8009524 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007a06:	4b23      	ldr	r3, [pc, #140]	; (8007a94 <tcp_listen_input+0x1e4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	89db      	ldrh	r3, [r3, #14]
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	3304      	adds	r3, #4
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f004 fc95 	bl	800c358 <ip4_route>
 8007a2e:	4601      	mov	r1, r0
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	3304      	adds	r3, #4
 8007a34:	461a      	mov	r2, r3
 8007a36:	4620      	mov	r0, r4
 8007a38:	f7ff fa30 	bl	8006e9c <tcp_eff_send_mss_netif>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	461a      	mov	r2, r3
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007a44:	2112      	movs	r1, #18
 8007a46:	6978      	ldr	r0, [r7, #20]
 8007a48:	f002 f844 	bl	8009ad4 <tcp_enqueue_flags>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007a58:	2100      	movs	r1, #0
 8007a5a:	6978      	ldr	r0, [r7, #20]
 8007a5c:	f7fe f97e 	bl	8005d5c <tcp_abandon>
      return;
 8007a60:	e006      	b.n	8007a70 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007a62:	6978      	ldr	r0, [r7, #20]
 8007a64:	f002 f924 	bl	8009cb0 <tcp_output>
  return;
 8007a68:	e001      	b.n	8007a6e <tcp_listen_input+0x1be>
    return;
 8007a6a:	bf00      	nop
 8007a6c:	e000      	b.n	8007a70 <tcp_listen_input+0x1c0>
  return;
 8007a6e:	bf00      	nop
}
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd90      	pop	{r4, r7, pc}
 8007a76:	bf00      	nop
 8007a78:	2000a448 	.word	0x2000a448
 8007a7c:	0800fab0 	.word	0x0800fab0
 8007a80:	0800fca8 	.word	0x0800fca8
 8007a84:	0800fafc 	.word	0x0800fafc
 8007a88:	2000a440 	.word	0x2000a440
 8007a8c:	2000a446 	.word	0x2000a446
 8007a90:	2000a43c 	.word	0x2000a43c
 8007a94:	2000a42c 	.word	0x2000a42c
 8007a98:	20004ce4 	.word	0x20004ce4
 8007a9c:	20004ce8 	.word	0x20004ce8
 8007aa0:	20004cd4 	.word	0x20004cd4
 8007aa4:	2000a410 	.word	0x2000a410
 8007aa8:	2000a418 	.word	0x2000a418

08007aac <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af04      	add	r7, sp, #16
 8007ab2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007ab4:	4b2f      	ldr	r3, [pc, #188]	; (8007b74 <tcp_timewait_input+0xc8>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d153      	bne.n	8007b68 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <tcp_timewait_input+0x28>
 8007ac6:	4b2c      	ldr	r3, [pc, #176]	; (8007b78 <tcp_timewait_input+0xcc>)
 8007ac8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007acc:	492b      	ldr	r1, [pc, #172]	; (8007b7c <tcp_timewait_input+0xd0>)
 8007ace:	482c      	ldr	r0, [pc, #176]	; (8007b80 <tcp_timewait_input+0xd4>)
 8007ad0:	f005 fe78 	bl	800d7c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007ad4:	4b27      	ldr	r3, [pc, #156]	; (8007b74 <tcp_timewait_input+0xc8>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d02a      	beq.n	8007b36 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007ae0:	4b28      	ldr	r3, [pc, #160]	; (8007b84 <tcp_timewait_input+0xd8>)
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	db2d      	blt.n	8007b4a <tcp_timewait_input+0x9e>
 8007aee:	4b25      	ldr	r3, [pc, #148]	; (8007b84 <tcp_timewait_input+0xd8>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007afa:	440b      	add	r3, r1
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	dc23      	bgt.n	8007b4a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b02:	4b21      	ldr	r3, [pc, #132]	; (8007b88 <tcp_timewait_input+0xdc>)
 8007b04:	6819      	ldr	r1, [r3, #0]
 8007b06:	4b21      	ldr	r3, [pc, #132]	; (8007b8c <tcp_timewait_input+0xe0>)
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	4b1d      	ldr	r3, [pc, #116]	; (8007b84 <tcp_timewait_input+0xd8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b12:	4b1f      	ldr	r3, [pc, #124]	; (8007b90 <tcp_timewait_input+0xe4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b16:	885b      	ldrh	r3, [r3, #2]
 8007b18:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b1a:	4a1d      	ldr	r2, [pc, #116]	; (8007b90 <tcp_timewait_input+0xe4>)
 8007b1c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b1e:	8812      	ldrh	r2, [r2, #0]
 8007b20:	b292      	uxth	r2, r2
 8007b22:	9202      	str	r2, [sp, #8]
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	4b1b      	ldr	r3, [pc, #108]	; (8007b94 <tcp_timewait_input+0xe8>)
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	4b1b      	ldr	r3, [pc, #108]	; (8007b98 <tcp_timewait_input+0xec>)
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f002 fe72 	bl	800a818 <tcp_rst>
      return;
 8007b34:	e01b      	b.n	8007b6e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007b36:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <tcp_timewait_input+0xc8>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007b42:	4b16      	ldr	r3, [pc, #88]	; (8007b9c <tcp_timewait_input+0xf0>)
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007b4a:	4b10      	ldr	r3, [pc, #64]	; (8007b8c <tcp_timewait_input+0xe0>)
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00c      	beq.n	8007b6c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	8b5b      	ldrh	r3, [r3, #26]
 8007b56:	f043 0302 	orr.w	r3, r3, #2
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f002 f8a5 	bl	8009cb0 <tcp_output>
  }
  return;
 8007b66:	e001      	b.n	8007b6c <tcp_timewait_input+0xc0>
    return;
 8007b68:	bf00      	nop
 8007b6a:	e000      	b.n	8007b6e <tcp_timewait_input+0xc2>
  return;
 8007b6c:	bf00      	nop
}
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	2000a448 	.word	0x2000a448
 8007b78:	0800fab0 	.word	0x0800fab0
 8007b7c:	0800fcc8 	.word	0x0800fcc8
 8007b80:	0800fafc 	.word	0x0800fafc
 8007b84:	2000a43c 	.word	0x2000a43c
 8007b88:	2000a440 	.word	0x2000a440
 8007b8c:	2000a446 	.word	0x2000a446
 8007b90:	2000a42c 	.word	0x2000a42c
 8007b94:	20004ce4 	.word	0x20004ce4
 8007b98:	20004ce8 	.word	0x20004ce8
 8007b9c:	2000a404 	.word	0x2000a404

08007ba0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007ba0:	b590      	push	{r4, r7, lr}
 8007ba2:	b08d      	sub	sp, #52	; 0x34
 8007ba4:	af04      	add	r7, sp, #16
 8007ba6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <tcp_process+0x24>
 8007bb6:	4b9d      	ldr	r3, [pc, #628]	; (8007e2c <tcp_process+0x28c>)
 8007bb8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007bbc:	499c      	ldr	r1, [pc, #624]	; (8007e30 <tcp_process+0x290>)
 8007bbe:	489d      	ldr	r0, [pc, #628]	; (8007e34 <tcp_process+0x294>)
 8007bc0:	f005 fe00 	bl	800d7c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007bc4:	4b9c      	ldr	r3, [pc, #624]	; (8007e38 <tcp_process+0x298>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	f003 0304 	and.w	r3, r3, #4
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d04e      	beq.n	8007c6e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	7d1b      	ldrb	r3, [r3, #20]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d108      	bne.n	8007bea <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bdc:	4b97      	ldr	r3, [pc, #604]	; (8007e3c <tcp_process+0x29c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d123      	bne.n	8007c2c <tcp_process+0x8c>
        acceptable = 1;
 8007be4:	2301      	movs	r3, #1
 8007be6:	76fb      	strb	r3, [r7, #27]
 8007be8:	e020      	b.n	8007c2c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bee:	4b94      	ldr	r3, [pc, #592]	; (8007e40 <tcp_process+0x2a0>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d102      	bne.n	8007bfc <tcp_process+0x5c>
        acceptable = 1;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	76fb      	strb	r3, [r7, #27]
 8007bfa:	e017      	b.n	8007c2c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007bfc:	4b90      	ldr	r3, [pc, #576]	; (8007e40 <tcp_process+0x2a0>)
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	db10      	blt.n	8007c2c <tcp_process+0x8c>
 8007c0a:	4b8d      	ldr	r3, [pc, #564]	; (8007e40 <tcp_process+0x2a0>)
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	6879      	ldr	r1, [r7, #4]
 8007c14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007c16:	440b      	add	r3, r1
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dc06      	bgt.n	8007c2c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	8b5b      	ldrh	r3, [r3, #26]
 8007c22:	f043 0302 	orr.w	r3, r3, #2
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007c2c:	7efb      	ldrb	r3, [r7, #27]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d01b      	beq.n	8007c6a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	7d1b      	ldrb	r3, [r3, #20]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <tcp_process+0xa8>
 8007c3a:	4b7c      	ldr	r3, [pc, #496]	; (8007e2c <tcp_process+0x28c>)
 8007c3c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007c40:	4980      	ldr	r1, [pc, #512]	; (8007e44 <tcp_process+0x2a4>)
 8007c42:	487c      	ldr	r0, [pc, #496]	; (8007e34 <tcp_process+0x294>)
 8007c44:	f005 fdbe 	bl	800d7c4 <iprintf>
      recv_flags |= TF_RESET;
 8007c48:	4b7f      	ldr	r3, [pc, #508]	; (8007e48 <tcp_process+0x2a8>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	f043 0308 	orr.w	r3, r3, #8
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	4b7d      	ldr	r3, [pc, #500]	; (8007e48 <tcp_process+0x2a8>)
 8007c54:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	8b5b      	ldrh	r3, [r3, #26]
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007c64:	f06f 030d 	mvn.w	r3, #13
 8007c68:	e37a      	b.n	8008360 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e378      	b.n	8008360 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007c6e:	4b72      	ldr	r3, [pc, #456]	; (8007e38 <tcp_process+0x298>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d010      	beq.n	8007c9c <tcp_process+0xfc>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	7d1b      	ldrb	r3, [r3, #20]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d00c      	beq.n	8007c9c <tcp_process+0xfc>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	7d1b      	ldrb	r3, [r3, #20]
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d008      	beq.n	8007c9c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8b5b      	ldrh	r3, [r3, #26]
 8007c8e:	f043 0302 	orr.w	r3, r3, #2
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e361      	b.n	8008360 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	8b5b      	ldrh	r3, [r3, #26]
 8007ca0:	f003 0310 	and.w	r3, r3, #16
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d103      	bne.n	8007cb0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007ca8:	4b68      	ldr	r3, [pc, #416]	; (8007e4c <tcp_process+0x2ac>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 fc2f 	bl	8009524 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	7d1b      	ldrb	r3, [r3, #20]
 8007cca:	3b02      	subs	r3, #2
 8007ccc:	2b07      	cmp	r3, #7
 8007cce:	f200 8337 	bhi.w	8008340 <tcp_process+0x7a0>
 8007cd2:	a201      	add	r2, pc, #4	; (adr r2, 8007cd8 <tcp_process+0x138>)
 8007cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd8:	08007cf9 	.word	0x08007cf9
 8007cdc:	08007f29 	.word	0x08007f29
 8007ce0:	080080a1 	.word	0x080080a1
 8007ce4:	080080cb 	.word	0x080080cb
 8007ce8:	080081ef 	.word	0x080081ef
 8007cec:	080080a1 	.word	0x080080a1
 8007cf0:	0800827b 	.word	0x0800827b
 8007cf4:	0800830b 	.word	0x0800830b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007cf8:	4b4f      	ldr	r3, [pc, #316]	; (8007e38 <tcp_process+0x298>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f003 0310 	and.w	r3, r3, #16
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 80e4 	beq.w	8007ece <tcp_process+0x32e>
 8007d06:	4b4c      	ldr	r3, [pc, #304]	; (8007e38 <tcp_process+0x298>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 80dd 	beq.w	8007ece <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	4b48      	ldr	r3, [pc, #288]	; (8007e3c <tcp_process+0x29c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	f040 80d5 	bne.w	8007ece <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007d24:	4b46      	ldr	r3, [pc, #280]	; (8007e40 <tcp_process+0x2a0>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8007d36:	4b41      	ldr	r3, [pc, #260]	; (8007e3c <tcp_process+0x29c>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007d3e:	4b44      	ldr	r3, [pc, #272]	; (8007e50 <tcp_process+0x2b0>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	89db      	ldrh	r3, [r3, #14]
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007d58:	4b39      	ldr	r3, [pc, #228]	; (8007e40 <tcp_process+0x2a0>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	1e5a      	subs	r2, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2204      	movs	r2, #4
 8007d66:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4618      	mov	r0, r3
 8007d72:	f004 faf1 	bl	800c358 <ip4_route>
 8007d76:	4601      	mov	r1, r0
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f7ff f88c 	bl	8006e9c <tcp_eff_send_mss_netif>
 8007d84:	4603      	mov	r3, r0
 8007d86:	461a      	mov	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d90:	009a      	lsls	r2, r3, #2
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	f241 111c 	movw	r1, #4380	; 0x111c
 8007d9c:	428b      	cmp	r3, r1
 8007d9e:	bf38      	it	cc
 8007da0:	460b      	movcc	r3, r1
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d204      	bcs.n	8007db0 <tcp_process+0x210>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	e00d      	b.n	8007dcc <tcp_process+0x22c>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	f241 121c 	movw	r2, #4380	; 0x111c
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d904      	bls.n	8007dc8 <tcp_process+0x228>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007dc2:	005b      	lsls	r3, r3, #1
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	e001      	b.n	8007dcc <tcp_process+0x22c>
 8007dc8:	f241 131c 	movw	r3, #4380	; 0x111c
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d106      	bne.n	8007dea <tcp_process+0x24a>
 8007ddc:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <tcp_process+0x28c>)
 8007dde:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007de2:	491c      	ldr	r1, [pc, #112]	; (8007e54 <tcp_process+0x2b4>)
 8007de4:	4813      	ldr	r0, [pc, #76]	; (8007e34 <tcp_process+0x294>)
 8007de6:	f005 fced 	bl	800d7c4 <iprintf>
        --pcb->snd_queuelen;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007df0:	3b01      	subs	r3, #1
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfe:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d12a      	bne.n	8007e5c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e0a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <tcp_process+0x280>
 8007e12:	4b06      	ldr	r3, [pc, #24]	; (8007e2c <tcp_process+0x28c>)
 8007e14:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007e18:	490f      	ldr	r1, [pc, #60]	; (8007e58 <tcp_process+0x2b8>)
 8007e1a:	4806      	ldr	r0, [pc, #24]	; (8007e34 <tcp_process+0x294>)
 8007e1c:	f005 fcd2 	bl	800d7c4 <iprintf>
          pcb->unsent = rseg->next;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	66da      	str	r2, [r3, #108]	; 0x6c
 8007e28:	e01c      	b.n	8007e64 <tcp_process+0x2c4>
 8007e2a:	bf00      	nop
 8007e2c:	0800fab0 	.word	0x0800fab0
 8007e30:	0800fce8 	.word	0x0800fce8
 8007e34:	0800fafc 	.word	0x0800fafc
 8007e38:	2000a448 	.word	0x2000a448
 8007e3c:	2000a440 	.word	0x2000a440
 8007e40:	2000a43c 	.word	0x2000a43c
 8007e44:	0800fd04 	.word	0x0800fd04
 8007e48:	2000a449 	.word	0x2000a449
 8007e4c:	2000a404 	.word	0x2000a404
 8007e50:	2000a42c 	.word	0x2000a42c
 8007e54:	0800fd24 	.word	0x0800fd24
 8007e58:	0800fd3c 	.word	0x0800fd3c
        } else {
          pcb->unacked = rseg->next;
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007e64:	69f8      	ldr	r0, [r7, #28]
 8007e66:	f7fe fd22 	bl	80068ae <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d104      	bne.n	8007e7c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e78:	861a      	strh	r2, [r3, #48]	; 0x30
 8007e7a:	e006      	b.n	8007e8a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00a      	beq.n	8007eaa <tcp_process+0x30a>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6910      	ldr	r0, [r2, #16]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	4798      	blx	r3
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	76bb      	strb	r3, [r7, #26]
 8007ea8:	e001      	b.n	8007eae <tcp_process+0x30e>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007eae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007eb2:	f113 0f0d 	cmn.w	r3, #13
 8007eb6:	d102      	bne.n	8007ebe <tcp_process+0x31e>
          return ERR_ABRT;
 8007eb8:	f06f 030c 	mvn.w	r3, #12
 8007ebc:	e250      	b.n	8008360 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	8b5b      	ldrh	r3, [r3, #26]
 8007ec2:	f043 0302 	orr.w	r3, r3, #2
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007ecc:	e23a      	b.n	8008344 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007ece:	4b98      	ldr	r3, [pc, #608]	; (8008130 <tcp_process+0x590>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	f003 0310 	and.w	r3, r3, #16
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 8234 	beq.w	8008344 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007edc:	4b95      	ldr	r3, [pc, #596]	; (8008134 <tcp_process+0x594>)
 8007ede:	6819      	ldr	r1, [r3, #0]
 8007ee0:	4b95      	ldr	r3, [pc, #596]	; (8008138 <tcp_process+0x598>)
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	4b95      	ldr	r3, [pc, #596]	; (800813c <tcp_process+0x59c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007eec:	4b94      	ldr	r3, [pc, #592]	; (8008140 <tcp_process+0x5a0>)
 8007eee:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ef0:	885b      	ldrh	r3, [r3, #2]
 8007ef2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ef4:	4a92      	ldr	r2, [pc, #584]	; (8008140 <tcp_process+0x5a0>)
 8007ef6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ef8:	8812      	ldrh	r2, [r2, #0]
 8007efa:	b292      	uxth	r2, r2
 8007efc:	9202      	str	r2, [sp, #8]
 8007efe:	9301      	str	r3, [sp, #4]
 8007f00:	4b90      	ldr	r3, [pc, #576]	; (8008144 <tcp_process+0x5a4>)
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	4b90      	ldr	r3, [pc, #576]	; (8008148 <tcp_process+0x5a8>)
 8007f06:	4602      	mov	r2, r0
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f002 fc85 	bl	800a818 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f14:	2b05      	cmp	r3, #5
 8007f16:	f200 8215 	bhi.w	8008344 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f002 fa4f 	bl	800a3c4 <tcp_rexmit_rto>
      break;
 8007f26:	e20d      	b.n	8008344 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007f28:	4b81      	ldr	r3, [pc, #516]	; (8008130 <tcp_process+0x590>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	f003 0310 	and.w	r3, r3, #16
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 80a1 	beq.w	8008078 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007f36:	4b7f      	ldr	r3, [pc, #508]	; (8008134 <tcp_process+0x594>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	3b01      	subs	r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	db7e      	blt.n	8008044 <tcp_process+0x4a4>
 8007f46:	4b7b      	ldr	r3, [pc, #492]	; (8008134 <tcp_process+0x594>)
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	dc77      	bgt.n	8008044 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2204      	movs	r2, #4
 8007f58:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d102      	bne.n	8007f68 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007f62:	23fa      	movs	r3, #250	; 0xfa
 8007f64:	76bb      	strb	r3, [r7, #26]
 8007f66:	e01d      	b.n	8007fa4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d106      	bne.n	8007f80 <tcp_process+0x3e0>
 8007f72:	4b76      	ldr	r3, [pc, #472]	; (800814c <tcp_process+0x5ac>)
 8007f74:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007f78:	4975      	ldr	r1, [pc, #468]	; (8008150 <tcp_process+0x5b0>)
 8007f7a:	4876      	ldr	r0, [pc, #472]	; (8008154 <tcp_process+0x5b4>)
 8007f7c:	f005 fc22 	bl	800d7c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <tcp_process+0x400>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6910      	ldr	r0, [r2, #16]
 8007f94:	2200      	movs	r2, #0
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	4798      	blx	r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	76bb      	strb	r3, [r7, #26]
 8007f9e:	e001      	b.n	8007fa4 <tcp_process+0x404>
 8007fa0:	23f0      	movs	r3, #240	; 0xf0
 8007fa2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007fa4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007fac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007fb0:	f113 0f0d 	cmn.w	r3, #13
 8007fb4:	d002      	beq.n	8007fbc <tcp_process+0x41c>
              tcp_abort(pcb);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7fd ff8e 	bl	8005ed8 <tcp_abort>
            }
            return ERR_ABRT;
 8007fbc:	f06f 030c 	mvn.w	r3, #12
 8007fc0:	e1ce      	b.n	8008360 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fae0 	bl	8008588 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007fc8:	4b63      	ldr	r3, [pc, #396]	; (8008158 <tcp_process+0x5b8>)
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d005      	beq.n	8007fdc <tcp_process+0x43c>
            recv_acked--;
 8007fd0:	4b61      	ldr	r3, [pc, #388]	; (8008158 <tcp_process+0x5b8>)
 8007fd2:	881b      	ldrh	r3, [r3, #0]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	4b5f      	ldr	r3, [pc, #380]	; (8008158 <tcp_process+0x5b8>)
 8007fda:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007fe0:	009a      	lsls	r2, r3, #2
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	f241 111c 	movw	r1, #4380	; 0x111c
 8007fec:	428b      	cmp	r3, r1
 8007fee:	bf38      	it	cc
 8007ff0:	460b      	movcc	r3, r1
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d204      	bcs.n	8008000 <tcp_process+0x460>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	e00d      	b.n	800801c <tcp_process+0x47c>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	f241 121c 	movw	r2, #4380	; 0x111c
 800800a:	4293      	cmp	r3, r2
 800800c:	d904      	bls.n	8008018 <tcp_process+0x478>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	b29b      	uxth	r3, r3
 8008016:	e001      	b.n	800801c <tcp_process+0x47c>
 8008018:	f241 131c 	movw	r3, #4380	; 0x111c
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008022:	4b4e      	ldr	r3, [pc, #312]	; (800815c <tcp_process+0x5bc>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d037      	beq.n	800809e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	8b5b      	ldrh	r3, [r3, #26]
 8008032:	f043 0302 	orr.w	r3, r3, #2
 8008036:	b29a      	uxth	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2207      	movs	r2, #7
 8008040:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008042:	e02c      	b.n	800809e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008044:	4b3b      	ldr	r3, [pc, #236]	; (8008134 <tcp_process+0x594>)
 8008046:	6819      	ldr	r1, [r3, #0]
 8008048:	4b3b      	ldr	r3, [pc, #236]	; (8008138 <tcp_process+0x598>)
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
 800804e:	4b3b      	ldr	r3, [pc, #236]	; (800813c <tcp_process+0x59c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008054:	4b3a      	ldr	r3, [pc, #232]	; (8008140 <tcp_process+0x5a0>)
 8008056:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008058:	885b      	ldrh	r3, [r3, #2]
 800805a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800805c:	4a38      	ldr	r2, [pc, #224]	; (8008140 <tcp_process+0x5a0>)
 800805e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008060:	8812      	ldrh	r2, [r2, #0]
 8008062:	b292      	uxth	r2, r2
 8008064:	9202      	str	r2, [sp, #8]
 8008066:	9301      	str	r3, [sp, #4]
 8008068:	4b36      	ldr	r3, [pc, #216]	; (8008144 <tcp_process+0x5a4>)
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	4b36      	ldr	r3, [pc, #216]	; (8008148 <tcp_process+0x5a8>)
 800806e:	4602      	mov	r2, r0
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f002 fbd1 	bl	800a818 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008076:	e167      	b.n	8008348 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008078:	4b2d      	ldr	r3, [pc, #180]	; (8008130 <tcp_process+0x590>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 8161 	beq.w	8008348 <tcp_process+0x7a8>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	1e5a      	subs	r2, r3, #1
 800808c:	4b2b      	ldr	r3, [pc, #172]	; (800813c <tcp_process+0x59c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	429a      	cmp	r2, r3
 8008092:	f040 8159 	bne.w	8008348 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f002 f9b6 	bl	800a408 <tcp_rexmit>
      break;
 800809c:	e154      	b.n	8008348 <tcp_process+0x7a8>
 800809e:	e153      	b.n	8008348 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fa71 	bl	8008588 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80080a6:	4b2d      	ldr	r3, [pc, #180]	; (800815c <tcp_process+0x5bc>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 814c 	beq.w	800834c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8b5b      	ldrh	r3, [r3, #26]
 80080b8:	f043 0302 	orr.w	r3, r3, #2
 80080bc:	b29a      	uxth	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2207      	movs	r2, #7
 80080c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80080c8:	e140      	b.n	800834c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa5c 	bl	8008588 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80080d0:	4b22      	ldr	r3, [pc, #136]	; (800815c <tcp_process+0x5bc>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d071      	beq.n	80081c0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80080dc:	4b14      	ldr	r3, [pc, #80]	; (8008130 <tcp_process+0x590>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d060      	beq.n	80081aa <tcp_process+0x60a>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080ec:	4b11      	ldr	r3, [pc, #68]	; (8008134 <tcp_process+0x594>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d15a      	bne.n	80081aa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d156      	bne.n	80081aa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8b5b      	ldrh	r3, [r3, #26]
 8008100:	f043 0302 	orr.w	r3, r3, #2
 8008104:	b29a      	uxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7fe fdbc 	bl	8006c88 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008110:	4b13      	ldr	r3, [pc, #76]	; (8008160 <tcp_process+0x5c0>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	429a      	cmp	r2, r3
 8008118:	d105      	bne.n	8008126 <tcp_process+0x586>
 800811a:	4b11      	ldr	r3, [pc, #68]	; (8008160 <tcp_process+0x5c0>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	4a0f      	ldr	r2, [pc, #60]	; (8008160 <tcp_process+0x5c0>)
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	e02e      	b.n	8008184 <tcp_process+0x5e4>
 8008126:	4b0e      	ldr	r3, [pc, #56]	; (8008160 <tcp_process+0x5c0>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	e027      	b.n	800817e <tcp_process+0x5de>
 800812e:	bf00      	nop
 8008130:	2000a448 	.word	0x2000a448
 8008134:	2000a440 	.word	0x2000a440
 8008138:	2000a446 	.word	0x2000a446
 800813c:	2000a43c 	.word	0x2000a43c
 8008140:	2000a42c 	.word	0x2000a42c
 8008144:	20004ce4 	.word	0x20004ce4
 8008148:	20004ce8 	.word	0x20004ce8
 800814c:	0800fab0 	.word	0x0800fab0
 8008150:	0800fd50 	.word	0x0800fd50
 8008154:	0800fafc 	.word	0x0800fafc
 8008158:	2000a444 	.word	0x2000a444
 800815c:	2000a449 	.word	0x2000a449
 8008160:	2000a410 	.word	0x2000a410
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	429a      	cmp	r2, r3
 800816c:	d104      	bne.n	8008178 <tcp_process+0x5d8>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	60da      	str	r2, [r3, #12]
 8008176:	e005      	b.n	8008184 <tcp_process+0x5e4>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	617b      	str	r3, [r7, #20]
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1ef      	bne.n	8008164 <tcp_process+0x5c4>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	60da      	str	r2, [r3, #12]
 800818a:	4b77      	ldr	r3, [pc, #476]	; (8008368 <tcp_process+0x7c8>)
 800818c:	2201      	movs	r2, #1
 800818e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	220a      	movs	r2, #10
 8008194:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008196:	4b75      	ldr	r3, [pc, #468]	; (800836c <tcp_process+0x7cc>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	60da      	str	r2, [r3, #12]
 800819e:	4a73      	ldr	r2, [pc, #460]	; (800836c <tcp_process+0x7cc>)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	f002 fcfa 	bl	800ab9c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80081a8:	e0d2      	b.n	8008350 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	8b5b      	ldrh	r3, [r3, #26]
 80081ae:	f043 0302 	orr.w	r3, r3, #2
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2208      	movs	r2, #8
 80081bc:	751a      	strb	r2, [r3, #20]
      break;
 80081be:	e0c7      	b.n	8008350 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081c0:	4b6b      	ldr	r3, [pc, #428]	; (8008370 <tcp_process+0x7d0>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	f003 0310 	and.w	r3, r3, #16
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 80c1 	beq.w	8008350 <tcp_process+0x7b0>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081d2:	4b68      	ldr	r3, [pc, #416]	; (8008374 <tcp_process+0x7d4>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	f040 80ba 	bne.w	8008350 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f040 80b5 	bne.w	8008350 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2206      	movs	r2, #6
 80081ea:	751a      	strb	r2, [r3, #20]
      break;
 80081ec:	e0b0      	b.n	8008350 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f9ca 	bl	8008588 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80081f4:	4b60      	ldr	r3, [pc, #384]	; (8008378 <tcp_process+0x7d8>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 80a9 	beq.w	8008354 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	8b5b      	ldrh	r3, [r3, #26]
 8008206:	f043 0302 	orr.w	r3, r3, #2
 800820a:	b29a      	uxth	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7fe fd39 	bl	8006c88 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008216:	4b59      	ldr	r3, [pc, #356]	; (800837c <tcp_process+0x7dc>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	429a      	cmp	r2, r3
 800821e:	d105      	bne.n	800822c <tcp_process+0x68c>
 8008220:	4b56      	ldr	r3, [pc, #344]	; (800837c <tcp_process+0x7dc>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	4a55      	ldr	r2, [pc, #340]	; (800837c <tcp_process+0x7dc>)
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	e013      	b.n	8008254 <tcp_process+0x6b4>
 800822c:	4b53      	ldr	r3, [pc, #332]	; (800837c <tcp_process+0x7dc>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	613b      	str	r3, [r7, #16]
 8008232:	e00c      	b.n	800824e <tcp_process+0x6ae>
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	429a      	cmp	r2, r3
 800823c:	d104      	bne.n	8008248 <tcp_process+0x6a8>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68da      	ldr	r2, [r3, #12]
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	60da      	str	r2, [r3, #12]
 8008246:	e005      	b.n	8008254 <tcp_process+0x6b4>
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	613b      	str	r3, [r7, #16]
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1ef      	bne.n	8008234 <tcp_process+0x694>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	4b43      	ldr	r3, [pc, #268]	; (8008368 <tcp_process+0x7c8>)
 800825c:	2201      	movs	r2, #1
 800825e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	220a      	movs	r2, #10
 8008264:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008266:	4b41      	ldr	r3, [pc, #260]	; (800836c <tcp_process+0x7cc>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60da      	str	r2, [r3, #12]
 800826e:	4a3f      	ldr	r2, [pc, #252]	; (800836c <tcp_process+0x7cc>)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	f002 fc92 	bl	800ab9c <tcp_timer_needed>
      }
      break;
 8008278:	e06c      	b.n	8008354 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f984 	bl	8008588 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008280:	4b3b      	ldr	r3, [pc, #236]	; (8008370 <tcp_process+0x7d0>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	f003 0310 	and.w	r3, r3, #16
 8008288:	2b00      	cmp	r3, #0
 800828a:	d065      	beq.n	8008358 <tcp_process+0x7b8>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008290:	4b38      	ldr	r3, [pc, #224]	; (8008374 <tcp_process+0x7d4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d15f      	bne.n	8008358 <tcp_process+0x7b8>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d15b      	bne.n	8008358 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7fe fcf1 	bl	8006c88 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80082a6:	4b35      	ldr	r3, [pc, #212]	; (800837c <tcp_process+0x7dc>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d105      	bne.n	80082bc <tcp_process+0x71c>
 80082b0:	4b32      	ldr	r3, [pc, #200]	; (800837c <tcp_process+0x7dc>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	4a31      	ldr	r2, [pc, #196]	; (800837c <tcp_process+0x7dc>)
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	e013      	b.n	80082e4 <tcp_process+0x744>
 80082bc:	4b2f      	ldr	r3, [pc, #188]	; (800837c <tcp_process+0x7dc>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	e00c      	b.n	80082de <tcp_process+0x73e>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d104      	bne.n	80082d8 <tcp_process+0x738>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68da      	ldr	r2, [r3, #12]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	60da      	str	r2, [r3, #12]
 80082d6:	e005      	b.n	80082e4 <tcp_process+0x744>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1ef      	bne.n	80082c4 <tcp_process+0x724>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	60da      	str	r2, [r3, #12]
 80082ea:	4b1f      	ldr	r3, [pc, #124]	; (8008368 <tcp_process+0x7c8>)
 80082ec:	2201      	movs	r2, #1
 80082ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	220a      	movs	r2, #10
 80082f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80082f6:	4b1d      	ldr	r3, [pc, #116]	; (800836c <tcp_process+0x7cc>)
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	60da      	str	r2, [r3, #12]
 80082fe:	4a1b      	ldr	r2, [pc, #108]	; (800836c <tcp_process+0x7cc>)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	f002 fc4a 	bl	800ab9c <tcp_timer_needed>
      }
      break;
 8008308:	e026      	b.n	8008358 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f93c 	bl	8008588 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008310:	4b17      	ldr	r3, [pc, #92]	; (8008370 <tcp_process+0x7d0>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01f      	beq.n	800835c <tcp_process+0x7bc>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008320:	4b14      	ldr	r3, [pc, #80]	; (8008374 <tcp_process+0x7d4>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	429a      	cmp	r2, r3
 8008326:	d119      	bne.n	800835c <tcp_process+0x7bc>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d115      	bne.n	800835c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008330:	4b11      	ldr	r3, [pc, #68]	; (8008378 <tcp_process+0x7d8>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	f043 0310 	orr.w	r3, r3, #16
 8008338:	b2da      	uxtb	r2, r3
 800833a:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <tcp_process+0x7d8>)
 800833c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800833e:	e00d      	b.n	800835c <tcp_process+0x7bc>
    default:
      break;
 8008340:	bf00      	nop
 8008342:	e00c      	b.n	800835e <tcp_process+0x7be>
      break;
 8008344:	bf00      	nop
 8008346:	e00a      	b.n	800835e <tcp_process+0x7be>
      break;
 8008348:	bf00      	nop
 800834a:	e008      	b.n	800835e <tcp_process+0x7be>
      break;
 800834c:	bf00      	nop
 800834e:	e006      	b.n	800835e <tcp_process+0x7be>
      break;
 8008350:	bf00      	nop
 8008352:	e004      	b.n	800835e <tcp_process+0x7be>
      break;
 8008354:	bf00      	nop
 8008356:	e002      	b.n	800835e <tcp_process+0x7be>
      break;
 8008358:	bf00      	nop
 800835a:	e000      	b.n	800835e <tcp_process+0x7be>
      break;
 800835c:	bf00      	nop
  }
  return ERR_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3724      	adds	r7, #36	; 0x24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd90      	pop	{r4, r7, pc}
 8008368:	2000a418 	.word	0x2000a418
 800836c:	2000a414 	.word	0x2000a414
 8008370:	2000a448 	.word	0x2000a448
 8008374:	2000a440 	.word	0x2000a440
 8008378:	2000a449 	.word	0x2000a449
 800837c:	2000a410 	.word	0x2000a410

08008380 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008380:	b590      	push	{r4, r7, lr}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <tcp_oos_insert_segment+0x1e>
 8008390:	4b3b      	ldr	r3, [pc, #236]	; (8008480 <tcp_oos_insert_segment+0x100>)
 8008392:	f240 421f 	movw	r2, #1055	; 0x41f
 8008396:	493b      	ldr	r1, [pc, #236]	; (8008484 <tcp_oos_insert_segment+0x104>)
 8008398:	483b      	ldr	r0, [pc, #236]	; (8008488 <tcp_oos_insert_segment+0x108>)
 800839a:	f005 fa13 	bl	800d7c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	899b      	ldrh	r3, [r3, #12]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fb fcb0 	bl	8003d0c <lwip_htons>
 80083ac:	4603      	mov	r3, r0
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d028      	beq.n	800840a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80083b8:	6838      	ldr	r0, [r7, #0]
 80083ba:	f7fe fa63 	bl	8006884 <tcp_segs_free>
    next = NULL;
 80083be:	2300      	movs	r3, #0
 80083c0:	603b      	str	r3, [r7, #0]
 80083c2:	e056      	b.n	8008472 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	899b      	ldrh	r3, [r3, #12]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fb fc9d 	bl	8003d0c <lwip_htons>
 80083d2:	4603      	mov	r3, r0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00d      	beq.n	80083fa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	899b      	ldrh	r3, [r3, #12]
 80083e4:	b29c      	uxth	r4, r3
 80083e6:	2001      	movs	r0, #1
 80083e8:	f7fb fc90 	bl	8003d0c <lwip_htons>
 80083ec:	4603      	mov	r3, r0
 80083ee:	461a      	mov	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	4322      	orrs	r2, r4
 80083f6:	b292      	uxth	r2, r2
 80083f8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f7fe fa52 	bl	80068ae <tcp_seg_free>
    while (next &&
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00e      	beq.n	800842e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	891b      	ldrh	r3, [r3, #8]
 8008414:	461a      	mov	r2, r3
 8008416:	4b1d      	ldr	r3, [pc, #116]	; (800848c <tcp_oos_insert_segment+0x10c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	441a      	add	r2, r3
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	8909      	ldrh	r1, [r1, #8]
 8008426:	440b      	add	r3, r1
 8008428:	1ad3      	subs	r3, r2, r3
    while (next &&
 800842a:	2b00      	cmp	r3, #0
 800842c:	daca      	bge.n	80083c4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01e      	beq.n	8008472 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	891b      	ldrh	r3, [r3, #8]
 8008438:	461a      	mov	r2, r3
 800843a:	4b14      	ldr	r3, [pc, #80]	; (800848c <tcp_oos_insert_segment+0x10c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	441a      	add	r2, r3
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008448:	2b00      	cmp	r3, #0
 800844a:	dd12      	ble.n	8008472 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	b29a      	uxth	r2, r3
 8008454:	4b0d      	ldr	r3, [pc, #52]	; (800848c <tcp_oos_insert_segment+0x10c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	b29b      	uxth	r3, r3
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	b29a      	uxth	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	891b      	ldrh	r3, [r3, #8]
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f7fc fe25 	bl	80050bc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	601a      	str	r2, [r3, #0]
}
 8008478:	bf00      	nop
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	bd90      	pop	{r4, r7, pc}
 8008480:	0800fab0 	.word	0x0800fab0
 8008484:	0800fd70 	.word	0x0800fd70
 8008488:	0800fafc 	.word	0x0800fafc
 800848c:	2000a43c 	.word	0x2000a43c

08008490 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008490:	b5b0      	push	{r4, r5, r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800849e:	e03e      	b.n	800851e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fd f812 	bl	80054d8 <pbuf_clen>
 80084b4:	4603      	mov	r3, r0
 80084b6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80084be:	8a7a      	ldrh	r2, [r7, #18]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d906      	bls.n	80084d2 <tcp_free_acked_segments+0x42>
 80084c4:	4b2a      	ldr	r3, [pc, #168]	; (8008570 <tcp_free_acked_segments+0xe0>)
 80084c6:	f240 4257 	movw	r2, #1111	; 0x457
 80084ca:	492a      	ldr	r1, [pc, #168]	; (8008574 <tcp_free_acked_segments+0xe4>)
 80084cc:	482a      	ldr	r0, [pc, #168]	; (8008578 <tcp_free_acked_segments+0xe8>)
 80084ce:	f005 f979 	bl	800d7c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80084d8:	8a7b      	ldrh	r3, [r7, #18]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	b29a      	uxth	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	891a      	ldrh	r2, [r3, #8]
 80084e8:	4b24      	ldr	r3, [pc, #144]	; (800857c <tcp_free_acked_segments+0xec>)
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	4413      	add	r3, r2
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	4b22      	ldr	r3, [pc, #136]	; (800857c <tcp_free_acked_segments+0xec>)
 80084f2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80084f4:	6978      	ldr	r0, [r7, #20]
 80084f6:	f7fe f9da 	bl	80068ae <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00c      	beq.n	800851e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <tcp_free_acked_segments+0x8e>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d106      	bne.n	800851e <tcp_free_acked_segments+0x8e>
 8008510:	4b17      	ldr	r3, [pc, #92]	; (8008570 <tcp_free_acked_segments+0xe0>)
 8008512:	f240 4261 	movw	r2, #1121	; 0x461
 8008516:	491a      	ldr	r1, [pc, #104]	; (8008580 <tcp_free_acked_segments+0xf0>)
 8008518:	4817      	ldr	r0, [pc, #92]	; (8008578 <tcp_free_acked_segments+0xe8>)
 800851a:	f005 f953 	bl	800d7c4 <iprintf>
  while (seg_list != NULL &&
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d020      	beq.n	8008566 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	4618      	mov	r0, r3
 800852c:	f7fb fc03 	bl	8003d36 <lwip_htonl>
 8008530:	4604      	mov	r4, r0
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	891b      	ldrh	r3, [r3, #8]
 8008536:	461d      	mov	r5, r3
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	899b      	ldrh	r3, [r3, #12]
 800853e:	b29b      	uxth	r3, r3
 8008540:	4618      	mov	r0, r3
 8008542:	f7fb fbe3 	bl	8003d0c <lwip_htons>
 8008546:	4603      	mov	r3, r0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <tcp_free_acked_segments+0xc6>
 8008552:	2301      	movs	r3, #1
 8008554:	e000      	b.n	8008558 <tcp_free_acked_segments+0xc8>
 8008556:	2300      	movs	r3, #0
 8008558:	442b      	add	r3, r5
 800855a:	18e2      	adds	r2, r4, r3
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <tcp_free_acked_segments+0xf4>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008562:	2b00      	cmp	r3, #0
 8008564:	dd9c      	ble.n	80084a0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008566:	68bb      	ldr	r3, [r7, #8]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bdb0      	pop	{r4, r5, r7, pc}
 8008570:	0800fab0 	.word	0x0800fab0
 8008574:	0800fd98 	.word	0x0800fd98
 8008578:	0800fafc 	.word	0x0800fafc
 800857c:	2000a444 	.word	0x2000a444
 8008580:	0800fdc0 	.word	0x0800fdc0
 8008584:	2000a440 	.word	0x2000a440

08008588 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008588:	b5b0      	push	{r4, r5, r7, lr}
 800858a:	b094      	sub	sp, #80	; 0x50
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <tcp_receive+0x20>
 800859a:	4b91      	ldr	r3, [pc, #580]	; (80087e0 <tcp_receive+0x258>)
 800859c:	f240 427b 	movw	r2, #1147	; 0x47b
 80085a0:	4990      	ldr	r1, [pc, #576]	; (80087e4 <tcp_receive+0x25c>)
 80085a2:	4891      	ldr	r0, [pc, #580]	; (80087e8 <tcp_receive+0x260>)
 80085a4:	f005 f90e 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	7d1b      	ldrb	r3, [r3, #20]
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d806      	bhi.n	80085be <tcp_receive+0x36>
 80085b0:	4b8b      	ldr	r3, [pc, #556]	; (80087e0 <tcp_receive+0x258>)
 80085b2:	f240 427c 	movw	r2, #1148	; 0x47c
 80085b6:	498d      	ldr	r1, [pc, #564]	; (80087ec <tcp_receive+0x264>)
 80085b8:	488b      	ldr	r0, [pc, #556]	; (80087e8 <tcp_receive+0x260>)
 80085ba:	f005 f903 	bl	800d7c4 <iprintf>

  if (flags & TCP_ACK) {
 80085be:	4b8c      	ldr	r3, [pc, #560]	; (80087f0 <tcp_receive+0x268>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	f003 0310 	and.w	r3, r3, #16
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 8264 	beq.w	8008a94 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80085d2:	461a      	mov	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d8:	4413      	add	r3, r2
 80085da:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085e0:	4b84      	ldr	r3, [pc, #528]	; (80087f4 <tcp_receive+0x26c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	db1b      	blt.n	8008622 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085ee:	4b81      	ldr	r3, [pc, #516]	; (80087f4 <tcp_receive+0x26c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d106      	bne.n	8008604 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80085fa:	4b7f      	ldr	r3, [pc, #508]	; (80087f8 <tcp_receive+0x270>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	db0e      	blt.n	8008622 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008608:	4b7b      	ldr	r3, [pc, #492]	; (80087f8 <tcp_receive+0x270>)
 800860a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800860c:	429a      	cmp	r2, r3
 800860e:	d125      	bne.n	800865c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008610:	4b7a      	ldr	r3, [pc, #488]	; (80087fc <tcp_receive+0x274>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	89db      	ldrh	r3, [r3, #14]
 8008616:	b29a      	uxth	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800861e:	429a      	cmp	r2, r3
 8008620:	d91c      	bls.n	800865c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008622:	4b76      	ldr	r3, [pc, #472]	; (80087fc <tcp_receive+0x274>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	89db      	ldrh	r3, [r3, #14]
 8008628:	b29a      	uxth	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800863c:	429a      	cmp	r2, r3
 800863e:	d205      	bcs.n	800864c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800864c:	4b69      	ldr	r3, [pc, #420]	; (80087f4 <tcp_receive+0x26c>)
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008654:	4b68      	ldr	r3, [pc, #416]	; (80087f8 <tcp_receive+0x270>)
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800865c:	4b66      	ldr	r3, [pc, #408]	; (80087f8 <tcp_receive+0x270>)
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	dc58      	bgt.n	800871c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800866a:	4b65      	ldr	r3, [pc, #404]	; (8008800 <tcp_receive+0x278>)
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d14b      	bne.n	800870a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800867c:	4413      	add	r3, r2
 800867e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008680:	429a      	cmp	r2, r3
 8008682:	d142      	bne.n	800870a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800868a:	2b00      	cmp	r3, #0
 800868c:	db3d      	blt.n	800870a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008692:	4b59      	ldr	r3, [pc, #356]	; (80087f8 <tcp_receive+0x270>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d137      	bne.n	800870a <tcp_receive+0x182>
              found_dupack = 1;
 800869a:	2301      	movs	r3, #1
 800869c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086a4:	2bff      	cmp	r3, #255	; 0xff
 80086a6:	d007      	beq.n	80086b8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086ae:	3301      	adds	r3, #1
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d91b      	bls.n	80086fa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086cc:	4413      	add	r3, r2
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d30a      	bcc.n	80086f0 <tcp_receive+0x168>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086e4:	4413      	add	r3, r2
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80086ee:	e004      	b.n	80086fa <tcp_receive+0x172>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008700:	2b02      	cmp	r3, #2
 8008702:	d902      	bls.n	800870a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 feeb 	bl	800a4e0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800870a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800870c:	2b00      	cmp	r3, #0
 800870e:	f040 8161 	bne.w	80089d4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800871a:	e15b      	b.n	80089d4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800871c:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <tcp_receive+0x270>)
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	2b00      	cmp	r3, #0
 800872a:	f2c0 814e 	blt.w	80089ca <tcp_receive+0x442>
 800872e:	4b32      	ldr	r3, [pc, #200]	; (80087f8 <tcp_receive+0x270>)
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	f300 8146 	bgt.w	80089ca <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	8b5b      	ldrh	r3, [r3, #26]
 8008742:	f003 0304 	and.w	r3, r3, #4
 8008746:	2b00      	cmp	r3, #0
 8008748:	d010      	beq.n	800876c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	8b5b      	ldrh	r3, [r3, #26]
 800874e:	f023 0304 	bic.w	r3, r3, #4
 8008752:	b29a      	uxth	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800877a:	10db      	asrs	r3, r3, #3
 800877c:	b21b      	sxth	r3, r3
 800877e:	b29a      	uxth	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008786:	b29b      	uxth	r3, r3
 8008788:	4413      	add	r3, r2
 800878a:	b29b      	uxth	r3, r3
 800878c:	b21a      	sxth	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008794:	4b18      	ldr	r3, [pc, #96]	; (80087f8 <tcp_receive+0x270>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	b29a      	uxth	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879e:	b29b      	uxth	r3, r3
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80087ac:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <tcp_receive+0x270>)
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	7d1b      	ldrb	r3, [r3, #20]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	f240 8097 	bls.w	80088ec <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d245      	bcs.n	800885a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	8b5b      	ldrh	r3, [r3, #26]
 80087d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d014      	beq.n	8008804 <tcp_receive+0x27c>
 80087da:	2301      	movs	r3, #1
 80087dc:	e013      	b.n	8008806 <tcp_receive+0x27e>
 80087de:	bf00      	nop
 80087e0:	0800fab0 	.word	0x0800fab0
 80087e4:	0800fde0 	.word	0x0800fde0
 80087e8:	0800fafc 	.word	0x0800fafc
 80087ec:	0800fdfc 	.word	0x0800fdfc
 80087f0:	2000a448 	.word	0x2000a448
 80087f4:	2000a43c 	.word	0x2000a43c
 80087f8:	2000a440 	.word	0x2000a440
 80087fc:	2000a42c 	.word	0x2000a42c
 8008800:	2000a446 	.word	0x2000a446
 8008804:	2302      	movs	r3, #2
 8008806:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800880a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800880e:	b29a      	uxth	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008814:	fb12 f303 	smulbb	r3, r2, r3
 8008818:	b29b      	uxth	r3, r3
 800881a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800881c:	4293      	cmp	r3, r2
 800881e:	bf28      	it	cs
 8008820:	4613      	movcs	r3, r2
 8008822:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800882a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800882c:	4413      	add	r3, r2
 800882e:	b29a      	uxth	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008836:	429a      	cmp	r2, r3
 8008838:	d309      	bcc.n	800884e <tcp_receive+0x2c6>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008840:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008842:	4413      	add	r3, r2
 8008844:	b29a      	uxth	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800884c:	e04e      	b.n	80088ec <tcp_receive+0x364>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008854:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008858:	e048      	b.n	80088ec <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008860:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008862:	4413      	add	r3, r2
 8008864:	b29a      	uxth	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800886c:	429a      	cmp	r2, r3
 800886e:	d309      	bcc.n	8008884 <tcp_receive+0x2fc>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008876:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008878:	4413      	add	r3, r2
 800887a:	b29a      	uxth	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008882:	e004      	b.n	800888e <tcp_receive+0x306>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800888a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800889a:	429a      	cmp	r2, r3
 800889c:	d326      	bcc.n	80088ec <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088be:	4413      	add	r3, r2
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d30a      	bcc.n	80088e2 <tcp_receive+0x35a>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088d6:	4413      	add	r3, r2
 80088d8:	b29a      	uxth	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80088e0:	e004      	b.n	80088ec <tcp_receive+0x364>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088f4:	4a98      	ldr	r2, [pc, #608]	; (8008b58 <tcp_receive+0x5d0>)
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff fdca 	bl	8008490 <tcp_free_acked_segments>
 80088fc:	4602      	mov	r2, r0
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890a:	4a94      	ldr	r2, [pc, #592]	; (8008b5c <tcp_receive+0x5d4>)
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7ff fdbf 	bl	8008490 <tcp_free_acked_segments>
 8008912:	4602      	mov	r2, r0
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891c:	2b00      	cmp	r3, #0
 800891e:	d104      	bne.n	800892a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008926:	861a      	strh	r2, [r3, #48]	; 0x30
 8008928:	e002      	b.n	8008930 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800893a:	2b00      	cmp	r3, #0
 800893c:	d103      	bne.n	8008946 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800894c:	4b84      	ldr	r3, [pc, #528]	; (8008b60 <tcp_receive+0x5d8>)
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	4413      	add	r3, r2
 8008952:	b29a      	uxth	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	8b5b      	ldrh	r3, [r3, #26]
 800895e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008962:	2b00      	cmp	r3, #0
 8008964:	d035      	beq.n	80089d2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896a:	2b00      	cmp	r3, #0
 800896c:	d118      	bne.n	80089a0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00c      	beq.n	8008990 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	4618      	mov	r0, r3
 8008984:	f7fb f9d7 	bl	8003d36 <lwip_htonl>
 8008988:	4603      	mov	r3, r0
 800898a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800898c:	2b00      	cmp	r3, #0
 800898e:	dc20      	bgt.n	80089d2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	8b5b      	ldrh	r3, [r3, #26]
 8008994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008998:	b29a      	uxth	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800899e:	e018      	b.n	80089d2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fb f9c2 	bl	8003d36 <lwip_htonl>
 80089b2:	4603      	mov	r3, r0
 80089b4:	1ae3      	subs	r3, r4, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dc0b      	bgt.n	80089d2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	8b5b      	ldrh	r3, [r3, #26]
 80089be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80089c8:	e003      	b.n	80089d2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 ff76 	bl	800a8bc <tcp_send_empty_ack>
 80089d0:	e000      	b.n	80089d4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80089d2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d05b      	beq.n	8008a94 <tcp_receive+0x50c>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e0:	4b60      	ldr	r3, [pc, #384]	; (8008b64 <tcp_receive+0x5dc>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da54      	bge.n	8008a94 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80089ea:	4b5f      	ldr	r3, [pc, #380]	; (8008b68 <tcp_receive+0x5e0>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80089fe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a08:	10db      	asrs	r3, r3, #3
 8008a0a:	b21b      	sxth	r3, r3
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008a22:	4413      	add	r3, r2
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	b21a      	sxth	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008a2c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	da05      	bge.n	8008a40 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8008a34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008a38:	425b      	negs	r3, r3
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008a40:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a4a:	109b      	asrs	r3, r3, #2
 8008a4c:	b21b      	sxth	r3, r3
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008a64:	4413      	add	r3, r2
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	b21a      	sxth	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a74:	10db      	asrs	r3, r3, #3
 8008a76:	b21b      	sxth	r3, r3
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	4413      	add	r3, r2
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	b21a      	sxth	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008a94:	4b35      	ldr	r3, [pc, #212]	; (8008b6c <tcp_receive+0x5e4>)
 8008a96:	881b      	ldrh	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 84e2 	beq.w	8009462 <tcp_receive+0xeda>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	7d1b      	ldrb	r3, [r3, #20]
 8008aa2:	2b06      	cmp	r3, #6
 8008aa4:	f200 84dd 	bhi.w	8009462 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aac:	4b30      	ldr	r3, [pc, #192]	; (8008b70 <tcp_receive+0x5e8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f2c0 808f 	blt.w	8008bd8 <tcp_receive+0x650>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008abe:	4b2b      	ldr	r3, [pc, #172]	; (8008b6c <tcp_receive+0x5e4>)
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4b2a      	ldr	r3, [pc, #168]	; (8008b70 <tcp_receive+0x5e8>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	440b      	add	r3, r1
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	3301      	adds	r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f300 8082 	bgt.w	8008bd8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008ad4:	4b27      	ldr	r3, [pc, #156]	; (8008b74 <tcp_receive+0x5ec>)
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ade:	4b24      	ldr	r3, [pc, #144]	; (8008b70 <tcp_receive+0x5e8>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008ae6:	4b23      	ldr	r3, [pc, #140]	; (8008b74 <tcp_receive+0x5ec>)
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d106      	bne.n	8008afc <tcp_receive+0x574>
 8008aee:	4b22      	ldr	r3, [pc, #136]	; (8008b78 <tcp_receive+0x5f0>)
 8008af0:	f240 5294 	movw	r2, #1428	; 0x594
 8008af4:	4921      	ldr	r1, [pc, #132]	; (8008b7c <tcp_receive+0x5f4>)
 8008af6:	4822      	ldr	r0, [pc, #136]	; (8008b80 <tcp_receive+0x5f8>)
 8008af8:	f004 fe64 	bl	800d7c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d906      	bls.n	8008b14 <tcp_receive+0x58c>
 8008b06:	4b1c      	ldr	r3, [pc, #112]	; (8008b78 <tcp_receive+0x5f0>)
 8008b08:	f240 5295 	movw	r2, #1429	; 0x595
 8008b0c:	491d      	ldr	r1, [pc, #116]	; (8008b84 <tcp_receive+0x5fc>)
 8008b0e:	481c      	ldr	r0, [pc, #112]	; (8008b80 <tcp_receive+0x5f8>)
 8008b10:	f004 fe58 	bl	800d7c4 <iprintf>
      off = (u16_t)off32;
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008b1a:	4b16      	ldr	r3, [pc, #88]	; (8008b74 <tcp_receive+0x5ec>)
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	891b      	ldrh	r3, [r3, #8]
 8008b20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d906      	bls.n	8008b36 <tcp_receive+0x5ae>
 8008b28:	4b13      	ldr	r3, [pc, #76]	; (8008b78 <tcp_receive+0x5f0>)
 8008b2a:	f240 5297 	movw	r2, #1431	; 0x597
 8008b2e:	4916      	ldr	r1, [pc, #88]	; (8008b88 <tcp_receive+0x600>)
 8008b30:	4813      	ldr	r0, [pc, #76]	; (8008b80 <tcp_receive+0x5f8>)
 8008b32:	f004 fe47 	bl	800d7c4 <iprintf>
      inseg.len -= off;
 8008b36:	4b0f      	ldr	r3, [pc, #60]	; (8008b74 <tcp_receive+0x5ec>)
 8008b38:	891a      	ldrh	r2, [r3, #8]
 8008b3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	4b0c      	ldr	r3, [pc, #48]	; (8008b74 <tcp_receive+0x5ec>)
 8008b44:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008b46:	4b0b      	ldr	r3, [pc, #44]	; (8008b74 <tcp_receive+0x5ec>)
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	891a      	ldrh	r2, [r3, #8]
 8008b4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008b54:	e02a      	b.n	8008bac <tcp_receive+0x624>
 8008b56:	bf00      	nop
 8008b58:	0800fe18 	.word	0x0800fe18
 8008b5c:	0800fe20 	.word	0x0800fe20
 8008b60:	2000a444 	.word	0x2000a444
 8008b64:	2000a440 	.word	0x2000a440
 8008b68:	2000a404 	.word	0x2000a404
 8008b6c:	2000a446 	.word	0x2000a446
 8008b70:	2000a43c 	.word	0x2000a43c
 8008b74:	2000a41c 	.word	0x2000a41c
 8008b78:	0800fab0 	.word	0x0800fab0
 8008b7c:	0800fe28 	.word	0x0800fe28
 8008b80:	0800fafc 	.word	0x0800fafc
 8008b84:	0800fe38 	.word	0x0800fe38
 8008b88:	0800fe48 	.word	0x0800fe48
        off -= p->len;
 8008b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b8e:	895b      	ldrh	r3, [r3, #10]
 8008b90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b9c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008b9e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bae:	895b      	ldrh	r3, [r3, #10]
 8008bb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d8e9      	bhi.n	8008b8c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008bb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008bc0:	f7fc fb7c 	bl	80052bc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	4a91      	ldr	r2, [pc, #580]	; (8008e10 <tcp_receive+0x888>)
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	4b91      	ldr	r3, [pc, #580]	; (8008e14 <tcp_receive+0x88c>)
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	4a8f      	ldr	r2, [pc, #572]	; (8008e10 <tcp_receive+0x888>)
 8008bd2:	6812      	ldr	r2, [r2, #0]
 8008bd4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008bd6:	e00d      	b.n	8008bf4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008bd8:	4b8d      	ldr	r3, [pc, #564]	; (8008e10 <tcp_receive+0x888>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	da06      	bge.n	8008bf4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	8b5b      	ldrh	r3, [r3, #26]
 8008bea:	f043 0302 	orr.w	r3, r3, #2
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008bf4:	4b86      	ldr	r3, [pc, #536]	; (8008e10 <tcp_receive+0x888>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f2c0 842a 	blt.w	8009458 <tcp_receive+0xed0>
 8008c04:	4b82      	ldr	r3, [pc, #520]	; (8008e10 <tcp_receive+0x888>)
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008c10:	440b      	add	r3, r1
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	3301      	adds	r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f300 841e 	bgt.w	8009458 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c20:	4b7b      	ldr	r3, [pc, #492]	; (8008e10 <tcp_receive+0x888>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	f040 829a 	bne.w	800915e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008c2a:	4b7a      	ldr	r3, [pc, #488]	; (8008e14 <tcp_receive+0x88c>)
 8008c2c:	891c      	ldrh	r4, [r3, #8]
 8008c2e:	4b79      	ldr	r3, [pc, #484]	; (8008e14 <tcp_receive+0x88c>)
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	899b      	ldrh	r3, [r3, #12]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fb f868 	bl	8003d0c <lwip_htons>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f003 0303 	and.w	r3, r3, #3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <tcp_receive+0x6c4>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e000      	b.n	8008c4e <tcp_receive+0x6c6>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4423      	add	r3, r4
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	4b71      	ldr	r3, [pc, #452]	; (8008e18 <tcp_receive+0x890>)
 8008c54:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c5a:	4b6f      	ldr	r3, [pc, #444]	; (8008e18 <tcp_receive+0x890>)
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d275      	bcs.n	8008d4e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008c62:	4b6c      	ldr	r3, [pc, #432]	; (8008e14 <tcp_receive+0x88c>)
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	899b      	ldrh	r3, [r3, #12]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fb f84e 	bl	8003d0c <lwip_htons>
 8008c70:	4603      	mov	r3, r0
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01f      	beq.n	8008cbc <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008c7c:	4b65      	ldr	r3, [pc, #404]	; (8008e14 <tcp_receive+0x88c>)
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	899b      	ldrh	r3, [r3, #12]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	b21b      	sxth	r3, r3
 8008c86:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c8a:	b21c      	sxth	r4, r3
 8008c8c:	4b61      	ldr	r3, [pc, #388]	; (8008e14 <tcp_receive+0x88c>)
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	899b      	ldrh	r3, [r3, #12]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fb f839 	bl	8003d0c <lwip_htons>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fb f830 	bl	8003d0c <lwip_htons>
 8008cac:	4603      	mov	r3, r0
 8008cae:	b21b      	sxth	r3, r3
 8008cb0:	4323      	orrs	r3, r4
 8008cb2:	b21a      	sxth	r2, r3
 8008cb4:	4b57      	ldr	r3, [pc, #348]	; (8008e14 <tcp_receive+0x88c>)
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	b292      	uxth	r2, r2
 8008cba:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008cc0:	4b54      	ldr	r3, [pc, #336]	; (8008e14 <tcp_receive+0x88c>)
 8008cc2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008cc4:	4b53      	ldr	r3, [pc, #332]	; (8008e14 <tcp_receive+0x88c>)
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	899b      	ldrh	r3, [r3, #12]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fb f81d 	bl	8003d0c <lwip_htons>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d005      	beq.n	8008cea <tcp_receive+0x762>
            inseg.len -= 1;
 8008cde:	4b4d      	ldr	r3, [pc, #308]	; (8008e14 <tcp_receive+0x88c>)
 8008ce0:	891b      	ldrh	r3, [r3, #8]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	4b4b      	ldr	r3, [pc, #300]	; (8008e14 <tcp_receive+0x88c>)
 8008ce8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008cea:	4b4a      	ldr	r3, [pc, #296]	; (8008e14 <tcp_receive+0x88c>)
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	4a49      	ldr	r2, [pc, #292]	; (8008e14 <tcp_receive+0x88c>)
 8008cf0:	8912      	ldrh	r2, [r2, #8]
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fc f9e1 	bl	80050bc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008cfa:	4b46      	ldr	r3, [pc, #280]	; (8008e14 <tcp_receive+0x88c>)
 8008cfc:	891c      	ldrh	r4, [r3, #8]
 8008cfe:	4b45      	ldr	r3, [pc, #276]	; (8008e14 <tcp_receive+0x88c>)
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	899b      	ldrh	r3, [r3, #12]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fb f800 	bl	8003d0c <lwip_htons>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f003 0303 	and.w	r3, r3, #3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <tcp_receive+0x794>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e000      	b.n	8008d1e <tcp_receive+0x796>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4423      	add	r3, r4
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	4b3d      	ldr	r3, [pc, #244]	; (8008e18 <tcp_receive+0x890>)
 8008d24:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d26:	4b3c      	ldr	r3, [pc, #240]	; (8008e18 <tcp_receive+0x890>)
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	4b38      	ldr	r3, [pc, #224]	; (8008e10 <tcp_receive+0x888>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	441a      	add	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d3a:	440b      	add	r3, r1
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d006      	beq.n	8008d4e <tcp_receive+0x7c6>
 8008d40:	4b36      	ldr	r3, [pc, #216]	; (8008e1c <tcp_receive+0x894>)
 8008d42:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8008d46:	4936      	ldr	r1, [pc, #216]	; (8008e20 <tcp_receive+0x898>)
 8008d48:	4836      	ldr	r0, [pc, #216]	; (8008e24 <tcp_receive+0x89c>)
 8008d4a:	f004 fd3b 	bl	800d7c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 80e7 	beq.w	8008f26 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008d58:	4b2e      	ldr	r3, [pc, #184]	; (8008e14 <tcp_receive+0x88c>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	899b      	ldrh	r3, [r3, #12]
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fa ffd3 	bl	8003d0c <lwip_htons>
 8008d66:	4603      	mov	r3, r0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d010      	beq.n	8008d94 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008d72:	e00a      	b.n	8008d8a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d78:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f7fd fd92 	bl	80068ae <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1f0      	bne.n	8008d74 <tcp_receive+0x7ec>
 8008d92:	e0c8      	b.n	8008f26 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d98:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008d9a:	e052      	b.n	8008e42 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	899b      	ldrh	r3, [r3, #12]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fa ffb1 	bl	8003d0c <lwip_htons>
 8008daa:	4603      	mov	r3, r0
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d03d      	beq.n	8008e32 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008db6:	4b17      	ldr	r3, [pc, #92]	; (8008e14 <tcp_receive+0x88c>)
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	899b      	ldrh	r3, [r3, #12]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fa ffa4 	bl	8003d0c <lwip_htons>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d130      	bne.n	8008e32 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008dd0:	4b10      	ldr	r3, [pc, #64]	; (8008e14 <tcp_receive+0x88c>)
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	899b      	ldrh	r3, [r3, #12]
 8008dd6:	b29c      	uxth	r4, r3
 8008dd8:	2001      	movs	r0, #1
 8008dda:	f7fa ff97 	bl	8003d0c <lwip_htons>
 8008dde:	4603      	mov	r3, r0
 8008de0:	461a      	mov	r2, r3
 8008de2:	4b0c      	ldr	r3, [pc, #48]	; (8008e14 <tcp_receive+0x88c>)
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	4322      	orrs	r2, r4
 8008de8:	b292      	uxth	r2, r2
 8008dea:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008dec:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <tcp_receive+0x88c>)
 8008dee:	891c      	ldrh	r4, [r3, #8]
 8008df0:	4b08      	ldr	r3, [pc, #32]	; (8008e14 <tcp_receive+0x88c>)
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	899b      	ldrh	r3, [r3, #12]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fa ff87 	bl	8003d0c <lwip_htons>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00e      	beq.n	8008e28 <tcp_receive+0x8a0>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e00d      	b.n	8008e2a <tcp_receive+0x8a2>
 8008e0e:	bf00      	nop
 8008e10:	2000a43c 	.word	0x2000a43c
 8008e14:	2000a41c 	.word	0x2000a41c
 8008e18:	2000a446 	.word	0x2000a446
 8008e1c:	0800fab0 	.word	0x0800fab0
 8008e20:	0800fe58 	.word	0x0800fe58
 8008e24:	0800fafc 	.word	0x0800fafc
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4423      	add	r3, r4
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	4b98      	ldr	r3, [pc, #608]	; (8009090 <tcp_receive+0xb08>)
 8008e30:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e34:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008e3c:	6938      	ldr	r0, [r7, #16]
 8008e3e:	f7fd fd36 	bl	80068ae <tcp_seg_free>
            while (next &&
 8008e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00e      	beq.n	8008e66 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008e48:	4b91      	ldr	r3, [pc, #580]	; (8009090 <tcp_receive+0xb08>)
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	4b91      	ldr	r3, [pc, #580]	; (8009094 <tcp_receive+0xb0c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	441a      	add	r2, r3
 8008e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e5c:	8909      	ldrh	r1, [r1, #8]
 8008e5e:	440b      	add	r3, r1
 8008e60:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	da9a      	bge.n	8008d9c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d059      	beq.n	8008f20 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8008e6c:	4b88      	ldr	r3, [pc, #544]	; (8009090 <tcp_receive+0xb08>)
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	461a      	mov	r2, r3
 8008e72:	4b88      	ldr	r3, [pc, #544]	; (8009094 <tcp_receive+0xb0c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	441a      	add	r2, r3
 8008e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	dd4d      	ble.n	8008f20 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	4b81      	ldr	r3, [pc, #516]	; (8009094 <tcp_receive+0xb0c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	4b80      	ldr	r3, [pc, #512]	; (8009098 <tcp_receive+0xb10>)
 8008e98:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008e9a:	4b7f      	ldr	r3, [pc, #508]	; (8009098 <tcp_receive+0xb10>)
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	899b      	ldrh	r3, [r3, #12]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fa ff32 	bl	8003d0c <lwip_htons>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	f003 0302 	and.w	r3, r3, #2
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <tcp_receive+0x938>
                inseg.len -= 1;
 8008eb4:	4b78      	ldr	r3, [pc, #480]	; (8009098 <tcp_receive+0xb10>)
 8008eb6:	891b      	ldrh	r3, [r3, #8]
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	4b76      	ldr	r3, [pc, #472]	; (8009098 <tcp_receive+0xb10>)
 8008ebe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008ec0:	4b75      	ldr	r3, [pc, #468]	; (8009098 <tcp_receive+0xb10>)
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	4a74      	ldr	r2, [pc, #464]	; (8009098 <tcp_receive+0xb10>)
 8008ec6:	8912      	ldrh	r2, [r2, #8]
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fc f8f6 	bl	80050bc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008ed0:	4b71      	ldr	r3, [pc, #452]	; (8009098 <tcp_receive+0xb10>)
 8008ed2:	891c      	ldrh	r4, [r3, #8]
 8008ed4:	4b70      	ldr	r3, [pc, #448]	; (8009098 <tcp_receive+0xb10>)
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	899b      	ldrh	r3, [r3, #12]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fa ff15 	bl	8003d0c <lwip_htons>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	f003 0303 	and.w	r3, r3, #3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <tcp_receive+0x96a>
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e000      	b.n	8008ef4 <tcp_receive+0x96c>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	4423      	add	r3, r4
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	4b65      	ldr	r3, [pc, #404]	; (8009090 <tcp_receive+0xb08>)
 8008efa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008efc:	4b64      	ldr	r3, [pc, #400]	; (8009090 <tcp_receive+0xb08>)
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	4b64      	ldr	r3, [pc, #400]	; (8009094 <tcp_receive+0xb0c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	441a      	add	r2, r3
 8008f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d006      	beq.n	8008f20 <tcp_receive+0x998>
 8008f12:	4b62      	ldr	r3, [pc, #392]	; (800909c <tcp_receive+0xb14>)
 8008f14:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008f18:	4961      	ldr	r1, [pc, #388]	; (80090a0 <tcp_receive+0xb18>)
 8008f1a:	4862      	ldr	r0, [pc, #392]	; (80090a4 <tcp_receive+0xb1c>)
 8008f1c:	f004 fc52 	bl	800d7c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f24:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008f26:	4b5a      	ldr	r3, [pc, #360]	; (8009090 <tcp_receive+0xb08>)
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	4b59      	ldr	r3, [pc, #356]	; (8009094 <tcp_receive+0xb0c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	441a      	add	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f3a:	4b55      	ldr	r3, [pc, #340]	; (8009090 <tcp_receive+0xb08>)
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d206      	bcs.n	8008f50 <tcp_receive+0x9c8>
 8008f42:	4b56      	ldr	r3, [pc, #344]	; (800909c <tcp_receive+0xb14>)
 8008f44:	f240 6207 	movw	r2, #1543	; 0x607
 8008f48:	4957      	ldr	r1, [pc, #348]	; (80090a8 <tcp_receive+0xb20>)
 8008f4a:	4856      	ldr	r0, [pc, #344]	; (80090a4 <tcp_receive+0xb1c>)
 8008f4c:	f004 fc3a 	bl	800d7c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f54:	4b4e      	ldr	r3, [pc, #312]	; (8009090 <tcp_receive+0xb08>)
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7fc ffc5 	bl	8005ef0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008f66:	4b4c      	ldr	r3, [pc, #304]	; (8009098 <tcp_receive+0xb10>)
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	891b      	ldrh	r3, [r3, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d006      	beq.n	8008f7e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8008f70:	4b49      	ldr	r3, [pc, #292]	; (8009098 <tcp_receive+0xb10>)
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	4a4d      	ldr	r2, [pc, #308]	; (80090ac <tcp_receive+0xb24>)
 8008f76:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008f78:	4b47      	ldr	r3, [pc, #284]	; (8009098 <tcp_receive+0xb10>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008f7e:	4b46      	ldr	r3, [pc, #280]	; (8009098 <tcp_receive+0xb10>)
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	899b      	ldrh	r3, [r3, #12]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fa fec0 	bl	8003d0c <lwip_htons>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 80b8 	beq.w	800910a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008f9a:	4b45      	ldr	r3, [pc, #276]	; (80090b0 <tcp_receive+0xb28>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	f043 0320 	orr.w	r3, r3, #32
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	4b42      	ldr	r3, [pc, #264]	; (80090b0 <tcp_receive+0xb28>)
 8008fa6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008fa8:	e0af      	b.n	800910a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fae:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	4a36      	ldr	r2, [pc, #216]	; (8009094 <tcp_receive+0xb0c>)
 8008fba:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	891b      	ldrh	r3, [r3, #8]
 8008fc0:	461c      	mov	r4, r3
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	899b      	ldrh	r3, [r3, #12]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fa fe9e 	bl	8003d0c <lwip_htons>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	f003 0303 	and.w	r3, r3, #3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <tcp_receive+0xa58>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e000      	b.n	8008fe2 <tcp_receive+0xa5a>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	191a      	adds	r2, r3, r4
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	441a      	add	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff2:	461c      	mov	r4, r3
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	891b      	ldrh	r3, [r3, #8]
 8008ff8:	461d      	mov	r5, r3
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	899b      	ldrh	r3, [r3, #12]
 8009000:	b29b      	uxth	r3, r3
 8009002:	4618      	mov	r0, r3
 8009004:	f7fa fe82 	bl	8003d0c <lwip_htons>
 8009008:	4603      	mov	r3, r0
 800900a:	b2db      	uxtb	r3, r3
 800900c:	f003 0303 	and.w	r3, r3, #3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <tcp_receive+0xa90>
 8009014:	2301      	movs	r3, #1
 8009016:	e000      	b.n	800901a <tcp_receive+0xa92>
 8009018:	2300      	movs	r3, #0
 800901a:	442b      	add	r3, r5
 800901c:	429c      	cmp	r4, r3
 800901e:	d206      	bcs.n	800902e <tcp_receive+0xaa6>
 8009020:	4b1e      	ldr	r3, [pc, #120]	; (800909c <tcp_receive+0xb14>)
 8009022:	f240 622b 	movw	r2, #1579	; 0x62b
 8009026:	4923      	ldr	r1, [pc, #140]	; (80090b4 <tcp_receive+0xb2c>)
 8009028:	481e      	ldr	r0, [pc, #120]	; (80090a4 <tcp_receive+0xb1c>)
 800902a:	f004 fbcb 	bl	800d7c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	891b      	ldrh	r3, [r3, #8]
 8009032:	461c      	mov	r4, r3
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	899b      	ldrh	r3, [r3, #12]
 800903a:	b29b      	uxth	r3, r3
 800903c:	4618      	mov	r0, r3
 800903e:	f7fa fe65 	bl	8003d0c <lwip_htons>
 8009042:	4603      	mov	r3, r0
 8009044:	b2db      	uxtb	r3, r3
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <tcp_receive+0xaca>
 800904e:	2301      	movs	r3, #1
 8009050:	e000      	b.n	8009054 <tcp_receive+0xacc>
 8009052:	2300      	movs	r3, #0
 8009054:	1919      	adds	r1, r3, r4
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800905a:	b28b      	uxth	r3, r1
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	b29a      	uxth	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7fc ff43 	bl	8005ef0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	891b      	ldrh	r3, [r3, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d028      	beq.n	80090c6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009074:	4b0d      	ldr	r3, [pc, #52]	; (80090ac <tcp_receive+0xb24>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d01d      	beq.n	80090b8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800907c:	4b0b      	ldr	r3, [pc, #44]	; (80090ac <tcp_receive+0xb24>)
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7fc fa60 	bl	800554c <pbuf_cat>
 800908c:	e018      	b.n	80090c0 <tcp_receive+0xb38>
 800908e:	bf00      	nop
 8009090:	2000a446 	.word	0x2000a446
 8009094:	2000a43c 	.word	0x2000a43c
 8009098:	2000a41c 	.word	0x2000a41c
 800909c:	0800fab0 	.word	0x0800fab0
 80090a0:	0800fe90 	.word	0x0800fe90
 80090a4:	0800fafc 	.word	0x0800fafc
 80090a8:	0800fecc 	.word	0x0800fecc
 80090ac:	2000a44c 	.word	0x2000a44c
 80090b0:	2000a449 	.word	0x2000a449
 80090b4:	0800feec 	.word	0x0800feec
            } else {
              recv_data = cseg->p;
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	4a70      	ldr	r2, [pc, #448]	; (8009280 <tcp_receive+0xcf8>)
 80090be:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2200      	movs	r2, #0
 80090c4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	899b      	ldrh	r3, [r3, #12]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fa fe1c 	bl	8003d0c <lwip_htons>
 80090d4:	4603      	mov	r3, r0
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00d      	beq.n	80090fc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80090e0:	4b68      	ldr	r3, [pc, #416]	; (8009284 <tcp_receive+0xcfc>)
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	f043 0320 	orr.w	r3, r3, #32
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	4b66      	ldr	r3, [pc, #408]	; (8009284 <tcp_receive+0xcfc>)
 80090ec:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	7d1b      	ldrb	r3, [r3, #20]
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d102      	bne.n	80090fc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2207      	movs	r2, #7
 80090fa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009104:	68b8      	ldr	r0, [r7, #8]
 8009106:	f7fd fbd2 	bl	80068ae <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800910e:	2b00      	cmp	r3, #0
 8009110:	d008      	beq.n	8009124 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800911e:	429a      	cmp	r2, r3
 8009120:	f43f af43 	beq.w	8008faa <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	8b5b      	ldrh	r3, [r3, #26]
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00e      	beq.n	800914e <tcp_receive+0xbc6>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	8b5b      	ldrh	r3, [r3, #26]
 8009134:	f023 0301 	bic.w	r3, r3, #1
 8009138:	b29a      	uxth	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	835a      	strh	r2, [r3, #26]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	8b5b      	ldrh	r3, [r3, #26]
 8009142:	f043 0302 	orr.w	r3, r3, #2
 8009146:	b29a      	uxth	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800914c:	e188      	b.n	8009460 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	8b5b      	ldrh	r3, [r3, #26]
 8009152:	f043 0301 	orr.w	r3, r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800915c:	e180      	b.n	8009460 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009162:	2b00      	cmp	r3, #0
 8009164:	d106      	bne.n	8009174 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009166:	4848      	ldr	r0, [pc, #288]	; (8009288 <tcp_receive+0xd00>)
 8009168:	f7fd fbba 	bl	80068e0 <tcp_seg_copy>
 800916c:	4602      	mov	r2, r0
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	675a      	str	r2, [r3, #116]	; 0x74
 8009172:	e16d      	b.n	8009450 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009174:	2300      	movs	r3, #0
 8009176:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800917c:	63bb      	str	r3, [r7, #56]	; 0x38
 800917e:	e157      	b.n	8009430 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	4b41      	ldr	r3, [pc, #260]	; (800928c <tcp_receive+0xd04>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d11d      	bne.n	80091ca <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800918e:	4b3e      	ldr	r3, [pc, #248]	; (8009288 <tcp_receive+0xd00>)
 8009190:	891a      	ldrh	r2, [r3, #8]
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	891b      	ldrh	r3, [r3, #8]
 8009196:	429a      	cmp	r2, r3
 8009198:	f240 814f 	bls.w	800943a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800919c:	483a      	ldr	r0, [pc, #232]	; (8009288 <tcp_receive+0xd00>)
 800919e:	f7fd fb9f 	bl	80068e0 <tcp_seg_copy>
 80091a2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 8149 	beq.w	800943e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80091ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <tcp_receive+0xc32>
                    prev->next = cseg;
 80091b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	e002      	b.n	80091c0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80091c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091c2:	6978      	ldr	r0, [r7, #20]
 80091c4:	f7ff f8dc 	bl	8008380 <tcp_oos_insert_segment>
                }
                break;
 80091c8:	e139      	b.n	800943e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80091ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d117      	bne.n	8009200 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80091d0:	4b2e      	ldr	r3, [pc, #184]	; (800928c <tcp_receive+0xd04>)
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	da57      	bge.n	8009290 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80091e0:	4829      	ldr	r0, [pc, #164]	; (8009288 <tcp_receive+0xd00>)
 80091e2:	f7fd fb7d 	bl	80068e0 <tcp_seg_copy>
 80091e6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 8129 	beq.w	8009442 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	69ba      	ldr	r2, [r7, #24]
 80091f4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80091f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091f8:	69b8      	ldr	r0, [r7, #24]
 80091fa:	f7ff f8c1 	bl	8008380 <tcp_oos_insert_segment>
                  }
                  break;
 80091fe:	e120      	b.n	8009442 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009200:	4b22      	ldr	r3, [pc, #136]	; (800928c <tcp_receive+0xd04>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	3b01      	subs	r3, #1
 800920e:	2b00      	cmp	r3, #0
 8009210:	db3e      	blt.n	8009290 <tcp_receive+0xd08>
 8009212:	4b1e      	ldr	r3, [pc, #120]	; (800928c <tcp_receive+0xd04>)
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	3301      	adds	r3, #1
 8009220:	2b00      	cmp	r3, #0
 8009222:	dc35      	bgt.n	8009290 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009224:	4818      	ldr	r0, [pc, #96]	; (8009288 <tcp_receive+0xd00>)
 8009226:	f7fd fb5b 	bl	80068e0 <tcp_seg_copy>
 800922a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 8109 	beq.w	8009446 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800923c:	8912      	ldrh	r2, [r2, #8]
 800923e:	441a      	add	r2, r3
 8009240:	4b12      	ldr	r3, [pc, #72]	; (800928c <tcp_receive+0xd04>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	dd12      	ble.n	8009270 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800924a:	4b10      	ldr	r3, [pc, #64]	; (800928c <tcp_receive+0xd04>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	b29a      	uxth	r2, r3
 8009250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	b29b      	uxth	r3, r3
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	b29a      	uxth	r2, r3
 800925c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009266:	891b      	ldrh	r3, [r3, #8]
 8009268:	4619      	mov	r1, r3
 800926a:	4610      	mov	r0, r2
 800926c:	f7fb ff26 	bl	80050bc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009276:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009278:	69f8      	ldr	r0, [r7, #28]
 800927a:	f7ff f881 	bl	8008380 <tcp_oos_insert_segment>
                  }
                  break;
 800927e:	e0e2      	b.n	8009446 <tcp_receive+0xebe>
 8009280:	2000a44c 	.word	0x2000a44c
 8009284:	2000a449 	.word	0x2000a449
 8009288:	2000a41c 	.word	0x2000a41c
 800928c:	2000a43c 	.word	0x2000a43c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	f040 80c6 	bne.w	800942a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800929e:	4b80      	ldr	r3, [pc, #512]	; (80094a0 <tcp_receive+0xf18>)
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f340 80bd 	ble.w	800942a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	899b      	ldrh	r3, [r3, #12]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fa fd27 	bl	8003d0c <lwip_htons>
 80092be:	4603      	mov	r3, r0
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f040 80bf 	bne.w	800944a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80092cc:	4875      	ldr	r0, [pc, #468]	; (80094a4 <tcp_receive+0xf1c>)
 80092ce:	f7fd fb07 	bl	80068e0 <tcp_seg_copy>
 80092d2:	4602      	mov	r2, r0
 80092d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80092d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 80b6 	beq.w	800944e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80092e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ea:	8912      	ldrh	r2, [r2, #8]
 80092ec:	441a      	add	r2, r3
 80092ee:	4b6c      	ldr	r3, [pc, #432]	; (80094a0 <tcp_receive+0xf18>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dd12      	ble.n	800931e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80092f8:	4b69      	ldr	r3, [pc, #420]	; (80094a0 <tcp_receive+0xf18>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	b29b      	uxth	r3, r3
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	b29a      	uxth	r2, r3
 800930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009314:	891b      	ldrh	r3, [r3, #8]
 8009316:	4619      	mov	r1, r3
 8009318:	4610      	mov	r0, r2
 800931a:	f7fb fecf 	bl	80050bc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800931e:	4b62      	ldr	r3, [pc, #392]	; (80094a8 <tcp_receive+0xf20>)
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	4b5e      	ldr	r3, [pc, #376]	; (80094a0 <tcp_receive+0xf18>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	441a      	add	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932e:	6879      	ldr	r1, [r7, #4]
 8009330:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009332:	440b      	add	r3, r1
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	f340 8089 	ble.w	800944e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	899b      	ldrh	r3, [r3, #12]
 8009344:	b29b      	uxth	r3, r3
 8009346:	4618      	mov	r0, r3
 8009348:	f7fa fce0 	bl	8003d0c <lwip_htons>
 800934c:	4603      	mov	r3, r0
 800934e:	b2db      	uxtb	r3, r3
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b00      	cmp	r3, #0
 8009356:	d022      	beq.n	800939e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	899b      	ldrh	r3, [r3, #12]
 8009360:	b29b      	uxth	r3, r3
 8009362:	b21b      	sxth	r3, r3
 8009364:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009368:	b21c      	sxth	r4, r3
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	899b      	ldrh	r3, [r3, #12]
 8009372:	b29b      	uxth	r3, r3
 8009374:	4618      	mov	r0, r3
 8009376:	f7fa fcc9 	bl	8003d0c <lwip_htons>
 800937a:	4603      	mov	r3, r0
 800937c:	b2db      	uxtb	r3, r3
 800937e:	b29b      	uxth	r3, r3
 8009380:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009384:	b29b      	uxth	r3, r3
 8009386:	4618      	mov	r0, r3
 8009388:	f7fa fcc0 	bl	8003d0c <lwip_htons>
 800938c:	4603      	mov	r3, r0
 800938e:	b21b      	sxth	r3, r3
 8009390:	4323      	orrs	r3, r4
 8009392:	b21a      	sxth	r2, r3
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	b292      	uxth	r2, r2
 800939c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a8:	4413      	add	r3, r2
 80093aa:	b299      	uxth	r1, r3
 80093ac:	4b3c      	ldr	r3, [pc, #240]	; (80094a0 <tcp_receive+0xf18>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	1a8a      	subs	r2, r1, r2
 80093b8:	b292      	uxth	r2, r2
 80093ba:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80093bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	891b      	ldrh	r3, [r3, #8]
 80093c8:	4619      	mov	r1, r3
 80093ca:	4610      	mov	r0, r2
 80093cc:	f7fb fe76 	bl	80050bc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80093d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	891c      	ldrh	r4, [r3, #8]
 80093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	899b      	ldrh	r3, [r3, #12]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fa fc93 	bl	8003d0c <lwip_htons>
 80093e6:	4603      	mov	r3, r0
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <tcp_receive+0xe6e>
 80093f2:	2301      	movs	r3, #1
 80093f4:	e000      	b.n	80093f8 <tcp_receive+0xe70>
 80093f6:	2300      	movs	r3, #0
 80093f8:	4423      	add	r3, r4
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	4b2a      	ldr	r3, [pc, #168]	; (80094a8 <tcp_receive+0xf20>)
 80093fe:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009400:	4b29      	ldr	r3, [pc, #164]	; (80094a8 <tcp_receive+0xf20>)
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	4b26      	ldr	r3, [pc, #152]	; (80094a0 <tcp_receive+0xf18>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	441a      	add	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009414:	440b      	add	r3, r1
 8009416:	429a      	cmp	r2, r3
 8009418:	d019      	beq.n	800944e <tcp_receive+0xec6>
 800941a:	4b24      	ldr	r3, [pc, #144]	; (80094ac <tcp_receive+0xf24>)
 800941c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009420:	4923      	ldr	r1, [pc, #140]	; (80094b0 <tcp_receive+0xf28>)
 8009422:	4824      	ldr	r0, [pc, #144]	; (80094b4 <tcp_receive+0xf2c>)
 8009424:	f004 f9ce 	bl	800d7c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009428:	e011      	b.n	800944e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800942a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009432:	2b00      	cmp	r3, #0
 8009434:	f47f aea4 	bne.w	8009180 <tcp_receive+0xbf8>
 8009438:	e00a      	b.n	8009450 <tcp_receive+0xec8>
                break;
 800943a:	bf00      	nop
 800943c:	e008      	b.n	8009450 <tcp_receive+0xec8>
                break;
 800943e:	bf00      	nop
 8009440:	e006      	b.n	8009450 <tcp_receive+0xec8>
                  break;
 8009442:	bf00      	nop
 8009444:	e004      	b.n	8009450 <tcp_receive+0xec8>
                  break;
 8009446:	bf00      	nop
 8009448:	e002      	b.n	8009450 <tcp_receive+0xec8>
                  break;
 800944a:	bf00      	nop
 800944c:	e000      	b.n	8009450 <tcp_receive+0xec8>
                break;
 800944e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f001 fa33 	bl	800a8bc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009456:	e003      	b.n	8009460 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 fa2f 	bl	800a8bc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800945e:	e01a      	b.n	8009496 <tcp_receive+0xf0e>
 8009460:	e019      	b.n	8009496 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009462:	4b0f      	ldr	r3, [pc, #60]	; (80094a0 <tcp_receive+0xf18>)
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	db0a      	blt.n	8009486 <tcp_receive+0xefe>
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <tcp_receive+0xf18>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800947c:	440b      	add	r3, r1
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	3301      	adds	r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	dd07      	ble.n	8009496 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	8b5b      	ldrh	r3, [r3, #26]
 800948a:	f043 0302 	orr.w	r3, r3, #2
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009494:	e7ff      	b.n	8009496 <tcp_receive+0xf0e>
 8009496:	bf00      	nop
 8009498:	3750      	adds	r7, #80	; 0x50
 800949a:	46bd      	mov	sp, r7
 800949c:	bdb0      	pop	{r4, r5, r7, pc}
 800949e:	bf00      	nop
 80094a0:	2000a43c 	.word	0x2000a43c
 80094a4:	2000a41c 	.word	0x2000a41c
 80094a8:	2000a446 	.word	0x2000a446
 80094ac:	0800fab0 	.word	0x0800fab0
 80094b0:	0800fe58 	.word	0x0800fe58
 80094b4:	0800fafc 	.word	0x0800fafc

080094b8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80094be:	4b15      	ldr	r3, [pc, #84]	; (8009514 <tcp_get_next_optbyte+0x5c>)
 80094c0:	881b      	ldrh	r3, [r3, #0]
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	b291      	uxth	r1, r2
 80094c6:	4a13      	ldr	r2, [pc, #76]	; (8009514 <tcp_get_next_optbyte+0x5c>)
 80094c8:	8011      	strh	r1, [r2, #0]
 80094ca:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80094cc:	4b12      	ldr	r3, [pc, #72]	; (8009518 <tcp_get_next_optbyte+0x60>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d004      	beq.n	80094de <tcp_get_next_optbyte+0x26>
 80094d4:	4b11      	ldr	r3, [pc, #68]	; (800951c <tcp_get_next_optbyte+0x64>)
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	88fa      	ldrh	r2, [r7, #6]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d208      	bcs.n	80094f0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80094de:	4b10      	ldr	r3, [pc, #64]	; (8009520 <tcp_get_next_optbyte+0x68>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3314      	adds	r3, #20
 80094e4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80094e6:	88fb      	ldrh	r3, [r7, #6]
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	4413      	add	r3, r2
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	e00b      	b.n	8009508 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80094f0:	88fb      	ldrh	r3, [r7, #6]
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	4b09      	ldr	r3, [pc, #36]	; (800951c <tcp_get_next_optbyte+0x64>)
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80094fe:	4b06      	ldr	r3, [pc, #24]	; (8009518 <tcp_get_next_optbyte+0x60>)
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	797b      	ldrb	r3, [r7, #5]
 8009504:	4413      	add	r3, r2
 8009506:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009508:	4618      	mov	r0, r3
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	2000a438 	.word	0x2000a438
 8009518:	2000a434 	.word	0x2000a434
 800951c:	2000a432 	.word	0x2000a432
 8009520:	2000a42c 	.word	0x2000a42c

08009524 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d106      	bne.n	8009540 <tcp_parseopt+0x1c>
 8009532:	4b32      	ldr	r3, [pc, #200]	; (80095fc <tcp_parseopt+0xd8>)
 8009534:	f240 727d 	movw	r2, #1917	; 0x77d
 8009538:	4931      	ldr	r1, [pc, #196]	; (8009600 <tcp_parseopt+0xdc>)
 800953a:	4832      	ldr	r0, [pc, #200]	; (8009604 <tcp_parseopt+0xe0>)
 800953c:	f004 f942 	bl	800d7c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009540:	4b31      	ldr	r3, [pc, #196]	; (8009608 <tcp_parseopt+0xe4>)
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d055      	beq.n	80095f4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009548:	4b30      	ldr	r3, [pc, #192]	; (800960c <tcp_parseopt+0xe8>)
 800954a:	2200      	movs	r2, #0
 800954c:	801a      	strh	r2, [r3, #0]
 800954e:	e045      	b.n	80095dc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009550:	f7ff ffb2 	bl	80094b8 <tcp_get_next_optbyte>
 8009554:	4603      	mov	r3, r0
 8009556:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009558:	7bfb      	ldrb	r3, [r7, #15]
 800955a:	2b02      	cmp	r3, #2
 800955c:	d006      	beq.n	800956c <tcp_parseopt+0x48>
 800955e:	2b02      	cmp	r3, #2
 8009560:	dc2b      	bgt.n	80095ba <tcp_parseopt+0x96>
 8009562:	2b00      	cmp	r3, #0
 8009564:	d041      	beq.n	80095ea <tcp_parseopt+0xc6>
 8009566:	2b01      	cmp	r3, #1
 8009568:	d127      	bne.n	80095ba <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800956a:	e037      	b.n	80095dc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800956c:	f7ff ffa4 	bl	80094b8 <tcp_get_next_optbyte>
 8009570:	4603      	mov	r3, r0
 8009572:	2b04      	cmp	r3, #4
 8009574:	d13b      	bne.n	80095ee <tcp_parseopt+0xca>
 8009576:	4b25      	ldr	r3, [pc, #148]	; (800960c <tcp_parseopt+0xe8>)
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	3301      	adds	r3, #1
 800957c:	4a22      	ldr	r2, [pc, #136]	; (8009608 <tcp_parseopt+0xe4>)
 800957e:	8812      	ldrh	r2, [r2, #0]
 8009580:	4293      	cmp	r3, r2
 8009582:	da34      	bge.n	80095ee <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009584:	f7ff ff98 	bl	80094b8 <tcp_get_next_optbyte>
 8009588:	4603      	mov	r3, r0
 800958a:	b29b      	uxth	r3, r3
 800958c:	021b      	lsls	r3, r3, #8
 800958e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009590:	f7ff ff92 	bl	80094b8 <tcp_get_next_optbyte>
 8009594:	4603      	mov	r3, r0
 8009596:	b29a      	uxth	r2, r3
 8009598:	89bb      	ldrh	r3, [r7, #12]
 800959a:	4313      	orrs	r3, r2
 800959c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800959e:	89bb      	ldrh	r3, [r7, #12]
 80095a0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80095a4:	d804      	bhi.n	80095b0 <tcp_parseopt+0x8c>
 80095a6:	89bb      	ldrh	r3, [r7, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <tcp_parseopt+0x8c>
 80095ac:	89ba      	ldrh	r2, [r7, #12]
 80095ae:	e001      	b.n	80095b4 <tcp_parseopt+0x90>
 80095b0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80095b8:	e010      	b.n	80095dc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80095ba:	f7ff ff7d 	bl	80094b8 <tcp_get_next_optbyte>
 80095be:	4603      	mov	r3, r0
 80095c0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80095c2:	7afb      	ldrb	r3, [r7, #11]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d914      	bls.n	80095f2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80095c8:	7afb      	ldrb	r3, [r7, #11]
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	4b0f      	ldr	r3, [pc, #60]	; (800960c <tcp_parseopt+0xe8>)
 80095ce:	881b      	ldrh	r3, [r3, #0]
 80095d0:	4413      	add	r3, r2
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	3b02      	subs	r3, #2
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	4b0c      	ldr	r3, [pc, #48]	; (800960c <tcp_parseopt+0xe8>)
 80095da:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80095dc:	4b0b      	ldr	r3, [pc, #44]	; (800960c <tcp_parseopt+0xe8>)
 80095de:	881a      	ldrh	r2, [r3, #0]
 80095e0:	4b09      	ldr	r3, [pc, #36]	; (8009608 <tcp_parseopt+0xe4>)
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d3b3      	bcc.n	8009550 <tcp_parseopt+0x2c>
 80095e8:	e004      	b.n	80095f4 <tcp_parseopt+0xd0>
          return;
 80095ea:	bf00      	nop
 80095ec:	e002      	b.n	80095f4 <tcp_parseopt+0xd0>
            return;
 80095ee:	bf00      	nop
 80095f0:	e000      	b.n	80095f4 <tcp_parseopt+0xd0>
            return;
 80095f2:	bf00      	nop
      }
    }
  }
}
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	0800fab0 	.word	0x0800fab0
 8009600:	0800ff14 	.word	0x0800ff14
 8009604:	0800fafc 	.word	0x0800fafc
 8009608:	2000a430 	.word	0x2000a430
 800960c:	2000a438 	.word	0x2000a438

08009610 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009614:	4b05      	ldr	r3, [pc, #20]	; (800962c <tcp_trigger_input_pcb_close+0x1c>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f043 0310 	orr.w	r3, r3, #16
 800961c:	b2da      	uxtb	r2, r3
 800961e:	4b03      	ldr	r3, [pc, #12]	; (800962c <tcp_trigger_input_pcb_close+0x1c>)
 8009620:	701a      	strb	r2, [r3, #0]
}
 8009622:	bf00      	nop
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	2000a449 	.word	0x2000a449

08009630 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00a      	beq.n	8009658 <tcp_route+0x28>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	7a1b      	ldrb	r3, [r3, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d006      	beq.n	8009658 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	7a1b      	ldrb	r3, [r3, #8]
 800964e:	4618      	mov	r0, r3
 8009650:	f7fb fb5a 	bl	8004d08 <netif_get_by_index>
 8009654:	4603      	mov	r3, r0
 8009656:	e003      	b.n	8009660 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f002 fe7d 	bl	800c358 <ip4_route>
 800965e:	4603      	mov	r3, r0
  }
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009668:	b590      	push	{r4, r7, lr}
 800966a:	b087      	sub	sp, #28
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	4613      	mov	r3, r2
 8009676:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d105      	bne.n	800968a <tcp_create_segment+0x22>
 800967e:	4b44      	ldr	r3, [pc, #272]	; (8009790 <tcp_create_segment+0x128>)
 8009680:	22a3      	movs	r2, #163	; 0xa3
 8009682:	4944      	ldr	r1, [pc, #272]	; (8009794 <tcp_create_segment+0x12c>)
 8009684:	4844      	ldr	r0, [pc, #272]	; (8009798 <tcp_create_segment+0x130>)
 8009686:	f004 f89d 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d105      	bne.n	800969c <tcp_create_segment+0x34>
 8009690:	4b3f      	ldr	r3, [pc, #252]	; (8009790 <tcp_create_segment+0x128>)
 8009692:	22a4      	movs	r2, #164	; 0xa4
 8009694:	4941      	ldr	r1, [pc, #260]	; (800979c <tcp_create_segment+0x134>)
 8009696:	4840      	ldr	r0, [pc, #256]	; (8009798 <tcp_create_segment+0x130>)
 8009698:	f004 f894 	bl	800d7c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800969c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 0304 	and.w	r3, r3, #4
 80096a8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80096aa:	2003      	movs	r0, #3
 80096ac:	f7fa ffa6 	bl	80045fc <memp_malloc>
 80096b0:	6138      	str	r0, [r7, #16]
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d104      	bne.n	80096c2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80096b8:	68b8      	ldr	r0, [r7, #8]
 80096ba:	f7fb fe85 	bl	80053c8 <pbuf_free>
    return NULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	e061      	b.n	8009786 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80096c8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	2200      	movs	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	891a      	ldrh	r2, [r3, #8]
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	b29b      	uxth	r3, r3
 80096de:	429a      	cmp	r2, r3
 80096e0:	d205      	bcs.n	80096ee <tcp_create_segment+0x86>
 80096e2:	4b2b      	ldr	r3, [pc, #172]	; (8009790 <tcp_create_segment+0x128>)
 80096e4:	22b0      	movs	r2, #176	; 0xb0
 80096e6:	492e      	ldr	r1, [pc, #184]	; (80097a0 <tcp_create_segment+0x138>)
 80096e8:	482b      	ldr	r0, [pc, #172]	; (8009798 <tcp_create_segment+0x130>)
 80096ea:	f004 f86b 	bl	800d7c4 <iprintf>
  seg->len = p->tot_len - optlen;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	891a      	ldrh	r2, [r3, #8]
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80096fe:	2114      	movs	r1, #20
 8009700:	68b8      	ldr	r0, [r7, #8]
 8009702:	f7fb fdcb 	bl	800529c <pbuf_add_header>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800970c:	6938      	ldr	r0, [r7, #16]
 800970e:	f7fd f8ce 	bl	80068ae <tcp_seg_free>
    return NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	e037      	b.n	8009786 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	8ada      	ldrh	r2, [r3, #22]
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	68dc      	ldr	r4, [r3, #12]
 8009728:	4610      	mov	r0, r2
 800972a:	f7fa faef 	bl	8003d0c <lwip_htons>
 800972e:	4603      	mov	r3, r0
 8009730:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	8b1a      	ldrh	r2, [r3, #24]
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	68dc      	ldr	r4, [r3, #12]
 800973a:	4610      	mov	r0, r2
 800973c:	f7fa fae6 	bl	8003d0c <lwip_htons>
 8009740:	4603      	mov	r3, r0
 8009742:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	68dc      	ldr	r4, [r3, #12]
 8009748:	6838      	ldr	r0, [r7, #0]
 800974a:	f7fa faf4 	bl	8003d36 <lwip_htonl>
 800974e:	4603      	mov	r3, r0
 8009750:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009752:	7dfb      	ldrb	r3, [r7, #23]
 8009754:	089b      	lsrs	r3, r3, #2
 8009756:	b2db      	uxtb	r3, r3
 8009758:	b29b      	uxth	r3, r3
 800975a:	3305      	adds	r3, #5
 800975c:	b29b      	uxth	r3, r3
 800975e:	031b      	lsls	r3, r3, #12
 8009760:	b29a      	uxth	r2, r3
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	b29b      	uxth	r3, r3
 8009766:	4313      	orrs	r3, r2
 8009768:	b29a      	uxth	r2, r3
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	68dc      	ldr	r4, [r3, #12]
 800976e:	4610      	mov	r0, r2
 8009770:	f7fa facc 	bl	8003d0c <lwip_htons>
 8009774:	4603      	mov	r3, r0
 8009776:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	749a      	strb	r2, [r3, #18]
 8009780:	2200      	movs	r2, #0
 8009782:	74da      	strb	r2, [r3, #19]
  return seg;
 8009784:	693b      	ldr	r3, [r7, #16]
}
 8009786:	4618      	mov	r0, r3
 8009788:	371c      	adds	r7, #28
 800978a:	46bd      	mov	sp, r7
 800978c:	bd90      	pop	{r4, r7, pc}
 800978e:	bf00      	nop
 8009790:	0800ff30 	.word	0x0800ff30
 8009794:	0800ff64 	.word	0x0800ff64
 8009798:	0800ff84 	.word	0x0800ff84
 800979c:	0800ffac 	.word	0x0800ffac
 80097a0:	0800ffd0 	.word	0x0800ffd0

080097a4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80097a4:	b590      	push	{r4, r7, lr}
 80097a6:	b08b      	sub	sp, #44	; 0x2c
 80097a8:	af02      	add	r7, sp, #8
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	460b      	mov	r3, r1
 80097ae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61fb      	str	r3, [r7, #28]
 80097b4:	2300      	movs	r3, #0
 80097b6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80097b8:	2300      	movs	r3, #0
 80097ba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d106      	bne.n	80097d0 <tcp_split_unsent_seg+0x2c>
 80097c2:	4b95      	ldr	r3, [pc, #596]	; (8009a18 <tcp_split_unsent_seg+0x274>)
 80097c4:	f240 324b 	movw	r2, #843	; 0x34b
 80097c8:	4994      	ldr	r1, [pc, #592]	; (8009a1c <tcp_split_unsent_seg+0x278>)
 80097ca:	4895      	ldr	r0, [pc, #596]	; (8009a20 <tcp_split_unsent_seg+0x27c>)
 80097cc:	f003 fffa 	bl	800d7c4 <iprintf>

  useg = pcb->unsent;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d102      	bne.n	80097e2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80097dc:	f04f 33ff 	mov.w	r3, #4294967295
 80097e0:	e116      	b.n	8009a10 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80097e2:	887b      	ldrh	r3, [r7, #2]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d109      	bne.n	80097fc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80097e8:	4b8b      	ldr	r3, [pc, #556]	; (8009a18 <tcp_split_unsent_seg+0x274>)
 80097ea:	f240 3253 	movw	r2, #851	; 0x353
 80097ee:	498d      	ldr	r1, [pc, #564]	; (8009a24 <tcp_split_unsent_seg+0x280>)
 80097f0:	488b      	ldr	r0, [pc, #556]	; (8009a20 <tcp_split_unsent_seg+0x27c>)
 80097f2:	f003 ffe7 	bl	800d7c4 <iprintf>
    return ERR_VAL;
 80097f6:	f06f 0305 	mvn.w	r3, #5
 80097fa:	e109      	b.n	8009a10 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	891b      	ldrh	r3, [r3, #8]
 8009800:	887a      	ldrh	r2, [r7, #2]
 8009802:	429a      	cmp	r2, r3
 8009804:	d301      	bcc.n	800980a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	e102      	b.n	8009a10 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800980e:	887a      	ldrh	r2, [r7, #2]
 8009810:	429a      	cmp	r2, r3
 8009812:	d906      	bls.n	8009822 <tcp_split_unsent_seg+0x7e>
 8009814:	4b80      	ldr	r3, [pc, #512]	; (8009a18 <tcp_split_unsent_seg+0x274>)
 8009816:	f240 325b 	movw	r2, #859	; 0x35b
 800981a:	4983      	ldr	r1, [pc, #524]	; (8009a28 <tcp_split_unsent_seg+0x284>)
 800981c:	4880      	ldr	r0, [pc, #512]	; (8009a20 <tcp_split_unsent_seg+0x27c>)
 800981e:	f003 ffd1 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	891b      	ldrh	r3, [r3, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d106      	bne.n	8009838 <tcp_split_unsent_seg+0x94>
 800982a:	4b7b      	ldr	r3, [pc, #492]	; (8009a18 <tcp_split_unsent_seg+0x274>)
 800982c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009830:	497e      	ldr	r1, [pc, #504]	; (8009a2c <tcp_split_unsent_seg+0x288>)
 8009832:	487b      	ldr	r0, [pc, #492]	; (8009a20 <tcp_split_unsent_seg+0x27c>)
 8009834:	f003 ffc6 	bl	800d7c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	7a9b      	ldrb	r3, [r3, #10]
 800983c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800983e:	7bfb      	ldrb	r3, [r7, #15]
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f003 0304 	and.w	r3, r3, #4
 8009848:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	891a      	ldrh	r2, [r3, #8]
 800984e:	887b      	ldrh	r3, [r7, #2]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	b29a      	uxth	r2, r3
 8009858:	89bb      	ldrh	r3, [r7, #12]
 800985a:	4413      	add	r3, r2
 800985c:	b29b      	uxth	r3, r3
 800985e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009862:	4619      	mov	r1, r3
 8009864:	2036      	movs	r0, #54	; 0x36
 8009866:	f7fb facb 	bl	8004e00 <pbuf_alloc>
 800986a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 80b7 	beq.w	80099e2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	891a      	ldrh	r2, [r3, #8]
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	891b      	ldrh	r3, [r3, #8]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	b29a      	uxth	r2, r3
 8009882:	887b      	ldrh	r3, [r7, #2]
 8009884:	4413      	add	r3, r2
 8009886:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	6858      	ldr	r0, [r3, #4]
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	7bbb      	ldrb	r3, [r7, #14]
 8009892:	18d1      	adds	r1, r2, r3
 8009894:	897b      	ldrh	r3, [r7, #10]
 8009896:	89ba      	ldrh	r2, [r7, #12]
 8009898:	f7fb ff80 	bl	800579c <pbuf_copy_partial>
 800989c:	4603      	mov	r3, r0
 800989e:	461a      	mov	r2, r3
 80098a0:	89bb      	ldrh	r3, [r7, #12]
 80098a2:	4293      	cmp	r3, r2
 80098a4:	f040 809f 	bne.w	80099e6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	899b      	ldrh	r3, [r3, #12]
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fa fa2b 	bl	8003d0c <lwip_htons>
 80098b6:	4603      	mov	r3, r0
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098be:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80098c0:	2300      	movs	r3, #0
 80098c2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80098c4:	7efb      	ldrb	r3, [r7, #27]
 80098c6:	f003 0308 	and.w	r3, r3, #8
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d007      	beq.n	80098de <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80098ce:	7efb      	ldrb	r3, [r7, #27]
 80098d0:	f023 0308 	bic.w	r3, r3, #8
 80098d4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80098d6:	7ebb      	ldrb	r3, [r7, #26]
 80098d8:	f043 0308 	orr.w	r3, r3, #8
 80098dc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80098de:	7efb      	ldrb	r3, [r7, #27]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d007      	beq.n	80098f8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80098e8:	7efb      	ldrb	r3, [r7, #27]
 80098ea:	f023 0301 	bic.w	r3, r3, #1
 80098ee:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80098f0:	7ebb      	ldrb	r3, [r7, #26]
 80098f2:	f043 0301 	orr.w	r3, r3, #1
 80098f6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fa fa19 	bl	8003d36 <lwip_htonl>
 8009904:	4602      	mov	r2, r0
 8009906:	887b      	ldrh	r3, [r7, #2]
 8009908:	18d1      	adds	r1, r2, r3
 800990a:	7eba      	ldrb	r2, [r7, #26]
 800990c:	7bfb      	ldrb	r3, [r7, #15]
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	460b      	mov	r3, r1
 8009912:	6939      	ldr	r1, [r7, #16]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff fea7 	bl	8009668 <tcp_create_segment>
 800991a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d063      	beq.n	80099ea <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	4618      	mov	r0, r3
 8009928:	f7fb fdd6 	bl	80054d8 <pbuf_clen>
 800992c:	4603      	mov	r3, r0
 800992e:	461a      	mov	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009936:	1a9b      	subs	r3, r3, r2
 8009938:	b29a      	uxth	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	6858      	ldr	r0, [r3, #4]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	891a      	ldrh	r2, [r3, #8]
 800994a:	89bb      	ldrh	r3, [r7, #12]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	b29b      	uxth	r3, r3
 8009950:	4619      	mov	r1, r3
 8009952:	f7fb fbb3 	bl	80050bc <pbuf_realloc>
  useg->len -= remainder;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	891a      	ldrh	r2, [r3, #8]
 800995a:	89bb      	ldrh	r3, [r7, #12]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	b29a      	uxth	r2, r3
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	899b      	ldrh	r3, [r3, #12]
 800996a:	b29c      	uxth	r4, r3
 800996c:	7efb      	ldrb	r3, [r7, #27]
 800996e:	b29b      	uxth	r3, r3
 8009970:	4618      	mov	r0, r3
 8009972:	f7fa f9cb 	bl	8003d0c <lwip_htons>
 8009976:	4603      	mov	r3, r0
 8009978:	461a      	mov	r2, r3
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	4322      	orrs	r2, r4
 8009980:	b292      	uxth	r2, r2
 8009982:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	4618      	mov	r0, r3
 800998a:	f7fb fda5 	bl	80054d8 <pbuf_clen>
 800998e:	4603      	mov	r3, r0
 8009990:	461a      	mov	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009998:	4413      	add	r3, r2
 800999a:	b29a      	uxth	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fb fd96 	bl	80054d8 <pbuf_clen>
 80099ac:	4603      	mov	r3, r0
 80099ae:	461a      	mov	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80099b6:	4413      	add	r3, r2
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	69fa      	ldr	r2, [r7, #28]
 80099cc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d103      	bne.n	80099de <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	e016      	b.n	8009a10 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80099e2:	bf00      	nop
 80099e4:	e002      	b.n	80099ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 80099e6:	bf00      	nop
 80099e8:	e000      	b.n	80099ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 80099ea:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d006      	beq.n	8009a00 <tcp_split_unsent_seg+0x25c>
 80099f2:	4b09      	ldr	r3, [pc, #36]	; (8009a18 <tcp_split_unsent_seg+0x274>)
 80099f4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80099f8:	490d      	ldr	r1, [pc, #52]	; (8009a30 <tcp_split_unsent_seg+0x28c>)
 80099fa:	4809      	ldr	r0, [pc, #36]	; (8009a20 <tcp_split_unsent_seg+0x27c>)
 80099fc:	f003 fee2 	bl	800d7c4 <iprintf>
  if (p != NULL) {
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009a06:	6938      	ldr	r0, [r7, #16]
 8009a08:	f7fb fcde 	bl	80053c8 <pbuf_free>
  }

  return ERR_MEM;
 8009a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3724      	adds	r7, #36	; 0x24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd90      	pop	{r4, r7, pc}
 8009a18:	0800ff30 	.word	0x0800ff30
 8009a1c:	080102c4 	.word	0x080102c4
 8009a20:	0800ff84 	.word	0x0800ff84
 8009a24:	080102e8 	.word	0x080102e8
 8009a28:	0801030c 	.word	0x0801030c
 8009a2c:	0801031c 	.word	0x0801031c
 8009a30:	0801032c 	.word	0x0801032c

08009a34 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009a34:	b590      	push	{r4, r7, lr}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d106      	bne.n	8009a50 <tcp_send_fin+0x1c>
 8009a42:	4b21      	ldr	r3, [pc, #132]	; (8009ac8 <tcp_send_fin+0x94>)
 8009a44:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009a48:	4920      	ldr	r1, [pc, #128]	; (8009acc <tcp_send_fin+0x98>)
 8009a4a:	4821      	ldr	r0, [pc, #132]	; (8009ad0 <tcp_send_fin+0x9c>)
 8009a4c:	f003 feba 	bl	800d7c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d02e      	beq.n	8009ab6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a5c:	60fb      	str	r3, [r7, #12]
 8009a5e:	e002      	b.n	8009a66 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1f8      	bne.n	8009a60 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	899b      	ldrh	r3, [r3, #12]
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fa f948 	bl	8003d0c <lwip_htons>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	f003 0307 	and.w	r3, r3, #7
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d116      	bne.n	8009ab6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	899b      	ldrh	r3, [r3, #12]
 8009a8e:	b29c      	uxth	r4, r3
 8009a90:	2001      	movs	r0, #1
 8009a92:	f7fa f93b 	bl	8003d0c <lwip_htons>
 8009a96:	4603      	mov	r3, r0
 8009a98:	461a      	mov	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	4322      	orrs	r2, r4
 8009aa0:	b292      	uxth	r2, r2
 8009aa2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	8b5b      	ldrh	r3, [r3, #26]
 8009aa8:	f043 0320 	orr.w	r3, r3, #32
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	e004      	b.n	8009ac0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f80b 	bl	8009ad4 <tcp_enqueue_flags>
 8009abe:	4603      	mov	r3, r0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd90      	pop	{r4, r7, pc}
 8009ac8:	0800ff30 	.word	0x0800ff30
 8009acc:	08010338 	.word	0x08010338
 8009ad0:	0800ff84 	.word	0x0800ff84

08009ad4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b08a      	sub	sp, #40	; 0x28
 8009ad8:	af02      	add	r7, sp, #8
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	460b      	mov	r3, r1
 8009ade:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009ae8:	78fb      	ldrb	r3, [r7, #3]
 8009aea:	f003 0303 	and.w	r3, r3, #3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d106      	bne.n	8009b00 <tcp_enqueue_flags+0x2c>
 8009af2:	4b67      	ldr	r3, [pc, #412]	; (8009c90 <tcp_enqueue_flags+0x1bc>)
 8009af4:	f240 4211 	movw	r2, #1041	; 0x411
 8009af8:	4966      	ldr	r1, [pc, #408]	; (8009c94 <tcp_enqueue_flags+0x1c0>)
 8009afa:	4867      	ldr	r0, [pc, #412]	; (8009c98 <tcp_enqueue_flags+0x1c4>)
 8009afc:	f003 fe62 	bl	800d7c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d106      	bne.n	8009b14 <tcp_enqueue_flags+0x40>
 8009b06:	4b62      	ldr	r3, [pc, #392]	; (8009c90 <tcp_enqueue_flags+0x1bc>)
 8009b08:	f240 4213 	movw	r2, #1043	; 0x413
 8009b0c:	4963      	ldr	r1, [pc, #396]	; (8009c9c <tcp_enqueue_flags+0x1c8>)
 8009b0e:	4862      	ldr	r0, [pc, #392]	; (8009c98 <tcp_enqueue_flags+0x1c4>)
 8009b10:	f003 fe58 	bl	800d7c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009b14:	78fb      	ldrb	r3, [r7, #3]
 8009b16:	f003 0302 	and.w	r3, r3, #2
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009b22:	7ffb      	ldrb	r3, [r7, #31]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009b2e:	7dfb      	ldrb	r3, [r7, #23]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009b36:	4619      	mov	r1, r3
 8009b38:	2036      	movs	r0, #54	; 0x36
 8009b3a:	f7fb f961 	bl	8004e00 <pbuf_alloc>
 8009b3e:	6138      	str	r0, [r7, #16]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d109      	bne.n	8009b5a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	8b5b      	ldrh	r3, [r3, #26]
 8009b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009b54:	f04f 33ff 	mov.w	r3, #4294967295
 8009b58:	e095      	b.n	8009c86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	895a      	ldrh	r2, [r3, #10]
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d206      	bcs.n	8009b74 <tcp_enqueue_flags+0xa0>
 8009b66:	4b4a      	ldr	r3, [pc, #296]	; (8009c90 <tcp_enqueue_flags+0x1bc>)
 8009b68:	f240 4239 	movw	r2, #1081	; 0x439
 8009b6c:	494c      	ldr	r1, [pc, #304]	; (8009ca0 <tcp_enqueue_flags+0x1cc>)
 8009b6e:	484a      	ldr	r0, [pc, #296]	; (8009c98 <tcp_enqueue_flags+0x1c4>)
 8009b70:	f003 fe28 	bl	800d7c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009b78:	78fa      	ldrb	r2, [r7, #3]
 8009b7a:	7ffb      	ldrb	r3, [r7, #31]
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	460b      	mov	r3, r1
 8009b80:	6939      	ldr	r1, [r7, #16]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff fd70 	bl	8009668 <tcp_create_segment>
 8009b88:	60f8      	str	r0, [r7, #12]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d109      	bne.n	8009ba4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	8b5b      	ldrh	r3, [r3, #26]
 8009b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba2:	e070      	b.n	8009c86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f003 0303 	and.w	r3, r3, #3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d006      	beq.n	8009bbe <tcp_enqueue_flags+0xea>
 8009bb0:	4b37      	ldr	r3, [pc, #220]	; (8009c90 <tcp_enqueue_flags+0x1bc>)
 8009bb2:	f240 4242 	movw	r2, #1090	; 0x442
 8009bb6:	493b      	ldr	r1, [pc, #236]	; (8009ca4 <tcp_enqueue_flags+0x1d0>)
 8009bb8:	4837      	ldr	r0, [pc, #220]	; (8009c98 <tcp_enqueue_flags+0x1c4>)
 8009bba:	f003 fe03 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	891b      	ldrh	r3, [r3, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d006      	beq.n	8009bd4 <tcp_enqueue_flags+0x100>
 8009bc6:	4b32      	ldr	r3, [pc, #200]	; (8009c90 <tcp_enqueue_flags+0x1bc>)
 8009bc8:	f240 4243 	movw	r2, #1091	; 0x443
 8009bcc:	4936      	ldr	r1, [pc, #216]	; (8009ca8 <tcp_enqueue_flags+0x1d4>)
 8009bce:	4832      	ldr	r0, [pc, #200]	; (8009c98 <tcp_enqueue_flags+0x1c4>)
 8009bd0:	f003 fdf8 	bl	800d7c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d103      	bne.n	8009be4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	66da      	str	r2, [r3, #108]	; 0x6c
 8009be2:	e00d      	b.n	8009c00 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009be8:	61bb      	str	r3, [r7, #24]
 8009bea:	e002      	b.n	8009bf2 <tcp_enqueue_flags+0x11e>
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	61bb      	str	r3, [r7, #24]
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1f8      	bne.n	8009bec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009c08:	78fb      	ldrb	r3, [r7, #3]
 8009c0a:	f003 0302 	and.w	r3, r3, #2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d104      	bne.n	8009c1c <tcp_enqueue_flags+0x148>
 8009c12:	78fb      	ldrb	r3, [r7, #3]
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d004      	beq.n	8009c26 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c20:	1c5a      	adds	r2, r3, #1
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009c26:	78fb      	ldrb	r3, [r7, #3]
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d006      	beq.n	8009c3e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	8b5b      	ldrh	r3, [r3, #26]
 8009c34:	f043 0320 	orr.w	r3, r3, #32
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fb fc48 	bl	80054d8 <pbuf_clen>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009c52:	4413      	add	r3, r2
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00e      	beq.n	8009c84 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10a      	bne.n	8009c84 <tcp_enqueue_flags+0x1b0>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d106      	bne.n	8009c84 <tcp_enqueue_flags+0x1b0>
 8009c76:	4b06      	ldr	r3, [pc, #24]	; (8009c90 <tcp_enqueue_flags+0x1bc>)
 8009c78:	f240 4265 	movw	r2, #1125	; 0x465
 8009c7c:	490b      	ldr	r1, [pc, #44]	; (8009cac <tcp_enqueue_flags+0x1d8>)
 8009c7e:	4806      	ldr	r0, [pc, #24]	; (8009c98 <tcp_enqueue_flags+0x1c4>)
 8009c80:	f003 fda0 	bl	800d7c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3720      	adds	r7, #32
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	0800ff30 	.word	0x0800ff30
 8009c94:	08010354 	.word	0x08010354
 8009c98:	0800ff84 	.word	0x0800ff84
 8009c9c:	080103ac 	.word	0x080103ac
 8009ca0:	080103cc 	.word	0x080103cc
 8009ca4:	08010408 	.word	0x08010408
 8009ca8:	08010420 	.word	0x08010420
 8009cac:	0801044c 	.word	0x0801044c

08009cb0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009cb0:	b5b0      	push	{r4, r5, r7, lr}
 8009cb2:	b08a      	sub	sp, #40	; 0x28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d106      	bne.n	8009ccc <tcp_output+0x1c>
 8009cbe:	4b8a      	ldr	r3, [pc, #552]	; (8009ee8 <tcp_output+0x238>)
 8009cc0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009cc4:	4989      	ldr	r1, [pc, #548]	; (8009eec <tcp_output+0x23c>)
 8009cc6:	488a      	ldr	r0, [pc, #552]	; (8009ef0 <tcp_output+0x240>)
 8009cc8:	f003 fd7c 	bl	800d7c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	7d1b      	ldrb	r3, [r3, #20]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d106      	bne.n	8009ce2 <tcp_output+0x32>
 8009cd4:	4b84      	ldr	r3, [pc, #528]	; (8009ee8 <tcp_output+0x238>)
 8009cd6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8009cda:	4986      	ldr	r1, [pc, #536]	; (8009ef4 <tcp_output+0x244>)
 8009cdc:	4884      	ldr	r0, [pc, #528]	; (8009ef0 <tcp_output+0x240>)
 8009cde:	f003 fd71 	bl	800d7c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009ce2:	4b85      	ldr	r3, [pc, #532]	; (8009ef8 <tcp_output+0x248>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d101      	bne.n	8009cf0 <tcp_output+0x40>
    return ERR_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	e1ce      	b.n	800a08e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	bf28      	it	cs
 8009d00:	4613      	movcs	r3, r2
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10b      	bne.n	8009d2a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	8b5b      	ldrh	r3, [r3, #26]
 8009d16:	f003 0302 	and.w	r3, r3, #2
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 81aa 	beq.w	800a074 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fdcb 	bl	800a8bc <tcp_send_empty_ack>
 8009d26:	4603      	mov	r3, r0
 8009d28:	e1b1      	b.n	800a08e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009d2a:	6879      	ldr	r1, [r7, #4]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	461a      	mov	r2, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7ff fc7c 	bl	8009630 <tcp_route>
 8009d38:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d102      	bne.n	8009d46 <tcp_output+0x96>
    return ERR_RTE;
 8009d40:	f06f 0303 	mvn.w	r3, #3
 8009d44:	e1a3      	b.n	800a08e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d003      	beq.n	8009d54 <tcp_output+0xa4>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d111      	bne.n	8009d78 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d002      	beq.n	8009d60 <tcp_output+0xb0>
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	e000      	b.n	8009d62 <tcp_output+0xb2>
 8009d60:	2300      	movs	r3, #0
 8009d62:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d102      	bne.n	8009d70 <tcp_output+0xc0>
      return ERR_RTE;
 8009d6a:	f06f 0303 	mvn.w	r3, #3
 8009d6e:	e18e      	b.n	800a08e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7f9 ffd9 	bl	8003d36 <lwip_htonl>
 8009d84:	4602      	mov	r2, r0
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d8e:	8912      	ldrh	r2, [r2, #8]
 8009d90:	4413      	add	r3, r2
 8009d92:	69ba      	ldr	r2, [r7, #24]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d227      	bcs.n	8009de8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d9e:	461a      	mov	r2, r3
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d114      	bne.n	8009dd0 <tcp_output+0x120>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d110      	bne.n	8009dd0 <tcp_output+0x120>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10b      	bne.n	8009dd0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	8b5b      	ldrh	r3, [r3, #26]
 8009dd4:	f003 0302 	and.w	r3, r3, #2
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 814d 	beq.w	800a078 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 fd6c 	bl	800a8bc <tcp_send_empty_ack>
 8009de4:	4603      	mov	r3, r0
 8009de6:	e152      	b.n	800a08e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009df6:	6a3b      	ldr	r3, [r7, #32]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 811c 	beq.w	800a036 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8009dfe:	e002      	b.n	8009e06 <tcp_output+0x156>
 8009e00:	6a3b      	ldr	r3, [r7, #32]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	623b      	str	r3, [r7, #32]
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1f8      	bne.n	8009e00 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009e0e:	e112      	b.n	800a036 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	899b      	ldrh	r3, [r3, #12]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7f9 ff77 	bl	8003d0c <lwip_htons>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	f003 0304 	and.w	r3, r3, #4
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d006      	beq.n	8009e38 <tcp_output+0x188>
 8009e2a:	4b2f      	ldr	r3, [pc, #188]	; (8009ee8 <tcp_output+0x238>)
 8009e2c:	f240 5236 	movw	r2, #1334	; 0x536
 8009e30:	4932      	ldr	r1, [pc, #200]	; (8009efc <tcp_output+0x24c>)
 8009e32:	482f      	ldr	r0, [pc, #188]	; (8009ef0 <tcp_output+0x240>)
 8009e34:	f003 fcc6 	bl	800d7c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01f      	beq.n	8009e80 <tcp_output+0x1d0>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	8b5b      	ldrh	r3, [r3, #26]
 8009e44:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d119      	bne.n	8009e80 <tcp_output+0x1d0>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00b      	beq.n	8009e6c <tcp_output+0x1bc>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d110      	bne.n	8009e80 <tcp_output+0x1d0>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e62:	891a      	ldrh	r2, [r3, #8]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d209      	bcs.n	8009e80 <tcp_output+0x1d0>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <tcp_output+0x1d0>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e7c:	2b08      	cmp	r3, #8
 8009e7e:	d901      	bls.n	8009e84 <tcp_output+0x1d4>
 8009e80:	2301      	movs	r3, #1
 8009e82:	e000      	b.n	8009e86 <tcp_output+0x1d6>
 8009e84:	2300      	movs	r3, #0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d106      	bne.n	8009e98 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	8b5b      	ldrh	r3, [r3, #26]
 8009e8e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 80e4 	beq.w	800a060 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	7d1b      	ldrb	r3, [r3, #20]
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d00d      	beq.n	8009ebc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	899b      	ldrh	r3, [r3, #12]
 8009ea6:	b29c      	uxth	r4, r3
 8009ea8:	2010      	movs	r0, #16
 8009eaa:	f7f9 ff2f 	bl	8003d0c <lwip_htons>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	4322      	orrs	r2, r4
 8009eb8:	b292      	uxth	r2, r2
 8009eba:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ec2:	f000 f909 	bl	800a0d8 <tcp_output_segment>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d016      	beq.n	8009f00 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	8b5b      	ldrh	r3, [r3, #26]
 8009ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	835a      	strh	r2, [r3, #26]
      return err;
 8009ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ee4:	e0d3      	b.n	800a08e <tcp_output+0x3de>
 8009ee6:	bf00      	nop
 8009ee8:	0800ff30 	.word	0x0800ff30
 8009eec:	08010474 	.word	0x08010474
 8009ef0:	0800ff84 	.word	0x0800ff84
 8009ef4:	0801048c 	.word	0x0801048c
 8009ef8:	2000a450 	.word	0x2000a450
 8009efc:	080104b4 	.word	0x080104b4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	7d1b      	ldrb	r3, [r3, #20]
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d006      	beq.n	8009f1e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	8b5b      	ldrh	r3, [r3, #26]
 8009f14:	f023 0303 	bic.w	r3, r3, #3
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7f9 ff06 	bl	8003d36 <lwip_htonl>
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	891b      	ldrh	r3, [r3, #8]
 8009f30:	461d      	mov	r5, r3
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	899b      	ldrh	r3, [r3, #12]
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7f9 fee6 	bl	8003d0c <lwip_htons>
 8009f40:	4603      	mov	r3, r0
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	f003 0303 	and.w	r3, r3, #3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d001      	beq.n	8009f50 <tcp_output+0x2a0>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e000      	b.n	8009f52 <tcp_output+0x2a2>
 8009f50:	2300      	movs	r3, #0
 8009f52:	442b      	add	r3, r5
 8009f54:	4423      	add	r3, r4
 8009f56:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	da02      	bge.n	8009f6a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	891b      	ldrh	r3, [r3, #8]
 8009f6e:	461c      	mov	r4, r3
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	899b      	ldrh	r3, [r3, #12]
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7f9 fec7 	bl	8003d0c <lwip_htons>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	f003 0303 	and.w	r3, r3, #3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <tcp_output+0x2de>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <tcp_output+0x2e0>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	4423      	add	r3, r4
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d049      	beq.n	800a02a <tcp_output+0x37a>
      seg->next = NULL;
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d105      	bne.n	8009fb0 <tcp_output+0x300>
        pcb->unacked = seg;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	623b      	str	r3, [r7, #32]
 8009fae:	e03f      	b.n	800a030 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7f9 febd 	bl	8003d36 <lwip_htonl>
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7f9 feb6 	bl	8003d36 <lwip_htonl>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	1ae3      	subs	r3, r4, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	da24      	bge.n	800a01c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3370      	adds	r3, #112	; 0x70
 8009fd6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009fd8:	e002      	b.n	8009fe0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d011      	beq.n	800a00c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7f9 fea0 	bl	8003d36 <lwip_htonl>
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7f9 fe99 	bl	8003d36 <lwip_htonl>
 800a004:	4603      	mov	r3, r0
 800a006:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a008:	2b00      	cmp	r3, #0
 800a00a:	dbe6      	blt.n	8009fda <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	e009      	b.n	800a030 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a020:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	623b      	str	r3, [r7, #32]
 800a028:	e002      	b.n	800a030 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a02a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a02c:	f7fc fc3f 	bl	80068ae <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a034:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d012      	beq.n	800a062 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	4618      	mov	r0, r3
 800a044:	f7f9 fe77 	bl	8003d36 <lwip_htonl>
 800a048:	4602      	mov	r2, r0
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a052:	8912      	ldrh	r2, [r2, #8]
 800a054:	4413      	add	r3, r2
  while (seg != NULL &&
 800a056:	69ba      	ldr	r2, [r7, #24]
 800a058:	429a      	cmp	r2, r3
 800a05a:	f4bf aed9 	bcs.w	8009e10 <tcp_output+0x160>
 800a05e:	e000      	b.n	800a062 <tcp_output+0x3b2>
      break;
 800a060:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d108      	bne.n	800a07c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a072:	e004      	b.n	800a07e <tcp_output+0x3ce>
    goto output_done;
 800a074:	bf00      	nop
 800a076:	e002      	b.n	800a07e <tcp_output+0x3ce>
    goto output_done;
 800a078:	bf00      	nop
 800a07a:	e000      	b.n	800a07e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a07c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	8b5b      	ldrh	r3, [r3, #26]
 800a082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a086:	b29a      	uxth	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3728      	adds	r7, #40	; 0x28
 800a092:	46bd      	mov	sp, r7
 800a094:	bdb0      	pop	{r4, r5, r7, pc}
 800a096:	bf00      	nop

0800a098 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d106      	bne.n	800a0b4 <tcp_output_segment_busy+0x1c>
 800a0a6:	4b09      	ldr	r3, [pc, #36]	; (800a0cc <tcp_output_segment_busy+0x34>)
 800a0a8:	f240 529a 	movw	r2, #1434	; 0x59a
 800a0ac:	4908      	ldr	r1, [pc, #32]	; (800a0d0 <tcp_output_segment_busy+0x38>)
 800a0ae:	4809      	ldr	r0, [pc, #36]	; (800a0d4 <tcp_output_segment_busy+0x3c>)
 800a0b0:	f003 fb88 	bl	800d7c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	7b9b      	ldrb	r3, [r3, #14]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d001      	beq.n	800a0c2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e000      	b.n	800a0c4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	0800ff30 	.word	0x0800ff30
 800a0d0:	080104cc 	.word	0x080104cc
 800a0d4:	0800ff84 	.word	0x0800ff84

0800a0d8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a0d8:	b5b0      	push	{r4, r5, r7, lr}
 800a0da:	b08c      	sub	sp, #48	; 0x30
 800a0dc:	af04      	add	r7, sp, #16
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d106      	bne.n	800a0f8 <tcp_output_segment+0x20>
 800a0ea:	4b63      	ldr	r3, [pc, #396]	; (800a278 <tcp_output_segment+0x1a0>)
 800a0ec:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a0f0:	4962      	ldr	r1, [pc, #392]	; (800a27c <tcp_output_segment+0x1a4>)
 800a0f2:	4863      	ldr	r0, [pc, #396]	; (800a280 <tcp_output_segment+0x1a8>)
 800a0f4:	f003 fb66 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d106      	bne.n	800a10c <tcp_output_segment+0x34>
 800a0fe:	4b5e      	ldr	r3, [pc, #376]	; (800a278 <tcp_output_segment+0x1a0>)
 800a100:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a104:	495f      	ldr	r1, [pc, #380]	; (800a284 <tcp_output_segment+0x1ac>)
 800a106:	485e      	ldr	r0, [pc, #376]	; (800a280 <tcp_output_segment+0x1a8>)
 800a108:	f003 fb5c 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d106      	bne.n	800a120 <tcp_output_segment+0x48>
 800a112:	4b59      	ldr	r3, [pc, #356]	; (800a278 <tcp_output_segment+0x1a0>)
 800a114:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a118:	495b      	ldr	r1, [pc, #364]	; (800a288 <tcp_output_segment+0x1b0>)
 800a11a:	4859      	ldr	r0, [pc, #356]	; (800a280 <tcp_output_segment+0x1a8>)
 800a11c:	f003 fb52 	bl	800d7c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f7ff ffb9 	bl	800a098 <tcp_output_segment_busy>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	e09f      	b.n	800a270 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	68dc      	ldr	r4, [r3, #12]
 800a138:	4610      	mov	r0, r2
 800a13a:	f7f9 fdfc 	bl	8003d36 <lwip_htonl>
 800a13e:	4603      	mov	r3, r0
 800a140:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68dc      	ldr	r4, [r3, #12]
 800a14a:	4610      	mov	r0, r2
 800a14c:	f7f9 fdde 	bl	8003d0c <lwip_htons>
 800a150:	4603      	mov	r3, r0
 800a152:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a15c:	441a      	add	r2, r3
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	3314      	adds	r3, #20
 800a168:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	7a9b      	ldrb	r3, [r3, #10]
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b00      	cmp	r3, #0
 800a174:	d015      	beq.n	800a1a2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	3304      	adds	r3, #4
 800a17a:	461a      	mov	r2, r3
 800a17c:	6879      	ldr	r1, [r7, #4]
 800a17e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a182:	f7fc fe8b 	bl	8006e9c <tcp_eff_send_mss_netif>
 800a186:	4603      	mov	r3, r0
 800a188:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a18a:	8b7b      	ldrh	r3, [r7, #26]
 800a18c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a190:	4618      	mov	r0, r3
 800a192:	f7f9 fdd0 	bl	8003d36 <lwip_htonl>
 800a196:	4602      	mov	r2, r0
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	3304      	adds	r3, #4
 800a1a0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	da02      	bge.n	800a1b2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10c      	bne.n	800a1d4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a1ba:	4b34      	ldr	r3, [pc, #208]	; (800a28c <tcp_output_segment+0x1b4>)
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7f9 fdb4 	bl	8003d36 <lwip_htonl>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	68da      	ldr	r2, [r3, #12]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	8959      	ldrh	r1, [r3, #10]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	8b3a      	ldrh	r2, [r7, #24]
 800a1ee:	1a8a      	subs	r2, r1, r2
 800a1f0:	b292      	uxth	r2, r2
 800a1f2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	8919      	ldrh	r1, [r3, #8]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	8b3a      	ldrh	r2, [r7, #24]
 800a200:	1a8a      	subs	r2, r1, r2
 800a202:	b292      	uxth	r2, r2
 800a204:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	68d2      	ldr	r2, [r2, #12]
 800a20e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	741a      	strb	r2, [r3, #16]
 800a218:	2200      	movs	r2, #0
 800a21a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	f103 0214 	add.w	r2, r3, #20
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	7a9b      	ldrb	r3, [r3, #10]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	f003 0304 	and.w	r3, r3, #4
 800a22e:	4413      	add	r3, r2
 800a230:	69fa      	ldr	r2, [r7, #28]
 800a232:	429a      	cmp	r2, r3
 800a234:	d006      	beq.n	800a244 <tcp_output_segment+0x16c>
 800a236:	4b10      	ldr	r3, [pc, #64]	; (800a278 <tcp_output_segment+0x1a0>)
 800a238:	f240 621c 	movw	r2, #1564	; 0x61c
 800a23c:	4914      	ldr	r1, [pc, #80]	; (800a290 <tcp_output_segment+0x1b8>)
 800a23e:	4810      	ldr	r0, [pc, #64]	; (800a280 <tcp_output_segment+0x1a8>)
 800a240:	f003 fac0 	bl	800d7c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6858      	ldr	r0, [r3, #4]
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	1d1c      	adds	r4, r3, #4
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	7add      	ldrb	r5, [r3, #11]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	7a9b      	ldrb	r3, [r3, #10]
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	9202      	str	r2, [sp, #8]
 800a25a:	2206      	movs	r2, #6
 800a25c:	9201      	str	r2, [sp, #4]
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	462b      	mov	r3, r5
 800a262:	4622      	mov	r2, r4
 800a264:	f002 fa36 	bl	800c6d4 <ip4_output_if>
 800a268:	4603      	mov	r3, r0
 800a26a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a26c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3720      	adds	r7, #32
 800a274:	46bd      	mov	sp, r7
 800a276:	bdb0      	pop	{r4, r5, r7, pc}
 800a278:	0800ff30 	.word	0x0800ff30
 800a27c:	080104f4 	.word	0x080104f4
 800a280:	0800ff84 	.word	0x0800ff84
 800a284:	08010514 	.word	0x08010514
 800a288:	08010534 	.word	0x08010534
 800a28c:	2000a404 	.word	0x2000a404
 800a290:	08010558 	.word	0x08010558

0800a294 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a294:	b5b0      	push	{r4, r5, r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <tcp_rexmit_rto_prepare+0x1c>
 800a2a2:	4b31      	ldr	r3, [pc, #196]	; (800a368 <tcp_rexmit_rto_prepare+0xd4>)
 800a2a4:	f240 6263 	movw	r2, #1635	; 0x663
 800a2a8:	4930      	ldr	r1, [pc, #192]	; (800a36c <tcp_rexmit_rto_prepare+0xd8>)
 800a2aa:	4831      	ldr	r0, [pc, #196]	; (800a370 <tcp_rexmit_rto_prepare+0xdc>)
 800a2ac:	f003 fa8a 	bl	800d7c4 <iprintf>

  if (pcb->unacked == NULL) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d102      	bne.n	800a2be <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a2b8:	f06f 0305 	mvn.w	r3, #5
 800a2bc:	e050      	b.n	800a360 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	e00b      	b.n	800a2de <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f7ff fee6 	bl	800a098 <tcp_output_segment_busy>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a2d2:	f06f 0305 	mvn.w	r3, #5
 800a2d6:	e043      	b.n	800a360 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	60fb      	str	r3, [r7, #12]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1ef      	bne.n	800a2c6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f7ff fed6 	bl	800a098 <tcp_output_segment_busy>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d002      	beq.n	800a2f8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a2f2:	f06f 0305 	mvn.w	r3, #5
 800a2f6:	e033      	b.n	800a360 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	8b5b      	ldrh	r3, [r3, #26]
 800a312:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a316:	b29a      	uxth	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	4618      	mov	r0, r3
 800a324:	f7f9 fd07 	bl	8003d36 <lwip_htonl>
 800a328:	4604      	mov	r4, r0
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	891b      	ldrh	r3, [r3, #8]
 800a32e:	461d      	mov	r5, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	899b      	ldrh	r3, [r3, #12]
 800a336:	b29b      	uxth	r3, r3
 800a338:	4618      	mov	r0, r3
 800a33a:	f7f9 fce7 	bl	8003d0c <lwip_htons>
 800a33e:	4603      	mov	r3, r0
 800a340:	b2db      	uxtb	r3, r3
 800a342:	f003 0303 	and.w	r3, r3, #3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <tcp_rexmit_rto_prepare+0xba>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e000      	b.n	800a350 <tcp_rexmit_rto_prepare+0xbc>
 800a34e:	2300      	movs	r3, #0
 800a350:	442b      	add	r3, r5
 800a352:	18e2      	adds	r2, r4, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bdb0      	pop	{r4, r5, r7, pc}
 800a368:	0800ff30 	.word	0x0800ff30
 800a36c:	0801056c 	.word	0x0801056c
 800a370:	0800ff84 	.word	0x0800ff84

0800a374 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d106      	bne.n	800a390 <tcp_rexmit_rto_commit+0x1c>
 800a382:	4b0d      	ldr	r3, [pc, #52]	; (800a3b8 <tcp_rexmit_rto_commit+0x44>)
 800a384:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a388:	490c      	ldr	r1, [pc, #48]	; (800a3bc <tcp_rexmit_rto_commit+0x48>)
 800a38a:	480d      	ldr	r0, [pc, #52]	; (800a3c0 <tcp_rexmit_rto_commit+0x4c>)
 800a38c:	f003 fa1a 	bl	800d7c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a396:	2bff      	cmp	r3, #255	; 0xff
 800a398:	d007      	beq.n	800a3aa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff fc80 	bl	8009cb0 <tcp_output>
}
 800a3b0:	bf00      	nop
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	0800ff30 	.word	0x0800ff30
 800a3bc:	08010590 	.word	0x08010590
 800a3c0:	0800ff84 	.word	0x0800ff84

0800a3c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <tcp_rexmit_rto+0x1c>
 800a3d2:	4b0a      	ldr	r3, [pc, #40]	; (800a3fc <tcp_rexmit_rto+0x38>)
 800a3d4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a3d8:	4909      	ldr	r1, [pc, #36]	; (800a400 <tcp_rexmit_rto+0x3c>)
 800a3da:	480a      	ldr	r0, [pc, #40]	; (800a404 <tcp_rexmit_rto+0x40>)
 800a3dc:	f003 f9f2 	bl	800d7c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7ff ff57 	bl	800a294 <tcp_rexmit_rto_prepare>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d102      	bne.n	800a3f2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7ff ffc1 	bl	800a374 <tcp_rexmit_rto_commit>
  }
}
 800a3f2:	bf00      	nop
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	0800ff30 	.word	0x0800ff30
 800a400:	080105b4 	.word	0x080105b4
 800a404:	0800ff84 	.word	0x0800ff84

0800a408 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a408:	b590      	push	{r4, r7, lr}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <tcp_rexmit+0x1c>
 800a416:	4b2f      	ldr	r3, [pc, #188]	; (800a4d4 <tcp_rexmit+0xcc>)
 800a418:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a41c:	492e      	ldr	r1, [pc, #184]	; (800a4d8 <tcp_rexmit+0xd0>)
 800a41e:	482f      	ldr	r0, [pc, #188]	; (800a4dc <tcp_rexmit+0xd4>)
 800a420:	f003 f9d0 	bl	800d7c4 <iprintf>

  if (pcb->unacked == NULL) {
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d102      	bne.n	800a432 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a42c:	f06f 0305 	mvn.w	r3, #5
 800a430:	e04c      	b.n	800a4cc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a436:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a438:	68b8      	ldr	r0, [r7, #8]
 800a43a:	f7ff fe2d 	bl	800a098 <tcp_output_segment_busy>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a444:	f06f 0305 	mvn.w	r3, #5
 800a448:	e040      	b.n	800a4cc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	336c      	adds	r3, #108	; 0x6c
 800a456:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a458:	e002      	b.n	800a460 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d011      	beq.n	800a48c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	4618      	mov	r0, r3
 800a472:	f7f9 fc60 	bl	8003d36 <lwip_htonl>
 800a476:	4604      	mov	r4, r0
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	4618      	mov	r0, r3
 800a480:	f7f9 fc59 	bl	8003d36 <lwip_htonl>
 800a484:	4603      	mov	r3, r0
 800a486:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a488:	2b00      	cmp	r3, #0
 800a48a:	dbe6      	blt.n	800a45a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d103      	bne.n	800a4aa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4b0:	2bff      	cmp	r3, #255	; 0xff
 800a4b2:	d007      	beq.n	800a4c4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd90      	pop	{r4, r7, pc}
 800a4d4:	0800ff30 	.word	0x0800ff30
 800a4d8:	080105d0 	.word	0x080105d0
 800a4dc:	0800ff84 	.word	0x0800ff84

0800a4e0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <tcp_rexmit_fast+0x1c>
 800a4ee:	4b2a      	ldr	r3, [pc, #168]	; (800a598 <tcp_rexmit_fast+0xb8>)
 800a4f0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a4f4:	4929      	ldr	r1, [pc, #164]	; (800a59c <tcp_rexmit_fast+0xbc>)
 800a4f6:	482a      	ldr	r0, [pc, #168]	; (800a5a0 <tcp_rexmit_fast+0xc0>)
 800a4f8:	f003 f964 	bl	800d7c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a500:	2b00      	cmp	r3, #0
 800a502:	d045      	beq.n	800a590 <tcp_rexmit_fast+0xb0>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	8b5b      	ldrh	r3, [r3, #26]
 800a508:	f003 0304 	and.w	r3, r3, #4
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d13f      	bne.n	800a590 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7ff ff79 	bl	800a408 <tcp_rexmit>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d139      	bne.n	800a590 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a528:	4293      	cmp	r3, r2
 800a52a:	bf28      	it	cs
 800a52c:	4613      	movcs	r3, r2
 800a52e:	b29b      	uxth	r3, r3
 800a530:	2b00      	cmp	r3, #0
 800a532:	da00      	bge.n	800a536 <tcp_rexmit_fast+0x56>
 800a534:	3301      	adds	r3, #1
 800a536:	105b      	asrs	r3, r3, #1
 800a538:	b29a      	uxth	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a546:	461a      	mov	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	429a      	cmp	r2, r3
 800a550:	d206      	bcs.n	800a560 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a556:	005b      	lsls	r3, r3, #1
 800a558:	b29a      	uxth	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a56a:	4619      	mov	r1, r3
 800a56c:	0049      	lsls	r1, r1, #1
 800a56e:	440b      	add	r3, r1
 800a570:	b29b      	uxth	r3, r3
 800a572:	4413      	add	r3, r2
 800a574:	b29a      	uxth	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	8b5b      	ldrh	r3, [r3, #26]
 800a580:	f043 0304 	orr.w	r3, r3, #4
 800a584:	b29a      	uxth	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	0800ff30 	.word	0x0800ff30
 800a59c:	080105e8 	.word	0x080105e8
 800a5a0:	0800ff84 	.word	0x0800ff84

0800a5a4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	607b      	str	r3, [r7, #4]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	817b      	strh	r3, [r7, #10]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a5b6:	897a      	ldrh	r2, [r7, #10]
 800a5b8:	893b      	ldrh	r3, [r7, #8]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	3314      	adds	r3, #20
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	2022      	movs	r0, #34	; 0x22
 800a5ca:	f7fa fc19 	bl	8004e00 <pbuf_alloc>
 800a5ce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d04d      	beq.n	800a672 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a5d6:	897b      	ldrh	r3, [r7, #10]
 800a5d8:	3313      	adds	r3, #19
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	8952      	ldrh	r2, [r2, #10]
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	db06      	blt.n	800a5f0 <tcp_output_alloc_header_common+0x4c>
 800a5e2:	4b26      	ldr	r3, [pc, #152]	; (800a67c <tcp_output_alloc_header_common+0xd8>)
 800a5e4:	f240 7223 	movw	r2, #1827	; 0x723
 800a5e8:	4925      	ldr	r1, [pc, #148]	; (800a680 <tcp_output_alloc_header_common+0xdc>)
 800a5ea:	4826      	ldr	r0, [pc, #152]	; (800a684 <tcp_output_alloc_header_common+0xe0>)
 800a5ec:	f003 f8ea 	bl	800d7c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a5f6:	8c3b      	ldrh	r3, [r7, #32]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7f9 fb87 	bl	8003d0c <lwip_htons>
 800a5fe:	4603      	mov	r3, r0
 800a600:	461a      	mov	r2, r3
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a608:	4618      	mov	r0, r3
 800a60a:	f7f9 fb7f 	bl	8003d0c <lwip_htons>
 800a60e:	4603      	mov	r3, r0
 800a610:	461a      	mov	r2, r3
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f7f9 fb8a 	bl	8003d36 <lwip_htonl>
 800a622:	4602      	mov	r2, r0
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a628:	897b      	ldrh	r3, [r7, #10]
 800a62a:	089b      	lsrs	r3, r3, #2
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	3305      	adds	r3, #5
 800a630:	b29b      	uxth	r3, r3
 800a632:	031b      	lsls	r3, r3, #12
 800a634:	b29a      	uxth	r2, r3
 800a636:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	4313      	orrs	r3, r2
 800a63e:	b29b      	uxth	r3, r3
 800a640:	4618      	mov	r0, r3
 800a642:	f7f9 fb63 	bl	8003d0c <lwip_htons>
 800a646:	4603      	mov	r3, r0
 800a648:	461a      	mov	r2, r3
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a64e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a650:	4618      	mov	r0, r3
 800a652:	f7f9 fb5b 	bl	8003d0c <lwip_htons>
 800a656:	4603      	mov	r3, r0
 800a658:	461a      	mov	r2, r3
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	2200      	movs	r2, #0
 800a662:	741a      	strb	r2, [r3, #16]
 800a664:	2200      	movs	r2, #0
 800a666:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	2200      	movs	r2, #0
 800a66c:	749a      	strb	r2, [r3, #18]
 800a66e:	2200      	movs	r2, #0
 800a670:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a672:	697b      	ldr	r3, [r7, #20]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3718      	adds	r7, #24
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	0800ff30 	.word	0x0800ff30
 800a680:	08010608 	.word	0x08010608
 800a684:	0800ff84 	.word	0x0800ff84

0800a688 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a688:	b5b0      	push	{r4, r5, r7, lr}
 800a68a:	b08a      	sub	sp, #40	; 0x28
 800a68c:	af04      	add	r7, sp, #16
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	607b      	str	r3, [r7, #4]
 800a692:	460b      	mov	r3, r1
 800a694:	817b      	strh	r3, [r7, #10]
 800a696:	4613      	mov	r3, r2
 800a698:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d106      	bne.n	800a6ae <tcp_output_alloc_header+0x26>
 800a6a0:	4b15      	ldr	r3, [pc, #84]	; (800a6f8 <tcp_output_alloc_header+0x70>)
 800a6a2:	f240 7242 	movw	r2, #1858	; 0x742
 800a6a6:	4915      	ldr	r1, [pc, #84]	; (800a6fc <tcp_output_alloc_header+0x74>)
 800a6a8:	4815      	ldr	r0, [pc, #84]	; (800a700 <tcp_output_alloc_header+0x78>)
 800a6aa:	f003 f88b 	bl	800d7c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	8adb      	ldrh	r3, [r3, #22]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	8b12      	ldrh	r2, [r2, #24]
 800a6ba:	68f9      	ldr	r1, [r7, #12]
 800a6bc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a6be:	893d      	ldrh	r5, [r7, #8]
 800a6c0:	897c      	ldrh	r4, [r7, #10]
 800a6c2:	9103      	str	r1, [sp, #12]
 800a6c4:	2110      	movs	r1, #16
 800a6c6:	9102      	str	r1, [sp, #8]
 800a6c8:	9201      	str	r2, [sp, #4]
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	462a      	mov	r2, r5
 800a6d0:	4621      	mov	r1, r4
 800a6d2:	f7ff ff67 	bl	800a5a4 <tcp_output_alloc_header_common>
 800a6d6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d006      	beq.n	800a6ec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a6e6:	441a      	add	r2, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a6ec:	697b      	ldr	r3, [r7, #20]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bdb0      	pop	{r4, r5, r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	0800ff30 	.word	0x0800ff30
 800a6fc:	08010638 	.word	0x08010638
 800a700:	0800ff84 	.word	0x0800ff84

0800a704 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b088      	sub	sp, #32
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	4611      	mov	r1, r2
 800a710:	461a      	mov	r2, r3
 800a712:	460b      	mov	r3, r1
 800a714:	71fb      	strb	r3, [r7, #7]
 800a716:	4613      	mov	r3, r2
 800a718:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d106      	bne.n	800a732 <tcp_output_fill_options+0x2e>
 800a724:	4b13      	ldr	r3, [pc, #76]	; (800a774 <tcp_output_fill_options+0x70>)
 800a726:	f240 7256 	movw	r2, #1878	; 0x756
 800a72a:	4913      	ldr	r1, [pc, #76]	; (800a778 <tcp_output_fill_options+0x74>)
 800a72c:	4813      	ldr	r0, [pc, #76]	; (800a77c <tcp_output_fill_options+0x78>)
 800a72e:	f003 f849 	bl	800d7c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	3314      	adds	r3, #20
 800a73c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	f103 0214 	add.w	r2, r3, #20
 800a744:	8bfb      	ldrh	r3, [r7, #30]
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	4619      	mov	r1, r3
 800a74a:	79fb      	ldrb	r3, [r7, #7]
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	f003 0304 	and.w	r3, r3, #4
 800a752:	440b      	add	r3, r1
 800a754:	4413      	add	r3, r2
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d006      	beq.n	800a76a <tcp_output_fill_options+0x66>
 800a75c:	4b05      	ldr	r3, [pc, #20]	; (800a774 <tcp_output_fill_options+0x70>)
 800a75e:	f240 7275 	movw	r2, #1909	; 0x775
 800a762:	4907      	ldr	r1, [pc, #28]	; (800a780 <tcp_output_fill_options+0x7c>)
 800a764:	4805      	ldr	r0, [pc, #20]	; (800a77c <tcp_output_fill_options+0x78>)
 800a766:	f003 f82d 	bl	800d7c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a76a:	bf00      	nop
 800a76c:	3720      	adds	r7, #32
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	0800ff30 	.word	0x0800ff30
 800a778:	08010660 	.word	0x08010660
 800a77c:	0800ff84 	.word	0x0800ff84
 800a780:	08010558 	.word	0x08010558

0800a784 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b08a      	sub	sp, #40	; 0x28
 800a788:	af04      	add	r7, sp, #16
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
 800a790:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d106      	bne.n	800a7a6 <tcp_output_control_segment+0x22>
 800a798:	4b1c      	ldr	r3, [pc, #112]	; (800a80c <tcp_output_control_segment+0x88>)
 800a79a:	f240 7287 	movw	r2, #1927	; 0x787
 800a79e:	491c      	ldr	r1, [pc, #112]	; (800a810 <tcp_output_control_segment+0x8c>)
 800a7a0:	481c      	ldr	r0, [pc, #112]	; (800a814 <tcp_output_control_segment+0x90>)
 800a7a2:	f003 f80f 	bl	800d7c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	6879      	ldr	r1, [r7, #4]
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f7fe ff40 	bl	8009630 <tcp_route>
 800a7b0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a7b8:	23fc      	movs	r3, #252	; 0xfc
 800a7ba:	75fb      	strb	r3, [r7, #23]
 800a7bc:	e01c      	b.n	800a7f8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d006      	beq.n	800a7d2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	7adb      	ldrb	r3, [r3, #11]
 800a7c8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	7a9b      	ldrb	r3, [r3, #10]
 800a7ce:	757b      	strb	r3, [r7, #21]
 800a7d0:	e003      	b.n	800a7da <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a7d2:	23ff      	movs	r3, #255	; 0xff
 800a7d4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a7da:	7dba      	ldrb	r2, [r7, #22]
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	9302      	str	r3, [sp, #8]
 800a7e0:	2306      	movs	r3, #6
 800a7e2:	9301      	str	r3, [sp, #4]
 800a7e4:	7d7b      	ldrb	r3, [r7, #21]
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	6879      	ldr	r1, [r7, #4]
 800a7ee:	68b8      	ldr	r0, [r7, #8]
 800a7f0:	f001 ff70 	bl	800c6d4 <ip4_output_if>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a7f8:	68b8      	ldr	r0, [r7, #8]
 800a7fa:	f7fa fde5 	bl	80053c8 <pbuf_free>
  return err;
 800a7fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	0800ff30 	.word	0x0800ff30
 800a810:	08010688 	.word	0x08010688
 800a814:	0800ff84 	.word	0x0800ff84

0800a818 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a818:	b590      	push	{r4, r7, lr}
 800a81a:	b08b      	sub	sp, #44	; 0x2c
 800a81c:	af04      	add	r7, sp, #16
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
 800a824:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d106      	bne.n	800a83a <tcp_rst+0x22>
 800a82c:	4b1f      	ldr	r3, [pc, #124]	; (800a8ac <tcp_rst+0x94>)
 800a82e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a832:	491f      	ldr	r1, [pc, #124]	; (800a8b0 <tcp_rst+0x98>)
 800a834:	481f      	ldr	r0, [pc, #124]	; (800a8b4 <tcp_rst+0x9c>)
 800a836:	f002 ffc5 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d106      	bne.n	800a84e <tcp_rst+0x36>
 800a840:	4b1a      	ldr	r3, [pc, #104]	; (800a8ac <tcp_rst+0x94>)
 800a842:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a846:	491c      	ldr	r1, [pc, #112]	; (800a8b8 <tcp_rst+0xa0>)
 800a848:	481a      	ldr	r0, [pc, #104]	; (800a8b4 <tcp_rst+0x9c>)
 800a84a:	f002 ffbb 	bl	800d7c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a84e:	2300      	movs	r3, #0
 800a850:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a852:	f246 0308 	movw	r3, #24584	; 0x6008
 800a856:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a858:	7dfb      	ldrb	r3, [r7, #23]
 800a85a:	b29c      	uxth	r4, r3
 800a85c:	68b8      	ldr	r0, [r7, #8]
 800a85e:	f7f9 fa6a 	bl	8003d36 <lwip_htonl>
 800a862:	4602      	mov	r2, r0
 800a864:	8abb      	ldrh	r3, [r7, #20]
 800a866:	9303      	str	r3, [sp, #12]
 800a868:	2314      	movs	r3, #20
 800a86a:	9302      	str	r3, [sp, #8]
 800a86c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	4613      	mov	r3, r2
 800a876:	2200      	movs	r2, #0
 800a878:	4621      	mov	r1, r4
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7ff fe92 	bl	800a5a4 <tcp_output_alloc_header_common>
 800a880:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00c      	beq.n	800a8a2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a888:	7dfb      	ldrb	r3, [r7, #23]
 800a88a:	2200      	movs	r2, #0
 800a88c:	6939      	ldr	r1, [r7, #16]
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f7ff ff38 	bl	800a704 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	6939      	ldr	r1, [r7, #16]
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f7ff ff72 	bl	800a784 <tcp_output_control_segment>
 800a8a0:	e000      	b.n	800a8a4 <tcp_rst+0x8c>
    return;
 800a8a2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a8a4:	371c      	adds	r7, #28
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd90      	pop	{r4, r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	0800ff30 	.word	0x0800ff30
 800a8b0:	080106b4 	.word	0x080106b4
 800a8b4:	0800ff84 	.word	0x0800ff84
 800a8b8:	080106d0 	.word	0x080106d0

0800a8bc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a8bc:	b590      	push	{r4, r7, lr}
 800a8be:	b087      	sub	sp, #28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d106      	bne.n	800a8e0 <tcp_send_empty_ack+0x24>
 800a8d2:	4b28      	ldr	r3, [pc, #160]	; (800a974 <tcp_send_empty_ack+0xb8>)
 800a8d4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a8d8:	4927      	ldr	r1, [pc, #156]	; (800a978 <tcp_send_empty_ack+0xbc>)
 800a8da:	4828      	ldr	r0, [pc, #160]	; (800a97c <tcp_send_empty_ack+0xc0>)
 800a8dc:	f002 ff72 	bl	800d7c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a8e0:	7dfb      	ldrb	r3, [r7, #23]
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	f003 0304 	and.w	r3, r3, #4
 800a8ea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a8ec:	7d7b      	ldrb	r3, [r7, #21]
 800a8ee:	b29c      	uxth	r4, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7f9 fa1e 	bl	8003d36 <lwip_htonl>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	4621      	mov	r1, r4
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7ff fec1 	bl	800a688 <tcp_output_alloc_header>
 800a906:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d109      	bne.n	800a922 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	8b5b      	ldrh	r3, [r3, #26]
 800a912:	f043 0303 	orr.w	r3, r3, #3
 800a916:	b29a      	uxth	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a91c:	f06f 0301 	mvn.w	r3, #1
 800a920:	e023      	b.n	800a96a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a922:	7dbb      	ldrb	r3, [r7, #22]
 800a924:	7dfa      	ldrb	r2, [r7, #23]
 800a926:	6939      	ldr	r1, [r7, #16]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7ff feeb 	bl	800a704 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	3304      	adds	r3, #4
 800a934:	6939      	ldr	r1, [r7, #16]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7ff ff24 	bl	800a784 <tcp_output_control_segment>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d007      	beq.n	800a958 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	8b5b      	ldrh	r3, [r3, #26]
 800a94c:	f043 0303 	orr.w	r3, r3, #3
 800a950:	b29a      	uxth	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	835a      	strh	r2, [r3, #26]
 800a956:	e006      	b.n	800a966 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	8b5b      	ldrh	r3, [r3, #26]
 800a95c:	f023 0303 	bic.w	r3, r3, #3
 800a960:	b29a      	uxth	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a966:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	371c      	adds	r7, #28
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd90      	pop	{r4, r7, pc}
 800a972:	bf00      	nop
 800a974:	0800ff30 	.word	0x0800ff30
 800a978:	080106ec 	.word	0x080106ec
 800a97c:	0800ff84 	.word	0x0800ff84

0800a980 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a980:	b590      	push	{r4, r7, lr}
 800a982:	b087      	sub	sp, #28
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a988:	2300      	movs	r3, #0
 800a98a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d106      	bne.n	800a9a0 <tcp_keepalive+0x20>
 800a992:	4b18      	ldr	r3, [pc, #96]	; (800a9f4 <tcp_keepalive+0x74>)
 800a994:	f640 0224 	movw	r2, #2084	; 0x824
 800a998:	4917      	ldr	r1, [pc, #92]	; (800a9f8 <tcp_keepalive+0x78>)
 800a99a:	4818      	ldr	r0, [pc, #96]	; (800a9fc <tcp_keepalive+0x7c>)
 800a99c:	f002 ff12 	bl	800d7c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a9a0:	7dfb      	ldrb	r3, [r7, #23]
 800a9a2:	b29c      	uxth	r4, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7f9 f9c3 	bl	8003d36 <lwip_htonl>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff fe66 	bl	800a688 <tcp_output_alloc_header>
 800a9bc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d102      	bne.n	800a9ca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c8:	e010      	b.n	800a9ec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a9ca:	7dfb      	ldrb	r3, [r7, #23]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	6939      	ldr	r1, [r7, #16]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff fe97 	bl	800a704 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	3304      	adds	r3, #4
 800a9dc:	6939      	ldr	r1, [r7, #16]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7ff fed0 	bl	800a784 <tcp_output_control_segment>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a9e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	371c      	adds	r7, #28
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd90      	pop	{r4, r7, pc}
 800a9f4:	0800ff30 	.word	0x0800ff30
 800a9f8:	0801070c 	.word	0x0801070c
 800a9fc:	0800ff84 	.word	0x0800ff84

0800aa00 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800aa00:	b590      	push	{r4, r7, lr}
 800aa02:	b08b      	sub	sp, #44	; 0x2c
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d106      	bne.n	800aa22 <tcp_zero_window_probe+0x22>
 800aa14:	4b4c      	ldr	r3, [pc, #304]	; (800ab48 <tcp_zero_window_probe+0x148>)
 800aa16:	f640 024f 	movw	r2, #2127	; 0x84f
 800aa1a:	494c      	ldr	r1, [pc, #304]	; (800ab4c <tcp_zero_window_probe+0x14c>)
 800aa1c:	484c      	ldr	r0, [pc, #304]	; (800ab50 <tcp_zero_window_probe+0x150>)
 800aa1e:	f002 fed1 	bl	800d7c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa26:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800aa28:	6a3b      	ldr	r3, [r7, #32]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e086      	b.n	800ab40 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800aa38:	2bff      	cmp	r3, #255	; 0xff
 800aa3a:	d007      	beq.n	800aa4c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800aa42:	3301      	adds	r3, #1
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	899b      	ldrh	r3, [r3, #12]
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7f9 f959 	bl	8003d0c <lwip_htons>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d005      	beq.n	800aa72 <tcp_zero_window_probe+0x72>
 800aa66:	6a3b      	ldr	r3, [r7, #32]
 800aa68:	891b      	ldrh	r3, [r3, #8]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <tcp_zero_window_probe+0x72>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e000      	b.n	800aa74 <tcp_zero_window_probe+0x74>
 800aa72:	2300      	movs	r3, #0
 800aa74:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800aa76:	7ffb      	ldrb	r3, [r7, #31]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	bf0c      	ite	eq
 800aa7c:	2301      	moveq	r3, #1
 800aa7e:	2300      	movne	r3, #0
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800aa84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa88:	b299      	uxth	r1, r3
 800aa8a:	6a3b      	ldr	r3, [r7, #32]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	8bba      	ldrh	r2, [r7, #28]
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7ff fdf8 	bl	800a688 <tcp_output_alloc_header>
 800aa98:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d102      	bne.n	800aaa6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800aaa0:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa4:	e04c      	b.n	800ab40 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800aaac:	7ffb      	ldrb	r3, [r7, #31]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d011      	beq.n	800aad6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	899b      	ldrh	r3, [r3, #12]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	b21b      	sxth	r3, r3
 800aaba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aabe:	b21c      	sxth	r4, r3
 800aac0:	2011      	movs	r0, #17
 800aac2:	f7f9 f923 	bl	8003d0c <lwip_htons>
 800aac6:	4603      	mov	r3, r0
 800aac8:	b21b      	sxth	r3, r3
 800aaca:	4323      	orrs	r3, r4
 800aacc:	b21b      	sxth	r3, r3
 800aace:	b29a      	uxth	r2, r3
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	819a      	strh	r2, [r3, #12]
 800aad4:	e010      	b.n	800aaf8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	3314      	adds	r3, #20
 800aadc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800aade:	6a3b      	ldr	r3, [r7, #32]
 800aae0:	6858      	ldr	r0, [r3, #4]
 800aae2:	6a3b      	ldr	r3, [r7, #32]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	891a      	ldrh	r2, [r3, #8]
 800aae8:	6a3b      	ldr	r3, [r7, #32]
 800aaea:	891b      	ldrh	r3, [r3, #8]
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	6939      	ldr	r1, [r7, #16]
 800aaf4:	f7fa fe52 	bl	800579c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800aaf8:	6a3b      	ldr	r3, [r7, #32]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7f9 f919 	bl	8003d36 <lwip_htonl>
 800ab04:	4603      	mov	r3, r0
 800ab06:	3301      	adds	r3, #1
 800ab08:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	da02      	bge.n	800ab1c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ab1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab20:	2200      	movs	r2, #0
 800ab22:	69b9      	ldr	r1, [r7, #24]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff fded 	bl	800a704 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3304      	adds	r3, #4
 800ab30:	69b9      	ldr	r1, [r7, #24]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7ff fe26 	bl	800a784 <tcp_output_control_segment>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ab3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	372c      	adds	r7, #44	; 0x2c
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd90      	pop	{r4, r7, pc}
 800ab48:	0800ff30 	.word	0x0800ff30
 800ab4c:	08010728 	.word	0x08010728
 800ab50:	0800ff84 	.word	0x0800ff84

0800ab54 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ab5c:	f7fa ff0c 	bl	8005978 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ab60:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <tcpip_tcp_timer+0x38>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d103      	bne.n	800ab70 <tcpip_tcp_timer+0x1c>
 800ab68:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <tcpip_tcp_timer+0x3c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ab70:	2200      	movs	r2, #0
 800ab72:	4908      	ldr	r1, [pc, #32]	; (800ab94 <tcpip_tcp_timer+0x40>)
 800ab74:	20fa      	movs	r0, #250	; 0xfa
 800ab76:	f000 f8f3 	bl	800ad60 <sys_timeout>
 800ab7a:	e003      	b.n	800ab84 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ab7c:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <tcpip_tcp_timer+0x44>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	601a      	str	r2, [r3, #0]
  }
}
 800ab82:	bf00      	nop
 800ab84:	bf00      	nop
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	2000a410 	.word	0x2000a410
 800ab90:	2000a414 	.word	0x2000a414
 800ab94:	0800ab55 	.word	0x0800ab55
 800ab98:	2000a45c 	.word	0x2000a45c

0800ab9c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800aba0:	4b0a      	ldr	r3, [pc, #40]	; (800abcc <tcp_timer_needed+0x30>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10f      	bne.n	800abc8 <tcp_timer_needed+0x2c>
 800aba8:	4b09      	ldr	r3, [pc, #36]	; (800abd0 <tcp_timer_needed+0x34>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d103      	bne.n	800abb8 <tcp_timer_needed+0x1c>
 800abb0:	4b08      	ldr	r3, [pc, #32]	; (800abd4 <tcp_timer_needed+0x38>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d007      	beq.n	800abc8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800abb8:	4b04      	ldr	r3, [pc, #16]	; (800abcc <tcp_timer_needed+0x30>)
 800abba:	2201      	movs	r2, #1
 800abbc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800abbe:	2200      	movs	r2, #0
 800abc0:	4905      	ldr	r1, [pc, #20]	; (800abd8 <tcp_timer_needed+0x3c>)
 800abc2:	20fa      	movs	r0, #250	; 0xfa
 800abc4:	f000 f8cc 	bl	800ad60 <sys_timeout>
  }
}
 800abc8:	bf00      	nop
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	2000a45c 	.word	0x2000a45c
 800abd0:	2000a410 	.word	0x2000a410
 800abd4:	2000a414 	.word	0x2000a414
 800abd8:	0800ab55 	.word	0x0800ab55

0800abdc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800abe8:	2006      	movs	r0, #6
 800abea:	f7f9 fd07 	bl	80045fc <memp_malloc>
 800abee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d109      	bne.n	800ac0a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d151      	bne.n	800aca0 <sys_timeout_abs+0xc4>
 800abfc:	4b2a      	ldr	r3, [pc, #168]	; (800aca8 <sys_timeout_abs+0xcc>)
 800abfe:	22be      	movs	r2, #190	; 0xbe
 800ac00:	492a      	ldr	r1, [pc, #168]	; (800acac <sys_timeout_abs+0xd0>)
 800ac02:	482b      	ldr	r0, [pc, #172]	; (800acb0 <sys_timeout_abs+0xd4>)
 800ac04:	f002 fdde 	bl	800d7c4 <iprintf>
    return;
 800ac08:	e04a      	b.n	800aca0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ac22:	4b24      	ldr	r3, [pc, #144]	; (800acb4 <sys_timeout_abs+0xd8>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d103      	bne.n	800ac32 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ac2a:	4a22      	ldr	r2, [pc, #136]	; (800acb4 <sys_timeout_abs+0xd8>)
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	6013      	str	r3, [r2, #0]
    return;
 800ac30:	e037      	b.n	800aca2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	4b1f      	ldr	r3, [pc, #124]	; (800acb4 <sys_timeout_abs+0xd8>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	0fdb      	lsrs	r3, r3, #31
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d007      	beq.n	800ac5a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ac4a:	4b1a      	ldr	r3, [pc, #104]	; (800acb4 <sys_timeout_abs+0xd8>)
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ac52:	4a18      	ldr	r2, [pc, #96]	; (800acb4 <sys_timeout_abs+0xd8>)
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	e023      	b.n	800aca2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ac5a:	4b16      	ldr	r3, [pc, #88]	; (800acb4 <sys_timeout_abs+0xd8>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	617b      	str	r3, [r7, #20]
 800ac60:	e01a      	b.n	800ac98 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00b      	beq.n	800ac82 <sys_timeout_abs+0xa6>
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	0fdb      	lsrs	r3, r3, #31
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d007      	beq.n	800ac92 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	601a      	str	r2, [r3, #0]
        break;
 800ac90:	e007      	b.n	800aca2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	617b      	str	r3, [r7, #20]
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1e1      	bne.n	800ac62 <sys_timeout_abs+0x86>
 800ac9e:	e000      	b.n	800aca2 <sys_timeout_abs+0xc6>
    return;
 800aca0:	bf00      	nop
      }
    }
  }
}
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	0801074c 	.word	0x0801074c
 800acac:	08010780 	.word	0x08010780
 800acb0:	080107c0 	.word	0x080107c0
 800acb4:	2000a454 	.word	0x2000a454

0800acb8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	4798      	blx	r3

  now = sys_now();
 800acca:	f7f8 fe0b 	bl	80038e4 <sys_now>
 800acce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	4b0f      	ldr	r3, [pc, #60]	; (800ad14 <lwip_cyclic_timer+0x5c>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4413      	add	r3, r2
 800acda:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	0fdb      	lsrs	r3, r3, #31
 800ace4:	f003 0301 	and.w	r3, r3, #1
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d009      	beq.n	800ad02 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	4413      	add	r3, r2
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	4907      	ldr	r1, [pc, #28]	; (800ad18 <lwip_cyclic_timer+0x60>)
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff ff6e 	bl	800abdc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ad00:	e004      	b.n	800ad0c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	4904      	ldr	r1, [pc, #16]	; (800ad18 <lwip_cyclic_timer+0x60>)
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7ff ff68 	bl	800abdc <sys_timeout_abs>
}
 800ad0c:	bf00      	nop
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	2000a458 	.word	0x2000a458
 800ad18:	0800acb9 	.word	0x0800acb9

0800ad1c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ad22:	2301      	movs	r3, #1
 800ad24:	607b      	str	r3, [r7, #4]
 800ad26:	e00e      	b.n	800ad46 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ad28:	4a0b      	ldr	r2, [pc, #44]	; (800ad58 <sys_timeouts_init+0x3c>)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	00db      	lsls	r3, r3, #3
 800ad34:	4a08      	ldr	r2, [pc, #32]	; (800ad58 <sys_timeouts_init+0x3c>)
 800ad36:	4413      	add	r3, r2
 800ad38:	461a      	mov	r2, r3
 800ad3a:	4908      	ldr	r1, [pc, #32]	; (800ad5c <sys_timeouts_init+0x40>)
 800ad3c:	f000 f810 	bl	800ad60 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3301      	adds	r3, #1
 800ad44:	607b      	str	r3, [r7, #4]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d9ed      	bls.n	800ad28 <sys_timeouts_init+0xc>
  }
}
 800ad4c:	bf00      	nop
 800ad4e:	bf00      	nop
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	08011330 	.word	0x08011330
 800ad5c:	0800acb9 	.word	0x0800acb9

0800ad60 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad72:	d306      	bcc.n	800ad82 <sys_timeout+0x22>
 800ad74:	4b0a      	ldr	r3, [pc, #40]	; (800ada0 <sys_timeout+0x40>)
 800ad76:	f240 1229 	movw	r2, #297	; 0x129
 800ad7a:	490a      	ldr	r1, [pc, #40]	; (800ada4 <sys_timeout+0x44>)
 800ad7c:	480a      	ldr	r0, [pc, #40]	; (800ada8 <sys_timeout+0x48>)
 800ad7e:	f002 fd21 	bl	800d7c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ad82:	f7f8 fdaf 	bl	80038e4 <sys_now>
 800ad86:	4602      	mov	r2, r0
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	68b9      	ldr	r1, [r7, #8]
 800ad92:	6978      	ldr	r0, [r7, #20]
 800ad94:	f7ff ff22 	bl	800abdc <sys_timeout_abs>
#endif
}
 800ad98:	bf00      	nop
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	0801074c 	.word	0x0801074c
 800ada4:	080107e8 	.word	0x080107e8
 800ada8:	080107c0 	.word	0x080107c0

0800adac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800adb2:	f7f8 fd97 	bl	80038e4 <sys_now>
 800adb6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800adb8:	4b1a      	ldr	r3, [pc, #104]	; (800ae24 <sys_check_timeouts+0x78>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <sys_check_timeouts+0x1a>
 800adc2:	f7f9 ffc7 	bl	8004d54 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800adc6:	4b18      	ldr	r3, [pc, #96]	; (800ae28 <sys_check_timeouts+0x7c>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d022      	beq.n	800ae18 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	0fdb      	lsrs	r3, r3, #31
 800addc:	f003 0301 	and.w	r3, r3, #1
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d11a      	bne.n	800ae1c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a0f      	ldr	r2, [pc, #60]	; (800ae28 <sys_check_timeouts+0x7c>)
 800adec:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	4a0b      	ldr	r2, [pc, #44]	; (800ae2c <sys_check_timeouts+0x80>)
 800ae00:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ae02:	68b9      	ldr	r1, [r7, #8]
 800ae04:	2006      	movs	r0, #6
 800ae06:	f7f9 fc69 	bl	80046dc <memp_free>
    if (handler != NULL) {
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d0d3      	beq.n	800adb8 <sys_check_timeouts+0xc>
      handler(arg);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6838      	ldr	r0, [r7, #0]
 800ae14:	4798      	blx	r3
  do {
 800ae16:	e7cf      	b.n	800adb8 <sys_check_timeouts+0xc>
      return;
 800ae18:	bf00      	nop
 800ae1a:	e000      	b.n	800ae1e <sys_check_timeouts+0x72>
      return;
 800ae1c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	2000a401 	.word	0x2000a401
 800ae28:	2000a454 	.word	0x2000a454
 800ae2c:	2000a458 	.word	0x2000a458

0800ae30 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ae34:	f002 fcde 	bl	800d7f4 <rand>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	4b01      	ldr	r3, [pc, #4]	; (800ae50 <udp_init+0x20>)
 800ae4a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ae4c:	bf00      	nop
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20000028 	.word	0x20000028

0800ae54 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d105      	bne.n	800ae74 <udp_input_local_match+0x20>
 800ae68:	4b27      	ldr	r3, [pc, #156]	; (800af08 <udp_input_local_match+0xb4>)
 800ae6a:	2287      	movs	r2, #135	; 0x87
 800ae6c:	4927      	ldr	r1, [pc, #156]	; (800af0c <udp_input_local_match+0xb8>)
 800ae6e:	4828      	ldr	r0, [pc, #160]	; (800af10 <udp_input_local_match+0xbc>)
 800ae70:	f002 fca8 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d105      	bne.n	800ae86 <udp_input_local_match+0x32>
 800ae7a:	4b23      	ldr	r3, [pc, #140]	; (800af08 <udp_input_local_match+0xb4>)
 800ae7c:	2288      	movs	r2, #136	; 0x88
 800ae7e:	4925      	ldr	r1, [pc, #148]	; (800af14 <udp_input_local_match+0xc0>)
 800ae80:	4823      	ldr	r0, [pc, #140]	; (800af10 <udp_input_local_match+0xbc>)
 800ae82:	f002 fc9f 	bl	800d7c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	7a1b      	ldrb	r3, [r3, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00b      	beq.n	800aea6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	7a1a      	ldrb	r2, [r3, #8]
 800ae92:	4b21      	ldr	r3, [pc, #132]	; (800af18 <udp_input_local_match+0xc4>)
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d001      	beq.n	800aea6 <udp_input_local_match+0x52>
    return 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	e02b      	b.n	800aefe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d018      	beq.n	800aede <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d013      	beq.n	800aeda <udp_input_local_match+0x86>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00f      	beq.n	800aeda <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800aeba:	4b17      	ldr	r3, [pc, #92]	; (800af18 <udp_input_local_match+0xc4>)
 800aebc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec2:	d00a      	beq.n	800aeda <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	4b13      	ldr	r3, [pc, #76]	; (800af18 <udp_input_local_match+0xc4>)
 800aeca:	695b      	ldr	r3, [r3, #20]
 800aecc:	405a      	eors	r2, r3
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	3308      	adds	r3, #8
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d110      	bne.n	800aefc <udp_input_local_match+0xa8>
          return 1;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e00f      	b.n	800aefe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d009      	beq.n	800aef8 <udp_input_local_match+0xa4>
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d005      	beq.n	800aef8 <udp_input_local_match+0xa4>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	4b09      	ldr	r3, [pc, #36]	; (800af18 <udp_input_local_match+0xc4>)
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d101      	bne.n	800aefc <udp_input_local_match+0xa8>
        return 1;
 800aef8:	2301      	movs	r3, #1
 800aefa:	e000      	b.n	800aefe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	08010834 	.word	0x08010834
 800af0c:	08010864 	.word	0x08010864
 800af10:	08010888 	.word	0x08010888
 800af14:	080108b0 	.word	0x080108b0
 800af18:	20004cd4 	.word	0x20004cd4

0800af1c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800af1c:	b590      	push	{r4, r7, lr}
 800af1e:	b08d      	sub	sp, #52	; 0x34
 800af20:	af02      	add	r7, sp, #8
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800af26:	2300      	movs	r3, #0
 800af28:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d105      	bne.n	800af3c <udp_input+0x20>
 800af30:	4b7c      	ldr	r3, [pc, #496]	; (800b124 <udp_input+0x208>)
 800af32:	22cf      	movs	r2, #207	; 0xcf
 800af34:	497c      	ldr	r1, [pc, #496]	; (800b128 <udp_input+0x20c>)
 800af36:	487d      	ldr	r0, [pc, #500]	; (800b12c <udp_input+0x210>)
 800af38:	f002 fc44 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d105      	bne.n	800af4e <udp_input+0x32>
 800af42:	4b78      	ldr	r3, [pc, #480]	; (800b124 <udp_input+0x208>)
 800af44:	22d0      	movs	r2, #208	; 0xd0
 800af46:	497a      	ldr	r1, [pc, #488]	; (800b130 <udp_input+0x214>)
 800af48:	4878      	ldr	r0, [pc, #480]	; (800b12c <udp_input+0x210>)
 800af4a:	f002 fc3b 	bl	800d7c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	895b      	ldrh	r3, [r3, #10]
 800af52:	2b07      	cmp	r3, #7
 800af54:	d803      	bhi.n	800af5e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7fa fa36 	bl	80053c8 <pbuf_free>
    goto end;
 800af5c:	e0de      	b.n	800b11c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800af64:	4b73      	ldr	r3, [pc, #460]	; (800b134 <udp_input+0x218>)
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	4a72      	ldr	r2, [pc, #456]	; (800b134 <udp_input+0x218>)
 800af6a:	6812      	ldr	r2, [r2, #0]
 800af6c:	4611      	mov	r1, r2
 800af6e:	4618      	mov	r0, r3
 800af70:	f001 fc88 	bl	800c884 <ip4_addr_isbroadcast_u32>
 800af74:	4603      	mov	r3, r0
 800af76:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	4618      	mov	r0, r3
 800af80:	f7f8 fec4 	bl	8003d0c <lwip_htons>
 800af84:	4603      	mov	r3, r0
 800af86:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	885b      	ldrh	r3, [r3, #2]
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	4618      	mov	r0, r3
 800af90:	f7f8 febc 	bl	8003d0c <lwip_htons>
 800af94:	4603      	mov	r3, r0
 800af96:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800af98:	2300      	movs	r3, #0
 800af9a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800af9c:	2300      	movs	r3, #0
 800af9e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800afa0:	2300      	movs	r3, #0
 800afa2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800afa4:	4b64      	ldr	r3, [pc, #400]	; (800b138 <udp_input+0x21c>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	627b      	str	r3, [r7, #36]	; 0x24
 800afaa:	e054      	b.n	800b056 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	8a5b      	ldrh	r3, [r3, #18]
 800afb0:	89fa      	ldrh	r2, [r7, #14]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d14a      	bne.n	800b04c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800afb6:	7cfb      	ldrb	r3, [r7, #19]
 800afb8:	461a      	mov	r2, r3
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afbe:	f7ff ff49 	bl	800ae54 <udp_input_local_match>
 800afc2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d041      	beq.n	800b04c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	7c1b      	ldrb	r3, [r3, #16]
 800afcc:	f003 0304 	and.w	r3, r3, #4
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d11d      	bne.n	800b010 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d102      	bne.n	800afe0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	61fb      	str	r3, [r7, #28]
 800afde:	e017      	b.n	800b010 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800afe0:	7cfb      	ldrb	r3, [r7, #19]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d014      	beq.n	800b010 <udp_input+0xf4>
 800afe6:	4b53      	ldr	r3, [pc, #332]	; (800b134 <udp_input+0x218>)
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afee:	d10f      	bne.n	800b010 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	3304      	adds	r3, #4
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	429a      	cmp	r2, r3
 800affc:	d008      	beq.n	800b010 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	3304      	adds	r3, #4
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d101      	bne.n	800b010 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b012:	8a9b      	ldrh	r3, [r3, #20]
 800b014:	8a3a      	ldrh	r2, [r7, #16]
 800b016:	429a      	cmp	r2, r3
 800b018:	d118      	bne.n	800b04c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d005      	beq.n	800b02e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	4b43      	ldr	r3, [pc, #268]	; (800b134 <udp_input+0x218>)
 800b028:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d10e      	bne.n	800b04c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b02e:	6a3b      	ldr	r3, [r7, #32]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d014      	beq.n	800b05e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	68da      	ldr	r2, [r3, #12]
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b03c:	4b3e      	ldr	r3, [pc, #248]	; (800b138 <udp_input+0x21c>)
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b044:	4a3c      	ldr	r2, [pc, #240]	; (800b138 <udp_input+0x21c>)
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b04a:	e008      	b.n	800b05e <udp_input+0x142>
      }
    }

    prev = pcb;
 800b04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	627b      	str	r3, [r7, #36]	; 0x24
 800b056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1a7      	bne.n	800afac <udp_input+0x90>
 800b05c:	e000      	b.n	800b060 <udp_input+0x144>
        break;
 800b05e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <udp_input+0x14e>
    pcb = uncon_pcb;
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d002      	beq.n	800b076 <udp_input+0x15a>
    for_us = 1;
 800b070:	2301      	movs	r3, #1
 800b072:	76fb      	strb	r3, [r7, #27]
 800b074:	e00a      	b.n	800b08c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	3304      	adds	r3, #4
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	4b2d      	ldr	r3, [pc, #180]	; (800b134 <udp_input+0x218>)
 800b07e:	695b      	ldr	r3, [r3, #20]
 800b080:	429a      	cmp	r2, r3
 800b082:	bf0c      	ite	eq
 800b084:	2301      	moveq	r3, #1
 800b086:	2300      	movne	r3, #0
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b08c:	7efb      	ldrb	r3, [r7, #27]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d041      	beq.n	800b116 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b092:	2108      	movs	r1, #8
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7fa f911 	bl	80052bc <pbuf_remove_header>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00a      	beq.n	800b0b6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b0a0:	4b20      	ldr	r3, [pc, #128]	; (800b124 <udp_input+0x208>)
 800b0a2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b0a6:	4925      	ldr	r1, [pc, #148]	; (800b13c <udp_input+0x220>)
 800b0a8:	4820      	ldr	r0, [pc, #128]	; (800b12c <udp_input+0x210>)
 800b0aa:	f002 fb8b 	bl	800d7c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7fa f98a 	bl	80053c8 <pbuf_free>
      goto end;
 800b0b4:	e032      	b.n	800b11c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d012      	beq.n	800b0e2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00a      	beq.n	800b0da <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	699c      	ldr	r4, [r3, #24]
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	69d8      	ldr	r0, [r3, #28]
 800b0cc:	8a3b      	ldrh	r3, [r7, #16]
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	4b1b      	ldr	r3, [pc, #108]	; (800b140 <udp_input+0x224>)
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b0d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b0d8:	e021      	b.n	800b11e <udp_input+0x202>
        pbuf_free(p);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7fa f974 	bl	80053c8 <pbuf_free>
        goto end;
 800b0e0:	e01c      	b.n	800b11c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b0e2:	7cfb      	ldrb	r3, [r7, #19]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d112      	bne.n	800b10e <udp_input+0x1f2>
 800b0e8:	4b12      	ldr	r3, [pc, #72]	; (800b134 <udp_input+0x218>)
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0f0:	2be0      	cmp	r3, #224	; 0xe0
 800b0f2:	d00c      	beq.n	800b10e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b0f4:	4b0f      	ldr	r3, [pc, #60]	; (800b134 <udp_input+0x218>)
 800b0f6:	899b      	ldrh	r3, [r3, #12]
 800b0f8:	3308      	adds	r3, #8
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	b21b      	sxth	r3, r3
 800b0fe:	4619      	mov	r1, r3
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7fa f94e 	bl	80053a2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b106:	2103      	movs	r1, #3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f001 f89b 	bl	800c244 <icmp_dest_unreach>
      pbuf_free(p);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7fa f95a 	bl	80053c8 <pbuf_free>
  return;
 800b114:	e003      	b.n	800b11e <udp_input+0x202>
    pbuf_free(p);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7fa f956 	bl	80053c8 <pbuf_free>
  return;
 800b11c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b11e:	372c      	adds	r7, #44	; 0x2c
 800b120:	46bd      	mov	sp, r7
 800b122:	bd90      	pop	{r4, r7, pc}
 800b124:	08010834 	.word	0x08010834
 800b128:	080108d8 	.word	0x080108d8
 800b12c:	08010888 	.word	0x08010888
 800b130:	080108f0 	.word	0x080108f0
 800b134:	20004cd4 	.word	0x20004cd4
 800b138:	2000a460 	.word	0x2000a460
 800b13c:	0801090c 	.word	0x0801090c
 800b140:	20004ce4 	.word	0x20004ce4

0800b144 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d01e      	beq.n	800b192 <udp_netif_ip_addr_changed+0x4e>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d01a      	beq.n	800b192 <udp_netif_ip_addr_changed+0x4e>
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d017      	beq.n	800b192 <udp_netif_ip_addr_changed+0x4e>
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d013      	beq.n	800b192 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b16a:	4b0d      	ldr	r3, [pc, #52]	; (800b1a0 <udp_netif_ip_addr_changed+0x5c>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	e00c      	b.n	800b18c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d103      	bne.n	800b186 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	60fb      	str	r3, [r7, #12]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1ef      	bne.n	800b172 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b192:	bf00      	nop
 800b194:	3714      	adds	r7, #20
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	2000a460 	.word	0x2000a460

0800b1a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b1ac:	4915      	ldr	r1, [pc, #84]	; (800b204 <etharp_free_entry+0x60>)
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	005b      	lsls	r3, r3, #1
 800b1b4:	4413      	add	r3, r2
 800b1b6:	00db      	lsls	r3, r3, #3
 800b1b8:	440b      	add	r3, r1
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d013      	beq.n	800b1e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b1c0:	4910      	ldr	r1, [pc, #64]	; (800b204 <etharp_free_entry+0x60>)
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	4413      	add	r3, r2
 800b1ca:	00db      	lsls	r3, r3, #3
 800b1cc:	440b      	add	r3, r1
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fa f8f9 	bl	80053c8 <pbuf_free>
    arp_table[i].q = NULL;
 800b1d6:	490b      	ldr	r1, [pc, #44]	; (800b204 <etharp_free_entry+0x60>)
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	005b      	lsls	r3, r3, #1
 800b1de:	4413      	add	r3, r2
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	440b      	add	r3, r1
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b1e8:	4906      	ldr	r1, [pc, #24]	; (800b204 <etharp_free_entry+0x60>)
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	005b      	lsls	r3, r3, #1
 800b1f0:	4413      	add	r3, r2
 800b1f2:	00db      	lsls	r3, r3, #3
 800b1f4:	440b      	add	r3, r1
 800b1f6:	3314      	adds	r3, #20
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b1fc:	bf00      	nop
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	2000a464 	.word	0x2000a464

0800b208 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b20e:	2300      	movs	r3, #0
 800b210:	607b      	str	r3, [r7, #4]
 800b212:	e096      	b.n	800b342 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b214:	494f      	ldr	r1, [pc, #316]	; (800b354 <etharp_tmr+0x14c>)
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	4613      	mov	r3, r2
 800b21a:	005b      	lsls	r3, r3, #1
 800b21c:	4413      	add	r3, r2
 800b21e:	00db      	lsls	r3, r3, #3
 800b220:	440b      	add	r3, r1
 800b222:	3314      	adds	r3, #20
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800b228:	78fb      	ldrb	r3, [r7, #3]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f000 8086 	beq.w	800b33c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800b230:	4948      	ldr	r1, [pc, #288]	; (800b354 <etharp_tmr+0x14c>)
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	4613      	mov	r3, r2
 800b236:	005b      	lsls	r3, r3, #1
 800b238:	4413      	add	r3, r2
 800b23a:	00db      	lsls	r3, r3, #3
 800b23c:	440b      	add	r3, r1
 800b23e:	3312      	adds	r3, #18
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	3301      	adds	r3, #1
 800b244:	b298      	uxth	r0, r3
 800b246:	4943      	ldr	r1, [pc, #268]	; (800b354 <etharp_tmr+0x14c>)
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	4613      	mov	r3, r2
 800b24c:	005b      	lsls	r3, r3, #1
 800b24e:	4413      	add	r3, r2
 800b250:	00db      	lsls	r3, r3, #3
 800b252:	440b      	add	r3, r1
 800b254:	3312      	adds	r3, #18
 800b256:	4602      	mov	r2, r0
 800b258:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b25a:	493e      	ldr	r1, [pc, #248]	; (800b354 <etharp_tmr+0x14c>)
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	4613      	mov	r3, r2
 800b260:	005b      	lsls	r3, r3, #1
 800b262:	4413      	add	r3, r2
 800b264:	00db      	lsls	r3, r3, #3
 800b266:	440b      	add	r3, r1
 800b268:	3312      	adds	r3, #18
 800b26a:	881b      	ldrh	r3, [r3, #0]
 800b26c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b270:	d215      	bcs.n	800b29e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b272:	4938      	ldr	r1, [pc, #224]	; (800b354 <etharp_tmr+0x14c>)
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	4613      	mov	r3, r2
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	4413      	add	r3, r2
 800b27c:	00db      	lsls	r3, r3, #3
 800b27e:	440b      	add	r3, r1
 800b280:	3314      	adds	r3, #20
 800b282:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b284:	2b01      	cmp	r3, #1
 800b286:	d10e      	bne.n	800b2a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b288:	4932      	ldr	r1, [pc, #200]	; (800b354 <etharp_tmr+0x14c>)
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	4613      	mov	r3, r2
 800b28e:	005b      	lsls	r3, r3, #1
 800b290:	4413      	add	r3, r2
 800b292:	00db      	lsls	r3, r3, #3
 800b294:	440b      	add	r3, r1
 800b296:	3312      	adds	r3, #18
 800b298:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b29a:	2b04      	cmp	r3, #4
 800b29c:	d903      	bls.n	800b2a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7ff ff80 	bl	800b1a4 <etharp_free_entry>
 800b2a4:	e04a      	b.n	800b33c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b2a6:	492b      	ldr	r1, [pc, #172]	; (800b354 <etharp_tmr+0x14c>)
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	005b      	lsls	r3, r3, #1
 800b2ae:	4413      	add	r3, r2
 800b2b0:	00db      	lsls	r3, r3, #3
 800b2b2:	440b      	add	r3, r1
 800b2b4:	3314      	adds	r3, #20
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	2b03      	cmp	r3, #3
 800b2ba:	d10a      	bne.n	800b2d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b2bc:	4925      	ldr	r1, [pc, #148]	; (800b354 <etharp_tmr+0x14c>)
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	4413      	add	r3, r2
 800b2c6:	00db      	lsls	r3, r3, #3
 800b2c8:	440b      	add	r3, r1
 800b2ca:	3314      	adds	r3, #20
 800b2cc:	2204      	movs	r2, #4
 800b2ce:	701a      	strb	r2, [r3, #0]
 800b2d0:	e034      	b.n	800b33c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b2d2:	4920      	ldr	r1, [pc, #128]	; (800b354 <etharp_tmr+0x14c>)
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	4413      	add	r3, r2
 800b2dc:	00db      	lsls	r3, r3, #3
 800b2de:	440b      	add	r3, r1
 800b2e0:	3314      	adds	r3, #20
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2b04      	cmp	r3, #4
 800b2e6:	d10a      	bne.n	800b2fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b2e8:	491a      	ldr	r1, [pc, #104]	; (800b354 <etharp_tmr+0x14c>)
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	005b      	lsls	r3, r3, #1
 800b2f0:	4413      	add	r3, r2
 800b2f2:	00db      	lsls	r3, r3, #3
 800b2f4:	440b      	add	r3, r1
 800b2f6:	3314      	adds	r3, #20
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	701a      	strb	r2, [r3, #0]
 800b2fc:	e01e      	b.n	800b33c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b2fe:	4915      	ldr	r1, [pc, #84]	; (800b354 <etharp_tmr+0x14c>)
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	4613      	mov	r3, r2
 800b304:	005b      	lsls	r3, r3, #1
 800b306:	4413      	add	r3, r2
 800b308:	00db      	lsls	r3, r3, #3
 800b30a:	440b      	add	r3, r1
 800b30c:	3314      	adds	r3, #20
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d113      	bne.n	800b33c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b314:	490f      	ldr	r1, [pc, #60]	; (800b354 <etharp_tmr+0x14c>)
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	4613      	mov	r3, r2
 800b31a:	005b      	lsls	r3, r3, #1
 800b31c:	4413      	add	r3, r2
 800b31e:	00db      	lsls	r3, r3, #3
 800b320:	440b      	add	r3, r1
 800b322:	3308      	adds	r3, #8
 800b324:	6818      	ldr	r0, [r3, #0]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	4613      	mov	r3, r2
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	4413      	add	r3, r2
 800b32e:	00db      	lsls	r3, r3, #3
 800b330:	4a08      	ldr	r2, [pc, #32]	; (800b354 <etharp_tmr+0x14c>)
 800b332:	4413      	add	r3, r2
 800b334:	3304      	adds	r3, #4
 800b336:	4619      	mov	r1, r3
 800b338:	f000 fe6e 	bl	800c018 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	3301      	adds	r3, #1
 800b340:	607b      	str	r3, [r7, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b09      	cmp	r3, #9
 800b346:	f77f af65 	ble.w	800b214 <etharp_tmr+0xc>
      }
    }
  }
}
 800b34a:	bf00      	nop
 800b34c:	bf00      	nop
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	2000a464 	.word	0x2000a464

0800b358 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08a      	sub	sp, #40	; 0x28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	460b      	mov	r3, r1
 800b362:	607a      	str	r2, [r7, #4]
 800b364:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b366:	230a      	movs	r3, #10
 800b368:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b36a:	230a      	movs	r3, #10
 800b36c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800b36e:	230a      	movs	r3, #10
 800b370:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800b376:	230a      	movs	r3, #10
 800b378:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	83bb      	strh	r3, [r7, #28]
 800b37e:	2300      	movs	r3, #0
 800b380:	837b      	strh	r3, [r7, #26]
 800b382:	2300      	movs	r3, #0
 800b384:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b386:	2300      	movs	r3, #0
 800b388:	843b      	strh	r3, [r7, #32]
 800b38a:	e0ae      	b.n	800b4ea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800b38c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b390:	49a6      	ldr	r1, [pc, #664]	; (800b62c <etharp_find_entry+0x2d4>)
 800b392:	4613      	mov	r3, r2
 800b394:	005b      	lsls	r3, r3, #1
 800b396:	4413      	add	r3, r2
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	440b      	add	r3, r1
 800b39c:	3314      	adds	r3, #20
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b3a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b3a6:	2b0a      	cmp	r3, #10
 800b3a8:	d105      	bne.n	800b3b6 <etharp_find_entry+0x5e>
 800b3aa:	7dfb      	ldrb	r3, [r7, #23]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d102      	bne.n	800b3b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800b3b0:	8c3b      	ldrh	r3, [r7, #32]
 800b3b2:	847b      	strh	r3, [r7, #34]	; 0x22
 800b3b4:	e095      	b.n	800b4e2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b3b6:	7dfb      	ldrb	r3, [r7, #23]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 8092 	beq.w	800b4e2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b3be:	7dfb      	ldrb	r3, [r7, #23]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d009      	beq.n	800b3d8 <etharp_find_entry+0x80>
 800b3c4:	7dfb      	ldrb	r3, [r7, #23]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d806      	bhi.n	800b3d8 <etharp_find_entry+0x80>
 800b3ca:	4b99      	ldr	r3, [pc, #612]	; (800b630 <etharp_find_entry+0x2d8>)
 800b3cc:	f240 1223 	movw	r2, #291	; 0x123
 800b3d0:	4998      	ldr	r1, [pc, #608]	; (800b634 <etharp_find_entry+0x2dc>)
 800b3d2:	4899      	ldr	r0, [pc, #612]	; (800b638 <etharp_find_entry+0x2e0>)
 800b3d4:	f002 f9f6 	bl	800d7c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d020      	beq.n	800b420 <etharp_find_entry+0xc8>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6819      	ldr	r1, [r3, #0]
 800b3e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3e6:	4891      	ldr	r0, [pc, #580]	; (800b62c <etharp_find_entry+0x2d4>)
 800b3e8:	4613      	mov	r3, r2
 800b3ea:	005b      	lsls	r3, r3, #1
 800b3ec:	4413      	add	r3, r2
 800b3ee:	00db      	lsls	r3, r3, #3
 800b3f0:	4403      	add	r3, r0
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4299      	cmp	r1, r3
 800b3f8:	d112      	bne.n	800b420 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00c      	beq.n	800b41a <etharp_find_entry+0xc2>
 800b400:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b404:	4989      	ldr	r1, [pc, #548]	; (800b62c <etharp_find_entry+0x2d4>)
 800b406:	4613      	mov	r3, r2
 800b408:	005b      	lsls	r3, r3, #1
 800b40a:	4413      	add	r3, r2
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	440b      	add	r3, r1
 800b410:	3308      	adds	r3, #8
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	429a      	cmp	r2, r3
 800b418:	d102      	bne.n	800b420 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b41a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b41e:	e100      	b.n	800b622 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b420:	7dfb      	ldrb	r3, [r7, #23]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d140      	bne.n	800b4a8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b426:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b42a:	4980      	ldr	r1, [pc, #512]	; (800b62c <etharp_find_entry+0x2d4>)
 800b42c:	4613      	mov	r3, r2
 800b42e:	005b      	lsls	r3, r3, #1
 800b430:	4413      	add	r3, r2
 800b432:	00db      	lsls	r3, r3, #3
 800b434:	440b      	add	r3, r1
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d01a      	beq.n	800b472 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800b43c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b440:	497a      	ldr	r1, [pc, #488]	; (800b62c <etharp_find_entry+0x2d4>)
 800b442:	4613      	mov	r3, r2
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	4413      	add	r3, r2
 800b448:	00db      	lsls	r3, r3, #3
 800b44a:	440b      	add	r3, r1
 800b44c:	3312      	adds	r3, #18
 800b44e:	881b      	ldrh	r3, [r3, #0]
 800b450:	8bba      	ldrh	r2, [r7, #28]
 800b452:	429a      	cmp	r2, r3
 800b454:	d845      	bhi.n	800b4e2 <etharp_find_entry+0x18a>
            old_queue = i;
 800b456:	8c3b      	ldrh	r3, [r7, #32]
 800b458:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800b45a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b45e:	4973      	ldr	r1, [pc, #460]	; (800b62c <etharp_find_entry+0x2d4>)
 800b460:	4613      	mov	r3, r2
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	4413      	add	r3, r2
 800b466:	00db      	lsls	r3, r3, #3
 800b468:	440b      	add	r3, r1
 800b46a:	3312      	adds	r3, #18
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	83bb      	strh	r3, [r7, #28]
 800b470:	e037      	b.n	800b4e2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b472:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b476:	496d      	ldr	r1, [pc, #436]	; (800b62c <etharp_find_entry+0x2d4>)
 800b478:	4613      	mov	r3, r2
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	4413      	add	r3, r2
 800b47e:	00db      	lsls	r3, r3, #3
 800b480:	440b      	add	r3, r1
 800b482:	3312      	adds	r3, #18
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	8b7a      	ldrh	r2, [r7, #26]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d82a      	bhi.n	800b4e2 <etharp_find_entry+0x18a>
            old_pending = i;
 800b48c:	8c3b      	ldrh	r3, [r7, #32]
 800b48e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800b490:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b494:	4965      	ldr	r1, [pc, #404]	; (800b62c <etharp_find_entry+0x2d4>)
 800b496:	4613      	mov	r3, r2
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	4413      	add	r3, r2
 800b49c:	00db      	lsls	r3, r3, #3
 800b49e:	440b      	add	r3, r1
 800b4a0:	3312      	adds	r3, #18
 800b4a2:	881b      	ldrh	r3, [r3, #0]
 800b4a4:	837b      	strh	r3, [r7, #26]
 800b4a6:	e01c      	b.n	800b4e2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b4a8:	7dfb      	ldrb	r3, [r7, #23]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d919      	bls.n	800b4e2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b4ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b4b2:	495e      	ldr	r1, [pc, #376]	; (800b62c <etharp_find_entry+0x2d4>)
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	005b      	lsls	r3, r3, #1
 800b4b8:	4413      	add	r3, r2
 800b4ba:	00db      	lsls	r3, r3, #3
 800b4bc:	440b      	add	r3, r1
 800b4be:	3312      	adds	r3, #18
 800b4c0:	881b      	ldrh	r3, [r3, #0]
 800b4c2:	8b3a      	ldrh	r2, [r7, #24]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d80c      	bhi.n	800b4e2 <etharp_find_entry+0x18a>
            old_stable = i;
 800b4c8:	8c3b      	ldrh	r3, [r7, #32]
 800b4ca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800b4cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b4d0:	4956      	ldr	r1, [pc, #344]	; (800b62c <etharp_find_entry+0x2d4>)
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	4413      	add	r3, r2
 800b4d8:	00db      	lsls	r3, r3, #3
 800b4da:	440b      	add	r3, r1
 800b4dc:	3312      	adds	r3, #18
 800b4de:	881b      	ldrh	r3, [r3, #0]
 800b4e0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b4e2:	8c3b      	ldrh	r3, [r7, #32]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	843b      	strh	r3, [r7, #32]
 800b4ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b4ee:	2b09      	cmp	r3, #9
 800b4f0:	f77f af4c 	ble.w	800b38c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b4f4:	7afb      	ldrb	r3, [r7, #11]
 800b4f6:	f003 0302 	and.w	r3, r3, #2
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d108      	bne.n	800b510 <etharp_find_entry+0x1b8>
 800b4fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b502:	2b0a      	cmp	r3, #10
 800b504:	d107      	bne.n	800b516 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b506:	7afb      	ldrb	r3, [r7, #11]
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d102      	bne.n	800b516 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800b510:	f04f 33ff 	mov.w	r3, #4294967295
 800b514:	e085      	b.n	800b622 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b516:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b51a:	2b09      	cmp	r3, #9
 800b51c:	dc02      	bgt.n	800b524 <etharp_find_entry+0x1cc>
    i = empty;
 800b51e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b520:	843b      	strh	r3, [r7, #32]
 800b522:	e039      	b.n	800b598 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b524:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b528:	2b09      	cmp	r3, #9
 800b52a:	dc14      	bgt.n	800b556 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800b52c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b52e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b530:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b534:	493d      	ldr	r1, [pc, #244]	; (800b62c <etharp_find_entry+0x2d4>)
 800b536:	4613      	mov	r3, r2
 800b538:	005b      	lsls	r3, r3, #1
 800b53a:	4413      	add	r3, r2
 800b53c:	00db      	lsls	r3, r3, #3
 800b53e:	440b      	add	r3, r1
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d018      	beq.n	800b578 <etharp_find_entry+0x220>
 800b546:	4b3a      	ldr	r3, [pc, #232]	; (800b630 <etharp_find_entry+0x2d8>)
 800b548:	f240 126d 	movw	r2, #365	; 0x16d
 800b54c:	493b      	ldr	r1, [pc, #236]	; (800b63c <etharp_find_entry+0x2e4>)
 800b54e:	483a      	ldr	r0, [pc, #232]	; (800b638 <etharp_find_entry+0x2e0>)
 800b550:	f002 f938 	bl	800d7c4 <iprintf>
 800b554:	e010      	b.n	800b578 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b556:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b55a:	2b09      	cmp	r3, #9
 800b55c:	dc02      	bgt.n	800b564 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800b55e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b560:	843b      	strh	r3, [r7, #32]
 800b562:	e009      	b.n	800b578 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b564:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b568:	2b09      	cmp	r3, #9
 800b56a:	dc02      	bgt.n	800b572 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b56c:	8bfb      	ldrh	r3, [r7, #30]
 800b56e:	843b      	strh	r3, [r7, #32]
 800b570:	e002      	b.n	800b578 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b572:	f04f 33ff 	mov.w	r3, #4294967295
 800b576:	e054      	b.n	800b622 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b578:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b57c:	2b09      	cmp	r3, #9
 800b57e:	dd06      	ble.n	800b58e <etharp_find_entry+0x236>
 800b580:	4b2b      	ldr	r3, [pc, #172]	; (800b630 <etharp_find_entry+0x2d8>)
 800b582:	f240 127f 	movw	r2, #383	; 0x17f
 800b586:	492e      	ldr	r1, [pc, #184]	; (800b640 <etharp_find_entry+0x2e8>)
 800b588:	482b      	ldr	r0, [pc, #172]	; (800b638 <etharp_find_entry+0x2e0>)
 800b58a:	f002 f91b 	bl	800d7c4 <iprintf>
    etharp_free_entry(i);
 800b58e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b592:	4618      	mov	r0, r3
 800b594:	f7ff fe06 	bl	800b1a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b598:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b59c:	2b09      	cmp	r3, #9
 800b59e:	dd06      	ble.n	800b5ae <etharp_find_entry+0x256>
 800b5a0:	4b23      	ldr	r3, [pc, #140]	; (800b630 <etharp_find_entry+0x2d8>)
 800b5a2:	f240 1283 	movw	r2, #387	; 0x183
 800b5a6:	4926      	ldr	r1, [pc, #152]	; (800b640 <etharp_find_entry+0x2e8>)
 800b5a8:	4823      	ldr	r0, [pc, #140]	; (800b638 <etharp_find_entry+0x2e0>)
 800b5aa:	f002 f90b 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b5ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5b2:	491e      	ldr	r1, [pc, #120]	; (800b62c <etharp_find_entry+0x2d4>)
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	005b      	lsls	r3, r3, #1
 800b5b8:	4413      	add	r3, r2
 800b5ba:	00db      	lsls	r3, r3, #3
 800b5bc:	440b      	add	r3, r1
 800b5be:	3314      	adds	r3, #20
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d006      	beq.n	800b5d4 <etharp_find_entry+0x27c>
 800b5c6:	4b1a      	ldr	r3, [pc, #104]	; (800b630 <etharp_find_entry+0x2d8>)
 800b5c8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800b5cc:	491d      	ldr	r1, [pc, #116]	; (800b644 <etharp_find_entry+0x2ec>)
 800b5ce:	481a      	ldr	r0, [pc, #104]	; (800b638 <etharp_find_entry+0x2e0>)
 800b5d0:	f002 f8f8 	bl	800d7c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00b      	beq.n	800b5f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b5da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6819      	ldr	r1, [r3, #0]
 800b5e2:	4812      	ldr	r0, [pc, #72]	; (800b62c <etharp_find_entry+0x2d4>)
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	4413      	add	r3, r2
 800b5ea:	00db      	lsls	r3, r3, #3
 800b5ec:	4403      	add	r3, r0
 800b5ee:	3304      	adds	r3, #4
 800b5f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b5f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5f6:	490d      	ldr	r1, [pc, #52]	; (800b62c <etharp_find_entry+0x2d4>)
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	4413      	add	r3, r2
 800b5fe:	00db      	lsls	r3, r3, #3
 800b600:	440b      	add	r3, r1
 800b602:	3312      	adds	r3, #18
 800b604:	2200      	movs	r2, #0
 800b606:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b608:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b60c:	4907      	ldr	r1, [pc, #28]	; (800b62c <etharp_find_entry+0x2d4>)
 800b60e:	4613      	mov	r3, r2
 800b610:	005b      	lsls	r3, r3, #1
 800b612:	4413      	add	r3, r2
 800b614:	00db      	lsls	r3, r3, #3
 800b616:	440b      	add	r3, r1
 800b618:	3308      	adds	r3, #8
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b61e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3728      	adds	r7, #40	; 0x28
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	2000a464 	.word	0x2000a464
 800b630:	08010b98 	.word	0x08010b98
 800b634:	08010bd0 	.word	0x08010bd0
 800b638:	08010c10 	.word	0x08010c10
 800b63c:	08010c38 	.word	0x08010c38
 800b640:	08010c50 	.word	0x08010c50
 800b644:	08010c64 	.word	0x08010c64

0800b648 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b088      	sub	sp, #32
 800b64c:	af02      	add	r7, sp, #8
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
 800b654:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b65c:	2b06      	cmp	r3, #6
 800b65e:	d006      	beq.n	800b66e <etharp_update_arp_entry+0x26>
 800b660:	4b48      	ldr	r3, [pc, #288]	; (800b784 <etharp_update_arp_entry+0x13c>)
 800b662:	f240 12a9 	movw	r2, #425	; 0x1a9
 800b666:	4948      	ldr	r1, [pc, #288]	; (800b788 <etharp_update_arp_entry+0x140>)
 800b668:	4848      	ldr	r0, [pc, #288]	; (800b78c <etharp_update_arp_entry+0x144>)
 800b66a:	f002 f8ab 	bl	800d7c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d012      	beq.n	800b69a <etharp_update_arp_entry+0x52>
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00e      	beq.n	800b69a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68f9      	ldr	r1, [r7, #12]
 800b682:	4618      	mov	r0, r3
 800b684:	f001 f8fe 	bl	800c884 <ip4_addr_isbroadcast_u32>
 800b688:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d105      	bne.n	800b69a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b696:	2be0      	cmp	r3, #224	; 0xe0
 800b698:	d102      	bne.n	800b6a0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b69a:	f06f 030f 	mvn.w	r3, #15
 800b69e:	e06c      	b.n	800b77a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	68b8      	ldr	r0, [r7, #8]
 800b6a8:	f7ff fe56 	bl	800b358 <etharp_find_entry>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b6b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	da02      	bge.n	800b6be <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b6b8:	8afb      	ldrh	r3, [r7, #22]
 800b6ba:	b25b      	sxtb	r3, r3
 800b6bc:	e05d      	b.n	800b77a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b6be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6c2:	4933      	ldr	r1, [pc, #204]	; (800b790 <etharp_update_arp_entry+0x148>)
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	005b      	lsls	r3, r3, #1
 800b6c8:	4413      	add	r3, r2
 800b6ca:	00db      	lsls	r3, r3, #3
 800b6cc:	440b      	add	r3, r1
 800b6ce:	3314      	adds	r3, #20
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b6d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6d8:	492d      	ldr	r1, [pc, #180]	; (800b790 <etharp_update_arp_entry+0x148>)
 800b6da:	4613      	mov	r3, r2
 800b6dc:	005b      	lsls	r3, r3, #1
 800b6de:	4413      	add	r3, r2
 800b6e0:	00db      	lsls	r3, r3, #3
 800b6e2:	440b      	add	r3, r1
 800b6e4:	3308      	adds	r3, #8
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b6ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	4413      	add	r3, r2
 800b6f4:	00db      	lsls	r3, r3, #3
 800b6f6:	3308      	adds	r3, #8
 800b6f8:	4a25      	ldr	r2, [pc, #148]	; (800b790 <etharp_update_arp_entry+0x148>)
 800b6fa:	4413      	add	r3, r2
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	2206      	movs	r2, #6
 800b700:	6879      	ldr	r1, [r7, #4]
 800b702:	4618      	mov	r0, r3
 800b704:	f002 f848 	bl	800d798 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b708:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b70c:	4920      	ldr	r1, [pc, #128]	; (800b790 <etharp_update_arp_entry+0x148>)
 800b70e:	4613      	mov	r3, r2
 800b710:	005b      	lsls	r3, r3, #1
 800b712:	4413      	add	r3, r2
 800b714:	00db      	lsls	r3, r3, #3
 800b716:	440b      	add	r3, r1
 800b718:	3312      	adds	r3, #18
 800b71a:	2200      	movs	r2, #0
 800b71c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b71e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b722:	491b      	ldr	r1, [pc, #108]	; (800b790 <etharp_update_arp_entry+0x148>)
 800b724:	4613      	mov	r3, r2
 800b726:	005b      	lsls	r3, r3, #1
 800b728:	4413      	add	r3, r2
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	440b      	add	r3, r1
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d021      	beq.n	800b778 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b734:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b738:	4915      	ldr	r1, [pc, #84]	; (800b790 <etharp_update_arp_entry+0x148>)
 800b73a:	4613      	mov	r3, r2
 800b73c:	005b      	lsls	r3, r3, #1
 800b73e:	4413      	add	r3, r2
 800b740:	00db      	lsls	r3, r3, #3
 800b742:	440b      	add	r3, r1
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b748:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b74c:	4910      	ldr	r1, [pc, #64]	; (800b790 <etharp_update_arp_entry+0x148>)
 800b74e:	4613      	mov	r3, r2
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	4413      	add	r3, r2
 800b754:	00db      	lsls	r3, r3, #3
 800b756:	440b      	add	r3, r1
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b762:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6939      	ldr	r1, [r7, #16]
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f001 ff97 	bl	800d6a0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b772:	6938      	ldr	r0, [r7, #16]
 800b774:	f7f9 fe28 	bl	80053c8 <pbuf_free>
  }
  return ERR_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3718      	adds	r7, #24
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	08010b98 	.word	0x08010b98
 800b788:	08010c90 	.word	0x08010c90
 800b78c:	08010c10 	.word	0x08010c10
 800b790:	2000a464 	.word	0x2000a464

0800b794 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b79c:	2300      	movs	r3, #0
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	e01e      	b.n	800b7e0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b7a2:	4913      	ldr	r1, [pc, #76]	; (800b7f0 <etharp_cleanup_netif+0x5c>)
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	005b      	lsls	r3, r3, #1
 800b7aa:	4413      	add	r3, r2
 800b7ac:	00db      	lsls	r3, r3, #3
 800b7ae:	440b      	add	r3, r1
 800b7b0:	3314      	adds	r3, #20
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b7b6:	7afb      	ldrb	r3, [r7, #11]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00e      	beq.n	800b7da <etharp_cleanup_netif+0x46>
 800b7bc:	490c      	ldr	r1, [pc, #48]	; (800b7f0 <etharp_cleanup_netif+0x5c>)
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	4413      	add	r3, r2
 800b7c6:	00db      	lsls	r3, r3, #3
 800b7c8:	440b      	add	r3, r1
 800b7ca:	3308      	adds	r3, #8
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d102      	bne.n	800b7da <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f7ff fce5 	bl	800b1a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	60fb      	str	r3, [r7, #12]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2b09      	cmp	r3, #9
 800b7e4:	dddd      	ble.n	800b7a2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b7e6:	bf00      	nop
 800b7e8:	bf00      	nop
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	2000a464 	.word	0x2000a464

0800b7f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b7f4:	b5b0      	push	{r4, r5, r7, lr}
 800b7f6:	b08a      	sub	sp, #40	; 0x28
 800b7f8:	af04      	add	r7, sp, #16
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d107      	bne.n	800b814 <etharp_input+0x20>
 800b804:	4b3d      	ldr	r3, [pc, #244]	; (800b8fc <etharp_input+0x108>)
 800b806:	f240 228a 	movw	r2, #650	; 0x28a
 800b80a:	493d      	ldr	r1, [pc, #244]	; (800b900 <etharp_input+0x10c>)
 800b80c:	483d      	ldr	r0, [pc, #244]	; (800b904 <etharp_input+0x110>)
 800b80e:	f001 ffd9 	bl	800d7c4 <iprintf>
 800b812:	e06f      	b.n	800b8f4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	881b      	ldrh	r3, [r3, #0]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b824:	d10c      	bne.n	800b840 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b82a:	2b06      	cmp	r3, #6
 800b82c:	d108      	bne.n	800b840 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b832:	2b04      	cmp	r3, #4
 800b834:	d104      	bne.n	800b840 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	885b      	ldrh	r3, [r3, #2]
 800b83a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b83c:	2b08      	cmp	r3, #8
 800b83e:	d003      	beq.n	800b848 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7f9 fdc1 	bl	80053c8 <pbuf_free>
    return;
 800b846:	e055      	b.n	800b8f4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	330e      	adds	r3, #14
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	3318      	adds	r3, #24
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	3304      	adds	r3, #4
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d102      	bne.n	800b868 <etharp_input+0x74>
    for_us = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	75fb      	strb	r3, [r7, #23]
 800b866:	e009      	b.n	800b87c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	3304      	adds	r3, #4
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	429a      	cmp	r2, r3
 800b872:	bf0c      	ite	eq
 800b874:	2301      	moveq	r3, #1
 800b876:	2300      	movne	r3, #0
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	f103 0208 	add.w	r2, r3, #8
 800b882:	7dfb      	ldrb	r3, [r7, #23]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d001      	beq.n	800b88c <etharp_input+0x98>
 800b888:	2301      	movs	r3, #1
 800b88a:	e000      	b.n	800b88e <etharp_input+0x9a>
 800b88c:	2302      	movs	r3, #2
 800b88e:	f107 010c 	add.w	r1, r7, #12
 800b892:	6838      	ldr	r0, [r7, #0]
 800b894:	f7ff fed8 	bl	800b648 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	88db      	ldrh	r3, [r3, #6]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a2:	d003      	beq.n	800b8ac <etharp_input+0xb8>
 800b8a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8a8:	d01e      	beq.n	800b8e8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b8aa:	e020      	b.n	800b8ee <etharp_input+0xfa>
      if (for_us) {
 800b8ac:	7dfb      	ldrb	r3, [r7, #23]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d01c      	beq.n	800b8ec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b8cc:	2102      	movs	r1, #2
 800b8ce:	9103      	str	r1, [sp, #12]
 800b8d0:	f107 010c 	add.w	r1, r7, #12
 800b8d4:	9102      	str	r1, [sp, #8]
 800b8d6:	9201      	str	r2, [sp, #4]
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	462b      	mov	r3, r5
 800b8dc:	4622      	mov	r2, r4
 800b8de:	4601      	mov	r1, r0
 800b8e0:	6838      	ldr	r0, [r7, #0]
 800b8e2:	f000 faeb 	bl	800bebc <etharp_raw>
      break;
 800b8e6:	e001      	b.n	800b8ec <etharp_input+0xf8>
      break;
 800b8e8:	bf00      	nop
 800b8ea:	e000      	b.n	800b8ee <etharp_input+0xfa>
      break;
 800b8ec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f7f9 fd6a 	bl	80053c8 <pbuf_free>
}
 800b8f4:	3718      	adds	r7, #24
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bdb0      	pop	{r4, r5, r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	08010b98 	.word	0x08010b98
 800b900:	08010ce8 	.word	0x08010ce8
 800b904:	08010c10 	.word	0x08010c10

0800b908 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af02      	add	r7, sp, #8
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	4613      	mov	r3, r2
 800b914:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b916:	79fa      	ldrb	r2, [r7, #7]
 800b918:	4944      	ldr	r1, [pc, #272]	; (800ba2c <etharp_output_to_arp_index+0x124>)
 800b91a:	4613      	mov	r3, r2
 800b91c:	005b      	lsls	r3, r3, #1
 800b91e:	4413      	add	r3, r2
 800b920:	00db      	lsls	r3, r3, #3
 800b922:	440b      	add	r3, r1
 800b924:	3314      	adds	r3, #20
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d806      	bhi.n	800b93a <etharp_output_to_arp_index+0x32>
 800b92c:	4b40      	ldr	r3, [pc, #256]	; (800ba30 <etharp_output_to_arp_index+0x128>)
 800b92e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b932:	4940      	ldr	r1, [pc, #256]	; (800ba34 <etharp_output_to_arp_index+0x12c>)
 800b934:	4840      	ldr	r0, [pc, #256]	; (800ba38 <etharp_output_to_arp_index+0x130>)
 800b936:	f001 ff45 	bl	800d7c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b93a:	79fa      	ldrb	r2, [r7, #7]
 800b93c:	493b      	ldr	r1, [pc, #236]	; (800ba2c <etharp_output_to_arp_index+0x124>)
 800b93e:	4613      	mov	r3, r2
 800b940:	005b      	lsls	r3, r3, #1
 800b942:	4413      	add	r3, r2
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	440b      	add	r3, r1
 800b948:	3314      	adds	r3, #20
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d153      	bne.n	800b9f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b950:	79fa      	ldrb	r2, [r7, #7]
 800b952:	4936      	ldr	r1, [pc, #216]	; (800ba2c <etharp_output_to_arp_index+0x124>)
 800b954:	4613      	mov	r3, r2
 800b956:	005b      	lsls	r3, r3, #1
 800b958:	4413      	add	r3, r2
 800b95a:	00db      	lsls	r3, r3, #3
 800b95c:	440b      	add	r3, r1
 800b95e:	3312      	adds	r3, #18
 800b960:	881b      	ldrh	r3, [r3, #0]
 800b962:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b966:	d919      	bls.n	800b99c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b968:	79fa      	ldrb	r2, [r7, #7]
 800b96a:	4613      	mov	r3, r2
 800b96c:	005b      	lsls	r3, r3, #1
 800b96e:	4413      	add	r3, r2
 800b970:	00db      	lsls	r3, r3, #3
 800b972:	4a2e      	ldr	r2, [pc, #184]	; (800ba2c <etharp_output_to_arp_index+0x124>)
 800b974:	4413      	add	r3, r2
 800b976:	3304      	adds	r3, #4
 800b978:	4619      	mov	r1, r3
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f000 fb4c 	bl	800c018 <etharp_request>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d138      	bne.n	800b9f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b986:	79fa      	ldrb	r2, [r7, #7]
 800b988:	4928      	ldr	r1, [pc, #160]	; (800ba2c <etharp_output_to_arp_index+0x124>)
 800b98a:	4613      	mov	r3, r2
 800b98c:	005b      	lsls	r3, r3, #1
 800b98e:	4413      	add	r3, r2
 800b990:	00db      	lsls	r3, r3, #3
 800b992:	440b      	add	r3, r1
 800b994:	3314      	adds	r3, #20
 800b996:	2203      	movs	r2, #3
 800b998:	701a      	strb	r2, [r3, #0]
 800b99a:	e02d      	b.n	800b9f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b99c:	79fa      	ldrb	r2, [r7, #7]
 800b99e:	4923      	ldr	r1, [pc, #140]	; (800ba2c <etharp_output_to_arp_index+0x124>)
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	005b      	lsls	r3, r3, #1
 800b9a4:	4413      	add	r3, r2
 800b9a6:	00db      	lsls	r3, r3, #3
 800b9a8:	440b      	add	r3, r1
 800b9aa:	3312      	adds	r3, #18
 800b9ac:	881b      	ldrh	r3, [r3, #0]
 800b9ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b9b2:	d321      	bcc.n	800b9f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b9b4:	79fa      	ldrb	r2, [r7, #7]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	005b      	lsls	r3, r3, #1
 800b9ba:	4413      	add	r3, r2
 800b9bc:	00db      	lsls	r3, r3, #3
 800b9be:	4a1b      	ldr	r2, [pc, #108]	; (800ba2c <etharp_output_to_arp_index+0x124>)
 800b9c0:	4413      	add	r3, r2
 800b9c2:	1d19      	adds	r1, r3, #4
 800b9c4:	79fa      	ldrb	r2, [r7, #7]
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	4413      	add	r3, r2
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	4a16      	ldr	r2, [pc, #88]	; (800ba2c <etharp_output_to_arp_index+0x124>)
 800b9d2:	4413      	add	r3, r2
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f000 fafb 	bl	800bfd4 <etharp_request_dst>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d109      	bne.n	800b9f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b9e4:	79fa      	ldrb	r2, [r7, #7]
 800b9e6:	4911      	ldr	r1, [pc, #68]	; (800ba2c <etharp_output_to_arp_index+0x124>)
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	4413      	add	r3, r2
 800b9ee:	00db      	lsls	r3, r3, #3
 800b9f0:	440b      	add	r3, r1
 800b9f2:	3314      	adds	r3, #20
 800b9f4:	2203      	movs	r2, #3
 800b9f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800b9fe:	79fa      	ldrb	r2, [r7, #7]
 800ba00:	4613      	mov	r3, r2
 800ba02:	005b      	lsls	r3, r3, #1
 800ba04:	4413      	add	r3, r2
 800ba06:	00db      	lsls	r3, r3, #3
 800ba08:	3308      	adds	r3, #8
 800ba0a:	4a08      	ldr	r2, [pc, #32]	; (800ba2c <etharp_output_to_arp_index+0x124>)
 800ba0c:	4413      	add	r3, r2
 800ba0e:	3304      	adds	r3, #4
 800ba10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba14:	9200      	str	r2, [sp, #0]
 800ba16:	460a      	mov	r2, r1
 800ba18:	68b9      	ldr	r1, [r7, #8]
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f001 fe40 	bl	800d6a0 <ethernet_output>
 800ba20:	4603      	mov	r3, r0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	2000a464 	.word	0x2000a464
 800ba30:	08010b98 	.word	0x08010b98
 800ba34:	08010d08 	.word	0x08010d08
 800ba38:	08010c10 	.word	0x08010c10

0800ba3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b08a      	sub	sp, #40	; 0x28
 800ba40:	af02      	add	r7, sp, #8
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d106      	bne.n	800ba60 <etharp_output+0x24>
 800ba52:	4b73      	ldr	r3, [pc, #460]	; (800bc20 <etharp_output+0x1e4>)
 800ba54:	f240 321e 	movw	r2, #798	; 0x31e
 800ba58:	4972      	ldr	r1, [pc, #456]	; (800bc24 <etharp_output+0x1e8>)
 800ba5a:	4873      	ldr	r0, [pc, #460]	; (800bc28 <etharp_output+0x1ec>)
 800ba5c:	f001 feb2 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d106      	bne.n	800ba74 <etharp_output+0x38>
 800ba66:	4b6e      	ldr	r3, [pc, #440]	; (800bc20 <etharp_output+0x1e4>)
 800ba68:	f240 321f 	movw	r2, #799	; 0x31f
 800ba6c:	496f      	ldr	r1, [pc, #444]	; (800bc2c <etharp_output+0x1f0>)
 800ba6e:	486e      	ldr	r0, [pc, #440]	; (800bc28 <etharp_output+0x1ec>)
 800ba70:	f001 fea8 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d106      	bne.n	800ba88 <etharp_output+0x4c>
 800ba7a:	4b69      	ldr	r3, [pc, #420]	; (800bc20 <etharp_output+0x1e4>)
 800ba7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ba80:	496b      	ldr	r1, [pc, #428]	; (800bc30 <etharp_output+0x1f4>)
 800ba82:	4869      	ldr	r0, [pc, #420]	; (800bc28 <etharp_output+0x1ec>)
 800ba84:	f001 fe9e 	bl	800d7c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68f9      	ldr	r1, [r7, #12]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f000 fef8 	bl	800c884 <ip4_addr_isbroadcast_u32>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d002      	beq.n	800baa0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ba9a:	4b66      	ldr	r3, [pc, #408]	; (800bc34 <etharp_output+0x1f8>)
 800ba9c:	61fb      	str	r3, [r7, #28]
 800ba9e:	e0af      	b.n	800bc00 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baa8:	2be0      	cmp	r3, #224	; 0xe0
 800baaa:	d118      	bne.n	800bade <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800baac:	2301      	movs	r3, #1
 800baae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800bab0:	2300      	movs	r3, #0
 800bab2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800bab4:	235e      	movs	r3, #94	; 0x5e
 800bab6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	3301      	adds	r3, #1
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	3302      	adds	r3, #2
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	3303      	adds	r3, #3
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800bad6:	f107 0310 	add.w	r3, r7, #16
 800bada:	61fb      	str	r3, [r7, #28]
 800badc:	e090      	b.n	800bc00 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	3304      	adds	r3, #4
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	405a      	eors	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	3308      	adds	r3, #8
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4013      	ands	r3, r2
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d012      	beq.n	800bb1c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bafc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d00b      	beq.n	800bb1c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	330c      	adds	r3, #12
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	330c      	adds	r3, #12
 800bb12:	61bb      	str	r3, [r7, #24]
 800bb14:	e002      	b.n	800bb1c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800bb16:	f06f 0303 	mvn.w	r3, #3
 800bb1a:	e07d      	b.n	800bc18 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bb1c:	4b46      	ldr	r3, [pc, #280]	; (800bc38 <etharp_output+0x1fc>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	4619      	mov	r1, r3
 800bb22:	4a46      	ldr	r2, [pc, #280]	; (800bc3c <etharp_output+0x200>)
 800bb24:	460b      	mov	r3, r1
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	440b      	add	r3, r1
 800bb2a:	00db      	lsls	r3, r3, #3
 800bb2c:	4413      	add	r3, r2
 800bb2e:	3314      	adds	r3, #20
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d925      	bls.n	800bb82 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bb36:	4b40      	ldr	r3, [pc, #256]	; (800bc38 <etharp_output+0x1fc>)
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	4a3f      	ldr	r2, [pc, #252]	; (800bc3c <etharp_output+0x200>)
 800bb3e:	460b      	mov	r3, r1
 800bb40:	005b      	lsls	r3, r3, #1
 800bb42:	440b      	add	r3, r1
 800bb44:	00db      	lsls	r3, r3, #3
 800bb46:	4413      	add	r3, r2
 800bb48:	3308      	adds	r3, #8
 800bb4a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d117      	bne.n	800bb82 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	4b38      	ldr	r3, [pc, #224]	; (800bc38 <etharp_output+0x1fc>)
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	4937      	ldr	r1, [pc, #220]	; (800bc3c <etharp_output+0x200>)
 800bb5e:	4603      	mov	r3, r0
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	4403      	add	r3, r0
 800bb64:	00db      	lsls	r3, r3, #3
 800bb66:	440b      	add	r3, r1
 800bb68:	3304      	adds	r3, #4
 800bb6a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d108      	bne.n	800bb82 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bb70:	4b31      	ldr	r3, [pc, #196]	; (800bc38 <etharp_output+0x1fc>)
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	461a      	mov	r2, r3
 800bb76:	68b9      	ldr	r1, [r7, #8]
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f7ff fec5 	bl	800b908 <etharp_output_to_arp_index>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	e04a      	b.n	800bc18 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bb82:	2300      	movs	r3, #0
 800bb84:	75fb      	strb	r3, [r7, #23]
 800bb86:	e031      	b.n	800bbec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bb88:	7dfa      	ldrb	r2, [r7, #23]
 800bb8a:	492c      	ldr	r1, [pc, #176]	; (800bc3c <etharp_output+0x200>)
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	005b      	lsls	r3, r3, #1
 800bb90:	4413      	add	r3, r2
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	440b      	add	r3, r1
 800bb96:	3314      	adds	r3, #20
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d923      	bls.n	800bbe6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800bb9e:	7dfa      	ldrb	r2, [r7, #23]
 800bba0:	4926      	ldr	r1, [pc, #152]	; (800bc3c <etharp_output+0x200>)
 800bba2:	4613      	mov	r3, r2
 800bba4:	005b      	lsls	r3, r3, #1
 800bba6:	4413      	add	r3, r2
 800bba8:	00db      	lsls	r3, r3, #3
 800bbaa:	440b      	add	r3, r1
 800bbac:	3308      	adds	r3, #8
 800bbae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d117      	bne.n	800bbe6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	6819      	ldr	r1, [r3, #0]
 800bbba:	7dfa      	ldrb	r2, [r7, #23]
 800bbbc:	481f      	ldr	r0, [pc, #124]	; (800bc3c <etharp_output+0x200>)
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	005b      	lsls	r3, r3, #1
 800bbc2:	4413      	add	r3, r2
 800bbc4:	00db      	lsls	r3, r3, #3
 800bbc6:	4403      	add	r3, r0
 800bbc8:	3304      	adds	r3, #4
 800bbca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800bbcc:	4299      	cmp	r1, r3
 800bbce:	d10a      	bne.n	800bbe6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800bbd0:	4a19      	ldr	r2, [pc, #100]	; (800bc38 <etharp_output+0x1fc>)
 800bbd2:	7dfb      	ldrb	r3, [r7, #23]
 800bbd4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800bbd6:	7dfb      	ldrb	r3, [r7, #23]
 800bbd8:	461a      	mov	r2, r3
 800bbda:	68b9      	ldr	r1, [r7, #8]
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f7ff fe93 	bl	800b908 <etharp_output_to_arp_index>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	e018      	b.n	800bc18 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bbe6:	7dfb      	ldrb	r3, [r7, #23]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	75fb      	strb	r3, [r7, #23]
 800bbec:	7dfb      	ldrb	r3, [r7, #23]
 800bbee:	2b09      	cmp	r3, #9
 800bbf0:	d9ca      	bls.n	800bb88 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	69b9      	ldr	r1, [r7, #24]
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f000 f822 	bl	800bc40 <etharp_query>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	e00b      	b.n	800bc18 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800bc06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	68b9      	ldr	r1, [r7, #8]
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f001 fd45 	bl	800d6a0 <ethernet_output>
 800bc16:	4603      	mov	r3, r0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3720      	adds	r7, #32
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	08010b98 	.word	0x08010b98
 800bc24:	08010ce8 	.word	0x08010ce8
 800bc28:	08010c10 	.word	0x08010c10
 800bc2c:	08010d38 	.word	0x08010d38
 800bc30:	08010cd8 	.word	0x08010cd8
 800bc34:	0801134c 	.word	0x0801134c
 800bc38:	2000a554 	.word	0x2000a554
 800bc3c:	2000a464 	.word	0x2000a464

0800bc40 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08c      	sub	sp, #48	; 0x30
 800bc44:	af02      	add	r7, sp, #8
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	3326      	adds	r3, #38	; 0x26
 800bc50:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800bc52:	23ff      	movs	r3, #255	; 0xff
 800bc54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68f9      	ldr	r1, [r7, #12]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 fe0e 	bl	800c884 <ip4_addr_isbroadcast_u32>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10c      	bne.n	800bc88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bc76:	2be0      	cmp	r3, #224	; 0xe0
 800bc78:	d006      	beq.n	800bc88 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d003      	beq.n	800bc88 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d102      	bne.n	800bc8e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bc88:	f06f 030f 	mvn.w	r3, #15
 800bc8c:	e101      	b.n	800be92 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	2101      	movs	r1, #1
 800bc92:	68b8      	ldr	r0, [r7, #8]
 800bc94:	f7ff fb60 	bl	800b358 <etharp_find_entry>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800bc9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	da02      	bge.n	800bcaa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800bca4:	8a7b      	ldrh	r3, [r7, #18]
 800bca6:	b25b      	sxtb	r3, r3
 800bca8:	e0f3      	b.n	800be92 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800bcaa:	8a7b      	ldrh	r3, [r7, #18]
 800bcac:	2b7e      	cmp	r3, #126	; 0x7e
 800bcae:	d906      	bls.n	800bcbe <etharp_query+0x7e>
 800bcb0:	4b7a      	ldr	r3, [pc, #488]	; (800be9c <etharp_query+0x25c>)
 800bcb2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800bcb6:	497a      	ldr	r1, [pc, #488]	; (800bea0 <etharp_query+0x260>)
 800bcb8:	487a      	ldr	r0, [pc, #488]	; (800bea4 <etharp_query+0x264>)
 800bcba:	f001 fd83 	bl	800d7c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800bcbe:	8a7b      	ldrh	r3, [r7, #18]
 800bcc0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800bcc2:	7c7a      	ldrb	r2, [r7, #17]
 800bcc4:	4978      	ldr	r1, [pc, #480]	; (800bea8 <etharp_query+0x268>)
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	005b      	lsls	r3, r3, #1
 800bcca:	4413      	add	r3, r2
 800bccc:	00db      	lsls	r3, r3, #3
 800bcce:	440b      	add	r3, r1
 800bcd0:	3314      	adds	r3, #20
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d115      	bne.n	800bd04 <etharp_query+0xc4>
    is_new_entry = 1;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800bcdc:	7c7a      	ldrb	r2, [r7, #17]
 800bcde:	4972      	ldr	r1, [pc, #456]	; (800bea8 <etharp_query+0x268>)
 800bce0:	4613      	mov	r3, r2
 800bce2:	005b      	lsls	r3, r3, #1
 800bce4:	4413      	add	r3, r2
 800bce6:	00db      	lsls	r3, r3, #3
 800bce8:	440b      	add	r3, r1
 800bcea:	3314      	adds	r3, #20
 800bcec:	2201      	movs	r2, #1
 800bcee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800bcf0:	7c7a      	ldrb	r2, [r7, #17]
 800bcf2:	496d      	ldr	r1, [pc, #436]	; (800bea8 <etharp_query+0x268>)
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	005b      	lsls	r3, r3, #1
 800bcf8:	4413      	add	r3, r2
 800bcfa:	00db      	lsls	r3, r3, #3
 800bcfc:	440b      	add	r3, r1
 800bcfe:	3308      	adds	r3, #8
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800bd04:	7c7a      	ldrb	r2, [r7, #17]
 800bd06:	4968      	ldr	r1, [pc, #416]	; (800bea8 <etharp_query+0x268>)
 800bd08:	4613      	mov	r3, r2
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	4413      	add	r3, r2
 800bd0e:	00db      	lsls	r3, r3, #3
 800bd10:	440b      	add	r3, r1
 800bd12:	3314      	adds	r3, #20
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d011      	beq.n	800bd3e <etharp_query+0xfe>
 800bd1a:	7c7a      	ldrb	r2, [r7, #17]
 800bd1c:	4962      	ldr	r1, [pc, #392]	; (800bea8 <etharp_query+0x268>)
 800bd1e:	4613      	mov	r3, r2
 800bd20:	005b      	lsls	r3, r3, #1
 800bd22:	4413      	add	r3, r2
 800bd24:	00db      	lsls	r3, r3, #3
 800bd26:	440b      	add	r3, r1
 800bd28:	3314      	adds	r3, #20
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d806      	bhi.n	800bd3e <etharp_query+0xfe>
 800bd30:	4b5a      	ldr	r3, [pc, #360]	; (800be9c <etharp_query+0x25c>)
 800bd32:	f240 32cd 	movw	r2, #973	; 0x3cd
 800bd36:	495d      	ldr	r1, [pc, #372]	; (800beac <etharp_query+0x26c>)
 800bd38:	485a      	ldr	r0, [pc, #360]	; (800bea4 <etharp_query+0x264>)
 800bd3a:	f001 fd43 	bl	800d7c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800bd3e:	6a3b      	ldr	r3, [r7, #32]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d102      	bne.n	800bd4a <etharp_query+0x10a>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10c      	bne.n	800bd64 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800bd4a:	68b9      	ldr	r1, [r7, #8]
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f000 f963 	bl	800c018 <etharp_request>
 800bd52:	4603      	mov	r3, r0
 800bd54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <etharp_query+0x124>
      return result;
 800bd5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd62:	e096      	b.n	800be92 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d106      	bne.n	800bd78 <etharp_query+0x138>
 800bd6a:	4b4c      	ldr	r3, [pc, #304]	; (800be9c <etharp_query+0x25c>)
 800bd6c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800bd70:	494f      	ldr	r1, [pc, #316]	; (800beb0 <etharp_query+0x270>)
 800bd72:	484c      	ldr	r0, [pc, #304]	; (800bea4 <etharp_query+0x264>)
 800bd74:	f001 fd26 	bl	800d7c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800bd78:	7c7a      	ldrb	r2, [r7, #17]
 800bd7a:	494b      	ldr	r1, [pc, #300]	; (800bea8 <etharp_query+0x268>)
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	005b      	lsls	r3, r3, #1
 800bd80:	4413      	add	r3, r2
 800bd82:	00db      	lsls	r3, r3, #3
 800bd84:	440b      	add	r3, r1
 800bd86:	3314      	adds	r3, #20
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d917      	bls.n	800bdbe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800bd8e:	4a49      	ldr	r2, [pc, #292]	; (800beb4 <etharp_query+0x274>)
 800bd90:	7c7b      	ldrb	r3, [r7, #17]
 800bd92:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800bd94:	7c7a      	ldrb	r2, [r7, #17]
 800bd96:	4613      	mov	r3, r2
 800bd98:	005b      	lsls	r3, r3, #1
 800bd9a:	4413      	add	r3, r2
 800bd9c:	00db      	lsls	r3, r3, #3
 800bd9e:	3308      	adds	r3, #8
 800bda0:	4a41      	ldr	r2, [pc, #260]	; (800bea8 <etharp_query+0x268>)
 800bda2:	4413      	add	r3, r2
 800bda4:	3304      	adds	r3, #4
 800bda6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdaa:	9200      	str	r2, [sp, #0]
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	6879      	ldr	r1, [r7, #4]
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f001 fc75 	bl	800d6a0 <ethernet_output>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bdbc:	e067      	b.n	800be8e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bdbe:	7c7a      	ldrb	r2, [r7, #17]
 800bdc0:	4939      	ldr	r1, [pc, #228]	; (800bea8 <etharp_query+0x268>)
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	4413      	add	r3, r2
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	440b      	add	r3, r1
 800bdcc:	3314      	adds	r3, #20
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d15c      	bne.n	800be8e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bddc:	e01c      	b.n	800be18 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	895a      	ldrh	r2, [r3, #10]
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	891b      	ldrh	r3, [r3, #8]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d10a      	bne.n	800be00 <etharp_query+0x1c0>
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d006      	beq.n	800be00 <etharp_query+0x1c0>
 800bdf2:	4b2a      	ldr	r3, [pc, #168]	; (800be9c <etharp_query+0x25c>)
 800bdf4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800bdf8:	492f      	ldr	r1, [pc, #188]	; (800beb8 <etharp_query+0x278>)
 800bdfa:	482a      	ldr	r0, [pc, #168]	; (800bea4 <etharp_query+0x264>)
 800bdfc:	f001 fce2 	bl	800d7c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	7b1b      	ldrb	r3, [r3, #12]
 800be04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d002      	beq.n	800be12 <etharp_query+0x1d2>
        copy_needed = 1;
 800be0c:	2301      	movs	r3, #1
 800be0e:	61bb      	str	r3, [r7, #24]
        break;
 800be10:	e005      	b.n	800be1e <etharp_query+0x1de>
      }
      p = p->next;
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	61fb      	str	r3, [r7, #28]
    while (p) {
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1df      	bne.n	800bdde <etharp_query+0x19e>
    }
    if (copy_needed) {
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d007      	beq.n	800be34 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	f44f 7120 	mov.w	r1, #640	; 0x280
 800be2a:	200e      	movs	r0, #14
 800be2c:	f7f9 fd28 	bl	8005880 <pbuf_clone>
 800be30:	61f8      	str	r0, [r7, #28]
 800be32:	e004      	b.n	800be3e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800be38:	69f8      	ldr	r0, [r7, #28]
 800be3a:	f7f9 fb65 	bl	8005508 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d021      	beq.n	800be88 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800be44:	7c7a      	ldrb	r2, [r7, #17]
 800be46:	4918      	ldr	r1, [pc, #96]	; (800bea8 <etharp_query+0x268>)
 800be48:	4613      	mov	r3, r2
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	4413      	add	r3, r2
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	440b      	add	r3, r1
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00a      	beq.n	800be6e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800be58:	7c7a      	ldrb	r2, [r7, #17]
 800be5a:	4913      	ldr	r1, [pc, #76]	; (800bea8 <etharp_query+0x268>)
 800be5c:	4613      	mov	r3, r2
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	4413      	add	r3, r2
 800be62:	00db      	lsls	r3, r3, #3
 800be64:	440b      	add	r3, r1
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f9 faad 	bl	80053c8 <pbuf_free>
      }
      arp_table[i].q = p;
 800be6e:	7c7a      	ldrb	r2, [r7, #17]
 800be70:	490d      	ldr	r1, [pc, #52]	; (800bea8 <etharp_query+0x268>)
 800be72:	4613      	mov	r3, r2
 800be74:	005b      	lsls	r3, r3, #1
 800be76:	4413      	add	r3, r2
 800be78:	00db      	lsls	r3, r3, #3
 800be7a:	440b      	add	r3, r1
 800be7c:	69fa      	ldr	r2, [r7, #28]
 800be7e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800be80:	2300      	movs	r3, #0
 800be82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be86:	e002      	b.n	800be8e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800be88:	23ff      	movs	r3, #255	; 0xff
 800be8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800be8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800be92:	4618      	mov	r0, r3
 800be94:	3728      	adds	r7, #40	; 0x28
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	08010b98 	.word	0x08010b98
 800bea0:	08010d44 	.word	0x08010d44
 800bea4:	08010c10 	.word	0x08010c10
 800bea8:	2000a464 	.word	0x2000a464
 800beac:	08010d54 	.word	0x08010d54
 800beb0:	08010d38 	.word	0x08010d38
 800beb4:	2000a554 	.word	0x2000a554
 800beb8:	08010d7c 	.word	0x08010d7c

0800bebc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b08a      	sub	sp, #40	; 0x28
 800bec0:	af02      	add	r7, sp, #8
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
 800bec8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d106      	bne.n	800bee2 <etharp_raw+0x26>
 800bed4:	4b3a      	ldr	r3, [pc, #232]	; (800bfc0 <etharp_raw+0x104>)
 800bed6:	f240 4257 	movw	r2, #1111	; 0x457
 800beda:	493a      	ldr	r1, [pc, #232]	; (800bfc4 <etharp_raw+0x108>)
 800bedc:	483a      	ldr	r0, [pc, #232]	; (800bfc8 <etharp_raw+0x10c>)
 800bede:	f001 fc71 	bl	800d7c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800bee2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bee6:	211c      	movs	r1, #28
 800bee8:	200e      	movs	r0, #14
 800beea:	f7f8 ff89 	bl	8004e00 <pbuf_alloc>
 800beee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d102      	bne.n	800befc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800bef6:	f04f 33ff 	mov.w	r3, #4294967295
 800befa:	e05d      	b.n	800bfb8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	895b      	ldrh	r3, [r3, #10]
 800bf00:	2b1b      	cmp	r3, #27
 800bf02:	d806      	bhi.n	800bf12 <etharp_raw+0x56>
 800bf04:	4b2e      	ldr	r3, [pc, #184]	; (800bfc0 <etharp_raw+0x104>)
 800bf06:	f240 4262 	movw	r2, #1122	; 0x462
 800bf0a:	4930      	ldr	r1, [pc, #192]	; (800bfcc <etharp_raw+0x110>)
 800bf0c:	482e      	ldr	r0, [pc, #184]	; (800bfc8 <etharp_raw+0x10c>)
 800bf0e:	f001 fc59 	bl	800d7c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800bf18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7f7 fef6 	bl	8003d0c <lwip_htons>
 800bf20:	4603      	mov	r3, r0
 800bf22:	461a      	mov	r2, r3
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bf2e:	2b06      	cmp	r3, #6
 800bf30:	d006      	beq.n	800bf40 <etharp_raw+0x84>
 800bf32:	4b23      	ldr	r3, [pc, #140]	; (800bfc0 <etharp_raw+0x104>)
 800bf34:	f240 4269 	movw	r2, #1129	; 0x469
 800bf38:	4925      	ldr	r1, [pc, #148]	; (800bfd0 <etharp_raw+0x114>)
 800bf3a:	4823      	ldr	r0, [pc, #140]	; (800bfc8 <etharp_raw+0x10c>)
 800bf3c:	f001 fc42 	bl	800d7c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	3308      	adds	r3, #8
 800bf44:	2206      	movs	r2, #6
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f001 fc25 	bl	800d798 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	3312      	adds	r3, #18
 800bf52:	2206      	movs	r2, #6
 800bf54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf56:	4618      	mov	r0, r3
 800bf58:	f001 fc1e 	bl	800d798 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	330e      	adds	r3, #14
 800bf60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf62:	6812      	ldr	r2, [r2, #0]
 800bf64:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	3318      	adds	r3, #24
 800bf6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf6c:	6812      	ldr	r2, [r2, #0]
 800bf6e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	2200      	movs	r2, #0
 800bf74:	701a      	strb	r2, [r3, #0]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f042 0201 	orr.w	r2, r2, #1
 800bf7c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f042 0208 	orr.w	r2, r2, #8
 800bf86:	709a      	strb	r2, [r3, #2]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	2206      	movs	r2, #6
 800bf90:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2204      	movs	r2, #4
 800bf96:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800bf98:	f640 0306 	movw	r3, #2054	; 0x806
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	69b9      	ldr	r1, [r7, #24]
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f001 fb7b 	bl	800d6a0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800bfaa:	69b8      	ldr	r0, [r7, #24]
 800bfac:	f7f9 fa0c 	bl	80053c8 <pbuf_free>
  p = NULL;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800bfb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3720      	adds	r7, #32
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	08010b98 	.word	0x08010b98
 800bfc4:	08010ce8 	.word	0x08010ce8
 800bfc8:	08010c10 	.word	0x08010c10
 800bfcc:	08010d98 	.word	0x08010d98
 800bfd0:	08010dcc 	.word	0x08010dcc

0800bfd4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b088      	sub	sp, #32
 800bfd8:	af04      	add	r7, sp, #16
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bff0:	2201      	movs	r2, #1
 800bff2:	9203      	str	r2, [sp, #12]
 800bff4:	68ba      	ldr	r2, [r7, #8]
 800bff6:	9202      	str	r2, [sp, #8]
 800bff8:	4a06      	ldr	r2, [pc, #24]	; (800c014 <etharp_request_dst+0x40>)
 800bffa:	9201      	str	r2, [sp, #4]
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	4603      	mov	r3, r0
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f7ff ff5a 	bl	800bebc <etharp_raw>
 800c008:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	08011354 	.word	0x08011354

0800c018 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c022:	4a05      	ldr	r2, [pc, #20]	; (800c038 <etharp_request+0x20>)
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7ff ffd4 	bl	800bfd4 <etharp_request_dst>
 800c02c:	4603      	mov	r3, r0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3708      	adds	r7, #8
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	0801134c 	.word	0x0801134c

0800c03c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b08e      	sub	sp, #56	; 0x38
 800c040:	af04      	add	r7, sp, #16
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c046:	4b79      	ldr	r3, [pc, #484]	; (800c22c <icmp_input+0x1f0>)
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	f003 030f 	and.w	r3, r3, #15
 800c054:	b2db      	uxtb	r3, r3
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c05c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c05e:	2b13      	cmp	r3, #19
 800c060:	f240 80cd 	bls.w	800c1fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	895b      	ldrh	r3, [r3, #10]
 800c068:	2b03      	cmp	r3, #3
 800c06a:	f240 80ca 	bls.w	800c202 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c078:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 80b7 	beq.w	800c1f0 <icmp_input+0x1b4>
 800c082:	2b08      	cmp	r3, #8
 800c084:	f040 80b7 	bne.w	800c1f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c088:	4b69      	ldr	r3, [pc, #420]	; (800c230 <icmp_input+0x1f4>)
 800c08a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c08c:	4b67      	ldr	r3, [pc, #412]	; (800c22c <icmp_input+0x1f0>)
 800c08e:	695b      	ldr	r3, [r3, #20]
 800c090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c094:	2be0      	cmp	r3, #224	; 0xe0
 800c096:	f000 80bb 	beq.w	800c210 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c09a:	4b64      	ldr	r3, [pc, #400]	; (800c22c <icmp_input+0x1f0>)
 800c09c:	695b      	ldr	r3, [r3, #20]
 800c09e:	4a63      	ldr	r2, [pc, #396]	; (800c22c <icmp_input+0x1f0>)
 800c0a0:	6812      	ldr	r2, [r2, #0]
 800c0a2:	4611      	mov	r1, r2
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f000 fbed 	bl	800c884 <ip4_addr_isbroadcast_u32>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f040 80b1 	bne.w	800c214 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	891b      	ldrh	r3, [r3, #8]
 800c0b6:	2b07      	cmp	r3, #7
 800c0b8:	f240 80a5 	bls.w	800c206 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c0bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0be:	330e      	adds	r3, #14
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f7f9 f8ea 	bl	800529c <pbuf_add_header>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d04b      	beq.n	800c166 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	891a      	ldrh	r2, [r3, #8]
 800c0d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0d4:	4413      	add	r3, r2
 800c0d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	891b      	ldrh	r3, [r3, #8]
 800c0dc:	8b7a      	ldrh	r2, [r7, #26]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	f0c0 809a 	bcc.w	800c218 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c0e4:	8b7b      	ldrh	r3, [r7, #26]
 800c0e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	200e      	movs	r0, #14
 800c0ee:	f7f8 fe87 	bl	8004e00 <pbuf_alloc>
 800c0f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f000 8090 	beq.w	800c21c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	895b      	ldrh	r3, [r3, #10]
 800c100:	461a      	mov	r2, r3
 800c102:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c104:	3308      	adds	r3, #8
 800c106:	429a      	cmp	r2, r3
 800c108:	d203      	bcs.n	800c112 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c10a:	6978      	ldr	r0, [r7, #20]
 800c10c:	f7f9 f95c 	bl	80053c8 <pbuf_free>
          goto icmperr;
 800c110:	e085      	b.n	800c21e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c11a:	4618      	mov	r0, r3
 800c11c:	f001 fb3c 	bl	800d798 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c120:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c122:	4619      	mov	r1, r3
 800c124:	6978      	ldr	r0, [r7, #20]
 800c126:	f7f9 f8c9 	bl	80052bc <pbuf_remove_header>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d009      	beq.n	800c144 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c130:	4b40      	ldr	r3, [pc, #256]	; (800c234 <icmp_input+0x1f8>)
 800c132:	22b6      	movs	r2, #182	; 0xb6
 800c134:	4940      	ldr	r1, [pc, #256]	; (800c238 <icmp_input+0x1fc>)
 800c136:	4841      	ldr	r0, [pc, #260]	; (800c23c <icmp_input+0x200>)
 800c138:	f001 fb44 	bl	800d7c4 <iprintf>
          pbuf_free(r);
 800c13c:	6978      	ldr	r0, [r7, #20]
 800c13e:	f7f9 f943 	bl	80053c8 <pbuf_free>
          goto icmperr;
 800c142:	e06c      	b.n	800c21e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c144:	6879      	ldr	r1, [r7, #4]
 800c146:	6978      	ldr	r0, [r7, #20]
 800c148:	f7f9 fa56 	bl	80055f8 <pbuf_copy>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c152:	6978      	ldr	r0, [r7, #20]
 800c154:	f7f9 f938 	bl	80053c8 <pbuf_free>
          goto icmperr;
 800c158:	e061      	b.n	800c21e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7f9 f934 	bl	80053c8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	607b      	str	r3, [r7, #4]
 800c164:	e00f      	b.n	800c186 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c166:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c168:	330e      	adds	r3, #14
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7f9 f8a5 	bl	80052bc <pbuf_remove_header>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d006      	beq.n	800c186 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c178:	4b2e      	ldr	r3, [pc, #184]	; (800c234 <icmp_input+0x1f8>)
 800c17a:	22c7      	movs	r2, #199	; 0xc7
 800c17c:	4930      	ldr	r1, [pc, #192]	; (800c240 <icmp_input+0x204>)
 800c17e:	482f      	ldr	r0, [pc, #188]	; (800c23c <icmp_input+0x200>)
 800c180:	f001 fb20 	bl	800d7c4 <iprintf>
          goto icmperr;
 800c184:	e04b      	b.n	800c21e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c18c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7f9 f883 	bl	800529c <pbuf_add_header>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d12b      	bne.n	800c1f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c1aa:	4b20      	ldr	r3, [pc, #128]	; (800c22c <icmp_input+0x1f0>)
 800c1ac:	691a      	ldr	r2, [r3, #16]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	709a      	strb	r2, [r3, #2]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	22ff      	movs	r2, #255	; 0xff
 800c1c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	729a      	strb	r2, [r3, #10]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	9302      	str	r3, [sp, #8]
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	9301      	str	r3, [sp, #4]
 800c1da:	2300      	movs	r3, #0
 800c1dc:	9300      	str	r3, [sp, #0]
 800c1de:	23ff      	movs	r3, #255	; 0xff
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	69f9      	ldr	r1, [r7, #28]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fa75 	bl	800c6d4 <ip4_output_if>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c1ee:	e001      	b.n	800c1f4 <icmp_input+0x1b8>
      break;
 800c1f0:	bf00      	nop
 800c1f2:	e000      	b.n	800c1f6 <icmp_input+0x1ba>
      break;
 800c1f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f7f9 f8e6 	bl	80053c8 <pbuf_free>
  return;
 800c1fc:	e013      	b.n	800c226 <icmp_input+0x1ea>
    goto lenerr;
 800c1fe:	bf00      	nop
 800c200:	e002      	b.n	800c208 <icmp_input+0x1cc>
    goto lenerr;
 800c202:	bf00      	nop
 800c204:	e000      	b.n	800c208 <icmp_input+0x1cc>
        goto lenerr;
 800c206:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7f9 f8dd 	bl	80053c8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c20e:	e00a      	b.n	800c226 <icmp_input+0x1ea>
        goto icmperr;
 800c210:	bf00      	nop
 800c212:	e004      	b.n	800c21e <icmp_input+0x1e2>
        goto icmperr;
 800c214:	bf00      	nop
 800c216:	e002      	b.n	800c21e <icmp_input+0x1e2>
          goto icmperr;
 800c218:	bf00      	nop
 800c21a:	e000      	b.n	800c21e <icmp_input+0x1e2>
          goto icmperr;
 800c21c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7f9 f8d2 	bl	80053c8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c224:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c226:	3728      	adds	r7, #40	; 0x28
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	20004cd4 	.word	0x20004cd4
 800c230:	20004ce8 	.word	0x20004ce8
 800c234:	08010e10 	.word	0x08010e10
 800c238:	08010e48 	.word	0x08010e48
 800c23c:	08010e80 	.word	0x08010e80
 800c240:	08010ea8 	.word	0x08010ea8

0800c244 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	460b      	mov	r3, r1
 800c24e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c250:	78fb      	ldrb	r3, [r7, #3]
 800c252:	461a      	mov	r2, r3
 800c254:	2103      	movs	r1, #3
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 f814 	bl	800c284 <icmp_send_response>
}
 800c25c:	bf00      	nop
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c270:	78fb      	ldrb	r3, [r7, #3]
 800c272:	461a      	mov	r2, r3
 800c274:	210b      	movs	r1, #11
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f804 	bl	800c284 <icmp_send_response>
}
 800c27c:	bf00      	nop
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08c      	sub	sp, #48	; 0x30
 800c288:	af04      	add	r7, sp, #16
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	460b      	mov	r3, r1
 800c28e:	70fb      	strb	r3, [r7, #3]
 800c290:	4613      	mov	r3, r2
 800c292:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c294:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c298:	2124      	movs	r1, #36	; 0x24
 800c29a:	2022      	movs	r0, #34	; 0x22
 800c29c:	f7f8 fdb0 	bl	8004e00 <pbuf_alloc>
 800c2a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d04c      	beq.n	800c342 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	895b      	ldrh	r3, [r3, #10]
 800c2ac:	2b23      	cmp	r3, #35	; 0x23
 800c2ae:	d806      	bhi.n	800c2be <icmp_send_response+0x3a>
 800c2b0:	4b26      	ldr	r3, [pc, #152]	; (800c34c <icmp_send_response+0xc8>)
 800c2b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c2b6:	4926      	ldr	r1, [pc, #152]	; (800c350 <icmp_send_response+0xcc>)
 800c2b8:	4826      	ldr	r0, [pc, #152]	; (800c354 <icmp_send_response+0xd0>)
 800c2ba:	f001 fa83 	bl	800d7c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	78fa      	ldrb	r2, [r7, #3]
 800c2ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	78ba      	ldrb	r2, [r7, #2]
 800c2d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	711a      	strb	r2, [r3, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	719a      	strb	r2, [r3, #6]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	f103 0008 	add.w	r0, r3, #8
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	221c      	movs	r2, #28
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	f001 fa4d 	bl	800d798 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	68db      	ldr	r3, [r3, #12]
 800c302:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c304:	f107 030c 	add.w	r3, r7, #12
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 f825 	bl	800c358 <ip4_route>
 800c30e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d011      	beq.n	800c33a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	2200      	movs	r2, #0
 800c31a:	709a      	strb	r2, [r3, #2]
 800c31c:	2200      	movs	r2, #0
 800c31e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c320:	f107 020c 	add.w	r2, r7, #12
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	9302      	str	r3, [sp, #8]
 800c328:	2301      	movs	r3, #1
 800c32a:	9301      	str	r3, [sp, #4]
 800c32c:	2300      	movs	r3, #0
 800c32e:	9300      	str	r3, [sp, #0]
 800c330:	23ff      	movs	r3, #255	; 0xff
 800c332:	2100      	movs	r1, #0
 800c334:	69f8      	ldr	r0, [r7, #28]
 800c336:	f000 f9cd 	bl	800c6d4 <ip4_output_if>
  }
  pbuf_free(q);
 800c33a:	69f8      	ldr	r0, [r7, #28]
 800c33c:	f7f9 f844 	bl	80053c8 <pbuf_free>
 800c340:	e000      	b.n	800c344 <icmp_send_response+0xc0>
    return;
 800c342:	bf00      	nop
}
 800c344:	3720      	adds	r7, #32
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	08010e10 	.word	0x08010e10
 800c350:	08010edc 	.word	0x08010edc
 800c354:	08010e80 	.word	0x08010e80

0800c358 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800c360:	4b33      	ldr	r3, [pc, #204]	; (800c430 <ip4_route+0xd8>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	60fb      	str	r3, [r7, #12]
 800c366:	e036      	b.n	800c3d6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c36e:	f003 0301 	and.w	r3, r3, #1
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b00      	cmp	r3, #0
 800c376:	d02b      	beq.n	800c3d0 <ip4_route+0x78>
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c37e:	089b      	lsrs	r3, r3, #2
 800c380:	f003 0301 	and.w	r3, r3, #1
 800c384:	b2db      	uxtb	r3, r3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d022      	beq.n	800c3d0 <ip4_route+0x78>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3304      	adds	r3, #4
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d01d      	beq.n	800c3d0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3304      	adds	r3, #4
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	405a      	eors	r2, r3
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	3308      	adds	r3, #8
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4013      	ands	r3, r2
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d101      	bne.n	800c3b0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	e038      	b.n	800c422 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c3b6:	f003 0302 	and.w	r3, r3, #2
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d108      	bne.n	800c3d0 <ip4_route+0x78>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	330c      	adds	r3, #12
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d101      	bne.n	800c3d0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	e028      	b.n	800c422 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	60fb      	str	r3, [r7, #12]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1c5      	bne.n	800c368 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c3dc:	4b15      	ldr	r3, [pc, #84]	; (800c434 <ip4_route+0xdc>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d01a      	beq.n	800c41a <ip4_route+0xc2>
 800c3e4:	4b13      	ldr	r3, [pc, #76]	; (800c434 <ip4_route+0xdc>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c3ec:	f003 0301 	and.w	r3, r3, #1
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d012      	beq.n	800c41a <ip4_route+0xc2>
 800c3f4:	4b0f      	ldr	r3, [pc, #60]	; (800c434 <ip4_route+0xdc>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c3fc:	f003 0304 	and.w	r3, r3, #4
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00a      	beq.n	800c41a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c404:	4b0b      	ldr	r3, [pc, #44]	; (800c434 <ip4_route+0xdc>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	3304      	adds	r3, #4
 800c40a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d004      	beq.n	800c41a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	b2db      	uxtb	r3, r3
 800c416:	2b7f      	cmp	r3, #127	; 0x7f
 800c418:	d101      	bne.n	800c41e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c41a:	2300      	movs	r3, #0
 800c41c:	e001      	b.n	800c422 <ip4_route+0xca>
  }

  return netif_default;
 800c41e:	4b05      	ldr	r3, [pc, #20]	; (800c434 <ip4_route+0xdc>)
 800c420:	681b      	ldr	r3, [r3, #0]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3714      	adds	r7, #20
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	2000a3f8 	.word	0x2000a3f8
 800c434:	2000a3fc 	.word	0x2000a3fc

0800c438 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d016      	beq.n	800c47e <ip4_input_accept+0x46>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	3304      	adds	r3, #4
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d011      	beq.n	800c47e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c45a:	4b0b      	ldr	r3, [pc, #44]	; (800c488 <ip4_input_accept+0x50>)
 800c45c:	695a      	ldr	r2, [r3, #20]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3304      	adds	r3, #4
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	429a      	cmp	r2, r3
 800c466:	d008      	beq.n	800c47a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c468:	4b07      	ldr	r3, [pc, #28]	; (800c488 <ip4_input_accept+0x50>)
 800c46a:	695b      	ldr	r3, [r3, #20]
 800c46c:	6879      	ldr	r1, [r7, #4]
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 fa08 	bl	800c884 <ip4_addr_isbroadcast_u32>
 800c474:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c476:	2b00      	cmp	r3, #0
 800c478:	d001      	beq.n	800c47e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800c47a:	2301      	movs	r3, #1
 800c47c:	e000      	b.n	800c480 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	20004cd4 	.word	0x20004cd4

0800c48c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	091b      	lsrs	r3, r3, #4
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	2b04      	cmp	r3, #4
 800c4a6:	d004      	beq.n	800c4b2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f7f8 ff8d 	bl	80053c8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	e107      	b.n	800c6c2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	f003 030f 	and.w	r3, r3, #15
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	885b      	ldrh	r3, [r3, #2]
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7f7 fc1f 	bl	8003d0c <lwip_htons>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	891b      	ldrh	r3, [r3, #8]
 800c4d6:	89ba      	ldrh	r2, [r7, #12]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d204      	bcs.n	800c4e6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c4dc:	89bb      	ldrh	r3, [r7, #12]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f7f8 fdeb 	bl	80050bc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	895b      	ldrh	r3, [r3, #10]
 800c4ea:	89fa      	ldrh	r2, [r7, #14]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d807      	bhi.n	800c500 <ip4_input+0x74>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	891b      	ldrh	r3, [r3, #8]
 800c4f4:	89ba      	ldrh	r2, [r7, #12]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d802      	bhi.n	800c500 <ip4_input+0x74>
 800c4fa:	89fb      	ldrh	r3, [r7, #14]
 800c4fc:	2b13      	cmp	r3, #19
 800c4fe:	d804      	bhi.n	800c50a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7f8 ff61 	bl	80053c8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c506:	2300      	movs	r3, #0
 800c508:	e0db      	b.n	800c6c2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	4a6f      	ldr	r2, [pc, #444]	; (800c6cc <ip4_input+0x240>)
 800c510:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	4a6d      	ldr	r2, [pc, #436]	; (800c6cc <ip4_input+0x240>)
 800c518:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c51a:	4b6c      	ldr	r3, [pc, #432]	; (800c6cc <ip4_input+0x240>)
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c522:	2be0      	cmp	r3, #224	; 0xe0
 800c524:	d112      	bne.n	800c54c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c52c:	f003 0301 	and.w	r3, r3, #1
 800c530:	b2db      	uxtb	r3, r3
 800c532:	2b00      	cmp	r3, #0
 800c534:	d007      	beq.n	800c546 <ip4_input+0xba>
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	3304      	adds	r3, #4
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d002      	beq.n	800c546 <ip4_input+0xba>
      netif = inp;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	613b      	str	r3, [r7, #16]
 800c544:	e02a      	b.n	800c59c <ip4_input+0x110>
    } else {
      netif = NULL;
 800c546:	2300      	movs	r3, #0
 800c548:	613b      	str	r3, [r7, #16]
 800c54a:	e027      	b.n	800c59c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800c54c:	6838      	ldr	r0, [r7, #0]
 800c54e:	f7ff ff73 	bl	800c438 <ip4_input_accept>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d002      	beq.n	800c55e <ip4_input+0xd2>
      netif = inp;
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	613b      	str	r3, [r7, #16]
 800c55c:	e01e      	b.n	800c59c <ip4_input+0x110>
    } else {
      netif = NULL;
 800c55e:	2300      	movs	r3, #0
 800c560:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c562:	4b5a      	ldr	r3, [pc, #360]	; (800c6cc <ip4_input+0x240>)
 800c564:	695b      	ldr	r3, [r3, #20]
 800c566:	b2db      	uxtb	r3, r3
 800c568:	2b7f      	cmp	r3, #127	; 0x7f
 800c56a:	d017      	beq.n	800c59c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c56c:	4b58      	ldr	r3, [pc, #352]	; (800c6d0 <ip4_input+0x244>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	613b      	str	r3, [r7, #16]
 800c572:	e00e      	b.n	800c592 <ip4_input+0x106>
          if (netif == inp) {
 800c574:	693a      	ldr	r2, [r7, #16]
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d006      	beq.n	800c58a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c57c:	6938      	ldr	r0, [r7, #16]
 800c57e:	f7ff ff5b 	bl	800c438 <ip4_input_accept>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d108      	bne.n	800c59a <ip4_input+0x10e>
 800c588:	e000      	b.n	800c58c <ip4_input+0x100>
            continue;
 800c58a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	613b      	str	r3, [r7, #16]
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d1ed      	bne.n	800c574 <ip4_input+0xe8>
 800c598:	e000      	b.n	800c59c <ip4_input+0x110>
            break;
 800c59a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c59c:	4b4b      	ldr	r3, [pc, #300]	; (800c6cc <ip4_input+0x240>)
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	6839      	ldr	r1, [r7, #0]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 f96e 	bl	800c884 <ip4_addr_isbroadcast_u32>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d105      	bne.n	800c5ba <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c5ae:	4b47      	ldr	r3, [pc, #284]	; (800c6cc <ip4_input+0x240>)
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c5b6:	2be0      	cmp	r3, #224	; 0xe0
 800c5b8:	d104      	bne.n	800c5c4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7f8 ff04 	bl	80053c8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	e07e      	b.n	800c6c2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d104      	bne.n	800c5d4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7f8 fefc 	bl	80053c8 <pbuf_free>
    return ERR_OK;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e076      	b.n	800c6c2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	88db      	ldrh	r3, [r3, #6]
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	461a      	mov	r2, r3
 800c5dc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c5e0:	4013      	ands	r3, r2
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d00b      	beq.n	800c5fe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fc92 	bl	800cf10 <ip4_reass>
 800c5ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d101      	bne.n	800c5f8 <ip4_input+0x16c>
      return ERR_OK;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	e064      	b.n	800c6c2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c5fe:	4a33      	ldr	r2, [pc, #204]	; (800c6cc <ip4_input+0x240>)
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c604:	4a31      	ldr	r2, [pc, #196]	; (800c6cc <ip4_input+0x240>)
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c60a:	4a30      	ldr	r2, [pc, #192]	; (800c6cc <ip4_input+0x240>)
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	f003 030f 	and.w	r3, r3, #15
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	b29a      	uxth	r2, r3
 800c620:	4b2a      	ldr	r3, [pc, #168]	; (800c6cc <ip4_input+0x240>)
 800c622:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c624:	89fb      	ldrh	r3, [r7, #14]
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7f8 fe47 	bl	80052bc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	7a5b      	ldrb	r3, [r3, #9]
 800c632:	2b11      	cmp	r3, #17
 800c634:	d006      	beq.n	800c644 <ip4_input+0x1b8>
 800c636:	2b11      	cmp	r3, #17
 800c638:	dc13      	bgt.n	800c662 <ip4_input+0x1d6>
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d00c      	beq.n	800c658 <ip4_input+0x1cc>
 800c63e:	2b06      	cmp	r3, #6
 800c640:	d005      	beq.n	800c64e <ip4_input+0x1c2>
 800c642:	e00e      	b.n	800c662 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c644:	6839      	ldr	r1, [r7, #0]
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7fe fc68 	bl	800af1c <udp_input>
        break;
 800c64c:	e026      	b.n	800c69c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f7fa fce1 	bl	8007018 <tcp_input>
        break;
 800c656:	e021      	b.n	800c69c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c658:	6839      	ldr	r1, [r7, #0]
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7ff fcee 	bl	800c03c <icmp_input>
        break;
 800c660:	e01c      	b.n	800c69c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c662:	4b1a      	ldr	r3, [pc, #104]	; (800c6cc <ip4_input+0x240>)
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	6939      	ldr	r1, [r7, #16]
 800c668:	4618      	mov	r0, r3
 800c66a:	f000 f90b 	bl	800c884 <ip4_addr_isbroadcast_u32>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10f      	bne.n	800c694 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c674:	4b15      	ldr	r3, [pc, #84]	; (800c6cc <ip4_input+0x240>)
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c67c:	2be0      	cmp	r3, #224	; 0xe0
 800c67e:	d009      	beq.n	800c694 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c684:	4619      	mov	r1, r3
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7f8 fe8b 	bl	80053a2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c68c:	2102      	movs	r1, #2
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7ff fdd8 	bl	800c244 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7f8 fe97 	bl	80053c8 <pbuf_free>
        break;
 800c69a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c69c:	4b0b      	ldr	r3, [pc, #44]	; (800c6cc <ip4_input+0x240>)
 800c69e:	2200      	movs	r2, #0
 800c6a0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c6a2:	4b0a      	ldr	r3, [pc, #40]	; (800c6cc <ip4_input+0x240>)
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c6a8:	4b08      	ldr	r3, [pc, #32]	; (800c6cc <ip4_input+0x240>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c6ae:	4b07      	ldr	r3, [pc, #28]	; (800c6cc <ip4_input+0x240>)
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c6b4:	4b05      	ldr	r3, [pc, #20]	; (800c6cc <ip4_input+0x240>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c6ba:	4b04      	ldr	r3, [pc, #16]	; (800c6cc <ip4_input+0x240>)
 800c6bc:	2200      	movs	r2, #0
 800c6be:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3718      	adds	r7, #24
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	20004cd4 	.word	0x20004cd4
 800c6d0:	2000a3f8 	.word	0x2000a3f8

0800c6d4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b08a      	sub	sp, #40	; 0x28
 800c6d8:	af04      	add	r7, sp, #16
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	607a      	str	r2, [r7, #4]
 800c6e0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d009      	beq.n	800c700 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d003      	beq.n	800c6fa <ip4_output_if+0x26>
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d102      	bne.n	800c700 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c700:	78fa      	ldrb	r2, [r7, #3]
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	9302      	str	r3, [sp, #8]
 800c706:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c70a:	9301      	str	r3, [sp, #4]
 800c70c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c710:	9300      	str	r3, [sp, #0]
 800c712:	4613      	mov	r3, r2
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	6979      	ldr	r1, [r7, #20]
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	f000 f805 	bl	800c728 <ip4_output_if_src>
 800c71e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c720:	4618      	mov	r0, r3
 800c722:	3718      	adds	r7, #24
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b088      	sub	sp, #32
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	607a      	str	r2, [r7, #4]
 800c734:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	7b9b      	ldrb	r3, [r3, #14]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d006      	beq.n	800c74c <ip4_output_if_src+0x24>
 800c73e:	4b4b      	ldr	r3, [pc, #300]	; (800c86c <ip4_output_if_src+0x144>)
 800c740:	f44f 7255 	mov.w	r2, #852	; 0x354
 800c744:	494a      	ldr	r1, [pc, #296]	; (800c870 <ip4_output_if_src+0x148>)
 800c746:	484b      	ldr	r0, [pc, #300]	; (800c874 <ip4_output_if_src+0x14c>)
 800c748:	f001 f83c 	bl	800d7c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d060      	beq.n	800c814 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c752:	2314      	movs	r3, #20
 800c754:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c756:	2114      	movs	r1, #20
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f7f8 fd9f 	bl	800529c <pbuf_add_header>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d002      	beq.n	800c76a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c764:	f06f 0301 	mvn.w	r3, #1
 800c768:	e07c      	b.n	800c864 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	895b      	ldrh	r3, [r3, #10]
 800c774:	2b13      	cmp	r3, #19
 800c776:	d806      	bhi.n	800c786 <ip4_output_if_src+0x5e>
 800c778:	4b3c      	ldr	r3, [pc, #240]	; (800c86c <ip4_output_if_src+0x144>)
 800c77a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800c77e:	493e      	ldr	r1, [pc, #248]	; (800c878 <ip4_output_if_src+0x150>)
 800c780:	483c      	ldr	r0, [pc, #240]	; (800c874 <ip4_output_if_src+0x14c>)
 800c782:	f001 f81f 	bl	800d7c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	78fa      	ldrb	r2, [r7, #3]
 800c78a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c792:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c79c:	8b7b      	ldrh	r3, [r7, #26]
 800c79e:	089b      	lsrs	r3, r3, #2
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a8:	b2da      	uxtb	r2, r3
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c7b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	891b      	ldrh	r3, [r3, #8]
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7f7 faa6 	bl	8003d0c <lwip_htons>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	719a      	strb	r2, [r3, #6]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c7d2:	4b2a      	ldr	r3, [pc, #168]	; (800c87c <ip4_output_if_src+0x154>)
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7f7 fa98 	bl	8003d0c <lwip_htons>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	461a      	mov	r2, r3
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c7e4:	4b25      	ldr	r3, [pc, #148]	; (800c87c <ip4_output_if_src+0x154>)
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	b29a      	uxth	r2, r3
 800c7ec:	4b23      	ldr	r3, [pc, #140]	; (800c87c <ip4_output_if_src+0x154>)
 800c7ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d104      	bne.n	800c800 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c7f6:	4b22      	ldr	r3, [pc, #136]	; (800c880 <ip4_output_if_src+0x158>)
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	60da      	str	r2, [r3, #12]
 800c7fe:	e003      	b.n	800c808 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	2200      	movs	r2, #0
 800c80c:	729a      	strb	r2, [r3, #10]
 800c80e:	2200      	movs	r2, #0
 800c810:	72da      	strb	r2, [r3, #11]
 800c812:	e00f      	b.n	800c834 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	895b      	ldrh	r3, [r3, #10]
 800c818:	2b13      	cmp	r3, #19
 800c81a:	d802      	bhi.n	800c822 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c81c:	f06f 0301 	mvn.w	r3, #1
 800c820:	e020      	b.n	800c864 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c82e:	f107 0314 	add.w	r3, r7, #20
 800c832:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c836:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00c      	beq.n	800c856 <ip4_output_if_src+0x12e>
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	891a      	ldrh	r2, [r3, #8]
 800c840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c844:	429a      	cmp	r2, r3
 800c846:	d906      	bls.n	800c856 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	f000 fd53 	bl	800d2f8 <ip4_frag>
 800c852:	4603      	mov	r3, r0
 800c854:	e006      	b.n	800c864 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c858:	695b      	ldr	r3, [r3, #20]
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	68f9      	ldr	r1, [r7, #12]
 800c85e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c860:	4798      	blx	r3
 800c862:	4603      	mov	r3, r0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3720      	adds	r7, #32
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	08010f08 	.word	0x08010f08
 800c870:	08010f3c 	.word	0x08010f3c
 800c874:	08010f48 	.word	0x08010f48
 800c878:	08010f70 	.word	0x08010f70
 800c87c:	2000a556 	.word	0x2000a556
 800c880:	08011348 	.word	0x08011348

0800c884 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c898:	d002      	beq.n	800c8a0 <ip4_addr_isbroadcast_u32+0x1c>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e02a      	b.n	800c8fa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c8aa:	f003 0302 	and.w	r3, r3, #2
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d101      	bne.n	800c8b6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	e021      	b.n	800c8fa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	3304      	adds	r3, #4
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d101      	bne.n	800c8c6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	e019      	b.n	800c8fa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	3304      	adds	r3, #4
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	405a      	eors	r2, r3
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	3308      	adds	r3, #8
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4013      	ands	r3, r2
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d10d      	bne.n	800c8f8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	3308      	adds	r3, #8
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	43da      	mvns	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	3308      	adds	r3, #8
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d101      	bne.n	800c8f8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	e000      	b.n	800c8fa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c8f8:	2300      	movs	r3, #0
  }
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3714      	adds	r7, #20
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
	...

0800c908 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c90e:	2300      	movs	r3, #0
 800c910:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c912:	4b12      	ldr	r3, [pc, #72]	; (800c95c <ip_reass_tmr+0x54>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c918:	e018      	b.n	800c94c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	7fdb      	ldrb	r3, [r3, #31]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00b      	beq.n	800c93a <ip_reass_tmr+0x32>
      r->timer--;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	7fdb      	ldrb	r3, [r3, #31]
 800c926:	3b01      	subs	r3, #1
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	e008      	b.n	800c94c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c944:	68b9      	ldr	r1, [r7, #8]
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f80a 	bl	800c960 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d1e3      	bne.n	800c91a <ip_reass_tmr+0x12>
    }
  }
}
 800c952:	bf00      	nop
 800c954:	bf00      	nop
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	2000a558 	.word	0x2000a558

0800c960 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b088      	sub	sp, #32
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c96e:	683a      	ldr	r2, [r7, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	429a      	cmp	r2, r3
 800c974:	d105      	bne.n	800c982 <ip_reass_free_complete_datagram+0x22>
 800c976:	4b45      	ldr	r3, [pc, #276]	; (800ca8c <ip_reass_free_complete_datagram+0x12c>)
 800c978:	22ab      	movs	r2, #171	; 0xab
 800c97a:	4945      	ldr	r1, [pc, #276]	; (800ca90 <ip_reass_free_complete_datagram+0x130>)
 800c97c:	4845      	ldr	r0, [pc, #276]	; (800ca94 <ip_reass_free_complete_datagram+0x134>)
 800c97e:	f000 ff21 	bl	800d7c4 <iprintf>
  if (prev != NULL) {
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00a      	beq.n	800c99e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d005      	beq.n	800c99e <ip_reass_free_complete_datagram+0x3e>
 800c992:	4b3e      	ldr	r3, [pc, #248]	; (800ca8c <ip_reass_free_complete_datagram+0x12c>)
 800c994:	22ad      	movs	r2, #173	; 0xad
 800c996:	4940      	ldr	r1, [pc, #256]	; (800ca98 <ip_reass_free_complete_datagram+0x138>)
 800c998:	483e      	ldr	r0, [pc, #248]	; (800ca94 <ip_reass_free_complete_datagram+0x134>)
 800c99a:	f000 ff13 	bl	800d7c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	889b      	ldrh	r3, [r3, #4]
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d12a      	bne.n	800ca06 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	6858      	ldr	r0, [r3, #4]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	2214      	movs	r2, #20
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	f000 fee5 	bl	800d798 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	69b8      	ldr	r0, [r7, #24]
 800c9d2:	f7ff fc47 	bl	800c264 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c9d6:	69b8      	ldr	r0, [r7, #24]
 800c9d8:	f7f8 fd7e 	bl	80054d8 <pbuf_clen>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c9e0:	8bfa      	ldrh	r2, [r7, #30]
 800c9e2:	8a7b      	ldrh	r3, [r7, #18]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9ea:	db05      	blt.n	800c9f8 <ip_reass_free_complete_datagram+0x98>
 800c9ec:	4b27      	ldr	r3, [pc, #156]	; (800ca8c <ip_reass_free_complete_datagram+0x12c>)
 800c9ee:	22bc      	movs	r2, #188	; 0xbc
 800c9f0:	492a      	ldr	r1, [pc, #168]	; (800ca9c <ip_reass_free_complete_datagram+0x13c>)
 800c9f2:	4828      	ldr	r0, [pc, #160]	; (800ca94 <ip_reass_free_complete_datagram+0x134>)
 800c9f4:	f000 fee6 	bl	800d7c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c9f8:	8bfa      	ldrh	r2, [r7, #30]
 800c9fa:	8a7b      	ldrh	r3, [r7, #18]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ca00:	69b8      	ldr	r0, [r7, #24]
 800ca02:	f7f8 fce1 	bl	80053c8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ca0c:	e01f      	b.n	800ca4e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f7f8 fd5a 	bl	80054d8 <pbuf_clen>
 800ca24:	4603      	mov	r3, r0
 800ca26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ca28:	8bfa      	ldrh	r2, [r7, #30]
 800ca2a:	8a7b      	ldrh	r3, [r7, #18]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca32:	db05      	blt.n	800ca40 <ip_reass_free_complete_datagram+0xe0>
 800ca34:	4b15      	ldr	r3, [pc, #84]	; (800ca8c <ip_reass_free_complete_datagram+0x12c>)
 800ca36:	22cc      	movs	r2, #204	; 0xcc
 800ca38:	4918      	ldr	r1, [pc, #96]	; (800ca9c <ip_reass_free_complete_datagram+0x13c>)
 800ca3a:	4816      	ldr	r0, [pc, #88]	; (800ca94 <ip_reass_free_complete_datagram+0x134>)
 800ca3c:	f000 fec2 	bl	800d7c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ca40:	8bfa      	ldrh	r2, [r7, #30]
 800ca42:	8a7b      	ldrh	r3, [r7, #18]
 800ca44:	4413      	add	r3, r2
 800ca46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f7f8 fcbd 	bl	80053c8 <pbuf_free>
  while (p != NULL) {
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1dc      	bne.n	800ca0e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ca54:	6839      	ldr	r1, [r7, #0]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 f8c2 	bl	800cbe0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ca5c:	4b10      	ldr	r3, [pc, #64]	; (800caa0 <ip_reass_free_complete_datagram+0x140>)
 800ca5e:	881b      	ldrh	r3, [r3, #0]
 800ca60:	8bfa      	ldrh	r2, [r7, #30]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d905      	bls.n	800ca72 <ip_reass_free_complete_datagram+0x112>
 800ca66:	4b09      	ldr	r3, [pc, #36]	; (800ca8c <ip_reass_free_complete_datagram+0x12c>)
 800ca68:	22d2      	movs	r2, #210	; 0xd2
 800ca6a:	490e      	ldr	r1, [pc, #56]	; (800caa4 <ip_reass_free_complete_datagram+0x144>)
 800ca6c:	4809      	ldr	r0, [pc, #36]	; (800ca94 <ip_reass_free_complete_datagram+0x134>)
 800ca6e:	f000 fea9 	bl	800d7c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ca72:	4b0b      	ldr	r3, [pc, #44]	; (800caa0 <ip_reass_free_complete_datagram+0x140>)
 800ca74:	881a      	ldrh	r2, [r3, #0]
 800ca76:	8bfb      	ldrh	r3, [r7, #30]
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	4b08      	ldr	r3, [pc, #32]	; (800caa0 <ip_reass_free_complete_datagram+0x140>)
 800ca7e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ca80:	8bfb      	ldrh	r3, [r7, #30]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3720      	adds	r7, #32
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	08010fa0 	.word	0x08010fa0
 800ca90:	08010fdc 	.word	0x08010fdc
 800ca94:	08010fe8 	.word	0x08010fe8
 800ca98:	08011010 	.word	0x08011010
 800ca9c:	08011024 	.word	0x08011024
 800caa0:	2000a55c 	.word	0x2000a55c
 800caa4:	08011044 	.word	0x08011044

0800caa8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08a      	sub	sp, #40	; 0x28
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800cab2:	2300      	movs	r3, #0
 800cab4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800caba:	2300      	movs	r3, #0
 800cabc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800cabe:	2300      	movs	r3, #0
 800cac0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800cac2:	2300      	movs	r3, #0
 800cac4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800cac6:	4b28      	ldr	r3, [pc, #160]	; (800cb68 <ip_reass_remove_oldest_datagram+0xc0>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800cacc:	e030      	b.n	800cb30 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800cace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad0:	695a      	ldr	r2, [r3, #20]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d10c      	bne.n	800caf4 <ip_reass_remove_oldest_datagram+0x4c>
 800cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cadc:	699a      	ldr	r2, [r3, #24]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	691b      	ldr	r3, [r3, #16]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d106      	bne.n	800caf4 <ip_reass_remove_oldest_datagram+0x4c>
 800cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae8:	899a      	ldrh	r2, [r3, #12]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	889b      	ldrh	r3, [r3, #4]
 800caee:	b29b      	uxth	r3, r3
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d014      	beq.n	800cb1e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	3301      	adds	r3, #1
 800caf8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800cafa:	6a3b      	ldr	r3, [r7, #32]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d104      	bne.n	800cb0a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	61bb      	str	r3, [r7, #24]
 800cb08:	e009      	b.n	800cb1e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0c:	7fda      	ldrb	r2, [r3, #31]
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	7fdb      	ldrb	r3, [r3, #31]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d803      	bhi.n	800cb1e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d001      	beq.n	800cb2a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800cb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb28:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1cb      	bne.n	800cace <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800cb36:	6a3b      	ldr	r3, [r7, #32]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d008      	beq.n	800cb4e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800cb3c:	69b9      	ldr	r1, [r7, #24]
 800cb3e:	6a38      	ldr	r0, [r7, #32]
 800cb40:	f7ff ff0e 	bl	800c960 <ip_reass_free_complete_datagram>
 800cb44:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800cb46:	697a      	ldr	r2, [r7, #20]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800cb4e:	697a      	ldr	r2, [r7, #20]
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	da02      	bge.n	800cb5c <ip_reass_remove_oldest_datagram+0xb4>
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	dcac      	bgt.n	800cab6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800cb5c:	697b      	ldr	r3, [r7, #20]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3728      	adds	r7, #40	; 0x28
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	2000a558 	.word	0x2000a558

0800cb6c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cb76:	2004      	movs	r0, #4
 800cb78:	f7f7 fd40 	bl	80045fc <memp_malloc>
 800cb7c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d110      	bne.n	800cba6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cb84:	6839      	ldr	r1, [r7, #0]
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f7ff ff8e 	bl	800caa8 <ip_reass_remove_oldest_datagram>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	4293      	cmp	r3, r2
 800cb92:	dc03      	bgt.n	800cb9c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cb94:	2004      	movs	r0, #4
 800cb96:	f7f7 fd31 	bl	80045fc <memp_malloc>
 800cb9a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d101      	bne.n	800cba6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800cba2:	2300      	movs	r3, #0
 800cba4:	e016      	b.n	800cbd4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800cba6:	2220      	movs	r2, #32
 800cba8:	2100      	movs	r1, #0
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f000 fe02 	bl	800d7b4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	220f      	movs	r2, #15
 800cbb4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800cbb6:	4b09      	ldr	r3, [pc, #36]	; (800cbdc <ip_reass_enqueue_new_datagram+0x70>)
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800cbbe:	4a07      	ldr	r2, [pc, #28]	; (800cbdc <ip_reass_enqueue_new_datagram+0x70>)
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	3308      	adds	r3, #8
 800cbc8:	2214      	movs	r2, #20
 800cbca:	6879      	ldr	r1, [r7, #4]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 fde3 	bl	800d798 <memcpy>
  return ipr;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	2000a558 	.word	0x2000a558

0800cbe0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cbea:	4b10      	ldr	r3, [pc, #64]	; (800cc2c <ip_reass_dequeue_datagram+0x4c>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d104      	bne.n	800cbfe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a0c      	ldr	r2, [pc, #48]	; (800cc2c <ip_reass_dequeue_datagram+0x4c>)
 800cbfa:	6013      	str	r3, [r2, #0]
 800cbfc:	e00d      	b.n	800cc1a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d106      	bne.n	800cc12 <ip_reass_dequeue_datagram+0x32>
 800cc04:	4b0a      	ldr	r3, [pc, #40]	; (800cc30 <ip_reass_dequeue_datagram+0x50>)
 800cc06:	f240 1245 	movw	r2, #325	; 0x145
 800cc0a:	490a      	ldr	r1, [pc, #40]	; (800cc34 <ip_reass_dequeue_datagram+0x54>)
 800cc0c:	480a      	ldr	r0, [pc, #40]	; (800cc38 <ip_reass_dequeue_datagram+0x58>)
 800cc0e:	f000 fdd9 	bl	800d7c4 <iprintf>
    prev->next = ipr->next;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800cc1a:	6879      	ldr	r1, [r7, #4]
 800cc1c:	2004      	movs	r0, #4
 800cc1e:	f7f7 fd5d 	bl	80046dc <memp_free>
}
 800cc22:	bf00      	nop
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	2000a558 	.word	0x2000a558
 800cc30:	08010fa0 	.word	0x08010fa0
 800cc34:	08011068 	.word	0x08011068
 800cc38:	08010fe8 	.word	0x08010fe8

0800cc3c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b08c      	sub	sp, #48	; 0x30
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800cc56:	69fb      	ldr	r3, [r7, #28]
 800cc58:	885b      	ldrh	r3, [r3, #2]
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7f7 f855 	bl	8003d0c <lwip_htons>
 800cc62:	4603      	mov	r3, r0
 800cc64:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	f003 030f 	and.w	r3, r3, #15
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800cc74:	7e7b      	ldrb	r3, [r7, #25]
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	8b7a      	ldrh	r2, [r7, #26]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d202      	bcs.n	800cc84 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cc7e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc82:	e135      	b.n	800cef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800cc84:	7e7b      	ldrb	r3, [r7, #25]
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	8b7a      	ldrh	r2, [r7, #26]
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	88db      	ldrh	r3, [r3, #6]
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7f7 f839 	bl	8003d0c <lwip_htons>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ccac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccae:	2200      	movs	r2, #0
 800ccb0:	701a      	strb	r2, [r3, #0]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	705a      	strb	r2, [r3, #1]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	709a      	strb	r2, [r3, #2]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc0:	8afa      	ldrh	r2, [r7, #22]
 800ccc2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ccc4:	8afa      	ldrh	r2, [r7, #22]
 800ccc6:	8b7b      	ldrh	r3, [r7, #26]
 800ccc8:	4413      	add	r3, r2
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ccd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd2:	88db      	ldrh	r3, [r3, #6]
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	8afa      	ldrh	r2, [r7, #22]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d902      	bls.n	800cce2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ccdc:	f04f 33ff 	mov.w	r3, #4294967295
 800cce0:	e106      	b.n	800cef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	627b      	str	r3, [r7, #36]	; 0x24
 800cce8:	e068      	b.n	800cdbc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ccea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf2:	889b      	ldrh	r3, [r3, #4]
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	889b      	ldrh	r3, [r3, #4]
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d235      	bcs.n	800cd6c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800cd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd04:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800cd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d020      	beq.n	800cd4e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0e:	889b      	ldrh	r3, [r3, #4]
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd14:	88db      	ldrh	r3, [r3, #6]
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d307      	bcc.n	800cd2c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800cd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1e:	88db      	ldrh	r3, [r3, #6]
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	889b      	ldrh	r3, [r3, #4]
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d902      	bls.n	800cd32 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cd2c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd30:	e0de      	b.n	800cef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800cd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800cd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3a:	88db      	ldrh	r3, [r3, #6]
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd40:	889b      	ldrh	r3, [r3, #4]
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d03d      	beq.n	800cdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800cd4c:	e03a      	b.n	800cdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd50:	88db      	ldrh	r3, [r3, #6]
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	889b      	ldrh	r3, [r3, #4]
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d902      	bls.n	800cd64 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd62:	e0c5      	b.n	800cef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	605a      	str	r2, [r3, #4]
      break;
 800cd6a:	e02b      	b.n	800cdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800cd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6e:	889b      	ldrh	r3, [r3, #4]
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	889b      	ldrh	r3, [r3, #4]
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d102      	bne.n	800cd82 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cd7c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd80:	e0b6      	b.n	800cef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800cd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd84:	889b      	ldrh	r3, [r3, #4]
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	88db      	ldrh	r3, [r3, #6]
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d202      	bcs.n	800cd98 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cd92:	f04f 33ff 	mov.w	r3, #4294967295
 800cd96:	e0ab      	b.n	800cef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d009      	beq.n	800cdb2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda0:	88db      	ldrh	r3, [r3, #6]
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	889b      	ldrh	r3, [r3, #4]
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d001      	beq.n	800cdb2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d193      	bne.n	800ccea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800cdc2:	e000      	b.n	800cdc6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800cdc4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800cdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d12d      	bne.n	800ce28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d01c      	beq.n	800ce0c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd4:	88db      	ldrh	r3, [r3, #6]
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdda:	889b      	ldrh	r3, [r3, #4]
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d906      	bls.n	800cdf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800cde2:	4b45      	ldr	r3, [pc, #276]	; (800cef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cde4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800cde8:	4944      	ldr	r1, [pc, #272]	; (800cefc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cdea:	4845      	ldr	r0, [pc, #276]	; (800cf00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cdec:	f000 fcea 	bl	800d7c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800cdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf2:	68ba      	ldr	r2, [r7, #8]
 800cdf4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800cdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf8:	88db      	ldrh	r3, [r3, #6]
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfe:	889b      	ldrh	r3, [r3, #4]
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d010      	beq.n	800ce28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ce06:	2300      	movs	r3, #0
 800ce08:	623b      	str	r3, [r7, #32]
 800ce0a:	e00d      	b.n	800ce28 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d006      	beq.n	800ce22 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ce14:	4b38      	ldr	r3, [pc, #224]	; (800cef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ce16:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ce1a:	493a      	ldr	r1, [pc, #232]	; (800cf04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ce1c:	4838      	ldr	r0, [pc, #224]	; (800cf00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ce1e:	f000 fcd1 	bl	800d7c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d105      	bne.n	800ce3a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	7f9b      	ldrb	r3, [r3, #30]
 800ce32:	f003 0301 	and.w	r3, r3, #1
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d059      	beq.n	800ceee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ce3a:	6a3b      	ldr	r3, [r7, #32]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d04f      	beq.n	800cee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d006      	beq.n	800ce56 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	889b      	ldrh	r3, [r3, #4]
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d002      	beq.n	800ce5c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	623b      	str	r3, [r7, #32]
 800ce5a:	e041      	b.n	800cee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ce5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ce60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ce66:	e012      	b.n	800ce8e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ce6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce70:	88db      	ldrh	r3, [r3, #6]
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce76:	889b      	ldrh	r3, [r3, #4]
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d002      	beq.n	800ce84 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	623b      	str	r3, [r7, #32]
            break;
 800ce82:	e007      	b.n	800ce94 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ce84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce86:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ce88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ce8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1e9      	bne.n	800ce68 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d022      	beq.n	800cee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d106      	bne.n	800ceb0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800cea2:	4b15      	ldr	r3, [pc, #84]	; (800cef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cea4:	f240 12df 	movw	r2, #479	; 0x1df
 800cea8:	4917      	ldr	r1, [pc, #92]	; (800cf08 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ceaa:	4815      	ldr	r0, [pc, #84]	; (800cf00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ceac:	f000 fc8a 	bl	800d7c4 <iprintf>
          LWIP_ASSERT("sanity check",
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d106      	bne.n	800ceca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800cebc:	4b0e      	ldr	r3, [pc, #56]	; (800cef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cebe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cec2:	4911      	ldr	r1, [pc, #68]	; (800cf08 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800cec4:	480e      	ldr	r0, [pc, #56]	; (800cf00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cec6:	f000 fc7d 	bl	800d7c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ceca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d006      	beq.n	800cee0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ced2:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ced4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800ced8:	490c      	ldr	r1, [pc, #48]	; (800cf0c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ceda:	4809      	ldr	r0, [pc, #36]	; (800cf00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cedc:	f000 fc72 	bl	800d7c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800cee0:	6a3b      	ldr	r3, [r7, #32]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	bf14      	ite	ne
 800cee6:	2301      	movne	r3, #1
 800cee8:	2300      	moveq	r3, #0
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	e000      	b.n	800cef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ceee:	2300      	movs	r3, #0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3730      	adds	r7, #48	; 0x30
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	08010fa0 	.word	0x08010fa0
 800cefc:	08011084 	.word	0x08011084
 800cf00:	08010fe8 	.word	0x08010fe8
 800cf04:	080110a4 	.word	0x080110a4
 800cf08:	080110dc 	.word	0x080110dc
 800cf0c:	080110ec 	.word	0x080110ec

0800cf10 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b08e      	sub	sp, #56	; 0x38
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800cf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	f003 030f 	and.w	r3, r3, #15
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b14      	cmp	r3, #20
 800cf2e:	f040 8171 	bne.w	800d214 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800cf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf34:	88db      	ldrh	r3, [r3, #6]
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7f6 fee7 	bl	8003d0c <lwip_htons>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	00db      	lsls	r3, r3, #3
 800cf48:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800cf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4c:	885b      	ldrh	r3, [r3, #2]
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7f6 fedb 	bl	8003d0c <lwip_htons>
 800cf56:	4603      	mov	r3, r0
 800cf58:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800cf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	f003 030f 	and.w	r3, r3, #15
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800cf6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf72:	429a      	cmp	r2, r3
 800cf74:	f0c0 8150 	bcc.w	800d218 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800cf78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf7c:	b29b      	uxth	r3, r3
 800cf7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7f8 faa7 	bl	80054d8 <pbuf_clen>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800cf8e:	4b8c      	ldr	r3, [pc, #560]	; (800d1c0 <ip4_reass+0x2b0>)
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	461a      	mov	r2, r3
 800cf94:	8c3b      	ldrh	r3, [r7, #32]
 800cf96:	4413      	add	r3, r2
 800cf98:	2b0a      	cmp	r3, #10
 800cf9a:	dd10      	ble.n	800cfbe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cf9c:	8c3b      	ldrh	r3, [r7, #32]
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfa2:	f7ff fd81 	bl	800caa8 <ip_reass_remove_oldest_datagram>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f000 8137 	beq.w	800d21c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800cfae:	4b84      	ldr	r3, [pc, #528]	; (800d1c0 <ip4_reass+0x2b0>)
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	8c3b      	ldrh	r3, [r7, #32]
 800cfb6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cfb8:	2b0a      	cmp	r3, #10
 800cfba:	f300 812f 	bgt.w	800d21c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cfbe:	4b81      	ldr	r3, [pc, #516]	; (800d1c4 <ip4_reass+0x2b4>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	633b      	str	r3, [r7, #48]	; 0x30
 800cfc4:	e015      	b.n	800cff2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc8:	695a      	ldr	r2, [r3, #20]
 800cfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d10c      	bne.n	800cfec <ip4_reass+0xdc>
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd4:	699a      	ldr	r2, [r3, #24]
 800cfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd8:	691b      	ldr	r3, [r3, #16]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d106      	bne.n	800cfec <ip4_reass+0xdc>
 800cfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe0:	899a      	ldrh	r2, [r3, #12]
 800cfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe4:	889b      	ldrh	r3, [r3, #4]
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d006      	beq.n	800cffa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	633b      	str	r3, [r7, #48]	; 0x30
 800cff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d1e6      	bne.n	800cfc6 <ip4_reass+0xb6>
 800cff8:	e000      	b.n	800cffc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800cffa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800cffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d109      	bne.n	800d016 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d002:	8c3b      	ldrh	r3, [r7, #32]
 800d004:	4619      	mov	r1, r3
 800d006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d008:	f7ff fdb0 	bl	800cb6c <ip_reass_enqueue_new_datagram>
 800d00c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d010:	2b00      	cmp	r3, #0
 800d012:	d11c      	bne.n	800d04e <ip4_reass+0x13e>
      goto nullreturn;
 800d014:	e105      	b.n	800d222 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d018:	88db      	ldrh	r3, [r3, #6]
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7f6 fe75 	bl	8003d0c <lwip_htons>
 800d022:	4603      	mov	r3, r0
 800d024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d110      	bne.n	800d04e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02e:	89db      	ldrh	r3, [r3, #14]
 800d030:	4618      	mov	r0, r3
 800d032:	f7f6 fe6b 	bl	8003d0c <lwip_htons>
 800d036:	4603      	mov	r3, r0
 800d038:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d006      	beq.n	800d04e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d042:	3308      	adds	r3, #8
 800d044:	2214      	movs	r2, #20
 800d046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d048:	4618      	mov	r0, r3
 800d04a:	f000 fba5 	bl	800d798 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	88db      	ldrh	r3, [r3, #6]
 800d052:	b29b      	uxth	r3, r3
 800d054:	f003 0320 	and.w	r3, r3, #32
 800d058:	2b00      	cmp	r3, #0
 800d05a:	bf0c      	ite	eq
 800d05c:	2301      	moveq	r3, #1
 800d05e:	2300      	movne	r3, #0
 800d060:	b2db      	uxtb	r3, r3
 800d062:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00e      	beq.n	800d088 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d06a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d06c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d06e:	4413      	add	r3, r2
 800d070:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d072:	8b7a      	ldrh	r2, [r7, #26]
 800d074:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d076:	429a      	cmp	r2, r3
 800d078:	f0c0 80a0 	bcc.w	800d1bc <ip4_reass+0x2ac>
 800d07c:	8b7b      	ldrh	r3, [r7, #26]
 800d07e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d082:	4293      	cmp	r3, r2
 800d084:	f200 809a 	bhi.w	800d1bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d088:	69fa      	ldr	r2, [r7, #28]
 800d08a:	6879      	ldr	r1, [r7, #4]
 800d08c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d08e:	f7ff fdd5 	bl	800cc3c <ip_reass_chain_frag_into_datagram_and_validate>
 800d092:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d09a:	f000 809b 	beq.w	800d1d4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d09e:	4b48      	ldr	r3, [pc, #288]	; (800d1c0 <ip4_reass+0x2b0>)
 800d0a0:	881a      	ldrh	r2, [r3, #0]
 800d0a2:	8c3b      	ldrh	r3, [r7, #32]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	4b45      	ldr	r3, [pc, #276]	; (800d1c0 <ip4_reass+0x2b0>)
 800d0aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d00d      	beq.n	800d0ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d0b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d0b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0b6:	4413      	add	r3, r2
 800d0b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0bc:	8a7a      	ldrh	r2, [r7, #18]
 800d0be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	7f9b      	ldrb	r3, [r3, #30]
 800d0c4:	f043 0301 	orr.w	r3, r3, #1
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d171      	bne.n	800d1b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d6:	8b9b      	ldrh	r3, [r3, #28]
 800d0d8:	3314      	adds	r3, #20
 800d0da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f0:	3308      	adds	r3, #8
 800d0f2:	2214      	movs	r2, #20
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0f8:	f000 fb4e 	bl	800d798 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d0fc:	8a3b      	ldrh	r3, [r7, #16]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7f6 fe04 	bl	8003d0c <lwip_htons>
 800d104:	4603      	mov	r3, r0
 800d106:	461a      	mov	r2, r3
 800d108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10e:	2200      	movs	r2, #0
 800d110:	719a      	strb	r2, [r3, #6]
 800d112:	2200      	movs	r2, #0
 800d114:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d118:	2200      	movs	r2, #0
 800d11a:	729a      	strb	r2, [r3, #10]
 800d11c:	2200      	movs	r2, #0
 800d11e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d126:	e00d      	b.n	800d144 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d12e:	2114      	movs	r1, #20
 800d130:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d132:	f7f8 f8c3 	bl	80052bc <pbuf_remove_header>
      pbuf_cat(p, r);
 800d136:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f7f8 fa07 	bl	800554c <pbuf_cat>
      r = iprh->next_pbuf;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d146:	2b00      	cmp	r3, #0
 800d148:	d1ee      	bne.n	800d128 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d14a:	4b1e      	ldr	r3, [pc, #120]	; (800d1c4 <ip4_reass+0x2b4>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d150:	429a      	cmp	r2, r3
 800d152:	d102      	bne.n	800d15a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d154:	2300      	movs	r3, #0
 800d156:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d158:	e010      	b.n	800d17c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d15a:	4b1a      	ldr	r3, [pc, #104]	; (800d1c4 <ip4_reass+0x2b4>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d160:	e007      	b.n	800d172 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d168:	429a      	cmp	r2, r3
 800d16a:	d006      	beq.n	800d17a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d174:	2b00      	cmp	r3, #0
 800d176:	d1f4      	bne.n	800d162 <ip4_reass+0x252>
 800d178:	e000      	b.n	800d17c <ip4_reass+0x26c>
          break;
 800d17a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d17c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d17e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d180:	f7ff fd2e 	bl	800cbe0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7f8 f9a7 	bl	80054d8 <pbuf_clen>
 800d18a:	4603      	mov	r3, r0
 800d18c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d18e:	4b0c      	ldr	r3, [pc, #48]	; (800d1c0 <ip4_reass+0x2b0>)
 800d190:	881b      	ldrh	r3, [r3, #0]
 800d192:	8c3a      	ldrh	r2, [r7, #32]
 800d194:	429a      	cmp	r2, r3
 800d196:	d906      	bls.n	800d1a6 <ip4_reass+0x296>
 800d198:	4b0b      	ldr	r3, [pc, #44]	; (800d1c8 <ip4_reass+0x2b8>)
 800d19a:	f240 229b 	movw	r2, #667	; 0x29b
 800d19e:	490b      	ldr	r1, [pc, #44]	; (800d1cc <ip4_reass+0x2bc>)
 800d1a0:	480b      	ldr	r0, [pc, #44]	; (800d1d0 <ip4_reass+0x2c0>)
 800d1a2:	f000 fb0f 	bl	800d7c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d1a6:	4b06      	ldr	r3, [pc, #24]	; (800d1c0 <ip4_reass+0x2b0>)
 800d1a8:	881a      	ldrh	r2, [r3, #0]
 800d1aa:	8c3b      	ldrh	r3, [r7, #32]
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	4b03      	ldr	r3, [pc, #12]	; (800d1c0 <ip4_reass+0x2b0>)
 800d1b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	e038      	b.n	800d22a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	e036      	b.n	800d22a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800d1bc:	bf00      	nop
 800d1be:	e00a      	b.n	800d1d6 <ip4_reass+0x2c6>
 800d1c0:	2000a55c 	.word	0x2000a55c
 800d1c4:	2000a558 	.word	0x2000a558
 800d1c8:	08010fa0 	.word	0x08010fa0
 800d1cc:	08011110 	.word	0x08011110
 800d1d0:	08010fe8 	.word	0x08010fe8
    goto nullreturn_ipr;
 800d1d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d106      	bne.n	800d1ea <ip4_reass+0x2da>
 800d1dc:	4b15      	ldr	r3, [pc, #84]	; (800d234 <ip4_reass+0x324>)
 800d1de:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800d1e2:	4915      	ldr	r1, [pc, #84]	; (800d238 <ip4_reass+0x328>)
 800d1e4:	4815      	ldr	r0, [pc, #84]	; (800d23c <ip4_reass+0x32c>)
 800d1e6:	f000 faed 	bl	800d7c4 <iprintf>
  if (ipr->p == NULL) {
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d116      	bne.n	800d220 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d1f2:	4b13      	ldr	r3, [pc, #76]	; (800d240 <ip4_reass+0x330>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d006      	beq.n	800d20a <ip4_reass+0x2fa>
 800d1fc:	4b0d      	ldr	r3, [pc, #52]	; (800d234 <ip4_reass+0x324>)
 800d1fe:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d202:	4910      	ldr	r1, [pc, #64]	; (800d244 <ip4_reass+0x334>)
 800d204:	480d      	ldr	r0, [pc, #52]	; (800d23c <ip4_reass+0x32c>)
 800d206:	f000 fadd 	bl	800d7c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d20a:	2100      	movs	r1, #0
 800d20c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d20e:	f7ff fce7 	bl	800cbe0 <ip_reass_dequeue_datagram>
 800d212:	e006      	b.n	800d222 <ip4_reass+0x312>
    goto nullreturn;
 800d214:	bf00      	nop
 800d216:	e004      	b.n	800d222 <ip4_reass+0x312>
    goto nullreturn;
 800d218:	bf00      	nop
 800d21a:	e002      	b.n	800d222 <ip4_reass+0x312>
      goto nullreturn;
 800d21c:	bf00      	nop
 800d21e:	e000      	b.n	800d222 <ip4_reass+0x312>
  }

nullreturn:
 800d220:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7f8 f8d0 	bl	80053c8 <pbuf_free>
  return NULL;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3738      	adds	r7, #56	; 0x38
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	08010fa0 	.word	0x08010fa0
 800d238:	0801112c 	.word	0x0801112c
 800d23c:	08010fe8 	.word	0x08010fe8
 800d240:	2000a558 	.word	0x2000a558
 800d244:	08011138 	.word	0x08011138

0800d248 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d24c:	2005      	movs	r0, #5
 800d24e:	f7f7 f9d5 	bl	80045fc <memp_malloc>
 800d252:	4603      	mov	r3, r0
}
 800d254:	4618      	mov	r0, r3
 800d256:	bd80      	pop	{r7, pc}

0800d258 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d106      	bne.n	800d274 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d266:	4b07      	ldr	r3, [pc, #28]	; (800d284 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d268:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800d26c:	4906      	ldr	r1, [pc, #24]	; (800d288 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d26e:	4807      	ldr	r0, [pc, #28]	; (800d28c <ip_frag_free_pbuf_custom_ref+0x34>)
 800d270:	f000 faa8 	bl	800d7c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d274:	6879      	ldr	r1, [r7, #4]
 800d276:	2005      	movs	r0, #5
 800d278:	f7f7 fa30 	bl	80046dc <memp_free>
}
 800d27c:	bf00      	nop
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	08010fa0 	.word	0x08010fa0
 800d288:	08011158 	.word	0x08011158
 800d28c:	08010fe8 	.word	0x08010fe8

0800d290 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d106      	bne.n	800d2b0 <ipfrag_free_pbuf_custom+0x20>
 800d2a2:	4b11      	ldr	r3, [pc, #68]	; (800d2e8 <ipfrag_free_pbuf_custom+0x58>)
 800d2a4:	f240 22ce 	movw	r2, #718	; 0x2ce
 800d2a8:	4910      	ldr	r1, [pc, #64]	; (800d2ec <ipfrag_free_pbuf_custom+0x5c>)
 800d2aa:	4811      	ldr	r0, [pc, #68]	; (800d2f0 <ipfrag_free_pbuf_custom+0x60>)
 800d2ac:	f000 fa8a 	bl	800d7c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800d2b0:	68fa      	ldr	r2, [r7, #12]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d006      	beq.n	800d2c6 <ipfrag_free_pbuf_custom+0x36>
 800d2b8:	4b0b      	ldr	r3, [pc, #44]	; (800d2e8 <ipfrag_free_pbuf_custom+0x58>)
 800d2ba:	f240 22cf 	movw	r2, #719	; 0x2cf
 800d2be:	490d      	ldr	r1, [pc, #52]	; (800d2f4 <ipfrag_free_pbuf_custom+0x64>)
 800d2c0:	480b      	ldr	r0, [pc, #44]	; (800d2f0 <ipfrag_free_pbuf_custom+0x60>)
 800d2c2:	f000 fa7f 	bl	800d7c4 <iprintf>
  if (pcr->original != NULL) {
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	695b      	ldr	r3, [r3, #20]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d004      	beq.n	800d2d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7f8 f878 	bl	80053c8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f7ff ffbd 	bl	800d258 <ip_frag_free_pbuf_custom_ref>
}
 800d2de:	bf00      	nop
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	08010fa0 	.word	0x08010fa0
 800d2ec:	08011164 	.word	0x08011164
 800d2f0:	08010fe8 	.word	0x08010fe8
 800d2f4:	08011170 	.word	0x08011170

0800d2f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b094      	sub	sp, #80	; 0x50
 800d2fc:	af02      	add	r7, sp, #8
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d304:	2300      	movs	r3, #0
 800d306:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d30e:	3b14      	subs	r3, #20
 800d310:	2b00      	cmp	r3, #0
 800d312:	da00      	bge.n	800d316 <ip4_frag+0x1e>
 800d314:	3307      	adds	r3, #7
 800d316:	10db      	asrs	r3, r3, #3
 800d318:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d31a:	2314      	movs	r3, #20
 800d31c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800d324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d326:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	f003 030f 	and.w	r3, r3, #15
 800d330:	b2db      	uxtb	r3, r3
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	b2db      	uxtb	r3, r3
 800d336:	2b14      	cmp	r3, #20
 800d338:	d002      	beq.n	800d340 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800d33a:	f06f 0305 	mvn.w	r3, #5
 800d33e:	e110      	b.n	800d562 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	895b      	ldrh	r3, [r3, #10]
 800d344:	2b13      	cmp	r3, #19
 800d346:	d809      	bhi.n	800d35c <ip4_frag+0x64>
 800d348:	4b88      	ldr	r3, [pc, #544]	; (800d56c <ip4_frag+0x274>)
 800d34a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800d34e:	4988      	ldr	r1, [pc, #544]	; (800d570 <ip4_frag+0x278>)
 800d350:	4888      	ldr	r0, [pc, #544]	; (800d574 <ip4_frag+0x27c>)
 800d352:	f000 fa37 	bl	800d7c4 <iprintf>
 800d356:	f06f 0305 	mvn.w	r3, #5
 800d35a:	e102      	b.n	800d562 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35e:	88db      	ldrh	r3, [r3, #6]
 800d360:	b29b      	uxth	r3, r3
 800d362:	4618      	mov	r0, r3
 800d364:	f7f6 fcd2 	bl	8003d0c <lwip_htons>
 800d368:	4603      	mov	r3, r0
 800d36a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800d36c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d36e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d372:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800d376:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d37c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	891b      	ldrh	r3, [r3, #8]
 800d382:	3b14      	subs	r3, #20
 800d384:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800d388:	e0e1      	b.n	800d54e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d38a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d38c:	00db      	lsls	r3, r3, #3
 800d38e:	b29b      	uxth	r3, r3
 800d390:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d394:	4293      	cmp	r3, r2
 800d396:	bf28      	it	cs
 800d398:	4613      	movcs	r3, r2
 800d39a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d39c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d3a0:	2114      	movs	r1, #20
 800d3a2:	200e      	movs	r0, #14
 800d3a4:	f7f7 fd2c 	bl	8004e00 <pbuf_alloc>
 800d3a8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 80d5 	beq.w	800d55c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b4:	895b      	ldrh	r3, [r3, #10]
 800d3b6:	2b13      	cmp	r3, #19
 800d3b8:	d806      	bhi.n	800d3c8 <ip4_frag+0xd0>
 800d3ba:	4b6c      	ldr	r3, [pc, #432]	; (800d56c <ip4_frag+0x274>)
 800d3bc:	f44f 7249 	mov.w	r2, #804	; 0x324
 800d3c0:	496d      	ldr	r1, [pc, #436]	; (800d578 <ip4_frag+0x280>)
 800d3c2:	486c      	ldr	r0, [pc, #432]	; (800d574 <ip4_frag+0x27c>)
 800d3c4:	f000 f9fe 	bl	800d7c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	2214      	movs	r2, #20
 800d3ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f000 f9e1 	bl	800d798 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800d3dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d3de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800d3e2:	e064      	b.n	800d4ae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	895a      	ldrh	r2, [r3, #10]
 800d3e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	895b      	ldrh	r3, [r3, #10]
 800d3f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d906      	bls.n	800d406 <ip4_frag+0x10e>
 800d3f8:	4b5c      	ldr	r3, [pc, #368]	; (800d56c <ip4_frag+0x274>)
 800d3fa:	f240 322d 	movw	r2, #813	; 0x32d
 800d3fe:	495f      	ldr	r1, [pc, #380]	; (800d57c <ip4_frag+0x284>)
 800d400:	485c      	ldr	r0, [pc, #368]	; (800d574 <ip4_frag+0x27c>)
 800d402:	f000 f9df 	bl	800d7c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d406:	8bfa      	ldrh	r2, [r7, #30]
 800d408:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d40c:	4293      	cmp	r3, r2
 800d40e:	bf28      	it	cs
 800d410:	4613      	movcs	r3, r2
 800d412:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d416:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d105      	bne.n	800d42a <ip4_frag+0x132>
        poff = 0;
 800d41e:	2300      	movs	r3, #0
 800d420:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	60fb      	str	r3, [r7, #12]
        continue;
 800d428:	e041      	b.n	800d4ae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d42a:	f7ff ff0d 	bl	800d248 <ip_frag_alloc_pbuf_custom_ref>
 800d42e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d103      	bne.n	800d43e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800d436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d438:	f7f7 ffc6 	bl	80053c8 <pbuf_free>
        goto memerr;
 800d43c:	e08f      	b.n	800d55e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d43e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d444:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d446:	4413      	add	r3, r2
 800d448:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800d44c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d450:	9201      	str	r2, [sp, #4]
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	4603      	mov	r3, r0
 800d456:	2241      	movs	r2, #65	; 0x41
 800d458:	2000      	movs	r0, #0
 800d45a:	f7f7 fdfb 	bl	8005054 <pbuf_alloced_custom>
 800d45e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d106      	bne.n	800d474 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d466:	69b8      	ldr	r0, [r7, #24]
 800d468:	f7ff fef6 	bl	800d258 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d46c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d46e:	f7f7 ffab 	bl	80053c8 <pbuf_free>
        goto memerr;
 800d472:	e074      	b.n	800d55e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f7f8 f847 	bl	8005508 <pbuf_ref>
      pcr->original = p;
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	68fa      	ldr	r2, [r7, #12]
 800d47e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	4a3f      	ldr	r2, [pc, #252]	; (800d580 <ip4_frag+0x288>)
 800d484:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d486:	6979      	ldr	r1, [r7, #20]
 800d488:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d48a:	f7f8 f85f 	bl	800554c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d48e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800d492:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800d49c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d004      	beq.n	800d4ae <ip4_frag+0x1b6>
        poff = 0;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d4ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d196      	bne.n	800d3e4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800d4b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d4b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d4bc:	4413      	add	r3, r2
 800d4be:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d4c4:	f1a3 0213 	sub.w	r2, r3, #19
 800d4c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	bfcc      	ite	gt
 800d4d0:	2301      	movgt	r3, #1
 800d4d2:	2300      	movle	r3, #0
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d4d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d4dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <ip4_frag+0x1f6>
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d003      	beq.n	800d4f6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d4ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d4f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d4f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d4f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7f6 fc07 	bl	8003d0c <lwip_htons>
 800d4fe:	4603      	mov	r3, r0
 800d500:	461a      	mov	r2, r3
 800d502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d504:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d506:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d508:	3314      	adds	r3, #20
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7f6 fbfd 	bl	8003d0c <lwip_htons>
 800d512:	4603      	mov	r3, r0
 800d514:	461a      	mov	r2, r3
 800d516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d518:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51c:	2200      	movs	r2, #0
 800d51e:	729a      	strb	r2, [r3, #10]
 800d520:	2200      	movs	r2, #0
 800d522:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	695b      	ldr	r3, [r3, #20]
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d52c:	68b8      	ldr	r0, [r7, #8]
 800d52e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d532:	f7f7 ff49 	bl	80053c8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d536:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d53a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d53c:	1ad3      	subs	r3, r2, r3
 800d53e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800d542:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d546:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d548:	4413      	add	r3, r2
 800d54a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800d54e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d552:	2b00      	cmp	r3, #0
 800d554:	f47f af19 	bne.w	800d38a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d558:	2300      	movs	r3, #0
 800d55a:	e002      	b.n	800d562 <ip4_frag+0x26a>
      goto memerr;
 800d55c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d55e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d562:	4618      	mov	r0, r3
 800d564:	3748      	adds	r7, #72	; 0x48
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	08010fa0 	.word	0x08010fa0
 800d570:	0801117c 	.word	0x0801117c
 800d574:	08010fe8 	.word	0x08010fe8
 800d578:	08011198 	.word	0x08011198
 800d57c:	080111b8 	.word	0x080111b8
 800d580:	0800d291 	.word	0x0800d291

0800d584 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d58e:	230e      	movs	r3, #14
 800d590:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	895b      	ldrh	r3, [r3, #10]
 800d596:	2b0e      	cmp	r3, #14
 800d598:	d96e      	bls.n	800d678 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	7bdb      	ldrb	r3, [r3, #15]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d106      	bne.n	800d5b0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	7b1a      	ldrb	r2, [r3, #12]
 800d5ba:	7b5b      	ldrb	r3, [r3, #13]
 800d5bc:	021b      	lsls	r3, r3, #8
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	f003 0301 	and.w	r3, r3, #1
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d023      	beq.n	800d616 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d10f      	bne.n	800d5f6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	785b      	ldrb	r3, [r3, #1]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d11b      	bne.n	800d616 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d5e2:	2b5e      	cmp	r3, #94	; 0x5e
 800d5e4:	d117      	bne.n	800d616 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	7b5b      	ldrb	r3, [r3, #13]
 800d5ea:	f043 0310 	orr.w	r3, r3, #16
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	735a      	strb	r2, [r3, #13]
 800d5f4:	e00f      	b.n	800d616 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	2206      	movs	r2, #6
 800d5fa:	4928      	ldr	r1, [pc, #160]	; (800d69c <ethernet_input+0x118>)
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f000 f8bb 	bl	800d778 <memcmp>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d106      	bne.n	800d616 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	7b5b      	ldrb	r3, [r3, #13]
 800d60c:	f043 0308 	orr.w	r3, r3, #8
 800d610:	b2da      	uxtb	r2, r3
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d616:	89fb      	ldrh	r3, [r7, #14]
 800d618:	2b08      	cmp	r3, #8
 800d61a:	d003      	beq.n	800d624 <ethernet_input+0xa0>
 800d61c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d620:	d014      	beq.n	800d64c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d622:	e032      	b.n	800d68a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d62a:	f003 0308 	and.w	r3, r3, #8
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d024      	beq.n	800d67c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d632:	8afb      	ldrh	r3, [r7, #22]
 800d634:	4619      	mov	r1, r3
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f7f7 fe40 	bl	80052bc <pbuf_remove_header>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d11e      	bne.n	800d680 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d642:	6839      	ldr	r1, [r7, #0]
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7fe ff21 	bl	800c48c <ip4_input>
      break;
 800d64a:	e013      	b.n	800d674 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d652:	f003 0308 	and.w	r3, r3, #8
 800d656:	2b00      	cmp	r3, #0
 800d658:	d014      	beq.n	800d684 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d65a:	8afb      	ldrh	r3, [r7, #22]
 800d65c:	4619      	mov	r1, r3
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7f7 fe2c 	bl	80052bc <pbuf_remove_header>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d10e      	bne.n	800d688 <ethernet_input+0x104>
        etharp_input(p, netif);
 800d66a:	6839      	ldr	r1, [r7, #0]
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f7fe f8c1 	bl	800b7f4 <etharp_input>
      break;
 800d672:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	e00c      	b.n	800d692 <ethernet_input+0x10e>
    goto free_and_return;
 800d678:	bf00      	nop
 800d67a:	e006      	b.n	800d68a <ethernet_input+0x106>
        goto free_and_return;
 800d67c:	bf00      	nop
 800d67e:	e004      	b.n	800d68a <ethernet_input+0x106>
        goto free_and_return;
 800d680:	bf00      	nop
 800d682:	e002      	b.n	800d68a <ethernet_input+0x106>
        goto free_and_return;
 800d684:	bf00      	nop
 800d686:	e000      	b.n	800d68a <ethernet_input+0x106>
        goto free_and_return;
 800d688:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7f7 fe9c 	bl	80053c8 <pbuf_free>
  return ERR_OK;
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	3718      	adds	r7, #24
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	0801134c 	.word	0x0801134c

0800d6a0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b086      	sub	sp, #24
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	607a      	str	r2, [r7, #4]
 800d6ac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d6ae:	8c3b      	ldrh	r3, [r7, #32]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7f6 fb2b 	bl	8003d0c <lwip_htons>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d6ba:	210e      	movs	r1, #14
 800d6bc:	68b8      	ldr	r0, [r7, #8]
 800d6be:	f7f7 fded 	bl	800529c <pbuf_add_header>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d125      	bne.n	800d714 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	8afa      	ldrh	r2, [r7, #22]
 800d6d2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	2206      	movs	r2, #6
 800d6d8:	6839      	ldr	r1, [r7, #0]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f000 f85c 	bl	800d798 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	3306      	adds	r3, #6
 800d6e4:	2206      	movs	r2, #6
 800d6e6:	6879      	ldr	r1, [r7, #4]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f000 f855 	bl	800d798 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6f4:	2b06      	cmp	r3, #6
 800d6f6:	d006      	beq.n	800d706 <ethernet_output+0x66>
 800d6f8:	4b0a      	ldr	r3, [pc, #40]	; (800d724 <ethernet_output+0x84>)
 800d6fa:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d6fe:	490a      	ldr	r1, [pc, #40]	; (800d728 <ethernet_output+0x88>)
 800d700:	480a      	ldr	r0, [pc, #40]	; (800d72c <ethernet_output+0x8c>)
 800d702:	f000 f85f 	bl	800d7c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	699b      	ldr	r3, [r3, #24]
 800d70a:	68b9      	ldr	r1, [r7, #8]
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	4798      	blx	r3
 800d710:	4603      	mov	r3, r0
 800d712:	e002      	b.n	800d71a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d714:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d716:	f06f 0301 	mvn.w	r3, #1
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3718      	adds	r7, #24
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	080111c8 	.word	0x080111c8
 800d728:	08011200 	.word	0x08011200
 800d72c:	08011234 	.word	0x08011234

0800d730 <__libc_init_array>:
 800d730:	b570      	push	{r4, r5, r6, lr}
 800d732:	4d0d      	ldr	r5, [pc, #52]	; (800d768 <__libc_init_array+0x38>)
 800d734:	4c0d      	ldr	r4, [pc, #52]	; (800d76c <__libc_init_array+0x3c>)
 800d736:	1b64      	subs	r4, r4, r5
 800d738:	10a4      	asrs	r4, r4, #2
 800d73a:	2600      	movs	r6, #0
 800d73c:	42a6      	cmp	r6, r4
 800d73e:	d109      	bne.n	800d754 <__libc_init_array+0x24>
 800d740:	4d0b      	ldr	r5, [pc, #44]	; (800d770 <__libc_init_array+0x40>)
 800d742:	4c0c      	ldr	r4, [pc, #48]	; (800d774 <__libc_init_array+0x44>)
 800d744:	f001 f88e 	bl	800e864 <_init>
 800d748:	1b64      	subs	r4, r4, r5
 800d74a:	10a4      	asrs	r4, r4, #2
 800d74c:	2600      	movs	r6, #0
 800d74e:	42a6      	cmp	r6, r4
 800d750:	d105      	bne.n	800d75e <__libc_init_array+0x2e>
 800d752:	bd70      	pop	{r4, r5, r6, pc}
 800d754:	f855 3b04 	ldr.w	r3, [r5], #4
 800d758:	4798      	blx	r3
 800d75a:	3601      	adds	r6, #1
 800d75c:	e7ee      	b.n	800d73c <__libc_init_array+0xc>
 800d75e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d762:	4798      	blx	r3
 800d764:	3601      	adds	r6, #1
 800d766:	e7f2      	b.n	800d74e <__libc_init_array+0x1e>
 800d768:	080114ac 	.word	0x080114ac
 800d76c:	080114ac 	.word	0x080114ac
 800d770:	080114ac 	.word	0x080114ac
 800d774:	080114b0 	.word	0x080114b0

0800d778 <memcmp>:
 800d778:	b510      	push	{r4, lr}
 800d77a:	3901      	subs	r1, #1
 800d77c:	4402      	add	r2, r0
 800d77e:	4290      	cmp	r0, r2
 800d780:	d101      	bne.n	800d786 <memcmp+0xe>
 800d782:	2000      	movs	r0, #0
 800d784:	e005      	b.n	800d792 <memcmp+0x1a>
 800d786:	7803      	ldrb	r3, [r0, #0]
 800d788:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d78c:	42a3      	cmp	r3, r4
 800d78e:	d001      	beq.n	800d794 <memcmp+0x1c>
 800d790:	1b18      	subs	r0, r3, r4
 800d792:	bd10      	pop	{r4, pc}
 800d794:	3001      	adds	r0, #1
 800d796:	e7f2      	b.n	800d77e <memcmp+0x6>

0800d798 <memcpy>:
 800d798:	440a      	add	r2, r1
 800d79a:	4291      	cmp	r1, r2
 800d79c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7a0:	d100      	bne.n	800d7a4 <memcpy+0xc>
 800d7a2:	4770      	bx	lr
 800d7a4:	b510      	push	{r4, lr}
 800d7a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7ae:	4291      	cmp	r1, r2
 800d7b0:	d1f9      	bne.n	800d7a6 <memcpy+0xe>
 800d7b2:	bd10      	pop	{r4, pc}

0800d7b4 <memset>:
 800d7b4:	4402      	add	r2, r0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d100      	bne.n	800d7be <memset+0xa>
 800d7bc:	4770      	bx	lr
 800d7be:	f803 1b01 	strb.w	r1, [r3], #1
 800d7c2:	e7f9      	b.n	800d7b8 <memset+0x4>

0800d7c4 <iprintf>:
 800d7c4:	b40f      	push	{r0, r1, r2, r3}
 800d7c6:	4b0a      	ldr	r3, [pc, #40]	; (800d7f0 <iprintf+0x2c>)
 800d7c8:	b513      	push	{r0, r1, r4, lr}
 800d7ca:	681c      	ldr	r4, [r3, #0]
 800d7cc:	b124      	cbz	r4, 800d7d8 <iprintf+0x14>
 800d7ce:	69a3      	ldr	r3, [r4, #24]
 800d7d0:	b913      	cbnz	r3, 800d7d8 <iprintf+0x14>
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f000 f8c2 	bl	800d95c <__sinit>
 800d7d8:	ab05      	add	r3, sp, #20
 800d7da:	9a04      	ldr	r2, [sp, #16]
 800d7dc:	68a1      	ldr	r1, [r4, #8]
 800d7de:	9301      	str	r3, [sp, #4]
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f000 fa7f 	bl	800dce4 <_vfiprintf_r>
 800d7e6:	b002      	add	sp, #8
 800d7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ec:	b004      	add	sp, #16
 800d7ee:	4770      	bx	lr
 800d7f0:	2000002c 	.word	0x2000002c

0800d7f4 <rand>:
 800d7f4:	4b16      	ldr	r3, [pc, #88]	; (800d850 <rand+0x5c>)
 800d7f6:	b510      	push	{r4, lr}
 800d7f8:	681c      	ldr	r4, [r3, #0]
 800d7fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d7fc:	b9b3      	cbnz	r3, 800d82c <rand+0x38>
 800d7fe:	2018      	movs	r0, #24
 800d800:	f000 f95e 	bl	800dac0 <malloc>
 800d804:	63a0      	str	r0, [r4, #56]	; 0x38
 800d806:	b928      	cbnz	r0, 800d814 <rand+0x20>
 800d808:	4602      	mov	r2, r0
 800d80a:	4b12      	ldr	r3, [pc, #72]	; (800d854 <rand+0x60>)
 800d80c:	4812      	ldr	r0, [pc, #72]	; (800d858 <rand+0x64>)
 800d80e:	214e      	movs	r1, #78	; 0x4e
 800d810:	f000 f82e 	bl	800d870 <__assert_func>
 800d814:	4a11      	ldr	r2, [pc, #68]	; (800d85c <rand+0x68>)
 800d816:	4b12      	ldr	r3, [pc, #72]	; (800d860 <rand+0x6c>)
 800d818:	e9c0 2300 	strd	r2, r3, [r0]
 800d81c:	4b11      	ldr	r3, [pc, #68]	; (800d864 <rand+0x70>)
 800d81e:	6083      	str	r3, [r0, #8]
 800d820:	230b      	movs	r3, #11
 800d822:	8183      	strh	r3, [r0, #12]
 800d824:	2201      	movs	r2, #1
 800d826:	2300      	movs	r3, #0
 800d828:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d82c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800d82e:	4a0e      	ldr	r2, [pc, #56]	; (800d868 <rand+0x74>)
 800d830:	6920      	ldr	r0, [r4, #16]
 800d832:	6963      	ldr	r3, [r4, #20]
 800d834:	490d      	ldr	r1, [pc, #52]	; (800d86c <rand+0x78>)
 800d836:	4342      	muls	r2, r0
 800d838:	fb01 2203 	mla	r2, r1, r3, r2
 800d83c:	fba0 0101 	umull	r0, r1, r0, r1
 800d840:	1c43      	adds	r3, r0, #1
 800d842:	eb42 0001 	adc.w	r0, r2, r1
 800d846:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800d84a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d84e:	bd10      	pop	{r4, pc}
 800d850:	2000002c 	.word	0x2000002c
 800d854:	08011360 	.word	0x08011360
 800d858:	08011377 	.word	0x08011377
 800d85c:	abcd330e 	.word	0xabcd330e
 800d860:	e66d1234 	.word	0xe66d1234
 800d864:	0005deec 	.word	0x0005deec
 800d868:	5851f42d 	.word	0x5851f42d
 800d86c:	4c957f2d 	.word	0x4c957f2d

0800d870 <__assert_func>:
 800d870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d872:	4614      	mov	r4, r2
 800d874:	461a      	mov	r2, r3
 800d876:	4b09      	ldr	r3, [pc, #36]	; (800d89c <__assert_func+0x2c>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4605      	mov	r5, r0
 800d87c:	68d8      	ldr	r0, [r3, #12]
 800d87e:	b14c      	cbz	r4, 800d894 <__assert_func+0x24>
 800d880:	4b07      	ldr	r3, [pc, #28]	; (800d8a0 <__assert_func+0x30>)
 800d882:	9100      	str	r1, [sp, #0]
 800d884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d888:	4906      	ldr	r1, [pc, #24]	; (800d8a4 <__assert_func+0x34>)
 800d88a:	462b      	mov	r3, r5
 800d88c:	f000 f8e4 	bl	800da58 <fiprintf>
 800d890:	f000 fe12 	bl	800e4b8 <abort>
 800d894:	4b04      	ldr	r3, [pc, #16]	; (800d8a8 <__assert_func+0x38>)
 800d896:	461c      	mov	r4, r3
 800d898:	e7f3      	b.n	800d882 <__assert_func+0x12>
 800d89a:	bf00      	nop
 800d89c:	2000002c 	.word	0x2000002c
 800d8a0:	080113d2 	.word	0x080113d2
 800d8a4:	080113df 	.word	0x080113df
 800d8a8:	0801140d 	.word	0x0801140d

0800d8ac <std>:
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	b510      	push	{r4, lr}
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	e9c0 3300 	strd	r3, r3, [r0]
 800d8b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d8ba:	6083      	str	r3, [r0, #8]
 800d8bc:	8181      	strh	r1, [r0, #12]
 800d8be:	6643      	str	r3, [r0, #100]	; 0x64
 800d8c0:	81c2      	strh	r2, [r0, #14]
 800d8c2:	6183      	str	r3, [r0, #24]
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	2208      	movs	r2, #8
 800d8c8:	305c      	adds	r0, #92	; 0x5c
 800d8ca:	f7ff ff73 	bl	800d7b4 <memset>
 800d8ce:	4b05      	ldr	r3, [pc, #20]	; (800d8e4 <std+0x38>)
 800d8d0:	6263      	str	r3, [r4, #36]	; 0x24
 800d8d2:	4b05      	ldr	r3, [pc, #20]	; (800d8e8 <std+0x3c>)
 800d8d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8d6:	4b05      	ldr	r3, [pc, #20]	; (800d8ec <std+0x40>)
 800d8d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8da:	4b05      	ldr	r3, [pc, #20]	; (800d8f0 <std+0x44>)
 800d8dc:	6224      	str	r4, [r4, #32]
 800d8de:	6323      	str	r3, [r4, #48]	; 0x30
 800d8e0:	bd10      	pop	{r4, pc}
 800d8e2:	bf00      	nop
 800d8e4:	0800e28d 	.word	0x0800e28d
 800d8e8:	0800e2af 	.word	0x0800e2af
 800d8ec:	0800e2e7 	.word	0x0800e2e7
 800d8f0:	0800e30b 	.word	0x0800e30b

0800d8f4 <_cleanup_r>:
 800d8f4:	4901      	ldr	r1, [pc, #4]	; (800d8fc <_cleanup_r+0x8>)
 800d8f6:	f000 b8c1 	b.w	800da7c <_fwalk_reent>
 800d8fa:	bf00      	nop
 800d8fc:	0800e5f5 	.word	0x0800e5f5

0800d900 <__sfmoreglue>:
 800d900:	b570      	push	{r4, r5, r6, lr}
 800d902:	2268      	movs	r2, #104	; 0x68
 800d904:	1e4d      	subs	r5, r1, #1
 800d906:	4355      	muls	r5, r2
 800d908:	460e      	mov	r6, r1
 800d90a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d90e:	f000 f94b 	bl	800dba8 <_malloc_r>
 800d912:	4604      	mov	r4, r0
 800d914:	b140      	cbz	r0, 800d928 <__sfmoreglue+0x28>
 800d916:	2100      	movs	r1, #0
 800d918:	e9c0 1600 	strd	r1, r6, [r0]
 800d91c:	300c      	adds	r0, #12
 800d91e:	60a0      	str	r0, [r4, #8]
 800d920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d924:	f7ff ff46 	bl	800d7b4 <memset>
 800d928:	4620      	mov	r0, r4
 800d92a:	bd70      	pop	{r4, r5, r6, pc}

0800d92c <__sfp_lock_acquire>:
 800d92c:	4801      	ldr	r0, [pc, #4]	; (800d934 <__sfp_lock_acquire+0x8>)
 800d92e:	f000 b8c5 	b.w	800dabc <__retarget_lock_acquire_recursive>
 800d932:	bf00      	nop
 800d934:	2000a565 	.word	0x2000a565

0800d938 <__sfp_lock_release>:
 800d938:	4801      	ldr	r0, [pc, #4]	; (800d940 <__sfp_lock_release+0x8>)
 800d93a:	f000 b8c0 	b.w	800dabe <__retarget_lock_release_recursive>
 800d93e:	bf00      	nop
 800d940:	2000a565 	.word	0x2000a565

0800d944 <__sinit_lock_acquire>:
 800d944:	4801      	ldr	r0, [pc, #4]	; (800d94c <__sinit_lock_acquire+0x8>)
 800d946:	f000 b8b9 	b.w	800dabc <__retarget_lock_acquire_recursive>
 800d94a:	bf00      	nop
 800d94c:	2000a566 	.word	0x2000a566

0800d950 <__sinit_lock_release>:
 800d950:	4801      	ldr	r0, [pc, #4]	; (800d958 <__sinit_lock_release+0x8>)
 800d952:	f000 b8b4 	b.w	800dabe <__retarget_lock_release_recursive>
 800d956:	bf00      	nop
 800d958:	2000a566 	.word	0x2000a566

0800d95c <__sinit>:
 800d95c:	b510      	push	{r4, lr}
 800d95e:	4604      	mov	r4, r0
 800d960:	f7ff fff0 	bl	800d944 <__sinit_lock_acquire>
 800d964:	69a3      	ldr	r3, [r4, #24]
 800d966:	b11b      	cbz	r3, 800d970 <__sinit+0x14>
 800d968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d96c:	f7ff bff0 	b.w	800d950 <__sinit_lock_release>
 800d970:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d974:	6523      	str	r3, [r4, #80]	; 0x50
 800d976:	4b13      	ldr	r3, [pc, #76]	; (800d9c4 <__sinit+0x68>)
 800d978:	4a13      	ldr	r2, [pc, #76]	; (800d9c8 <__sinit+0x6c>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d97e:	42a3      	cmp	r3, r4
 800d980:	bf04      	itt	eq
 800d982:	2301      	moveq	r3, #1
 800d984:	61a3      	streq	r3, [r4, #24]
 800d986:	4620      	mov	r0, r4
 800d988:	f000 f820 	bl	800d9cc <__sfp>
 800d98c:	6060      	str	r0, [r4, #4]
 800d98e:	4620      	mov	r0, r4
 800d990:	f000 f81c 	bl	800d9cc <__sfp>
 800d994:	60a0      	str	r0, [r4, #8]
 800d996:	4620      	mov	r0, r4
 800d998:	f000 f818 	bl	800d9cc <__sfp>
 800d99c:	2200      	movs	r2, #0
 800d99e:	60e0      	str	r0, [r4, #12]
 800d9a0:	2104      	movs	r1, #4
 800d9a2:	6860      	ldr	r0, [r4, #4]
 800d9a4:	f7ff ff82 	bl	800d8ac <std>
 800d9a8:	68a0      	ldr	r0, [r4, #8]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	2109      	movs	r1, #9
 800d9ae:	f7ff ff7d 	bl	800d8ac <std>
 800d9b2:	68e0      	ldr	r0, [r4, #12]
 800d9b4:	2202      	movs	r2, #2
 800d9b6:	2112      	movs	r1, #18
 800d9b8:	f7ff ff78 	bl	800d8ac <std>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	61a3      	str	r3, [r4, #24]
 800d9c0:	e7d2      	b.n	800d968 <__sinit+0xc>
 800d9c2:	bf00      	nop
 800d9c4:	0801135c 	.word	0x0801135c
 800d9c8:	0800d8f5 	.word	0x0800d8f5

0800d9cc <__sfp>:
 800d9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ce:	4607      	mov	r7, r0
 800d9d0:	f7ff ffac 	bl	800d92c <__sfp_lock_acquire>
 800d9d4:	4b1e      	ldr	r3, [pc, #120]	; (800da50 <__sfp+0x84>)
 800d9d6:	681e      	ldr	r6, [r3, #0]
 800d9d8:	69b3      	ldr	r3, [r6, #24]
 800d9da:	b913      	cbnz	r3, 800d9e2 <__sfp+0x16>
 800d9dc:	4630      	mov	r0, r6
 800d9de:	f7ff ffbd 	bl	800d95c <__sinit>
 800d9e2:	3648      	adds	r6, #72	; 0x48
 800d9e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	d503      	bpl.n	800d9f4 <__sfp+0x28>
 800d9ec:	6833      	ldr	r3, [r6, #0]
 800d9ee:	b30b      	cbz	r3, 800da34 <__sfp+0x68>
 800d9f0:	6836      	ldr	r6, [r6, #0]
 800d9f2:	e7f7      	b.n	800d9e4 <__sfp+0x18>
 800d9f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d9f8:	b9d5      	cbnz	r5, 800da30 <__sfp+0x64>
 800d9fa:	4b16      	ldr	r3, [pc, #88]	; (800da54 <__sfp+0x88>)
 800d9fc:	60e3      	str	r3, [r4, #12]
 800d9fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800da02:	6665      	str	r5, [r4, #100]	; 0x64
 800da04:	f000 f859 	bl	800daba <__retarget_lock_init_recursive>
 800da08:	f7ff ff96 	bl	800d938 <__sfp_lock_release>
 800da0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800da10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800da14:	6025      	str	r5, [r4, #0]
 800da16:	61a5      	str	r5, [r4, #24]
 800da18:	2208      	movs	r2, #8
 800da1a:	4629      	mov	r1, r5
 800da1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800da20:	f7ff fec8 	bl	800d7b4 <memset>
 800da24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800da28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800da2c:	4620      	mov	r0, r4
 800da2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da30:	3468      	adds	r4, #104	; 0x68
 800da32:	e7d9      	b.n	800d9e8 <__sfp+0x1c>
 800da34:	2104      	movs	r1, #4
 800da36:	4638      	mov	r0, r7
 800da38:	f7ff ff62 	bl	800d900 <__sfmoreglue>
 800da3c:	4604      	mov	r4, r0
 800da3e:	6030      	str	r0, [r6, #0]
 800da40:	2800      	cmp	r0, #0
 800da42:	d1d5      	bne.n	800d9f0 <__sfp+0x24>
 800da44:	f7ff ff78 	bl	800d938 <__sfp_lock_release>
 800da48:	230c      	movs	r3, #12
 800da4a:	603b      	str	r3, [r7, #0]
 800da4c:	e7ee      	b.n	800da2c <__sfp+0x60>
 800da4e:	bf00      	nop
 800da50:	0801135c 	.word	0x0801135c
 800da54:	ffff0001 	.word	0xffff0001

0800da58 <fiprintf>:
 800da58:	b40e      	push	{r1, r2, r3}
 800da5a:	b503      	push	{r0, r1, lr}
 800da5c:	4601      	mov	r1, r0
 800da5e:	ab03      	add	r3, sp, #12
 800da60:	4805      	ldr	r0, [pc, #20]	; (800da78 <fiprintf+0x20>)
 800da62:	f853 2b04 	ldr.w	r2, [r3], #4
 800da66:	6800      	ldr	r0, [r0, #0]
 800da68:	9301      	str	r3, [sp, #4]
 800da6a:	f000 f93b 	bl	800dce4 <_vfiprintf_r>
 800da6e:	b002      	add	sp, #8
 800da70:	f85d eb04 	ldr.w	lr, [sp], #4
 800da74:	b003      	add	sp, #12
 800da76:	4770      	bx	lr
 800da78:	2000002c 	.word	0x2000002c

0800da7c <_fwalk_reent>:
 800da7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da80:	4606      	mov	r6, r0
 800da82:	4688      	mov	r8, r1
 800da84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800da88:	2700      	movs	r7, #0
 800da8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da8e:	f1b9 0901 	subs.w	r9, r9, #1
 800da92:	d505      	bpl.n	800daa0 <_fwalk_reent+0x24>
 800da94:	6824      	ldr	r4, [r4, #0]
 800da96:	2c00      	cmp	r4, #0
 800da98:	d1f7      	bne.n	800da8a <_fwalk_reent+0xe>
 800da9a:	4638      	mov	r0, r7
 800da9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daa0:	89ab      	ldrh	r3, [r5, #12]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d907      	bls.n	800dab6 <_fwalk_reent+0x3a>
 800daa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800daaa:	3301      	adds	r3, #1
 800daac:	d003      	beq.n	800dab6 <_fwalk_reent+0x3a>
 800daae:	4629      	mov	r1, r5
 800dab0:	4630      	mov	r0, r6
 800dab2:	47c0      	blx	r8
 800dab4:	4307      	orrs	r7, r0
 800dab6:	3568      	adds	r5, #104	; 0x68
 800dab8:	e7e9      	b.n	800da8e <_fwalk_reent+0x12>

0800daba <__retarget_lock_init_recursive>:
 800daba:	4770      	bx	lr

0800dabc <__retarget_lock_acquire_recursive>:
 800dabc:	4770      	bx	lr

0800dabe <__retarget_lock_release_recursive>:
 800dabe:	4770      	bx	lr

0800dac0 <malloc>:
 800dac0:	4b02      	ldr	r3, [pc, #8]	; (800dacc <malloc+0xc>)
 800dac2:	4601      	mov	r1, r0
 800dac4:	6818      	ldr	r0, [r3, #0]
 800dac6:	f000 b86f 	b.w	800dba8 <_malloc_r>
 800daca:	bf00      	nop
 800dacc:	2000002c 	.word	0x2000002c

0800dad0 <_free_r>:
 800dad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dad2:	2900      	cmp	r1, #0
 800dad4:	d044      	beq.n	800db60 <_free_r+0x90>
 800dad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dada:	9001      	str	r0, [sp, #4]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f1a1 0404 	sub.w	r4, r1, #4
 800dae2:	bfb8      	it	lt
 800dae4:	18e4      	addlt	r4, r4, r3
 800dae6:	f000 fe39 	bl	800e75c <__malloc_lock>
 800daea:	4a1e      	ldr	r2, [pc, #120]	; (800db64 <_free_r+0x94>)
 800daec:	9801      	ldr	r0, [sp, #4]
 800daee:	6813      	ldr	r3, [r2, #0]
 800daf0:	b933      	cbnz	r3, 800db00 <_free_r+0x30>
 800daf2:	6063      	str	r3, [r4, #4]
 800daf4:	6014      	str	r4, [r2, #0]
 800daf6:	b003      	add	sp, #12
 800daf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dafc:	f000 be34 	b.w	800e768 <__malloc_unlock>
 800db00:	42a3      	cmp	r3, r4
 800db02:	d908      	bls.n	800db16 <_free_r+0x46>
 800db04:	6825      	ldr	r5, [r4, #0]
 800db06:	1961      	adds	r1, r4, r5
 800db08:	428b      	cmp	r3, r1
 800db0a:	bf01      	itttt	eq
 800db0c:	6819      	ldreq	r1, [r3, #0]
 800db0e:	685b      	ldreq	r3, [r3, #4]
 800db10:	1949      	addeq	r1, r1, r5
 800db12:	6021      	streq	r1, [r4, #0]
 800db14:	e7ed      	b.n	800daf2 <_free_r+0x22>
 800db16:	461a      	mov	r2, r3
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	b10b      	cbz	r3, 800db20 <_free_r+0x50>
 800db1c:	42a3      	cmp	r3, r4
 800db1e:	d9fa      	bls.n	800db16 <_free_r+0x46>
 800db20:	6811      	ldr	r1, [r2, #0]
 800db22:	1855      	adds	r5, r2, r1
 800db24:	42a5      	cmp	r5, r4
 800db26:	d10b      	bne.n	800db40 <_free_r+0x70>
 800db28:	6824      	ldr	r4, [r4, #0]
 800db2a:	4421      	add	r1, r4
 800db2c:	1854      	adds	r4, r2, r1
 800db2e:	42a3      	cmp	r3, r4
 800db30:	6011      	str	r1, [r2, #0]
 800db32:	d1e0      	bne.n	800daf6 <_free_r+0x26>
 800db34:	681c      	ldr	r4, [r3, #0]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	6053      	str	r3, [r2, #4]
 800db3a:	4421      	add	r1, r4
 800db3c:	6011      	str	r1, [r2, #0]
 800db3e:	e7da      	b.n	800daf6 <_free_r+0x26>
 800db40:	d902      	bls.n	800db48 <_free_r+0x78>
 800db42:	230c      	movs	r3, #12
 800db44:	6003      	str	r3, [r0, #0]
 800db46:	e7d6      	b.n	800daf6 <_free_r+0x26>
 800db48:	6825      	ldr	r5, [r4, #0]
 800db4a:	1961      	adds	r1, r4, r5
 800db4c:	428b      	cmp	r3, r1
 800db4e:	bf04      	itt	eq
 800db50:	6819      	ldreq	r1, [r3, #0]
 800db52:	685b      	ldreq	r3, [r3, #4]
 800db54:	6063      	str	r3, [r4, #4]
 800db56:	bf04      	itt	eq
 800db58:	1949      	addeq	r1, r1, r5
 800db5a:	6021      	streq	r1, [r4, #0]
 800db5c:	6054      	str	r4, [r2, #4]
 800db5e:	e7ca      	b.n	800daf6 <_free_r+0x26>
 800db60:	b003      	add	sp, #12
 800db62:	bd30      	pop	{r4, r5, pc}
 800db64:	2000a568 	.word	0x2000a568

0800db68 <sbrk_aligned>:
 800db68:	b570      	push	{r4, r5, r6, lr}
 800db6a:	4e0e      	ldr	r6, [pc, #56]	; (800dba4 <sbrk_aligned+0x3c>)
 800db6c:	460c      	mov	r4, r1
 800db6e:	6831      	ldr	r1, [r6, #0]
 800db70:	4605      	mov	r5, r0
 800db72:	b911      	cbnz	r1, 800db7a <sbrk_aligned+0x12>
 800db74:	f000 fb7a 	bl	800e26c <_sbrk_r>
 800db78:	6030      	str	r0, [r6, #0]
 800db7a:	4621      	mov	r1, r4
 800db7c:	4628      	mov	r0, r5
 800db7e:	f000 fb75 	bl	800e26c <_sbrk_r>
 800db82:	1c43      	adds	r3, r0, #1
 800db84:	d00a      	beq.n	800db9c <sbrk_aligned+0x34>
 800db86:	1cc4      	adds	r4, r0, #3
 800db88:	f024 0403 	bic.w	r4, r4, #3
 800db8c:	42a0      	cmp	r0, r4
 800db8e:	d007      	beq.n	800dba0 <sbrk_aligned+0x38>
 800db90:	1a21      	subs	r1, r4, r0
 800db92:	4628      	mov	r0, r5
 800db94:	f000 fb6a 	bl	800e26c <_sbrk_r>
 800db98:	3001      	adds	r0, #1
 800db9a:	d101      	bne.n	800dba0 <sbrk_aligned+0x38>
 800db9c:	f04f 34ff 	mov.w	r4, #4294967295
 800dba0:	4620      	mov	r0, r4
 800dba2:	bd70      	pop	{r4, r5, r6, pc}
 800dba4:	2000a56c 	.word	0x2000a56c

0800dba8 <_malloc_r>:
 800dba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbac:	1ccd      	adds	r5, r1, #3
 800dbae:	f025 0503 	bic.w	r5, r5, #3
 800dbb2:	3508      	adds	r5, #8
 800dbb4:	2d0c      	cmp	r5, #12
 800dbb6:	bf38      	it	cc
 800dbb8:	250c      	movcc	r5, #12
 800dbba:	2d00      	cmp	r5, #0
 800dbbc:	4607      	mov	r7, r0
 800dbbe:	db01      	blt.n	800dbc4 <_malloc_r+0x1c>
 800dbc0:	42a9      	cmp	r1, r5
 800dbc2:	d905      	bls.n	800dbd0 <_malloc_r+0x28>
 800dbc4:	230c      	movs	r3, #12
 800dbc6:	603b      	str	r3, [r7, #0]
 800dbc8:	2600      	movs	r6, #0
 800dbca:	4630      	mov	r0, r6
 800dbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd0:	4e2e      	ldr	r6, [pc, #184]	; (800dc8c <_malloc_r+0xe4>)
 800dbd2:	f000 fdc3 	bl	800e75c <__malloc_lock>
 800dbd6:	6833      	ldr	r3, [r6, #0]
 800dbd8:	461c      	mov	r4, r3
 800dbda:	bb34      	cbnz	r4, 800dc2a <_malloc_r+0x82>
 800dbdc:	4629      	mov	r1, r5
 800dbde:	4638      	mov	r0, r7
 800dbe0:	f7ff ffc2 	bl	800db68 <sbrk_aligned>
 800dbe4:	1c43      	adds	r3, r0, #1
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	d14d      	bne.n	800dc86 <_malloc_r+0xde>
 800dbea:	6834      	ldr	r4, [r6, #0]
 800dbec:	4626      	mov	r6, r4
 800dbee:	2e00      	cmp	r6, #0
 800dbf0:	d140      	bne.n	800dc74 <_malloc_r+0xcc>
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	4631      	mov	r1, r6
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	eb04 0803 	add.w	r8, r4, r3
 800dbfc:	f000 fb36 	bl	800e26c <_sbrk_r>
 800dc00:	4580      	cmp	r8, r0
 800dc02:	d13a      	bne.n	800dc7a <_malloc_r+0xd2>
 800dc04:	6821      	ldr	r1, [r4, #0]
 800dc06:	3503      	adds	r5, #3
 800dc08:	1a6d      	subs	r5, r5, r1
 800dc0a:	f025 0503 	bic.w	r5, r5, #3
 800dc0e:	3508      	adds	r5, #8
 800dc10:	2d0c      	cmp	r5, #12
 800dc12:	bf38      	it	cc
 800dc14:	250c      	movcc	r5, #12
 800dc16:	4629      	mov	r1, r5
 800dc18:	4638      	mov	r0, r7
 800dc1a:	f7ff ffa5 	bl	800db68 <sbrk_aligned>
 800dc1e:	3001      	adds	r0, #1
 800dc20:	d02b      	beq.n	800dc7a <_malloc_r+0xd2>
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	442b      	add	r3, r5
 800dc26:	6023      	str	r3, [r4, #0]
 800dc28:	e00e      	b.n	800dc48 <_malloc_r+0xa0>
 800dc2a:	6822      	ldr	r2, [r4, #0]
 800dc2c:	1b52      	subs	r2, r2, r5
 800dc2e:	d41e      	bmi.n	800dc6e <_malloc_r+0xc6>
 800dc30:	2a0b      	cmp	r2, #11
 800dc32:	d916      	bls.n	800dc62 <_malloc_r+0xba>
 800dc34:	1961      	adds	r1, r4, r5
 800dc36:	42a3      	cmp	r3, r4
 800dc38:	6025      	str	r5, [r4, #0]
 800dc3a:	bf18      	it	ne
 800dc3c:	6059      	strne	r1, [r3, #4]
 800dc3e:	6863      	ldr	r3, [r4, #4]
 800dc40:	bf08      	it	eq
 800dc42:	6031      	streq	r1, [r6, #0]
 800dc44:	5162      	str	r2, [r4, r5]
 800dc46:	604b      	str	r3, [r1, #4]
 800dc48:	4638      	mov	r0, r7
 800dc4a:	f104 060b 	add.w	r6, r4, #11
 800dc4e:	f000 fd8b 	bl	800e768 <__malloc_unlock>
 800dc52:	f026 0607 	bic.w	r6, r6, #7
 800dc56:	1d23      	adds	r3, r4, #4
 800dc58:	1af2      	subs	r2, r6, r3
 800dc5a:	d0b6      	beq.n	800dbca <_malloc_r+0x22>
 800dc5c:	1b9b      	subs	r3, r3, r6
 800dc5e:	50a3      	str	r3, [r4, r2]
 800dc60:	e7b3      	b.n	800dbca <_malloc_r+0x22>
 800dc62:	6862      	ldr	r2, [r4, #4]
 800dc64:	42a3      	cmp	r3, r4
 800dc66:	bf0c      	ite	eq
 800dc68:	6032      	streq	r2, [r6, #0]
 800dc6a:	605a      	strne	r2, [r3, #4]
 800dc6c:	e7ec      	b.n	800dc48 <_malloc_r+0xa0>
 800dc6e:	4623      	mov	r3, r4
 800dc70:	6864      	ldr	r4, [r4, #4]
 800dc72:	e7b2      	b.n	800dbda <_malloc_r+0x32>
 800dc74:	4634      	mov	r4, r6
 800dc76:	6876      	ldr	r6, [r6, #4]
 800dc78:	e7b9      	b.n	800dbee <_malloc_r+0x46>
 800dc7a:	230c      	movs	r3, #12
 800dc7c:	603b      	str	r3, [r7, #0]
 800dc7e:	4638      	mov	r0, r7
 800dc80:	f000 fd72 	bl	800e768 <__malloc_unlock>
 800dc84:	e7a1      	b.n	800dbca <_malloc_r+0x22>
 800dc86:	6025      	str	r5, [r4, #0]
 800dc88:	e7de      	b.n	800dc48 <_malloc_r+0xa0>
 800dc8a:	bf00      	nop
 800dc8c:	2000a568 	.word	0x2000a568

0800dc90 <__sfputc_r>:
 800dc90:	6893      	ldr	r3, [r2, #8]
 800dc92:	3b01      	subs	r3, #1
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	b410      	push	{r4}
 800dc98:	6093      	str	r3, [r2, #8]
 800dc9a:	da08      	bge.n	800dcae <__sfputc_r+0x1e>
 800dc9c:	6994      	ldr	r4, [r2, #24]
 800dc9e:	42a3      	cmp	r3, r4
 800dca0:	db01      	blt.n	800dca6 <__sfputc_r+0x16>
 800dca2:	290a      	cmp	r1, #10
 800dca4:	d103      	bne.n	800dcae <__sfputc_r+0x1e>
 800dca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcaa:	f000 bb33 	b.w	800e314 <__swbuf_r>
 800dcae:	6813      	ldr	r3, [r2, #0]
 800dcb0:	1c58      	adds	r0, r3, #1
 800dcb2:	6010      	str	r0, [r2, #0]
 800dcb4:	7019      	strb	r1, [r3, #0]
 800dcb6:	4608      	mov	r0, r1
 800dcb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcbc:	4770      	bx	lr

0800dcbe <__sfputs_r>:
 800dcbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc0:	4606      	mov	r6, r0
 800dcc2:	460f      	mov	r7, r1
 800dcc4:	4614      	mov	r4, r2
 800dcc6:	18d5      	adds	r5, r2, r3
 800dcc8:	42ac      	cmp	r4, r5
 800dcca:	d101      	bne.n	800dcd0 <__sfputs_r+0x12>
 800dccc:	2000      	movs	r0, #0
 800dcce:	e007      	b.n	800dce0 <__sfputs_r+0x22>
 800dcd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcd4:	463a      	mov	r2, r7
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f7ff ffda 	bl	800dc90 <__sfputc_r>
 800dcdc:	1c43      	adds	r3, r0, #1
 800dcde:	d1f3      	bne.n	800dcc8 <__sfputs_r+0xa>
 800dce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dce4 <_vfiprintf_r>:
 800dce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce8:	460d      	mov	r5, r1
 800dcea:	b09d      	sub	sp, #116	; 0x74
 800dcec:	4614      	mov	r4, r2
 800dcee:	4698      	mov	r8, r3
 800dcf0:	4606      	mov	r6, r0
 800dcf2:	b118      	cbz	r0, 800dcfc <_vfiprintf_r+0x18>
 800dcf4:	6983      	ldr	r3, [r0, #24]
 800dcf6:	b90b      	cbnz	r3, 800dcfc <_vfiprintf_r+0x18>
 800dcf8:	f7ff fe30 	bl	800d95c <__sinit>
 800dcfc:	4b89      	ldr	r3, [pc, #548]	; (800df24 <_vfiprintf_r+0x240>)
 800dcfe:	429d      	cmp	r5, r3
 800dd00:	d11b      	bne.n	800dd3a <_vfiprintf_r+0x56>
 800dd02:	6875      	ldr	r5, [r6, #4]
 800dd04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd06:	07d9      	lsls	r1, r3, #31
 800dd08:	d405      	bmi.n	800dd16 <_vfiprintf_r+0x32>
 800dd0a:	89ab      	ldrh	r3, [r5, #12]
 800dd0c:	059a      	lsls	r2, r3, #22
 800dd0e:	d402      	bmi.n	800dd16 <_vfiprintf_r+0x32>
 800dd10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd12:	f7ff fed3 	bl	800dabc <__retarget_lock_acquire_recursive>
 800dd16:	89ab      	ldrh	r3, [r5, #12]
 800dd18:	071b      	lsls	r3, r3, #28
 800dd1a:	d501      	bpl.n	800dd20 <_vfiprintf_r+0x3c>
 800dd1c:	692b      	ldr	r3, [r5, #16]
 800dd1e:	b9eb      	cbnz	r3, 800dd5c <_vfiprintf_r+0x78>
 800dd20:	4629      	mov	r1, r5
 800dd22:	4630      	mov	r0, r6
 800dd24:	f000 fb5a 	bl	800e3dc <__swsetup_r>
 800dd28:	b1c0      	cbz	r0, 800dd5c <_vfiprintf_r+0x78>
 800dd2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd2c:	07dc      	lsls	r4, r3, #31
 800dd2e:	d50e      	bpl.n	800dd4e <_vfiprintf_r+0x6a>
 800dd30:	f04f 30ff 	mov.w	r0, #4294967295
 800dd34:	b01d      	add	sp, #116	; 0x74
 800dd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd3a:	4b7b      	ldr	r3, [pc, #492]	; (800df28 <_vfiprintf_r+0x244>)
 800dd3c:	429d      	cmp	r5, r3
 800dd3e:	d101      	bne.n	800dd44 <_vfiprintf_r+0x60>
 800dd40:	68b5      	ldr	r5, [r6, #8]
 800dd42:	e7df      	b.n	800dd04 <_vfiprintf_r+0x20>
 800dd44:	4b79      	ldr	r3, [pc, #484]	; (800df2c <_vfiprintf_r+0x248>)
 800dd46:	429d      	cmp	r5, r3
 800dd48:	bf08      	it	eq
 800dd4a:	68f5      	ldreq	r5, [r6, #12]
 800dd4c:	e7da      	b.n	800dd04 <_vfiprintf_r+0x20>
 800dd4e:	89ab      	ldrh	r3, [r5, #12]
 800dd50:	0598      	lsls	r0, r3, #22
 800dd52:	d4ed      	bmi.n	800dd30 <_vfiprintf_r+0x4c>
 800dd54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd56:	f7ff feb2 	bl	800dabe <__retarget_lock_release_recursive>
 800dd5a:	e7e9      	b.n	800dd30 <_vfiprintf_r+0x4c>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd60:	2320      	movs	r3, #32
 800dd62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd66:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd6a:	2330      	movs	r3, #48	; 0x30
 800dd6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800df30 <_vfiprintf_r+0x24c>
 800dd70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd74:	f04f 0901 	mov.w	r9, #1
 800dd78:	4623      	mov	r3, r4
 800dd7a:	469a      	mov	sl, r3
 800dd7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd80:	b10a      	cbz	r2, 800dd86 <_vfiprintf_r+0xa2>
 800dd82:	2a25      	cmp	r2, #37	; 0x25
 800dd84:	d1f9      	bne.n	800dd7a <_vfiprintf_r+0x96>
 800dd86:	ebba 0b04 	subs.w	fp, sl, r4
 800dd8a:	d00b      	beq.n	800dda4 <_vfiprintf_r+0xc0>
 800dd8c:	465b      	mov	r3, fp
 800dd8e:	4622      	mov	r2, r4
 800dd90:	4629      	mov	r1, r5
 800dd92:	4630      	mov	r0, r6
 800dd94:	f7ff ff93 	bl	800dcbe <__sfputs_r>
 800dd98:	3001      	adds	r0, #1
 800dd9a:	f000 80aa 	beq.w	800def2 <_vfiprintf_r+0x20e>
 800dd9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dda0:	445a      	add	r2, fp
 800dda2:	9209      	str	r2, [sp, #36]	; 0x24
 800dda4:	f89a 3000 	ldrb.w	r3, [sl]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f000 80a2 	beq.w	800def2 <_vfiprintf_r+0x20e>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddb8:	f10a 0a01 	add.w	sl, sl, #1
 800ddbc:	9304      	str	r3, [sp, #16]
 800ddbe:	9307      	str	r3, [sp, #28]
 800ddc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddc4:	931a      	str	r3, [sp, #104]	; 0x68
 800ddc6:	4654      	mov	r4, sl
 800ddc8:	2205      	movs	r2, #5
 800ddca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddce:	4858      	ldr	r0, [pc, #352]	; (800df30 <_vfiprintf_r+0x24c>)
 800ddd0:	f7f2 fa36 	bl	8000240 <memchr>
 800ddd4:	9a04      	ldr	r2, [sp, #16]
 800ddd6:	b9d8      	cbnz	r0, 800de10 <_vfiprintf_r+0x12c>
 800ddd8:	06d1      	lsls	r1, r2, #27
 800ddda:	bf44      	itt	mi
 800dddc:	2320      	movmi	r3, #32
 800ddde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dde2:	0713      	lsls	r3, r2, #28
 800dde4:	bf44      	itt	mi
 800dde6:	232b      	movmi	r3, #43	; 0x2b
 800dde8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddec:	f89a 3000 	ldrb.w	r3, [sl]
 800ddf0:	2b2a      	cmp	r3, #42	; 0x2a
 800ddf2:	d015      	beq.n	800de20 <_vfiprintf_r+0x13c>
 800ddf4:	9a07      	ldr	r2, [sp, #28]
 800ddf6:	4654      	mov	r4, sl
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	f04f 0c0a 	mov.w	ip, #10
 800ddfe:	4621      	mov	r1, r4
 800de00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de04:	3b30      	subs	r3, #48	; 0x30
 800de06:	2b09      	cmp	r3, #9
 800de08:	d94e      	bls.n	800dea8 <_vfiprintf_r+0x1c4>
 800de0a:	b1b0      	cbz	r0, 800de3a <_vfiprintf_r+0x156>
 800de0c:	9207      	str	r2, [sp, #28]
 800de0e:	e014      	b.n	800de3a <_vfiprintf_r+0x156>
 800de10:	eba0 0308 	sub.w	r3, r0, r8
 800de14:	fa09 f303 	lsl.w	r3, r9, r3
 800de18:	4313      	orrs	r3, r2
 800de1a:	9304      	str	r3, [sp, #16]
 800de1c:	46a2      	mov	sl, r4
 800de1e:	e7d2      	b.n	800ddc6 <_vfiprintf_r+0xe2>
 800de20:	9b03      	ldr	r3, [sp, #12]
 800de22:	1d19      	adds	r1, r3, #4
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	9103      	str	r1, [sp, #12]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	bfbb      	ittet	lt
 800de2c:	425b      	neglt	r3, r3
 800de2e:	f042 0202 	orrlt.w	r2, r2, #2
 800de32:	9307      	strge	r3, [sp, #28]
 800de34:	9307      	strlt	r3, [sp, #28]
 800de36:	bfb8      	it	lt
 800de38:	9204      	strlt	r2, [sp, #16]
 800de3a:	7823      	ldrb	r3, [r4, #0]
 800de3c:	2b2e      	cmp	r3, #46	; 0x2e
 800de3e:	d10c      	bne.n	800de5a <_vfiprintf_r+0x176>
 800de40:	7863      	ldrb	r3, [r4, #1]
 800de42:	2b2a      	cmp	r3, #42	; 0x2a
 800de44:	d135      	bne.n	800deb2 <_vfiprintf_r+0x1ce>
 800de46:	9b03      	ldr	r3, [sp, #12]
 800de48:	1d1a      	adds	r2, r3, #4
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	9203      	str	r2, [sp, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	bfb8      	it	lt
 800de52:	f04f 33ff 	movlt.w	r3, #4294967295
 800de56:	3402      	adds	r4, #2
 800de58:	9305      	str	r3, [sp, #20]
 800de5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800df40 <_vfiprintf_r+0x25c>
 800de5e:	7821      	ldrb	r1, [r4, #0]
 800de60:	2203      	movs	r2, #3
 800de62:	4650      	mov	r0, sl
 800de64:	f7f2 f9ec 	bl	8000240 <memchr>
 800de68:	b140      	cbz	r0, 800de7c <_vfiprintf_r+0x198>
 800de6a:	2340      	movs	r3, #64	; 0x40
 800de6c:	eba0 000a 	sub.w	r0, r0, sl
 800de70:	fa03 f000 	lsl.w	r0, r3, r0
 800de74:	9b04      	ldr	r3, [sp, #16]
 800de76:	4303      	orrs	r3, r0
 800de78:	3401      	adds	r4, #1
 800de7a:	9304      	str	r3, [sp, #16]
 800de7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de80:	482c      	ldr	r0, [pc, #176]	; (800df34 <_vfiprintf_r+0x250>)
 800de82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de86:	2206      	movs	r2, #6
 800de88:	f7f2 f9da 	bl	8000240 <memchr>
 800de8c:	2800      	cmp	r0, #0
 800de8e:	d03f      	beq.n	800df10 <_vfiprintf_r+0x22c>
 800de90:	4b29      	ldr	r3, [pc, #164]	; (800df38 <_vfiprintf_r+0x254>)
 800de92:	bb1b      	cbnz	r3, 800dedc <_vfiprintf_r+0x1f8>
 800de94:	9b03      	ldr	r3, [sp, #12]
 800de96:	3307      	adds	r3, #7
 800de98:	f023 0307 	bic.w	r3, r3, #7
 800de9c:	3308      	adds	r3, #8
 800de9e:	9303      	str	r3, [sp, #12]
 800dea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dea2:	443b      	add	r3, r7
 800dea4:	9309      	str	r3, [sp, #36]	; 0x24
 800dea6:	e767      	b.n	800dd78 <_vfiprintf_r+0x94>
 800dea8:	fb0c 3202 	mla	r2, ip, r2, r3
 800deac:	460c      	mov	r4, r1
 800deae:	2001      	movs	r0, #1
 800deb0:	e7a5      	b.n	800ddfe <_vfiprintf_r+0x11a>
 800deb2:	2300      	movs	r3, #0
 800deb4:	3401      	adds	r4, #1
 800deb6:	9305      	str	r3, [sp, #20]
 800deb8:	4619      	mov	r1, r3
 800deba:	f04f 0c0a 	mov.w	ip, #10
 800debe:	4620      	mov	r0, r4
 800dec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dec4:	3a30      	subs	r2, #48	; 0x30
 800dec6:	2a09      	cmp	r2, #9
 800dec8:	d903      	bls.n	800ded2 <_vfiprintf_r+0x1ee>
 800deca:	2b00      	cmp	r3, #0
 800decc:	d0c5      	beq.n	800de5a <_vfiprintf_r+0x176>
 800dece:	9105      	str	r1, [sp, #20]
 800ded0:	e7c3      	b.n	800de5a <_vfiprintf_r+0x176>
 800ded2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ded6:	4604      	mov	r4, r0
 800ded8:	2301      	movs	r3, #1
 800deda:	e7f0      	b.n	800debe <_vfiprintf_r+0x1da>
 800dedc:	ab03      	add	r3, sp, #12
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	462a      	mov	r2, r5
 800dee2:	4b16      	ldr	r3, [pc, #88]	; (800df3c <_vfiprintf_r+0x258>)
 800dee4:	a904      	add	r1, sp, #16
 800dee6:	4630      	mov	r0, r6
 800dee8:	f3af 8000 	nop.w
 800deec:	4607      	mov	r7, r0
 800deee:	1c78      	adds	r0, r7, #1
 800def0:	d1d6      	bne.n	800dea0 <_vfiprintf_r+0x1bc>
 800def2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800def4:	07d9      	lsls	r1, r3, #31
 800def6:	d405      	bmi.n	800df04 <_vfiprintf_r+0x220>
 800def8:	89ab      	ldrh	r3, [r5, #12]
 800defa:	059a      	lsls	r2, r3, #22
 800defc:	d402      	bmi.n	800df04 <_vfiprintf_r+0x220>
 800defe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df00:	f7ff fddd 	bl	800dabe <__retarget_lock_release_recursive>
 800df04:	89ab      	ldrh	r3, [r5, #12]
 800df06:	065b      	lsls	r3, r3, #25
 800df08:	f53f af12 	bmi.w	800dd30 <_vfiprintf_r+0x4c>
 800df0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df0e:	e711      	b.n	800dd34 <_vfiprintf_r+0x50>
 800df10:	ab03      	add	r3, sp, #12
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	462a      	mov	r2, r5
 800df16:	4b09      	ldr	r3, [pc, #36]	; (800df3c <_vfiprintf_r+0x258>)
 800df18:	a904      	add	r1, sp, #16
 800df1a:	4630      	mov	r0, r6
 800df1c:	f000 f880 	bl	800e020 <_printf_i>
 800df20:	e7e4      	b.n	800deec <_vfiprintf_r+0x208>
 800df22:	bf00      	nop
 800df24:	08011430 	.word	0x08011430
 800df28:	08011450 	.word	0x08011450
 800df2c:	08011410 	.word	0x08011410
 800df30:	08011470 	.word	0x08011470
 800df34:	0801147a 	.word	0x0801147a
 800df38:	00000000 	.word	0x00000000
 800df3c:	0800dcbf 	.word	0x0800dcbf
 800df40:	08011476 	.word	0x08011476

0800df44 <_printf_common>:
 800df44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df48:	4616      	mov	r6, r2
 800df4a:	4699      	mov	r9, r3
 800df4c:	688a      	ldr	r2, [r1, #8]
 800df4e:	690b      	ldr	r3, [r1, #16]
 800df50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df54:	4293      	cmp	r3, r2
 800df56:	bfb8      	it	lt
 800df58:	4613      	movlt	r3, r2
 800df5a:	6033      	str	r3, [r6, #0]
 800df5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800df60:	4607      	mov	r7, r0
 800df62:	460c      	mov	r4, r1
 800df64:	b10a      	cbz	r2, 800df6a <_printf_common+0x26>
 800df66:	3301      	adds	r3, #1
 800df68:	6033      	str	r3, [r6, #0]
 800df6a:	6823      	ldr	r3, [r4, #0]
 800df6c:	0699      	lsls	r1, r3, #26
 800df6e:	bf42      	ittt	mi
 800df70:	6833      	ldrmi	r3, [r6, #0]
 800df72:	3302      	addmi	r3, #2
 800df74:	6033      	strmi	r3, [r6, #0]
 800df76:	6825      	ldr	r5, [r4, #0]
 800df78:	f015 0506 	ands.w	r5, r5, #6
 800df7c:	d106      	bne.n	800df8c <_printf_common+0x48>
 800df7e:	f104 0a19 	add.w	sl, r4, #25
 800df82:	68e3      	ldr	r3, [r4, #12]
 800df84:	6832      	ldr	r2, [r6, #0]
 800df86:	1a9b      	subs	r3, r3, r2
 800df88:	42ab      	cmp	r3, r5
 800df8a:	dc26      	bgt.n	800dfda <_printf_common+0x96>
 800df8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800df90:	1e13      	subs	r3, r2, #0
 800df92:	6822      	ldr	r2, [r4, #0]
 800df94:	bf18      	it	ne
 800df96:	2301      	movne	r3, #1
 800df98:	0692      	lsls	r2, r2, #26
 800df9a:	d42b      	bmi.n	800dff4 <_printf_common+0xb0>
 800df9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dfa0:	4649      	mov	r1, r9
 800dfa2:	4638      	mov	r0, r7
 800dfa4:	47c0      	blx	r8
 800dfa6:	3001      	adds	r0, #1
 800dfa8:	d01e      	beq.n	800dfe8 <_printf_common+0xa4>
 800dfaa:	6823      	ldr	r3, [r4, #0]
 800dfac:	68e5      	ldr	r5, [r4, #12]
 800dfae:	6832      	ldr	r2, [r6, #0]
 800dfb0:	f003 0306 	and.w	r3, r3, #6
 800dfb4:	2b04      	cmp	r3, #4
 800dfb6:	bf08      	it	eq
 800dfb8:	1aad      	subeq	r5, r5, r2
 800dfba:	68a3      	ldr	r3, [r4, #8]
 800dfbc:	6922      	ldr	r2, [r4, #16]
 800dfbe:	bf0c      	ite	eq
 800dfc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dfc4:	2500      	movne	r5, #0
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	bfc4      	itt	gt
 800dfca:	1a9b      	subgt	r3, r3, r2
 800dfcc:	18ed      	addgt	r5, r5, r3
 800dfce:	2600      	movs	r6, #0
 800dfd0:	341a      	adds	r4, #26
 800dfd2:	42b5      	cmp	r5, r6
 800dfd4:	d11a      	bne.n	800e00c <_printf_common+0xc8>
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	e008      	b.n	800dfec <_printf_common+0xa8>
 800dfda:	2301      	movs	r3, #1
 800dfdc:	4652      	mov	r2, sl
 800dfde:	4649      	mov	r1, r9
 800dfe0:	4638      	mov	r0, r7
 800dfe2:	47c0      	blx	r8
 800dfe4:	3001      	adds	r0, #1
 800dfe6:	d103      	bne.n	800dff0 <_printf_common+0xac>
 800dfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dff0:	3501      	adds	r5, #1
 800dff2:	e7c6      	b.n	800df82 <_printf_common+0x3e>
 800dff4:	18e1      	adds	r1, r4, r3
 800dff6:	1c5a      	adds	r2, r3, #1
 800dff8:	2030      	movs	r0, #48	; 0x30
 800dffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dffe:	4422      	add	r2, r4
 800e000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e008:	3302      	adds	r3, #2
 800e00a:	e7c7      	b.n	800df9c <_printf_common+0x58>
 800e00c:	2301      	movs	r3, #1
 800e00e:	4622      	mov	r2, r4
 800e010:	4649      	mov	r1, r9
 800e012:	4638      	mov	r0, r7
 800e014:	47c0      	blx	r8
 800e016:	3001      	adds	r0, #1
 800e018:	d0e6      	beq.n	800dfe8 <_printf_common+0xa4>
 800e01a:	3601      	adds	r6, #1
 800e01c:	e7d9      	b.n	800dfd2 <_printf_common+0x8e>
	...

0800e020 <_printf_i>:
 800e020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e024:	7e0f      	ldrb	r7, [r1, #24]
 800e026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e028:	2f78      	cmp	r7, #120	; 0x78
 800e02a:	4691      	mov	r9, r2
 800e02c:	4680      	mov	r8, r0
 800e02e:	460c      	mov	r4, r1
 800e030:	469a      	mov	sl, r3
 800e032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e036:	d807      	bhi.n	800e048 <_printf_i+0x28>
 800e038:	2f62      	cmp	r7, #98	; 0x62
 800e03a:	d80a      	bhi.n	800e052 <_printf_i+0x32>
 800e03c:	2f00      	cmp	r7, #0
 800e03e:	f000 80d8 	beq.w	800e1f2 <_printf_i+0x1d2>
 800e042:	2f58      	cmp	r7, #88	; 0x58
 800e044:	f000 80a3 	beq.w	800e18e <_printf_i+0x16e>
 800e048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e04c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e050:	e03a      	b.n	800e0c8 <_printf_i+0xa8>
 800e052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e056:	2b15      	cmp	r3, #21
 800e058:	d8f6      	bhi.n	800e048 <_printf_i+0x28>
 800e05a:	a101      	add	r1, pc, #4	; (adr r1, 800e060 <_printf_i+0x40>)
 800e05c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e060:	0800e0b9 	.word	0x0800e0b9
 800e064:	0800e0cd 	.word	0x0800e0cd
 800e068:	0800e049 	.word	0x0800e049
 800e06c:	0800e049 	.word	0x0800e049
 800e070:	0800e049 	.word	0x0800e049
 800e074:	0800e049 	.word	0x0800e049
 800e078:	0800e0cd 	.word	0x0800e0cd
 800e07c:	0800e049 	.word	0x0800e049
 800e080:	0800e049 	.word	0x0800e049
 800e084:	0800e049 	.word	0x0800e049
 800e088:	0800e049 	.word	0x0800e049
 800e08c:	0800e1d9 	.word	0x0800e1d9
 800e090:	0800e0fd 	.word	0x0800e0fd
 800e094:	0800e1bb 	.word	0x0800e1bb
 800e098:	0800e049 	.word	0x0800e049
 800e09c:	0800e049 	.word	0x0800e049
 800e0a0:	0800e1fb 	.word	0x0800e1fb
 800e0a4:	0800e049 	.word	0x0800e049
 800e0a8:	0800e0fd 	.word	0x0800e0fd
 800e0ac:	0800e049 	.word	0x0800e049
 800e0b0:	0800e049 	.word	0x0800e049
 800e0b4:	0800e1c3 	.word	0x0800e1c3
 800e0b8:	682b      	ldr	r3, [r5, #0]
 800e0ba:	1d1a      	adds	r2, r3, #4
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	602a      	str	r2, [r5, #0]
 800e0c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e0a3      	b.n	800e214 <_printf_i+0x1f4>
 800e0cc:	6820      	ldr	r0, [r4, #0]
 800e0ce:	6829      	ldr	r1, [r5, #0]
 800e0d0:	0606      	lsls	r6, r0, #24
 800e0d2:	f101 0304 	add.w	r3, r1, #4
 800e0d6:	d50a      	bpl.n	800e0ee <_printf_i+0xce>
 800e0d8:	680e      	ldr	r6, [r1, #0]
 800e0da:	602b      	str	r3, [r5, #0]
 800e0dc:	2e00      	cmp	r6, #0
 800e0de:	da03      	bge.n	800e0e8 <_printf_i+0xc8>
 800e0e0:	232d      	movs	r3, #45	; 0x2d
 800e0e2:	4276      	negs	r6, r6
 800e0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0e8:	485e      	ldr	r0, [pc, #376]	; (800e264 <_printf_i+0x244>)
 800e0ea:	230a      	movs	r3, #10
 800e0ec:	e019      	b.n	800e122 <_printf_i+0x102>
 800e0ee:	680e      	ldr	r6, [r1, #0]
 800e0f0:	602b      	str	r3, [r5, #0]
 800e0f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e0f6:	bf18      	it	ne
 800e0f8:	b236      	sxthne	r6, r6
 800e0fa:	e7ef      	b.n	800e0dc <_printf_i+0xbc>
 800e0fc:	682b      	ldr	r3, [r5, #0]
 800e0fe:	6820      	ldr	r0, [r4, #0]
 800e100:	1d19      	adds	r1, r3, #4
 800e102:	6029      	str	r1, [r5, #0]
 800e104:	0601      	lsls	r1, r0, #24
 800e106:	d501      	bpl.n	800e10c <_printf_i+0xec>
 800e108:	681e      	ldr	r6, [r3, #0]
 800e10a:	e002      	b.n	800e112 <_printf_i+0xf2>
 800e10c:	0646      	lsls	r6, r0, #25
 800e10e:	d5fb      	bpl.n	800e108 <_printf_i+0xe8>
 800e110:	881e      	ldrh	r6, [r3, #0]
 800e112:	4854      	ldr	r0, [pc, #336]	; (800e264 <_printf_i+0x244>)
 800e114:	2f6f      	cmp	r7, #111	; 0x6f
 800e116:	bf0c      	ite	eq
 800e118:	2308      	moveq	r3, #8
 800e11a:	230a      	movne	r3, #10
 800e11c:	2100      	movs	r1, #0
 800e11e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e122:	6865      	ldr	r5, [r4, #4]
 800e124:	60a5      	str	r5, [r4, #8]
 800e126:	2d00      	cmp	r5, #0
 800e128:	bfa2      	ittt	ge
 800e12a:	6821      	ldrge	r1, [r4, #0]
 800e12c:	f021 0104 	bicge.w	r1, r1, #4
 800e130:	6021      	strge	r1, [r4, #0]
 800e132:	b90e      	cbnz	r6, 800e138 <_printf_i+0x118>
 800e134:	2d00      	cmp	r5, #0
 800e136:	d04d      	beq.n	800e1d4 <_printf_i+0x1b4>
 800e138:	4615      	mov	r5, r2
 800e13a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e13e:	fb03 6711 	mls	r7, r3, r1, r6
 800e142:	5dc7      	ldrb	r7, [r0, r7]
 800e144:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e148:	4637      	mov	r7, r6
 800e14a:	42bb      	cmp	r3, r7
 800e14c:	460e      	mov	r6, r1
 800e14e:	d9f4      	bls.n	800e13a <_printf_i+0x11a>
 800e150:	2b08      	cmp	r3, #8
 800e152:	d10b      	bne.n	800e16c <_printf_i+0x14c>
 800e154:	6823      	ldr	r3, [r4, #0]
 800e156:	07de      	lsls	r6, r3, #31
 800e158:	d508      	bpl.n	800e16c <_printf_i+0x14c>
 800e15a:	6923      	ldr	r3, [r4, #16]
 800e15c:	6861      	ldr	r1, [r4, #4]
 800e15e:	4299      	cmp	r1, r3
 800e160:	bfde      	ittt	le
 800e162:	2330      	movle	r3, #48	; 0x30
 800e164:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e168:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e16c:	1b52      	subs	r2, r2, r5
 800e16e:	6122      	str	r2, [r4, #16]
 800e170:	f8cd a000 	str.w	sl, [sp]
 800e174:	464b      	mov	r3, r9
 800e176:	aa03      	add	r2, sp, #12
 800e178:	4621      	mov	r1, r4
 800e17a:	4640      	mov	r0, r8
 800e17c:	f7ff fee2 	bl	800df44 <_printf_common>
 800e180:	3001      	adds	r0, #1
 800e182:	d14c      	bne.n	800e21e <_printf_i+0x1fe>
 800e184:	f04f 30ff 	mov.w	r0, #4294967295
 800e188:	b004      	add	sp, #16
 800e18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e18e:	4835      	ldr	r0, [pc, #212]	; (800e264 <_printf_i+0x244>)
 800e190:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e194:	6829      	ldr	r1, [r5, #0]
 800e196:	6823      	ldr	r3, [r4, #0]
 800e198:	f851 6b04 	ldr.w	r6, [r1], #4
 800e19c:	6029      	str	r1, [r5, #0]
 800e19e:	061d      	lsls	r5, r3, #24
 800e1a0:	d514      	bpl.n	800e1cc <_printf_i+0x1ac>
 800e1a2:	07df      	lsls	r7, r3, #31
 800e1a4:	bf44      	itt	mi
 800e1a6:	f043 0320 	orrmi.w	r3, r3, #32
 800e1aa:	6023      	strmi	r3, [r4, #0]
 800e1ac:	b91e      	cbnz	r6, 800e1b6 <_printf_i+0x196>
 800e1ae:	6823      	ldr	r3, [r4, #0]
 800e1b0:	f023 0320 	bic.w	r3, r3, #32
 800e1b4:	6023      	str	r3, [r4, #0]
 800e1b6:	2310      	movs	r3, #16
 800e1b8:	e7b0      	b.n	800e11c <_printf_i+0xfc>
 800e1ba:	6823      	ldr	r3, [r4, #0]
 800e1bc:	f043 0320 	orr.w	r3, r3, #32
 800e1c0:	6023      	str	r3, [r4, #0]
 800e1c2:	2378      	movs	r3, #120	; 0x78
 800e1c4:	4828      	ldr	r0, [pc, #160]	; (800e268 <_printf_i+0x248>)
 800e1c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e1ca:	e7e3      	b.n	800e194 <_printf_i+0x174>
 800e1cc:	0659      	lsls	r1, r3, #25
 800e1ce:	bf48      	it	mi
 800e1d0:	b2b6      	uxthmi	r6, r6
 800e1d2:	e7e6      	b.n	800e1a2 <_printf_i+0x182>
 800e1d4:	4615      	mov	r5, r2
 800e1d6:	e7bb      	b.n	800e150 <_printf_i+0x130>
 800e1d8:	682b      	ldr	r3, [r5, #0]
 800e1da:	6826      	ldr	r6, [r4, #0]
 800e1dc:	6961      	ldr	r1, [r4, #20]
 800e1de:	1d18      	adds	r0, r3, #4
 800e1e0:	6028      	str	r0, [r5, #0]
 800e1e2:	0635      	lsls	r5, r6, #24
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	d501      	bpl.n	800e1ec <_printf_i+0x1cc>
 800e1e8:	6019      	str	r1, [r3, #0]
 800e1ea:	e002      	b.n	800e1f2 <_printf_i+0x1d2>
 800e1ec:	0670      	lsls	r0, r6, #25
 800e1ee:	d5fb      	bpl.n	800e1e8 <_printf_i+0x1c8>
 800e1f0:	8019      	strh	r1, [r3, #0]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	6123      	str	r3, [r4, #16]
 800e1f6:	4615      	mov	r5, r2
 800e1f8:	e7ba      	b.n	800e170 <_printf_i+0x150>
 800e1fa:	682b      	ldr	r3, [r5, #0]
 800e1fc:	1d1a      	adds	r2, r3, #4
 800e1fe:	602a      	str	r2, [r5, #0]
 800e200:	681d      	ldr	r5, [r3, #0]
 800e202:	6862      	ldr	r2, [r4, #4]
 800e204:	2100      	movs	r1, #0
 800e206:	4628      	mov	r0, r5
 800e208:	f7f2 f81a 	bl	8000240 <memchr>
 800e20c:	b108      	cbz	r0, 800e212 <_printf_i+0x1f2>
 800e20e:	1b40      	subs	r0, r0, r5
 800e210:	6060      	str	r0, [r4, #4]
 800e212:	6863      	ldr	r3, [r4, #4]
 800e214:	6123      	str	r3, [r4, #16]
 800e216:	2300      	movs	r3, #0
 800e218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e21c:	e7a8      	b.n	800e170 <_printf_i+0x150>
 800e21e:	6923      	ldr	r3, [r4, #16]
 800e220:	462a      	mov	r2, r5
 800e222:	4649      	mov	r1, r9
 800e224:	4640      	mov	r0, r8
 800e226:	47d0      	blx	sl
 800e228:	3001      	adds	r0, #1
 800e22a:	d0ab      	beq.n	800e184 <_printf_i+0x164>
 800e22c:	6823      	ldr	r3, [r4, #0]
 800e22e:	079b      	lsls	r3, r3, #30
 800e230:	d413      	bmi.n	800e25a <_printf_i+0x23a>
 800e232:	68e0      	ldr	r0, [r4, #12]
 800e234:	9b03      	ldr	r3, [sp, #12]
 800e236:	4298      	cmp	r0, r3
 800e238:	bfb8      	it	lt
 800e23a:	4618      	movlt	r0, r3
 800e23c:	e7a4      	b.n	800e188 <_printf_i+0x168>
 800e23e:	2301      	movs	r3, #1
 800e240:	4632      	mov	r2, r6
 800e242:	4649      	mov	r1, r9
 800e244:	4640      	mov	r0, r8
 800e246:	47d0      	blx	sl
 800e248:	3001      	adds	r0, #1
 800e24a:	d09b      	beq.n	800e184 <_printf_i+0x164>
 800e24c:	3501      	adds	r5, #1
 800e24e:	68e3      	ldr	r3, [r4, #12]
 800e250:	9903      	ldr	r1, [sp, #12]
 800e252:	1a5b      	subs	r3, r3, r1
 800e254:	42ab      	cmp	r3, r5
 800e256:	dcf2      	bgt.n	800e23e <_printf_i+0x21e>
 800e258:	e7eb      	b.n	800e232 <_printf_i+0x212>
 800e25a:	2500      	movs	r5, #0
 800e25c:	f104 0619 	add.w	r6, r4, #25
 800e260:	e7f5      	b.n	800e24e <_printf_i+0x22e>
 800e262:	bf00      	nop
 800e264:	08011481 	.word	0x08011481
 800e268:	08011492 	.word	0x08011492

0800e26c <_sbrk_r>:
 800e26c:	b538      	push	{r3, r4, r5, lr}
 800e26e:	4d06      	ldr	r5, [pc, #24]	; (800e288 <_sbrk_r+0x1c>)
 800e270:	2300      	movs	r3, #0
 800e272:	4604      	mov	r4, r0
 800e274:	4608      	mov	r0, r1
 800e276:	602b      	str	r3, [r5, #0]
 800e278:	f7f2 fbfe 	bl	8000a78 <_sbrk>
 800e27c:	1c43      	adds	r3, r0, #1
 800e27e:	d102      	bne.n	800e286 <_sbrk_r+0x1a>
 800e280:	682b      	ldr	r3, [r5, #0]
 800e282:	b103      	cbz	r3, 800e286 <_sbrk_r+0x1a>
 800e284:	6023      	str	r3, [r4, #0]
 800e286:	bd38      	pop	{r3, r4, r5, pc}
 800e288:	2000a560 	.word	0x2000a560

0800e28c <__sread>:
 800e28c:	b510      	push	{r4, lr}
 800e28e:	460c      	mov	r4, r1
 800e290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e294:	f000 fa6e 	bl	800e774 <_read_r>
 800e298:	2800      	cmp	r0, #0
 800e29a:	bfab      	itete	ge
 800e29c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e29e:	89a3      	ldrhlt	r3, [r4, #12]
 800e2a0:	181b      	addge	r3, r3, r0
 800e2a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2a6:	bfac      	ite	ge
 800e2a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2aa:	81a3      	strhlt	r3, [r4, #12]
 800e2ac:	bd10      	pop	{r4, pc}

0800e2ae <__swrite>:
 800e2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b2:	461f      	mov	r7, r3
 800e2b4:	898b      	ldrh	r3, [r1, #12]
 800e2b6:	05db      	lsls	r3, r3, #23
 800e2b8:	4605      	mov	r5, r0
 800e2ba:	460c      	mov	r4, r1
 800e2bc:	4616      	mov	r6, r2
 800e2be:	d505      	bpl.n	800e2cc <__swrite+0x1e>
 800e2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2c4:	2302      	movs	r3, #2
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f000 f9d0 	bl	800e66c <_lseek_r>
 800e2cc:	89a3      	ldrh	r3, [r4, #12]
 800e2ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2d6:	81a3      	strh	r3, [r4, #12]
 800e2d8:	4632      	mov	r2, r6
 800e2da:	463b      	mov	r3, r7
 800e2dc:	4628      	mov	r0, r5
 800e2de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e2:	f000 b869 	b.w	800e3b8 <_write_r>

0800e2e6 <__sseek>:
 800e2e6:	b510      	push	{r4, lr}
 800e2e8:	460c      	mov	r4, r1
 800e2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ee:	f000 f9bd 	bl	800e66c <_lseek_r>
 800e2f2:	1c43      	adds	r3, r0, #1
 800e2f4:	89a3      	ldrh	r3, [r4, #12]
 800e2f6:	bf15      	itete	ne
 800e2f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e2fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e2fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e302:	81a3      	strheq	r3, [r4, #12]
 800e304:	bf18      	it	ne
 800e306:	81a3      	strhne	r3, [r4, #12]
 800e308:	bd10      	pop	{r4, pc}

0800e30a <__sclose>:
 800e30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e30e:	f000 b8db 	b.w	800e4c8 <_close_r>
	...

0800e314 <__swbuf_r>:
 800e314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e316:	460e      	mov	r6, r1
 800e318:	4614      	mov	r4, r2
 800e31a:	4605      	mov	r5, r0
 800e31c:	b118      	cbz	r0, 800e326 <__swbuf_r+0x12>
 800e31e:	6983      	ldr	r3, [r0, #24]
 800e320:	b90b      	cbnz	r3, 800e326 <__swbuf_r+0x12>
 800e322:	f7ff fb1b 	bl	800d95c <__sinit>
 800e326:	4b21      	ldr	r3, [pc, #132]	; (800e3ac <__swbuf_r+0x98>)
 800e328:	429c      	cmp	r4, r3
 800e32a:	d12b      	bne.n	800e384 <__swbuf_r+0x70>
 800e32c:	686c      	ldr	r4, [r5, #4]
 800e32e:	69a3      	ldr	r3, [r4, #24]
 800e330:	60a3      	str	r3, [r4, #8]
 800e332:	89a3      	ldrh	r3, [r4, #12]
 800e334:	071a      	lsls	r2, r3, #28
 800e336:	d52f      	bpl.n	800e398 <__swbuf_r+0x84>
 800e338:	6923      	ldr	r3, [r4, #16]
 800e33a:	b36b      	cbz	r3, 800e398 <__swbuf_r+0x84>
 800e33c:	6923      	ldr	r3, [r4, #16]
 800e33e:	6820      	ldr	r0, [r4, #0]
 800e340:	1ac0      	subs	r0, r0, r3
 800e342:	6963      	ldr	r3, [r4, #20]
 800e344:	b2f6      	uxtb	r6, r6
 800e346:	4283      	cmp	r3, r0
 800e348:	4637      	mov	r7, r6
 800e34a:	dc04      	bgt.n	800e356 <__swbuf_r+0x42>
 800e34c:	4621      	mov	r1, r4
 800e34e:	4628      	mov	r0, r5
 800e350:	f000 f950 	bl	800e5f4 <_fflush_r>
 800e354:	bb30      	cbnz	r0, 800e3a4 <__swbuf_r+0x90>
 800e356:	68a3      	ldr	r3, [r4, #8]
 800e358:	3b01      	subs	r3, #1
 800e35a:	60a3      	str	r3, [r4, #8]
 800e35c:	6823      	ldr	r3, [r4, #0]
 800e35e:	1c5a      	adds	r2, r3, #1
 800e360:	6022      	str	r2, [r4, #0]
 800e362:	701e      	strb	r6, [r3, #0]
 800e364:	6963      	ldr	r3, [r4, #20]
 800e366:	3001      	adds	r0, #1
 800e368:	4283      	cmp	r3, r0
 800e36a:	d004      	beq.n	800e376 <__swbuf_r+0x62>
 800e36c:	89a3      	ldrh	r3, [r4, #12]
 800e36e:	07db      	lsls	r3, r3, #31
 800e370:	d506      	bpl.n	800e380 <__swbuf_r+0x6c>
 800e372:	2e0a      	cmp	r6, #10
 800e374:	d104      	bne.n	800e380 <__swbuf_r+0x6c>
 800e376:	4621      	mov	r1, r4
 800e378:	4628      	mov	r0, r5
 800e37a:	f000 f93b 	bl	800e5f4 <_fflush_r>
 800e37e:	b988      	cbnz	r0, 800e3a4 <__swbuf_r+0x90>
 800e380:	4638      	mov	r0, r7
 800e382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e384:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <__swbuf_r+0x9c>)
 800e386:	429c      	cmp	r4, r3
 800e388:	d101      	bne.n	800e38e <__swbuf_r+0x7a>
 800e38a:	68ac      	ldr	r4, [r5, #8]
 800e38c:	e7cf      	b.n	800e32e <__swbuf_r+0x1a>
 800e38e:	4b09      	ldr	r3, [pc, #36]	; (800e3b4 <__swbuf_r+0xa0>)
 800e390:	429c      	cmp	r4, r3
 800e392:	bf08      	it	eq
 800e394:	68ec      	ldreq	r4, [r5, #12]
 800e396:	e7ca      	b.n	800e32e <__swbuf_r+0x1a>
 800e398:	4621      	mov	r1, r4
 800e39a:	4628      	mov	r0, r5
 800e39c:	f000 f81e 	bl	800e3dc <__swsetup_r>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d0cb      	beq.n	800e33c <__swbuf_r+0x28>
 800e3a4:	f04f 37ff 	mov.w	r7, #4294967295
 800e3a8:	e7ea      	b.n	800e380 <__swbuf_r+0x6c>
 800e3aa:	bf00      	nop
 800e3ac:	08011430 	.word	0x08011430
 800e3b0:	08011450 	.word	0x08011450
 800e3b4:	08011410 	.word	0x08011410

0800e3b8 <_write_r>:
 800e3b8:	b538      	push	{r3, r4, r5, lr}
 800e3ba:	4d07      	ldr	r5, [pc, #28]	; (800e3d8 <_write_r+0x20>)
 800e3bc:	4604      	mov	r4, r0
 800e3be:	4608      	mov	r0, r1
 800e3c0:	4611      	mov	r1, r2
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	602a      	str	r2, [r5, #0]
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	f7f2 fb05 	bl	80009d6 <_write>
 800e3cc:	1c43      	adds	r3, r0, #1
 800e3ce:	d102      	bne.n	800e3d6 <_write_r+0x1e>
 800e3d0:	682b      	ldr	r3, [r5, #0]
 800e3d2:	b103      	cbz	r3, 800e3d6 <_write_r+0x1e>
 800e3d4:	6023      	str	r3, [r4, #0]
 800e3d6:	bd38      	pop	{r3, r4, r5, pc}
 800e3d8:	2000a560 	.word	0x2000a560

0800e3dc <__swsetup_r>:
 800e3dc:	4b32      	ldr	r3, [pc, #200]	; (800e4a8 <__swsetup_r+0xcc>)
 800e3de:	b570      	push	{r4, r5, r6, lr}
 800e3e0:	681d      	ldr	r5, [r3, #0]
 800e3e2:	4606      	mov	r6, r0
 800e3e4:	460c      	mov	r4, r1
 800e3e6:	b125      	cbz	r5, 800e3f2 <__swsetup_r+0x16>
 800e3e8:	69ab      	ldr	r3, [r5, #24]
 800e3ea:	b913      	cbnz	r3, 800e3f2 <__swsetup_r+0x16>
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	f7ff fab5 	bl	800d95c <__sinit>
 800e3f2:	4b2e      	ldr	r3, [pc, #184]	; (800e4ac <__swsetup_r+0xd0>)
 800e3f4:	429c      	cmp	r4, r3
 800e3f6:	d10f      	bne.n	800e418 <__swsetup_r+0x3c>
 800e3f8:	686c      	ldr	r4, [r5, #4]
 800e3fa:	89a3      	ldrh	r3, [r4, #12]
 800e3fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e400:	0719      	lsls	r1, r3, #28
 800e402:	d42c      	bmi.n	800e45e <__swsetup_r+0x82>
 800e404:	06dd      	lsls	r5, r3, #27
 800e406:	d411      	bmi.n	800e42c <__swsetup_r+0x50>
 800e408:	2309      	movs	r3, #9
 800e40a:	6033      	str	r3, [r6, #0]
 800e40c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e410:	81a3      	strh	r3, [r4, #12]
 800e412:	f04f 30ff 	mov.w	r0, #4294967295
 800e416:	e03e      	b.n	800e496 <__swsetup_r+0xba>
 800e418:	4b25      	ldr	r3, [pc, #148]	; (800e4b0 <__swsetup_r+0xd4>)
 800e41a:	429c      	cmp	r4, r3
 800e41c:	d101      	bne.n	800e422 <__swsetup_r+0x46>
 800e41e:	68ac      	ldr	r4, [r5, #8]
 800e420:	e7eb      	b.n	800e3fa <__swsetup_r+0x1e>
 800e422:	4b24      	ldr	r3, [pc, #144]	; (800e4b4 <__swsetup_r+0xd8>)
 800e424:	429c      	cmp	r4, r3
 800e426:	bf08      	it	eq
 800e428:	68ec      	ldreq	r4, [r5, #12]
 800e42a:	e7e6      	b.n	800e3fa <__swsetup_r+0x1e>
 800e42c:	0758      	lsls	r0, r3, #29
 800e42e:	d512      	bpl.n	800e456 <__swsetup_r+0x7a>
 800e430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e432:	b141      	cbz	r1, 800e446 <__swsetup_r+0x6a>
 800e434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e438:	4299      	cmp	r1, r3
 800e43a:	d002      	beq.n	800e442 <__swsetup_r+0x66>
 800e43c:	4630      	mov	r0, r6
 800e43e:	f7ff fb47 	bl	800dad0 <_free_r>
 800e442:	2300      	movs	r3, #0
 800e444:	6363      	str	r3, [r4, #52]	; 0x34
 800e446:	89a3      	ldrh	r3, [r4, #12]
 800e448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e44c:	81a3      	strh	r3, [r4, #12]
 800e44e:	2300      	movs	r3, #0
 800e450:	6063      	str	r3, [r4, #4]
 800e452:	6923      	ldr	r3, [r4, #16]
 800e454:	6023      	str	r3, [r4, #0]
 800e456:	89a3      	ldrh	r3, [r4, #12]
 800e458:	f043 0308 	orr.w	r3, r3, #8
 800e45c:	81a3      	strh	r3, [r4, #12]
 800e45e:	6923      	ldr	r3, [r4, #16]
 800e460:	b94b      	cbnz	r3, 800e476 <__swsetup_r+0x9a>
 800e462:	89a3      	ldrh	r3, [r4, #12]
 800e464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e46c:	d003      	beq.n	800e476 <__swsetup_r+0x9a>
 800e46e:	4621      	mov	r1, r4
 800e470:	4630      	mov	r0, r6
 800e472:	f000 f933 	bl	800e6dc <__smakebuf_r>
 800e476:	89a0      	ldrh	r0, [r4, #12]
 800e478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e47c:	f010 0301 	ands.w	r3, r0, #1
 800e480:	d00a      	beq.n	800e498 <__swsetup_r+0xbc>
 800e482:	2300      	movs	r3, #0
 800e484:	60a3      	str	r3, [r4, #8]
 800e486:	6963      	ldr	r3, [r4, #20]
 800e488:	425b      	negs	r3, r3
 800e48a:	61a3      	str	r3, [r4, #24]
 800e48c:	6923      	ldr	r3, [r4, #16]
 800e48e:	b943      	cbnz	r3, 800e4a2 <__swsetup_r+0xc6>
 800e490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e494:	d1ba      	bne.n	800e40c <__swsetup_r+0x30>
 800e496:	bd70      	pop	{r4, r5, r6, pc}
 800e498:	0781      	lsls	r1, r0, #30
 800e49a:	bf58      	it	pl
 800e49c:	6963      	ldrpl	r3, [r4, #20]
 800e49e:	60a3      	str	r3, [r4, #8]
 800e4a0:	e7f4      	b.n	800e48c <__swsetup_r+0xb0>
 800e4a2:	2000      	movs	r0, #0
 800e4a4:	e7f7      	b.n	800e496 <__swsetup_r+0xba>
 800e4a6:	bf00      	nop
 800e4a8:	2000002c 	.word	0x2000002c
 800e4ac:	08011430 	.word	0x08011430
 800e4b0:	08011450 	.word	0x08011450
 800e4b4:	08011410 	.word	0x08011410

0800e4b8 <abort>:
 800e4b8:	b508      	push	{r3, lr}
 800e4ba:	2006      	movs	r0, #6
 800e4bc:	f000 f994 	bl	800e7e8 <raise>
 800e4c0:	2001      	movs	r0, #1
 800e4c2:	f7f2 fa61 	bl	8000988 <_exit>
	...

0800e4c8 <_close_r>:
 800e4c8:	b538      	push	{r3, r4, r5, lr}
 800e4ca:	4d06      	ldr	r5, [pc, #24]	; (800e4e4 <_close_r+0x1c>)
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	4604      	mov	r4, r0
 800e4d0:	4608      	mov	r0, r1
 800e4d2:	602b      	str	r3, [r5, #0]
 800e4d4:	f7f2 fa9b 	bl	8000a0e <_close>
 800e4d8:	1c43      	adds	r3, r0, #1
 800e4da:	d102      	bne.n	800e4e2 <_close_r+0x1a>
 800e4dc:	682b      	ldr	r3, [r5, #0]
 800e4de:	b103      	cbz	r3, 800e4e2 <_close_r+0x1a>
 800e4e0:	6023      	str	r3, [r4, #0]
 800e4e2:	bd38      	pop	{r3, r4, r5, pc}
 800e4e4:	2000a560 	.word	0x2000a560

0800e4e8 <__sflush_r>:
 800e4e8:	898a      	ldrh	r2, [r1, #12]
 800e4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ee:	4605      	mov	r5, r0
 800e4f0:	0710      	lsls	r0, r2, #28
 800e4f2:	460c      	mov	r4, r1
 800e4f4:	d458      	bmi.n	800e5a8 <__sflush_r+0xc0>
 800e4f6:	684b      	ldr	r3, [r1, #4]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	dc05      	bgt.n	800e508 <__sflush_r+0x20>
 800e4fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	dc02      	bgt.n	800e508 <__sflush_r+0x20>
 800e502:	2000      	movs	r0, #0
 800e504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e50a:	2e00      	cmp	r6, #0
 800e50c:	d0f9      	beq.n	800e502 <__sflush_r+0x1a>
 800e50e:	2300      	movs	r3, #0
 800e510:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e514:	682f      	ldr	r7, [r5, #0]
 800e516:	602b      	str	r3, [r5, #0]
 800e518:	d032      	beq.n	800e580 <__sflush_r+0x98>
 800e51a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e51c:	89a3      	ldrh	r3, [r4, #12]
 800e51e:	075a      	lsls	r2, r3, #29
 800e520:	d505      	bpl.n	800e52e <__sflush_r+0x46>
 800e522:	6863      	ldr	r3, [r4, #4]
 800e524:	1ac0      	subs	r0, r0, r3
 800e526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e528:	b10b      	cbz	r3, 800e52e <__sflush_r+0x46>
 800e52a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e52c:	1ac0      	subs	r0, r0, r3
 800e52e:	2300      	movs	r3, #0
 800e530:	4602      	mov	r2, r0
 800e532:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e534:	6a21      	ldr	r1, [r4, #32]
 800e536:	4628      	mov	r0, r5
 800e538:	47b0      	blx	r6
 800e53a:	1c43      	adds	r3, r0, #1
 800e53c:	89a3      	ldrh	r3, [r4, #12]
 800e53e:	d106      	bne.n	800e54e <__sflush_r+0x66>
 800e540:	6829      	ldr	r1, [r5, #0]
 800e542:	291d      	cmp	r1, #29
 800e544:	d82c      	bhi.n	800e5a0 <__sflush_r+0xb8>
 800e546:	4a2a      	ldr	r2, [pc, #168]	; (800e5f0 <__sflush_r+0x108>)
 800e548:	40ca      	lsrs	r2, r1
 800e54a:	07d6      	lsls	r6, r2, #31
 800e54c:	d528      	bpl.n	800e5a0 <__sflush_r+0xb8>
 800e54e:	2200      	movs	r2, #0
 800e550:	6062      	str	r2, [r4, #4]
 800e552:	04d9      	lsls	r1, r3, #19
 800e554:	6922      	ldr	r2, [r4, #16]
 800e556:	6022      	str	r2, [r4, #0]
 800e558:	d504      	bpl.n	800e564 <__sflush_r+0x7c>
 800e55a:	1c42      	adds	r2, r0, #1
 800e55c:	d101      	bne.n	800e562 <__sflush_r+0x7a>
 800e55e:	682b      	ldr	r3, [r5, #0]
 800e560:	b903      	cbnz	r3, 800e564 <__sflush_r+0x7c>
 800e562:	6560      	str	r0, [r4, #84]	; 0x54
 800e564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e566:	602f      	str	r7, [r5, #0]
 800e568:	2900      	cmp	r1, #0
 800e56a:	d0ca      	beq.n	800e502 <__sflush_r+0x1a>
 800e56c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e570:	4299      	cmp	r1, r3
 800e572:	d002      	beq.n	800e57a <__sflush_r+0x92>
 800e574:	4628      	mov	r0, r5
 800e576:	f7ff faab 	bl	800dad0 <_free_r>
 800e57a:	2000      	movs	r0, #0
 800e57c:	6360      	str	r0, [r4, #52]	; 0x34
 800e57e:	e7c1      	b.n	800e504 <__sflush_r+0x1c>
 800e580:	6a21      	ldr	r1, [r4, #32]
 800e582:	2301      	movs	r3, #1
 800e584:	4628      	mov	r0, r5
 800e586:	47b0      	blx	r6
 800e588:	1c41      	adds	r1, r0, #1
 800e58a:	d1c7      	bne.n	800e51c <__sflush_r+0x34>
 800e58c:	682b      	ldr	r3, [r5, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d0c4      	beq.n	800e51c <__sflush_r+0x34>
 800e592:	2b1d      	cmp	r3, #29
 800e594:	d001      	beq.n	800e59a <__sflush_r+0xb2>
 800e596:	2b16      	cmp	r3, #22
 800e598:	d101      	bne.n	800e59e <__sflush_r+0xb6>
 800e59a:	602f      	str	r7, [r5, #0]
 800e59c:	e7b1      	b.n	800e502 <__sflush_r+0x1a>
 800e59e:	89a3      	ldrh	r3, [r4, #12]
 800e5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5a4:	81a3      	strh	r3, [r4, #12]
 800e5a6:	e7ad      	b.n	800e504 <__sflush_r+0x1c>
 800e5a8:	690f      	ldr	r7, [r1, #16]
 800e5aa:	2f00      	cmp	r7, #0
 800e5ac:	d0a9      	beq.n	800e502 <__sflush_r+0x1a>
 800e5ae:	0793      	lsls	r3, r2, #30
 800e5b0:	680e      	ldr	r6, [r1, #0]
 800e5b2:	bf08      	it	eq
 800e5b4:	694b      	ldreq	r3, [r1, #20]
 800e5b6:	600f      	str	r7, [r1, #0]
 800e5b8:	bf18      	it	ne
 800e5ba:	2300      	movne	r3, #0
 800e5bc:	eba6 0807 	sub.w	r8, r6, r7
 800e5c0:	608b      	str	r3, [r1, #8]
 800e5c2:	f1b8 0f00 	cmp.w	r8, #0
 800e5c6:	dd9c      	ble.n	800e502 <__sflush_r+0x1a>
 800e5c8:	6a21      	ldr	r1, [r4, #32]
 800e5ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5cc:	4643      	mov	r3, r8
 800e5ce:	463a      	mov	r2, r7
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	47b0      	blx	r6
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	dc06      	bgt.n	800e5e6 <__sflush_r+0xfe>
 800e5d8:	89a3      	ldrh	r3, [r4, #12]
 800e5da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5de:	81a3      	strh	r3, [r4, #12]
 800e5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e4:	e78e      	b.n	800e504 <__sflush_r+0x1c>
 800e5e6:	4407      	add	r7, r0
 800e5e8:	eba8 0800 	sub.w	r8, r8, r0
 800e5ec:	e7e9      	b.n	800e5c2 <__sflush_r+0xda>
 800e5ee:	bf00      	nop
 800e5f0:	20400001 	.word	0x20400001

0800e5f4 <_fflush_r>:
 800e5f4:	b538      	push	{r3, r4, r5, lr}
 800e5f6:	690b      	ldr	r3, [r1, #16]
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	460c      	mov	r4, r1
 800e5fc:	b913      	cbnz	r3, 800e604 <_fflush_r+0x10>
 800e5fe:	2500      	movs	r5, #0
 800e600:	4628      	mov	r0, r5
 800e602:	bd38      	pop	{r3, r4, r5, pc}
 800e604:	b118      	cbz	r0, 800e60e <_fflush_r+0x1a>
 800e606:	6983      	ldr	r3, [r0, #24]
 800e608:	b90b      	cbnz	r3, 800e60e <_fflush_r+0x1a>
 800e60a:	f7ff f9a7 	bl	800d95c <__sinit>
 800e60e:	4b14      	ldr	r3, [pc, #80]	; (800e660 <_fflush_r+0x6c>)
 800e610:	429c      	cmp	r4, r3
 800e612:	d11b      	bne.n	800e64c <_fflush_r+0x58>
 800e614:	686c      	ldr	r4, [r5, #4]
 800e616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d0ef      	beq.n	800e5fe <_fflush_r+0xa>
 800e61e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e620:	07d0      	lsls	r0, r2, #31
 800e622:	d404      	bmi.n	800e62e <_fflush_r+0x3a>
 800e624:	0599      	lsls	r1, r3, #22
 800e626:	d402      	bmi.n	800e62e <_fflush_r+0x3a>
 800e628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e62a:	f7ff fa47 	bl	800dabc <__retarget_lock_acquire_recursive>
 800e62e:	4628      	mov	r0, r5
 800e630:	4621      	mov	r1, r4
 800e632:	f7ff ff59 	bl	800e4e8 <__sflush_r>
 800e636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e638:	07da      	lsls	r2, r3, #31
 800e63a:	4605      	mov	r5, r0
 800e63c:	d4e0      	bmi.n	800e600 <_fflush_r+0xc>
 800e63e:	89a3      	ldrh	r3, [r4, #12]
 800e640:	059b      	lsls	r3, r3, #22
 800e642:	d4dd      	bmi.n	800e600 <_fflush_r+0xc>
 800e644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e646:	f7ff fa3a 	bl	800dabe <__retarget_lock_release_recursive>
 800e64a:	e7d9      	b.n	800e600 <_fflush_r+0xc>
 800e64c:	4b05      	ldr	r3, [pc, #20]	; (800e664 <_fflush_r+0x70>)
 800e64e:	429c      	cmp	r4, r3
 800e650:	d101      	bne.n	800e656 <_fflush_r+0x62>
 800e652:	68ac      	ldr	r4, [r5, #8]
 800e654:	e7df      	b.n	800e616 <_fflush_r+0x22>
 800e656:	4b04      	ldr	r3, [pc, #16]	; (800e668 <_fflush_r+0x74>)
 800e658:	429c      	cmp	r4, r3
 800e65a:	bf08      	it	eq
 800e65c:	68ec      	ldreq	r4, [r5, #12]
 800e65e:	e7da      	b.n	800e616 <_fflush_r+0x22>
 800e660:	08011430 	.word	0x08011430
 800e664:	08011450 	.word	0x08011450
 800e668:	08011410 	.word	0x08011410

0800e66c <_lseek_r>:
 800e66c:	b538      	push	{r3, r4, r5, lr}
 800e66e:	4d07      	ldr	r5, [pc, #28]	; (800e68c <_lseek_r+0x20>)
 800e670:	4604      	mov	r4, r0
 800e672:	4608      	mov	r0, r1
 800e674:	4611      	mov	r1, r2
 800e676:	2200      	movs	r2, #0
 800e678:	602a      	str	r2, [r5, #0]
 800e67a:	461a      	mov	r2, r3
 800e67c:	f7f2 f9ee 	bl	8000a5c <_lseek>
 800e680:	1c43      	adds	r3, r0, #1
 800e682:	d102      	bne.n	800e68a <_lseek_r+0x1e>
 800e684:	682b      	ldr	r3, [r5, #0]
 800e686:	b103      	cbz	r3, 800e68a <_lseek_r+0x1e>
 800e688:	6023      	str	r3, [r4, #0]
 800e68a:	bd38      	pop	{r3, r4, r5, pc}
 800e68c:	2000a560 	.word	0x2000a560

0800e690 <__swhatbuf_r>:
 800e690:	b570      	push	{r4, r5, r6, lr}
 800e692:	460e      	mov	r6, r1
 800e694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e698:	2900      	cmp	r1, #0
 800e69a:	b096      	sub	sp, #88	; 0x58
 800e69c:	4614      	mov	r4, r2
 800e69e:	461d      	mov	r5, r3
 800e6a0:	da08      	bge.n	800e6b4 <__swhatbuf_r+0x24>
 800e6a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	602a      	str	r2, [r5, #0]
 800e6aa:	061a      	lsls	r2, r3, #24
 800e6ac:	d410      	bmi.n	800e6d0 <__swhatbuf_r+0x40>
 800e6ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6b2:	e00e      	b.n	800e6d2 <__swhatbuf_r+0x42>
 800e6b4:	466a      	mov	r2, sp
 800e6b6:	f000 f8b3 	bl	800e820 <_fstat_r>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	dbf1      	blt.n	800e6a2 <__swhatbuf_r+0x12>
 800e6be:	9a01      	ldr	r2, [sp, #4]
 800e6c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e6c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e6c8:	425a      	negs	r2, r3
 800e6ca:	415a      	adcs	r2, r3
 800e6cc:	602a      	str	r2, [r5, #0]
 800e6ce:	e7ee      	b.n	800e6ae <__swhatbuf_r+0x1e>
 800e6d0:	2340      	movs	r3, #64	; 0x40
 800e6d2:	2000      	movs	r0, #0
 800e6d4:	6023      	str	r3, [r4, #0]
 800e6d6:	b016      	add	sp, #88	; 0x58
 800e6d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e6dc <__smakebuf_r>:
 800e6dc:	898b      	ldrh	r3, [r1, #12]
 800e6de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6e0:	079d      	lsls	r5, r3, #30
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	460c      	mov	r4, r1
 800e6e6:	d507      	bpl.n	800e6f8 <__smakebuf_r+0x1c>
 800e6e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	6123      	str	r3, [r4, #16]
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	6163      	str	r3, [r4, #20]
 800e6f4:	b002      	add	sp, #8
 800e6f6:	bd70      	pop	{r4, r5, r6, pc}
 800e6f8:	ab01      	add	r3, sp, #4
 800e6fa:	466a      	mov	r2, sp
 800e6fc:	f7ff ffc8 	bl	800e690 <__swhatbuf_r>
 800e700:	9900      	ldr	r1, [sp, #0]
 800e702:	4605      	mov	r5, r0
 800e704:	4630      	mov	r0, r6
 800e706:	f7ff fa4f 	bl	800dba8 <_malloc_r>
 800e70a:	b948      	cbnz	r0, 800e720 <__smakebuf_r+0x44>
 800e70c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e710:	059a      	lsls	r2, r3, #22
 800e712:	d4ef      	bmi.n	800e6f4 <__smakebuf_r+0x18>
 800e714:	f023 0303 	bic.w	r3, r3, #3
 800e718:	f043 0302 	orr.w	r3, r3, #2
 800e71c:	81a3      	strh	r3, [r4, #12]
 800e71e:	e7e3      	b.n	800e6e8 <__smakebuf_r+0xc>
 800e720:	4b0d      	ldr	r3, [pc, #52]	; (800e758 <__smakebuf_r+0x7c>)
 800e722:	62b3      	str	r3, [r6, #40]	; 0x28
 800e724:	89a3      	ldrh	r3, [r4, #12]
 800e726:	6020      	str	r0, [r4, #0]
 800e728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e72c:	81a3      	strh	r3, [r4, #12]
 800e72e:	9b00      	ldr	r3, [sp, #0]
 800e730:	6163      	str	r3, [r4, #20]
 800e732:	9b01      	ldr	r3, [sp, #4]
 800e734:	6120      	str	r0, [r4, #16]
 800e736:	b15b      	cbz	r3, 800e750 <__smakebuf_r+0x74>
 800e738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e73c:	4630      	mov	r0, r6
 800e73e:	f000 f881 	bl	800e844 <_isatty_r>
 800e742:	b128      	cbz	r0, 800e750 <__smakebuf_r+0x74>
 800e744:	89a3      	ldrh	r3, [r4, #12]
 800e746:	f023 0303 	bic.w	r3, r3, #3
 800e74a:	f043 0301 	orr.w	r3, r3, #1
 800e74e:	81a3      	strh	r3, [r4, #12]
 800e750:	89a0      	ldrh	r0, [r4, #12]
 800e752:	4305      	orrs	r5, r0
 800e754:	81a5      	strh	r5, [r4, #12]
 800e756:	e7cd      	b.n	800e6f4 <__smakebuf_r+0x18>
 800e758:	0800d8f5 	.word	0x0800d8f5

0800e75c <__malloc_lock>:
 800e75c:	4801      	ldr	r0, [pc, #4]	; (800e764 <__malloc_lock+0x8>)
 800e75e:	f7ff b9ad 	b.w	800dabc <__retarget_lock_acquire_recursive>
 800e762:	bf00      	nop
 800e764:	2000a564 	.word	0x2000a564

0800e768 <__malloc_unlock>:
 800e768:	4801      	ldr	r0, [pc, #4]	; (800e770 <__malloc_unlock+0x8>)
 800e76a:	f7ff b9a8 	b.w	800dabe <__retarget_lock_release_recursive>
 800e76e:	bf00      	nop
 800e770:	2000a564 	.word	0x2000a564

0800e774 <_read_r>:
 800e774:	b538      	push	{r3, r4, r5, lr}
 800e776:	4d07      	ldr	r5, [pc, #28]	; (800e794 <_read_r+0x20>)
 800e778:	4604      	mov	r4, r0
 800e77a:	4608      	mov	r0, r1
 800e77c:	4611      	mov	r1, r2
 800e77e:	2200      	movs	r2, #0
 800e780:	602a      	str	r2, [r5, #0]
 800e782:	461a      	mov	r2, r3
 800e784:	f7f2 f90a 	bl	800099c <_read>
 800e788:	1c43      	adds	r3, r0, #1
 800e78a:	d102      	bne.n	800e792 <_read_r+0x1e>
 800e78c:	682b      	ldr	r3, [r5, #0]
 800e78e:	b103      	cbz	r3, 800e792 <_read_r+0x1e>
 800e790:	6023      	str	r3, [r4, #0]
 800e792:	bd38      	pop	{r3, r4, r5, pc}
 800e794:	2000a560 	.word	0x2000a560

0800e798 <_raise_r>:
 800e798:	291f      	cmp	r1, #31
 800e79a:	b538      	push	{r3, r4, r5, lr}
 800e79c:	4604      	mov	r4, r0
 800e79e:	460d      	mov	r5, r1
 800e7a0:	d904      	bls.n	800e7ac <_raise_r+0x14>
 800e7a2:	2316      	movs	r3, #22
 800e7a4:	6003      	str	r3, [r0, #0]
 800e7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7aa:	bd38      	pop	{r3, r4, r5, pc}
 800e7ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e7ae:	b112      	cbz	r2, 800e7b6 <_raise_r+0x1e>
 800e7b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e7b4:	b94b      	cbnz	r3, 800e7ca <_raise_r+0x32>
 800e7b6:	4620      	mov	r0, r4
 800e7b8:	f000 f830 	bl	800e81c <_getpid_r>
 800e7bc:	462a      	mov	r2, r5
 800e7be:	4601      	mov	r1, r0
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7c6:	f000 b817 	b.w	800e7f8 <_kill_r>
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d00a      	beq.n	800e7e4 <_raise_r+0x4c>
 800e7ce:	1c59      	adds	r1, r3, #1
 800e7d0:	d103      	bne.n	800e7da <_raise_r+0x42>
 800e7d2:	2316      	movs	r3, #22
 800e7d4:	6003      	str	r3, [r0, #0]
 800e7d6:	2001      	movs	r0, #1
 800e7d8:	e7e7      	b.n	800e7aa <_raise_r+0x12>
 800e7da:	2400      	movs	r4, #0
 800e7dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e7e0:	4628      	mov	r0, r5
 800e7e2:	4798      	blx	r3
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	e7e0      	b.n	800e7aa <_raise_r+0x12>

0800e7e8 <raise>:
 800e7e8:	4b02      	ldr	r3, [pc, #8]	; (800e7f4 <raise+0xc>)
 800e7ea:	4601      	mov	r1, r0
 800e7ec:	6818      	ldr	r0, [r3, #0]
 800e7ee:	f7ff bfd3 	b.w	800e798 <_raise_r>
 800e7f2:	bf00      	nop
 800e7f4:	2000002c 	.word	0x2000002c

0800e7f8 <_kill_r>:
 800e7f8:	b538      	push	{r3, r4, r5, lr}
 800e7fa:	4d07      	ldr	r5, [pc, #28]	; (800e818 <_kill_r+0x20>)
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	4604      	mov	r4, r0
 800e800:	4608      	mov	r0, r1
 800e802:	4611      	mov	r1, r2
 800e804:	602b      	str	r3, [r5, #0]
 800e806:	f7f2 f8ad 	bl	8000964 <_kill>
 800e80a:	1c43      	adds	r3, r0, #1
 800e80c:	d102      	bne.n	800e814 <_kill_r+0x1c>
 800e80e:	682b      	ldr	r3, [r5, #0]
 800e810:	b103      	cbz	r3, 800e814 <_kill_r+0x1c>
 800e812:	6023      	str	r3, [r4, #0]
 800e814:	bd38      	pop	{r3, r4, r5, pc}
 800e816:	bf00      	nop
 800e818:	2000a560 	.word	0x2000a560

0800e81c <_getpid_r>:
 800e81c:	f7f2 b89a 	b.w	8000954 <_getpid>

0800e820 <_fstat_r>:
 800e820:	b538      	push	{r3, r4, r5, lr}
 800e822:	4d07      	ldr	r5, [pc, #28]	; (800e840 <_fstat_r+0x20>)
 800e824:	2300      	movs	r3, #0
 800e826:	4604      	mov	r4, r0
 800e828:	4608      	mov	r0, r1
 800e82a:	4611      	mov	r1, r2
 800e82c:	602b      	str	r3, [r5, #0]
 800e82e:	f7f2 f8fa 	bl	8000a26 <_fstat>
 800e832:	1c43      	adds	r3, r0, #1
 800e834:	d102      	bne.n	800e83c <_fstat_r+0x1c>
 800e836:	682b      	ldr	r3, [r5, #0]
 800e838:	b103      	cbz	r3, 800e83c <_fstat_r+0x1c>
 800e83a:	6023      	str	r3, [r4, #0]
 800e83c:	bd38      	pop	{r3, r4, r5, pc}
 800e83e:	bf00      	nop
 800e840:	2000a560 	.word	0x2000a560

0800e844 <_isatty_r>:
 800e844:	b538      	push	{r3, r4, r5, lr}
 800e846:	4d06      	ldr	r5, [pc, #24]	; (800e860 <_isatty_r+0x1c>)
 800e848:	2300      	movs	r3, #0
 800e84a:	4604      	mov	r4, r0
 800e84c:	4608      	mov	r0, r1
 800e84e:	602b      	str	r3, [r5, #0]
 800e850:	f7f2 f8f9 	bl	8000a46 <_isatty>
 800e854:	1c43      	adds	r3, r0, #1
 800e856:	d102      	bne.n	800e85e <_isatty_r+0x1a>
 800e858:	682b      	ldr	r3, [r5, #0]
 800e85a:	b103      	cbz	r3, 800e85e <_isatty_r+0x1a>
 800e85c:	6023      	str	r3, [r4, #0]
 800e85e:	bd38      	pop	{r3, r4, r5, pc}
 800e860:	2000a560 	.word	0x2000a560

0800e864 <_init>:
 800e864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e866:	bf00      	nop
 800e868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e86a:	bc08      	pop	{r3}
 800e86c:	469e      	mov	lr, r3
 800e86e:	4770      	bx	lr

0800e870 <_fini>:
 800e870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e872:	bf00      	nop
 800e874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e876:	bc08      	pop	{r3}
 800e878:	469e      	mov	lr, r3
 800e87a:	4770      	bx	lr
