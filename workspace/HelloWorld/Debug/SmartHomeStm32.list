
SmartHomeStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f154  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000044e4  0801f354  0801f354  0002f354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023838  08023838  000401d4  2**0
                  CONTENTS
  4 .ARM          00000008  08023838  08023838  00033838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023840  08023840  000401d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08023840  08023840  00033840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08023848  08023848  00033848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08023850  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  080238e4  00040094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  08023984  00040134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000f954  200001d4  08023a24  000401d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000fb28  08023a24  0004fb28  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000401d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0006a542  00000000  00000000  00040202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c0dd  00000000  00000000  000aa744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003a48  00000000  00000000  000b6828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003828  00000000  00000000  000ba270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004230c  00000000  00000000  000bda98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048d8d  00000000  00000000  000ffda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00132e5f  00000000  00000000  00148b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0027b990  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0001083c  00000000  00000000  0027b9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	0801f33c 	.word	0x0801f33c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	0801f33c 	.word	0x0801f33c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	2300      	movs	r3, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
      { __c1 = __c2; }
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <_ZNSt11char_traitsIcE2ltERKcS2_>:
      static _GLIBCXX_CONSTEXPR bool
      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { return __c1 == __c2; }

      static _GLIBCXX_CONSTEXPR bool
      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	6039      	str	r1, [r7, #0]
      {
	// LWG 467.
	return (static_cast<unsigned char>(__c1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781a      	ldrb	r2, [r3, #0]
		< static_cast<unsigned char>(__c2));
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	429a      	cmp	r2, r3
 8000636:	bf34      	ite	cc
 8000638:	2301      	movcc	r3, #1
 800063a:	2300      	movcs	r3, #0
 800063c:	b2db      	uxtb	r3, r3
      }
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:

      static _GLIBCXX17_CONSTEXPR int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
 800064a:	b580      	push	{r7, lr}
 800064c:	b086      	sub	sp, #24
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d101      	bne.n	8000660 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x16>
	  return 0;
 800065c:	2300      	movs	r3, #0
 800065e:	e032      	b.n	80006c6 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x7c>
#if __cplusplus >= 201703L
	if (__builtin_constant_p(__n)
	    && __constant_char_array_p(__s1, __n)
	    && __constant_char_array_p(__s2, __n))
 8000660:	2300      	movs	r3, #0
	if (__builtin_constant_p(__n)
 8000662:	2b00      	cmp	r3, #0
 8000664:	d028      	beq.n	80006b8 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6e>
	  {
	    for (size_t __i = 0; __i < __n; ++__i)
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	697a      	ldr	r2, [r7, #20]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	429a      	cmp	r2, r3
 8000670:	d220      	bcs.n	80006b4 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6a>
	      if (lt(__s1[__i], __s2[__i]))
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	18d0      	adds	r0, r2, r3
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	4413      	add	r3, r2
 800067e:	4619      	mov	r1, r3
 8000680:	f7ff ffcf 	bl	8000622 <_ZNSt11char_traitsIcE2ltERKcS2_>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d002      	beq.n	8000690 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x46>
		return -1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e01a      	b.n	80006c6 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x7c>
	      else if (lt(__s2[__i], __s1[__i]))
 8000690:	68ba      	ldr	r2, [r7, #8]
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	18d0      	adds	r0, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	4413      	add	r3, r2
 800069c:	4619      	mov	r1, r3
 800069e:	f7ff ffc0 	bl	8000622 <_ZNSt11char_traitsIcE2ltERKcS2_>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x62>
		return 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e00c      	b.n	80006c6 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x7c>
	    for (size_t __i = 0; __i < __n; ++__i)
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	3301      	adds	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e7da      	b.n	800066a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x20>
	    return 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	e006      	b.n	80006c6 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x7c>
	  }
#endif
	return __builtin_memcmp(__s1, __s2, __n);
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f01d fd39 	bl	801e134 <memcmp>
 80006c2:	4603      	mov	r3, r0
 80006c4:	bf00      	nop
      }
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_ZNSt11char_traitsIcE6lengthEPKc>:

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
 80006da:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d004      	beq.n	80006ea <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f000 f961 	bl	80009a8 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 80006e6:	4603      	mov	r3, r0
 80006e8:	e004      	b.n	80006f4 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff fdf8 	bl	80002e0 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	bf00      	nop
      }
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <_ZNSt11char_traitsIcE4copyEPcPKcj>:
#endif
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d101      	bne.n	8000712 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x16>
	  return __s1;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	e015      	b.n	800073e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x42>
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 8000712:	f7ff ff6f 	bl	80005f4 <_ZSt21is_constant_evaluatedv>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d006      	beq.n	800072a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x2e>
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	68b9      	ldr	r1, [r7, #8]
 8000720:	68f8      	ldr	r0, [r7, #12]
 8000722:	f000 f979 	bl	8000a18 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj>
 8000726:	4603      	mov	r3, r0
 8000728:	e009      	b.n	800073e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x42>
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	4610      	mov	r0, r2
 8000730:	4619      	mov	r1, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	461a      	mov	r2, r3
 8000736:	f01d fd0d 	bl	801e154 <memcpy>
 800073a:	4603      	mov	r3, r0
 800073c:	bf00      	nop
      }
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>:
 */

#include "blinds.hpp"
#include <string.h>

Blind::Blind(GPIO_TypeDef * outputPeripheral, uint16_t output, string roomName, BlindDirection blindDirection, byte id)
 8000746:	b580      	push	{r7, lr}
 8000748:	b084      	sub	sp, #16
 800074a:	af00      	add	r7, sp, #0
 800074c:	60f8      	str	r0, [r7, #12]
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4613      	mov	r3, r2
 8000754:	80fb      	strh	r3, [r7, #6]
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3308      	adds	r3, #8
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f9af 	bl	8000abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	this->outputPeripheral = outputPeripheral;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	601a      	str	r2, [r3, #0]
	this->outputNumber = output;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	88fa      	ldrh	r2, [r7, #6]
 800076a:	809a      	strh	r2, [r3, #4]
	this->room = roomName;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	3308      	adds	r3, #8
 8000770:	6839      	ldr	r1, [r7, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f9ed 	bl	8000b52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	this->direction = blindDirection;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	7e3a      	ldrb	r2, [r7, #24]
 800077c:	f883 2020 	strb.w	r2, [r3, #32]
	this->id = id;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	7f3a      	ldrb	r2, [r7, #28]
 8000784:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_ZN6Blinds9MoveBlindEP12GPIO_TypeDeft>:

void Blinds::MoveBlind(GPIO_TypeDef * outputPeripheral, uint16_t outputNumber)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	4613      	mov	r3, r2
 800079e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(outputPeripheral, outputNumber, GPIO_PIN_SET);
 80007a0:	88fb      	ldrh	r3, [r7, #6]
 80007a2:	2201      	movs	r2, #1
 80007a4:	4619      	mov	r1, r3
 80007a6:	68b8      	ldr	r0, [r7, #8]
 80007a8:	f009 fe50 	bl	800a44c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80007ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b0:	f007 fdf0 	bl	8008394 <HAL_Delay>
	HAL_GPIO_WritePin(outputPeripheral, outputNumber, GPIO_PIN_RESET);
 80007b4:	88fb      	ldrh	r3, [r7, #6]
 80007b6:	2200      	movs	r2, #0
 80007b8:	4619      	mov	r1, r3
 80007ba:	68b8      	ldr	r0, [r7, #8]
 80007bc:	f009 fe46 	bl	800a44c <HAL_GPIO_WritePin>
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <_ZN6Blinds9MoveBlindENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Blinds::MoveBlind(string room)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < initializedBlinds; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b15      	cmp	r3, #21
 80007da:	dc29      	bgt.n	8000830 <_ZN6Blinds9MoveBlindENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>
	{
		if (blinds[i].room == room)
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	4613      	mov	r3, r2
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	4413      	add	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	3308      	adds	r3, #8
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4413      	add	r3, r2
 80007ec:	6839      	ldr	r1, [r7, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f9bd 	bl	8000b6e <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d016      	beq.n	8000828 <_ZN6Blinds9MoveBlindENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x60>
		{
			MoveBlind(blinds[i].outputPeripheral, blinds[i].outputNumber);
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4613      	mov	r3, r2
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	4413      	add	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	440b      	add	r3, r1
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	4613      	mov	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	4413      	add	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	440b      	add	r3, r1
 8000818:	3304      	adds	r3, #4
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4601      	mov	r1, r0
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ffb6 	bl	8000792 <_ZN6Blinds9MoveBlindEP12GPIO_TypeDeft>
			return;
 8000826:	e003      	b.n	8000830 <_ZN6Blinds9MoveBlindENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68>
	for (int i = 0; i < initializedBlinds; i++)
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	3301      	adds	r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	e7d2      	b.n	80007d6 <_ZN6Blinds9MoveBlindENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe>
		}
	}
}
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_ZN6Blinds11AllBlindsUpEv>:

void Blinds::AllBlindsUp()
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b084      	sub	sp, #16
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < initializedBlinds; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	2b15      	cmp	r3, #21
 8000846:	dc24      	bgt.n	8000892 <_ZN6Blinds11AllBlindsUpEv+0x5c>
	{
		if (blinds[i].direction == BlindDirection::UP)
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	4613      	mov	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	4413      	add	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	440b      	add	r3, r1
 8000856:	3320      	adds	r3, #32
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d115      	bne.n	800088a <_ZN6Blinds11AllBlindsUpEv+0x54>
		{
			MoveBlind(blinds[i].outputPeripheral, blinds[i].outputNumber);
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	4613      	mov	r3, r2
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	4413      	add	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	440b      	add	r3, r1
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	4613      	mov	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	4413      	add	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	440b      	add	r3, r1
 800087c:	3304      	adds	r3, #4
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4601      	mov	r1, r0
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ff84 	bl	8000792 <_ZN6Blinds9MoveBlindEP12GPIO_TypeDeft>
	for (int i = 0; i < initializedBlinds; i++)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3301      	adds	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e7d7      	b.n	8000842 <_ZN6Blinds11AllBlindsUpEv+0xc>
		}
	}
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <_ZN6Blinds13AllBlindsDownEv>:

void Blinds::AllBlindsDown()
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b084      	sub	sp, #16
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < initializedBlinds; i++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	2b15      	cmp	r3, #21
 80008aa:	dc24      	bgt.n	80008f6 <_ZN6Blinds13AllBlindsDownEv+0x5c>
	{
		if (blinds[i].direction == BlindDirection::DOWN)
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	4613      	mov	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	4413      	add	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	440b      	add	r3, r1
 80008ba:	3320      	adds	r3, #32
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d115      	bne.n	80008ee <_ZN6Blinds13AllBlindsDownEv+0x54>
		{
			MoveBlind(blinds[i].outputPeripheral, blinds[i].outputNumber);
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	4613      	mov	r3, r2
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	440b      	add	r3, r1
 80008d0:	6818      	ldr	r0, [r3, #0]
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	68fa      	ldr	r2, [r7, #12]
 80008d6:	4613      	mov	r3, r2
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	4413      	add	r3, r2
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	440b      	add	r3, r1
 80008e0:	3304      	adds	r3, #4
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4601      	mov	r1, r0
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ff52 	bl	8000792 <_ZN6Blinds9MoveBlindEP12GPIO_TypeDeft>
	for (int i = 0; i < initializedBlinds; i++)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	3301      	adds	r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	e7d7      	b.n	80008a6 <_ZN6Blinds13AllBlindsDownEv+0xc>
		}
	}
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <_ZN6Blinds11GetNameByIdB5cxx11ESt4byte>:
	}
	return (byte)0;
}

string Blinds::GetNameById(byte id)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	4613      	mov	r3, r2
 800090c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < initializedBlinds; i++)
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	2b15      	cmp	r3, #21
 8000916:	dc1c      	bgt.n	8000952 <_ZN6Blinds11GetNameByIdB5cxx11ESt4byte+0x52>
	{
		if (blinds[i].id == id)
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	697a      	ldr	r2, [r7, #20]
 800091c:	4613      	mov	r3, r2
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	4413      	add	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	440b      	add	r3, r1
 8000926:	3321      	adds	r3, #33	; 0x21
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	79fa      	ldrb	r2, [r7, #7]
 800092c:	429a      	cmp	r2, r3
 800092e:	d10c      	bne.n	800094a <_ZN6Blinds11GetNameByIdB5cxx11ESt4byte+0x4a>
			return blinds[i].room;
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	4613      	mov	r3, r2
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	4413      	add	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	3308      	adds	r3, #8
 800093c:	68ba      	ldr	r2, [r7, #8]
 800093e:	4413      	add	r3, r2
 8000940:	4619      	mov	r1, r3
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f000 f93d 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000948:	e014      	b.n	8000974 <_ZN6Blinds11GetNameByIdB5cxx11ESt4byte+0x74>
	for (int i = 0; i < initializedBlinds; i++)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e7df      	b.n	8000912 <_ZN6Blinds11GetNameByIdB5cxx11ESt4byte+0x12>
	}
	return "";
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4618      	mov	r0, r3
 8000958:	f01d f9cd 	bl	801dcf6 <_ZNSaIcEC1Ev>
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	461a      	mov	r2, r3
 8000962:	4906      	ldr	r1, [pc, #24]	; (800097c <_ZN6Blinds11GetNameByIdB5cxx11ESt4byte+0x7c>)
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f000 f8cd 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	4618      	mov	r0, r3
 8000970:	f01d f9c3 	bl	801dcfa <_ZNSaIcED1Ev>
}
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	0801f354 	.word	0x0801f354

08000980 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	429a      	cmp	r2, r3
 8000994:	bf0c      	ite	eq
 8000996:	2301      	moveq	r3, #1
 8000998:	2300      	movne	r3, #0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	2200      	movs	r2, #0
 80009bc:	72fa      	strb	r2, [r7, #11]
 80009be:	f107 020b 	add.w	r2, r7, #11
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ffdb 	bl	8000980 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f083 0301 	eor.w	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d003      	beq.n	80009de <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x36>
        ++__i;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	3301      	adds	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80009dc:	e7ea      	b.n	80009b4 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xc>
      return __i;
 80009de:	68fb      	ldr	r3, [r7, #12]
    }
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_ZSt4copyIPKcPcET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f000 f91b 	bl	8000c30 <_ZSt12__miter_baseIPKcET_S2_>
 80009fa:	4604      	mov	r4, r0
 80009fc:	68b8      	ldr	r0, [r7, #8]
 80009fe:	f000 f917 	bl	8000c30 <_ZSt12__miter_baseIPKcET_S2_>
 8000a02:	4603      	mov	r3, r0
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4620      	mov	r0, r4
 8000a0a:	f000 f91c 	bl	8000c46 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>
 8000a0e:	4603      	mov	r3, r0
    }
 8000a10:	4618      	mov	r0, r3
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}

08000a18 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj>:
    char_traits<_CharT>::
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
      std::copy(__s2, __s2 + __n, __s1);
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	68b8      	ldr	r0, [r7, #8]
 8000a30:	f7ff ffda 	bl	80009e8 <_ZSt4copyIPKcPcET0_T_S4_S3_>
      return __s1;
 8000a34:	68fb      	ldr	r3, [r7, #12]
    }
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>:
      basic_string(__sv_wrapper __svw, const _Alloc& __a)
      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
#endif

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f01d f957 	bl	801dcfa <_ZNSaIcED1Ev>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
#endif // C++17

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
      { _M_dispose(); }
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 f94a 	bl	8000cf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffe9 	bl	8000a3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderD1Ev>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
    public:
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
      { return _M_string_length; }
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
       *  the contents through the returned pointer. To get a pointer that
       *  allows modifying the contents use @c &str[0] instead,
       *  (or in C++17 the non-const @c str.data() overload).
      */
      const _CharT*
      data() const _GLIBCXX_NOEXCEPT
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
      { return _M_data(); }
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 f902 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
      length() const _GLIBCXX_NOEXCEPT
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
      { return _M_string_length; }
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
      basic_string()
 8000abe:	b5b0      	push	{r4, r5, r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
      : _M_dataplus(_M_local_data())
 8000ac6:	687c      	ldr	r4, [r7, #4]
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 f8f5 	bl	8000cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000ace:	4605      	mov	r5, r0
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f01d f90e 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4629      	mov	r1, r5
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	f000 f935 	bl	8000d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4618      	mov	r0, r3
 8000aee:	f01d f904 	bl	801dcfa <_ZNSaIcED1Ev>
      { _M_set_length(0); }
 8000af2:	2100      	movs	r1, #0
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 f981 	bl	8000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4618      	mov	r0, r3
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bdb0      	pop	{r4, r5, r7, pc}

08000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8000b04:	b5b0      	push	{r4, r5, r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8000b10:	68fc      	ldr	r4, [r7, #12]
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	f000 f8d0 	bl	8000cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4620      	mov	r0, r4
 8000b20:	f000 f8d8 	bl	8000cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	const _CharT* __end = __s ? __s + traits_type::length(__s)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d006      	beq.n	8000b38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x34>
 8000b2a:	68b8      	ldr	r0, [r7, #8]
 8000b2c:	f7ff fdcf 	bl	80006ce <_ZNSt11char_traitsIcE6lengthEPKc>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	e000      	b.n	8000b3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x36>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, random_access_iterator_tag());
 8000b3c:	462b      	mov	r3, r5
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f000 f98a 	bl	8000e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bdb0      	pop	{r4, r5, r7, pc}

08000b52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
      operator=(const basic_string& __str)
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
	return this->assign(__str);
 8000b5c:	6839      	ldr	r1, [r7, #0]
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 f9fe 	bl	8000f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_>
 8000b64:	4603      	mov	r3, r0
      }
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
 8000b6e:	b5b0      	push	{r4, r5, r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
    { return (__lhs.size() == __rhs.size()
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff7c 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000b7e:	4604      	mov	r4, r0
 8000b80:	6838      	ldr	r0, [r7, #0]
 8000b82:	f7ff ff78 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000b86:	4603      	mov	r3, r0
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	d115      	bne.n	8000bb8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff7e 	bl	8000a8e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8000b92:	4604      	mov	r4, r0
 8000b94:	6838      	ldr	r0, [r7, #0]
 8000b96:	f7ff ff7a 	bl	8000a8e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8000b9a:	4605      	mov	r5, r0
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff6a 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4629      	mov	r1, r5
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f7ff fd4e 	bl	800064a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d101      	bne.n	8000bb8 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4a>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_+0x4c>
 8000bb8:	2300      	movs	r3, #0
						    __lhs.size())); }
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bdb0      	pop	{r4, r5, r7, pc}

08000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
      basic_string(const basic_string& __str)
 8000bc2:	b5b0      	push	{r4, r5, r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 8000bcc:	687c      	ldr	r4, [r7, #4]
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f872 	bl	8000cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000bd4:	4605      	mov	r5, r0
 8000bd6:	6838      	ldr	r0, [r7, #0]
 8000bd8:	f000 fa63 	bl	80010a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 fa4e 	bl	8001086 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4629      	mov	r1, r5
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f000 f8ad 	bl	8000d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f01d f87c 	bl	801dcfa <_ZNSaIcED1Ev>
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 8000c02:	6838      	ldr	r0, [r7, #0]
 8000c04:	f000 f84c 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000c08:	4605      	mov	r5, r0
 8000c0a:	6838      	ldr	r0, [r7, #0]
 8000c0c:	f000 f848 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000c10:	4604      	mov	r4, r0
 8000c12:	6838      	ldr	r0, [r7, #0]
 8000c14:	f7ff ff47 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4423      	add	r3, r4
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4629      	mov	r1, r5
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 fa49 	bl	80010b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bdb0      	pop	{r4, r5, r7, pc}

08000c30 <_ZSt12__miter_baseIPKcET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_ZSt13__copy_move_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8000c46:	b5b0      	push	{r4, r5, r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f000 fa3f 	bl	80010d6 <_ZSt12__niter_baseIPKcET_S2_>
 8000c58:	4604      	mov	r4, r0
 8000c5a:	68b8      	ldr	r0, [r7, #8]
 8000c5c:	f000 fa3b 	bl	80010d6 <_ZSt12__niter_baseIPKcET_S2_>
 8000c60:	4605      	mov	r5, r0
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 fa41 	bl	80010ec <_ZSt12__niter_baseIPcET_S1_>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4629      	mov	r1, r5
 8000c70:	4620      	mov	r0, r4
 8000c72:	f000 fa52 	bl	800111a <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>
 8000c76:	4602      	mov	r2, r0
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fa40 	bl	8001102 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 8000c82:	4603      	mov	r3, r0
    }
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bdb0      	pop	{r4, r5, r7, pc}

08000c8c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
      _M_data() const
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
      { return _M_dataplus._M_p; }
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data()
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3308      	adds	r3, #8
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fa38 	bl	800113a <_ZNSt14pointer_traitsIPcE10pointer_toERc>
 8000cca:	4603      	mov	r3, r0
      }
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
	_Alloc_hider(pointer __dat, const _Alloc& __a)
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
	: allocator_type(__a), _M_p(__dat) { }
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f01d f808 	bl	801dcf8 <_ZNSaIcEC1ERKS_>
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
      _M_dispose()
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	if (!_M_is_local())
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 f83c 	bl	8000d7e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f083 0301 	eor.w	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d005      	beq.n	8000d1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x26>
	  _M_destroy(_M_allocated_capacity);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	4619      	mov	r1, r3
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 fa65 	bl	80011e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
      }
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator()
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
      { return _M_dataplus; }
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>:
	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
	: allocator_type(std::move(__a)), _M_p(__dat) { }
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffec 	bl	8000d3c <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4619      	mov	r1, r3
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f01c ffc5 	bl	801dcf8 <_ZNSaIcEC1ERKS_>
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
      _M_is_local() const
 8000d7e:	b590      	push	{r4, r7, lr}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
      { return _M_data() == _M_local_data(); }
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff8a 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 fa41 	bl	8001216 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000d94:	4603      	mov	r3, r0
 8000d96:	429c      	cmp	r4, r3
 8000d98:	bf0c      	ite	eq
 8000d9a:	2301      	moveq	r3, #1
 8000d9c:	2300      	movne	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd90      	pop	{r4, r7, pc}

08000da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
      _M_data(pointer __p)
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
      { _M_dataplus._M_p = __p; }
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
      _M_capacity(size_type __capacity)
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
      { _M_allocated_capacity = __capacity; }
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEj>:
      _M_length(size_type __length)
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
      { _M_string_length = __length; }
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
      _M_set_length(size_type __n)
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	_M_length(__n);
 8000e06:	6839      	ldr	r1, [r7, #0]
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ffe9 	bl	8000de0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEj>
	traits_type::assign(_M_data()[__n], _CharT());
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff46 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000e14:	4602      	mov	r2, r0
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	73fa      	strb	r2, [r7, #15]
 8000e1e:	f107 020f 	add.w	r2, r7, #15
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fbed 	bl	8000604 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8000e32:	b5b0      	push	{r4, r5, r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8000e3c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fa06 	bl	8001252 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8000e46:	462a      	mov	r2, r5
 8000e48:	6839      	ldr	r1, [r7, #0]
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f000 fa0b 	bl	8001266 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8000e50:	4603      	mov	r3, r0
    }
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	703b      	strb	r3, [r7, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8000e6a:	68b8      	ldr	r0, [r7, #8]
 8000e6c:	f000 f9e1 	bl	8001232 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d005      	beq.n	8000e82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d001      	beq.n	8000e82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x26>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x28>
 8000e82:	2300      	movs	r3, #0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 8000e88:	4817      	ldr	r0, [pc, #92]	; (8000ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x8c>)
 8000e8a:	f01c ff3a 	bl	801dd02 <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	68b8      	ldr	r0, [r7, #8]
 8000e92:	f7ff ffce 	bl	8000e32 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8000e96:	4603      	mov	r3, r0
 8000e98:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d910      	bls.n	8000ec2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x66>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f000 f953 	bl	8001154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f7ff ff78 	bl	8000da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f7ff ff81 	bl	8000dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff feec 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f9d8 	bl	8001284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff ff8f 	bl	8000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	0801f358 	.word	0x0801f358

08000eec <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8000f00:	2301      	movs	r3, #1
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_ZSteqRKSaIcES1_>:
	  __allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
      { return true; }
 8000f16:	2301      	movs	r3, #1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
      allocate(allocator_type& __a, size_type __n)
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8000f36:	f7ff fb5d 	bl	80005f4 <_ZSt21is_constant_evaluatedv>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d004      	beq.n	8000f4a <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x26>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000f40:	68b8      	ldr	r0, [r7, #8]
 8000f42:	f01c fec5 	bl	801dcd0 <_Znwj>
 8000f46:	4603      	mov	r3, r0
 8000f48:	e006      	b.n	8000f58 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x34>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 fa93 	bl	800147a <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	bf00      	nop
      { return __a.allocate(__n); }
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_>:
      assign(const basic_string& __str)
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	if (_Alloc_traits::_S_propagate_on_copy_assign())
 8000f6a:	f7ff ffbf 	bl	8000eec <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE27_S_propagate_on_copy_assignEv>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d07f      	beq.n	8001074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x114>
	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
 8000f74:	f7ff ffc2 	bl	8000efc <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE15_S_always_equalEv>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	f083 0301 	eor.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
		&& _M_get_allocator() != __str._M_get_allocator())
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d01c      	beq.n	8000fbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x5e>
	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fefa 	bl	8000d7e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f083 0301 	eor.w	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d013      	beq.n	8000fbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x5e>
		&& _M_get_allocator() != __str._M_get_allocator())
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff fec5 	bl	8000d26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	6838      	ldr	r0, [r7, #0]
 8000fa0:	f000 f87f 	bl	80010a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f7ff ffaf 	bl	8000f0c <_ZSteqRKSaIcES1_>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x5e>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0x60>
 8000fbe:	2300      	movs	r3, #0
	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d04b      	beq.n	800105c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0xfc>
		if (__str.size() <= _S_local_capacity)
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f7ff fd56 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	bf94      	ite	ls
 8000fd0:	2301      	movls	r3, #1
 8000fd2:	2300      	movhi	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d012      	beq.n	8001000 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0xa0>
		    _M_destroy(_M_allocated_capacity);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f901 	bl	80011e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
		    _M_data(_M_local_data());
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fe66 	bl	8000cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff fed9 	bl	8000da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		    _M_set_length(0);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff feff 	bl	8000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
 8000ffe:	e02d      	b.n	800105c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_+0xfc>
		    const auto __len = __str.size();
 8001000:	6838      	ldr	r0, [r7, #0]
 8001002:	f7ff fd38 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001006:	6178      	str	r0, [r7, #20]
		    auto __alloc = __str._M_get_allocator();
 8001008:	6838      	ldr	r0, [r7, #0]
 800100a:	f000 f84a 	bl	80010a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 800100e:	4602      	mov	r2, r0
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4611      	mov	r1, r2
 8001016:	4618      	mov	r0, r3
 8001018:	f01c fe6e 	bl	801dcf8 <_ZNSaIcEC1ERKS_>
		    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff7c 	bl	8000f24 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 800102c:	6138      	str	r0, [r7, #16]
		    _M_destroy(_M_allocated_capacity);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	4619      	mov	r1, r3
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f8d7 	bl	80011e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
		    _M_data(__ptr);
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff feb3 	bl	8000da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		    _M_capacity(__len);
 8001042:	6979      	ldr	r1, [r7, #20]
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff febd 	bl	8000dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
		    _M_set_length(__len);
 800104a:	6979      	ldr	r1, [r7, #20]
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff fed5 	bl	8000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
		    auto __alloc = __str._M_get_allocator();
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4618      	mov	r0, r3
 8001058:	f01c fe4f 	bl	801dcfa <_ZNSaIcED1Ev>
	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff fe62 	bl	8000d26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8001062:	4604      	mov	r4, r0
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f000 f81c 	bl	80010a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 800106a:	4603      	mov	r3, r0
 800106c:	4619      	mov	r1, r3
 800106e:	4620      	mov	r0, r4
 8001070:	f000 f91a 	bl	80012a8 <_ZSt15__alloc_on_copyISaIcEEvRT_RKS1_>
	this->_M_assign(__str);
 8001074:	6839      	ldr	r1, [r7, #0]
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f921 	bl	80012be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
	return *this;
 800107c:	687b      	ldr	r3, [r7, #4]
      }
 800107e:	4618      	mov	r0, r3
 8001080:	371c      	adds	r7, #28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd90      	pop	{r4, r7, pc}

08001086 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f955 	bl	8001344 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator() const
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
      { return _M_dataplus; }
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	68b9      	ldr	r1, [r7, #8]
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 f948 	bl	800135e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_ZSt12__niter_baseIPKcET_S2_>:
    __niter_base(_Iterator __it)
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_ZSt12__niter_wrapIPcET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_ZSt14__copy_move_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800111a:	b580      	push	{r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 f928 	bl	8001380 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>
 8001130:	4603      	mov	r3, r0
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_ZNSt14pointer_traitsIPcE10pointer_toERc>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f939 	bl	80013ba <_ZSt9addressofIcEPT_RS0_>
 8001148:	4603      	mov	r3, r0
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
    basic_string<_CharT, _Traits, _Alloc>::
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
      if (__capacity > max_size())
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	681c      	ldr	r4, [r3, #0]
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f000 f934 	bl	80013d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 800116a:	4603      	mov	r3, r0
 800116c:	429c      	cmp	r4, r3
 800116e:	bf8c      	ite	hi
 8001170:	2301      	movhi	r3, #1
 8001172:	2300      	movls	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
	std::__throw_length_error(__N("basic_string::_M_create"));
 800117a:	481a      	ldr	r0, [pc, #104]	; (80011e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x90>)
 800117c:	f01c fdc7 	bl	801dd0e <_ZSt20__throw_length_errorPKc>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	d21c      	bcs.n	80011c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	429a      	cmp	r2, r3
 8001194:	d216      	bcs.n	80011c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
	  __capacity = 2 * __old_capacity;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	005a      	lsls	r2, r3, #1
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	601a      	str	r2, [r3, #0]
	  if (__capacity > max_size())
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	681c      	ldr	r4, [r3, #0]
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f000 f915 	bl	80013d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 80011a8:	4603      	mov	r3, r0
 80011aa:	429c      	cmp	r4, r3
 80011ac:	bf8c      	ite	hi
 80011ae:	2301      	movhi	r3, #1
 80011b0:	2300      	movls	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
	    __capacity = max_size();
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f000 f90a 	bl	80013d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 80011be:	4602      	mov	r2, r0
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	601a      	str	r2, [r3, #0]
      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff fdae 	bl	8000d26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	4610      	mov	r0, r2
 80011d6:	f7ff fea5 	bl	8000f24 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 80011da:	4603      	mov	r3, r0
    }
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	0801f384 	.word	0x0801f384

080011e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
      _M_destroy(size_type __size) throw()
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fd97 	bl	8000d26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 80011f8:	4604      	mov	r4, r0
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fd50 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001200:	4601      	mov	r1, r0
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	461a      	mov	r2, r3
 8001208:	4620      	mov	r0, r4
 800120a:	f000 f8f4 	bl	80013f6 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bd90      	pop	{r4, r7, pc}

08001216 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data() const
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3308      	adds	r3, #8
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f906 	bl	8001434 <_ZNSt14pointer_traitsIPKcE10pointer_toERS0_>
 8001228:	4603      	mov	r3, r0
      }
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_ZN9__gnu_cxx17__is_null_pointerIKcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	1ad3      	subs	r3, r2, r3
    }
 8001278:	4618      	mov	r0, r3
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
      { _S_copy(__p, __k1, __k2 - __k1); }
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	461a      	mov	r2, r3
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 f8d6 	bl	800144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_ZSt15__alloc_on_copyISaIcEEvRT_RKS1_>:
    { }
#endif

  template<typename _Alloc>
    _GLIBCXX14_CONSTEXPR inline void
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
      if constexpr (__pocca::value)
	__one = __two;
#else
      __do_alloc_on_copy(__one, __two, __pocca());
#endif
    }
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
 80012be:	b590      	push	{r4, r7, lr}
 80012c0:	b087      	sub	sp, #28
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d035      	beq.n	800133c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x7e>
	{
	  const size_type __rsize = __str.length();
 80012d0:	6838      	ldr	r0, [r7, #0]
 80012d2:	f7ff fbe8 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80012d6:	6178      	str	r0, [r7, #20]
	  const size_type __capacity = capacity();
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f8eb 	bl	80014b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80012de:	6138      	str	r0, [r7, #16]

	  if (__rsize > __capacity)
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d915      	bls.n	8001314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x56>
	    {
	      size_type __new_capacity = __rsize;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	60bb      	str	r3, [r7, #8]
	      pointer __tmp = _M_create(__new_capacity, __capacity);
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4619      	mov	r1, r3
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff2d 	bl	8001154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80012fa:	60f8      	str	r0, [r7, #12]
	      _M_dispose();
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fcfb 	bl	8000cf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	      _M_data(__tmp);
 8001302:	68f9      	ldr	r1, [r7, #12]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fd4f 	bl	8000da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	      _M_capacity(__new_capacity);
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	4619      	mov	r1, r3
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fd58 	bl	8000dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	    }

	  if (__rsize)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00c      	beq.n	8001334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x76>
	    this->_S_copy(_M_data(), __str._M_data(), __rsize);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fcc0 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001320:	4604      	mov	r4, r0
 8001322:	6838      	ldr	r0, [r7, #0]
 8001324:	f7ff fcbc 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001328:	4603      	mov	r3, r0
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4619      	mov	r1, r3
 800132e:	4620      	mov	r0, r4
 8001330:	f000 f88c 	bl	800144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>

	  _M_set_length(__rsize);
 8001334:	6979      	ldr	r1, [r7, #20]
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fd60 	bl	8000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
	}
    }
 800133c:	bf00      	nop
 800133e:	371c      	adds	r7, #28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd90      	pop	{r4, r7, pc}

08001344 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 800134e:	6839      	ldr	r1, [r7, #0]
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f01c fcd1 	bl	801dcf8 <_ZNSaIcEC1ERKS_>
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 800135e:	b590      	push	{r4, r7, lr}
 8001360:	b087      	sub	sp, #28
 8001362:	af00      	add	r7, sp, #0
 8001364:	60f8      	str	r0, [r7, #12]
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 800136c:	4623      	mov	r3, r4
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f000 f8c4 	bl	8001500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8001378:	bf00      	nop
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd90      	pop	{r4, r7, pc}

08001380 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 800138c:	f7ff f932 	bl	80005f4 <_ZSt21is_constant_evaluatedv>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d006      	beq.n	80013a4 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 f8f8 	bl	8001590 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>
 80013a0:	4603      	mov	r3, r0
 80013a2:	e006      	b.n	80013b2 <_ZSt14__copy_move_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 f913 	bl	80015d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 80013ae:	4603      	mov	r3, r0
 80013b0:	bf00      	nop
    }
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_ZSt9addressofIcEPT_RS0_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f920 	bl	8001608 <_ZSt11__addressofIcEPT_RS0_>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff fe61 	bl	80010a2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f91b 	bl	800161e <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 80013e8:	4603      	mov	r3, r0
 80013ea:	3b01      	subs	r3, #1
 80013ec:	085b      	lsrs	r3, r3, #1
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b088      	sub	sp, #32
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	61bb      	str	r3, [r7, #24]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800140e:	f7ff f8f1 	bl	80005f4 <_ZSt21is_constant_evaluatedv>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	    ::operator delete(__p);
 8001418:	69b8      	ldr	r0, [r7, #24]
 800141a:	f01c fc51 	bl	801dcc0 <_ZdlPv>
	    return;
 800141e:	e005      	b.n	800142c <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	69b9      	ldr	r1, [r7, #24]
 8001424:	69f8      	ldr	r0, [r7, #28]
 8001426:	f000 f94f 	bl	80016c8 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 800142a:	bf00      	nop
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_ZNSt14pointer_traitsIPKcE10pointer_toERS0_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f8fa 	bl	8001636 <_ZSt9addressofIKcEPT_RS1_>
 8001442:	4603      	mov	r3, r0
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
	if (__n == 1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d104      	bne.n	8001468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x1c>
	  traits_type::assign(*__d, *__s);
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f7ff f8cf 	bl	8000604 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 8001466:	e004      	b.n	8001472 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x26>
	  traits_type::copy(__d, __s, __n);
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	68b9      	ldr	r1, [r7, #8]
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff f945 	bl	80006fc <_ZNSt11char_traitsIcE4copyEPcPKcj>
      }
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
#endif

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800147a:	b580      	push	{r7, lr}
 800147c:	b084      	sub	sp, #16
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
	 // 3308. std::allocator<void>().allocate(n)
	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
#endif

	if (__n > this->_M_max_size())
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f8e1 	bl	800164e <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	4293      	cmp	r3, r2
 8001492:	bf8c      	ite	hi
 8001494:	2301      	movhi	r3, #1
 8001496:	2300      	movls	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800149e:	f01c fc2d 	bl	801dcfc <_ZSt17__throw_bad_allocv>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80014a2:	68b8      	ldr	r0, [r7, #8]
 80014a4:	f01c fc14 	bl	801dcd0 <_Znwj>
 80014a8:	4603      	mov	r3, r0
 80014aa:	bf00      	nop
      }
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	return _M_is_local() ? size_type(_S_local_capacity)
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fc5e 	bl	8000d7e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x18>
 80014c8:	230f      	movs	r3, #15
	                     : _M_allocated_capacity;
 80014ca:	e001      	b.n	80014d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0x1c>
	return _M_is_local() ? size_type(_S_local_capacity)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
      }
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
    distance(_InputIterator __first, _InputIterator __last)
 80014d8:	b5b0      	push	{r4, r5, r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 80014e2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fbd0 	bl	8000c8c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__distance(__first, __last,
 80014ec:	462a      	mov	r2, r5
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	4620      	mov	r0, r4
 80014f2:	f000 f8c8 	bl	8001686 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 80014f6:	4603      	mov	r3, r0
    }
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bdb0      	pop	{r4, r5, r7, pc}

08001500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	703b      	strb	r3, [r7, #0]
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800150e:	68b8      	ldr	r0, [r7, #8]
 8001510:	f000 f8a9 	bl	8001666 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	d001      	beq.n	8001526 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x26>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8001526:	2300      	movs	r3, #0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x32>
	  std::__throw_logic_error(__N("basic_string::"
 800152c:	4817      	ldr	r0, [pc, #92]	; (800158c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x8c>)
 800152e:	f01c fbe8 	bl	801dd02 <_ZSt19__throw_logic_errorPKc>
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	68b8      	ldr	r0, [r7, #8]
 8001536:	f7ff ffcf 	bl	80014d8 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800153a:	4603      	mov	r3, r0
 800153c:	617b      	str	r3, [r7, #20]
	if (__dnew > size_type(_S_local_capacity))
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d910      	bls.n	8001566 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x66>
	    _M_data(_M_create(__dnew, size_type(0)));
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	4619      	mov	r1, r3
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f7ff fe01 	bl	8001154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001552:	4603      	mov	r3, r0
 8001554:	4619      	mov	r1, r3
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f7ff fc26 	bl	8000da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	4619      	mov	r1, r3
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff fc2f 	bl	8000dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f7ff fb9a 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800156c:	4603      	mov	r3, r0
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f896 	bl	80016a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	_M_set_length(__dnew);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	4619      	mov	r1, r3
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff fc3d 	bl	8000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	0801f358 	.word	0x0801f358

08001590 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dd0d      	ble.n	80015c6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x36>
	      *__result = *__first;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	781a      	ldrb	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	701a      	strb	r2, [r3, #0]
	      ++__first;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3301      	adds	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3301      	adds	r3, #1
 80015bc:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e7ee      	b.n	80015a4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKcPcEET0_T_S7_S6_+0x14>
	  return __result;
 80015c6:	687b      	ldr	r3, [r7, #4]
	}
 80015c8:	4618      	mov	r0, r3
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	461a      	mov	r2, r3
 80015f2:	68f9      	ldr	r1, [r7, #12]
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f01c fdbb 	bl	801e170 <memmove>
	  return __result + _Num;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	4413      	add	r3, r2
	}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
      }
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_ZSt9addressofIKcEPT_RS1_>:
    addressof(_Tp& __r) noexcept
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f84f 	bl	80016e2 <_ZSt11__addressofIKcEPT_RS1_>
 8001644:	4603      	mov	r3, r0
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_ZNK9__gnu_cxx13new_allocatorIcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001656:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:
    __is_null_pointer(_Type* __ptr)
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	bf0c      	ite	eq
 8001674:	2301      	moveq	r3, #1
 8001676:	2300      	movne	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1ad3      	subs	r3, r2, r3
    }
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
      { _S_copy(__p, __k1, __k2 - __k1); }
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f7ff fec6 	bl	800144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(_Tp* __p, size_type __t)
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	68b8      	ldr	r0, [r7, #8]
 80016d8:	f01c faf4 	bl	801dcc4 <_ZdlPvj>
      }
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_ZSt11__addressofIKcEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
      find(const char_type* __s, size_t __n, const char_type& __a)
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
	if (__n == 0)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0x16>
	  return 0;
 8001720:	2300      	movs	r3, #0
 8001722:	e012      	b.n	800174a <_ZNSt11char_traitsIcE4findEPKcjRS1_+0x3c>
	    && __constant_char_array_p(__s, __n))
 8001724:	2300      	movs	r3, #0
	if (__builtin_constant_p(__n)
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0x2a>
	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f002 f9ee 	bl	8003b10 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcjRS2_>
 8001734:	4603      	mov	r3, r0
 8001736:	e008      	b.n	800174a <_ZNSt11char_traitsIcE4findEPKcjRS1_+0x3c>
	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	4619      	mov	r1, r3
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7fe fd7d 	bl	8000240 <memchr>
 8001746:	4603      	mov	r3, r0
 8001748:	bf00      	nop
      }
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_ZNSt11char_traitsIcE4moveEPcPKcj>:
      move(char_type* __s1, const char_type* __s2, size_t __n)
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
	if (__n == 0)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <_ZNSt11char_traitsIcE4moveEPcPKcj+0x16>
	  return __s1;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	e012      	b.n	800178e <_ZNSt11char_traitsIcE4moveEPcPKcj+0x3c>
	if (std::is_constant_evaluated())
 8001768:	f7fe ff44 	bl	80005f4 <_ZSt21is_constant_evaluatedv>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d006      	beq.n	8001780 <_ZNSt11char_traitsIcE4moveEPcPKcj+0x2e>
	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f002 fa05 	bl	8003b86 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj>
 800177c:	4603      	mov	r3, r0
 800177e:	e006      	b.n	800178e <_ZNSt11char_traitsIcE4moveEPcPKcj+0x3c>
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f01c fcf3 	bl	801e170 <memmove>
 800178a:	4603      	mov	r3, r0
 800178c:	bf00      	nop
      }
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_ZNSt11char_traitsIcE6assignEPcjc>:

      static _GLIBCXX20_CONSTEXPR char_type*
      assign(char_type* __s, size_t __n, char_type __a)
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	4613      	mov	r3, r2
 80017a2:	71fb      	strb	r3, [r7, #7]
      {
	if (__n == 0)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <_ZNSt11char_traitsIcE6assignEPcjc+0x18>
	  return __s;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	e014      	b.n	80017d8 <_ZNSt11char_traitsIcE6assignEPcjc+0x42>
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80017ae:	f7fe ff21 	bl	80005f4 <_ZSt21is_constant_evaluatedv>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d007      	beq.n	80017c8 <_ZNSt11char_traitsIcE6assignEPcjc+0x32>
	  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	461a      	mov	r2, r3
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f002 fa36 	bl	8003c30 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcjc>
 80017c4:	4603      	mov	r3, r0
 80017c6:	e007      	b.n	80017d8 <_ZNSt11char_traitsIcE6assignEPcjc+0x42>
#endif
	return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	4619      	mov	r1, r3
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f01c fce8 	bl	801e1a4 <memset>
 80017d4:	4603      	mov	r3, r0
 80017d6:	bf00      	nop
      }
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f002 fa31 	bl	8003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80017f2:	4602      	mov	r2, r0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4904      	ldr	r1, [pc, #16]	; (800180c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 80017fe:	f002 fa6b 	bl	8003cd8 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8001802:	4603      	mov	r3, r0
					__idx, __base); }
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	0801f39c 	.word	0x0801f39c
 8001810:	0801e7a5 	.word	0x0801e7a5

08001814 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	0fdb      	lsrs	r3, r3, #31
 8001822:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <_ZNSt7__cxx119to_stringEi+0x1c>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	425b      	negs	r3, r3
 800182e:	e000      	b.n	8001832 <_ZNSt7__cxx119to_stringEi+0x1e>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 8001834:	210a      	movs	r1, #10
 8001836:	6938      	ldr	r0, [r7, #16]
 8001838:	f002 fa94 	bl	8003d64 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 800183c:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 800183e:	7dfa      	ldrb	r2, [r7, #23]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	18d4      	adds	r4, r2, r3
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4618      	mov	r0, r3
 800184a:	f01c fa54 	bl	801dcf6 <_ZNSaIcEC1Ev>
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	222d      	movs	r2, #45	; 0x2d
 8001854:	4621      	mov	r1, r4
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f002 fac3 	bl	8003de2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEjcRKS3_>
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	4618      	mov	r0, r3
 8001862:	f01c fa4a 	bl	801dcfa <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	4619      	mov	r1, r3
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f002 fad6 	bl	8003e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001870:	4603      	mov	r3, r0
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68f9      	ldr	r1, [r7, #12]
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fae0 	bl	8003e3c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 800187c:	bf00      	nop
  }
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd90      	pop	{r4, r7, pc}

08001886 <_ZNSt7__cxx119to_stringEj>:

  inline string
  to_string(unsigned __val)
  {
 8001886:	b590      	push	{r4, r7, lr}
 8001888:	b085      	sub	sp, #20
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
    string __str(__detail::__to_chars_len(__val), '\0');
 8001890:	210a      	movs	r1, #10
 8001892:	6838      	ldr	r0, [r7, #0]
 8001894:	f002 fa66 	bl	8003d64 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8001898:	4604      	mov	r4, r0
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	4618      	mov	r0, r3
 80018a0:	f01c fa29 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	2200      	movs	r2, #0
 80018aa:	4621      	mov	r1, r4
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f002 fa98 	bl	8003de2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEjcRKS3_>
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4618      	mov	r0, r3
 80018b8:	f01c fa1f 	bl	801dcfa <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
 80018bc:	2100      	movs	r1, #0
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f002 faac 	bl	8003e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80018c4:	4604      	mov	r4, r0
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff f8d5 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80018cc:	4603      	mov	r3, r0
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4620      	mov	r0, r4
 80018d4:	f002 fab2 	bl	8003e3c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 80018d8:	bf00      	nop
  }
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd90      	pop	{r4, r7, pc}

080018e2 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d201      	bcs.n	80018fc <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	e000      	b.n	80018fe <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80018fc:	687b      	ldr	r3, [r7, #4]
    }
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <_ZN5BoardC1EP9Scheduler>:
#include <Board.hpp>
#include <string.h>
#include <algorithm>
#include "FLASH_SECTOR_F4.h"

Board::Board(Scheduler * scheduler)
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3320      	adds	r3, #32
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff f8d0 	bl	8000abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3340      	adds	r3, #64	; 0x40
 8001922:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f01c fc3b 	bl	801e1a4 <memset>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f240 52fe 	movw	r2, #1534	; 0x5fe
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800193c:	645a      	str	r2, [r3, #68]	; 0x44
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001944:	649a      	str	r2, [r3, #72]	; 0x48
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f240 6201 	movw	r2, #1537	; 0x601
 800194c:	64da      	str	r2, [r3, #76]	; 0x4c
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f240 6202 	movw	r2, #1538	; 0x602
 8001954:	651a      	str	r2, [r3, #80]	; 0x50
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f240 6204 	movw	r2, #1540	; 0x604
 800195c:	655a      	str	r2, [r3, #84]	; 0x54
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f240 6205 	movw	r2, #1541	; 0x605
 8001964:	659a      	str	r2, [r3, #88]	; 0x58
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f240 6206 	movw	r2, #1542	; 0x606
 800196c:	65da      	str	r2, [r3, #92]	; 0x5c
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f240 6207 	movw	r2, #1543	; 0x607
 8001974:	661a      	str	r2, [r3, #96]	; 0x60
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f44f 62c1 	mov.w	r2, #1544	; 0x608
 800197c:	665a      	str	r2, [r3, #100]	; 0x64
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f240 620a 	movw	r2, #1546	; 0x60a
 8001984:	669a      	str	r2, [r3, #104]	; 0x68
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f240 620b 	movw	r2, #1547	; 0x60b
 800198c:	66da      	str	r2, [r3, #108]	; 0x6c
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f240 620c 	movw	r2, #1548	; 0x60c
 8001994:	671a      	str	r2, [r3, #112]	; 0x70
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f240 620e 	movw	r2, #1550	; 0x60e
 800199c:	675a      	str	r2, [r3, #116]	; 0x74
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f240 620f 	movw	r2, #1551	; 0x60f
 80019a4:	679a      	str	r2, [r3, #120]	; 0x78
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f240 6211 	movw	r2, #1553	; 0x611
 80019ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f240 6212 	movw	r2, #1554	; 0x612
 80019b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f240 6213 	movw	r2, #1555	; 0x613
 80019be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f240 6215 	movw	r2, #1557	; 0x615
 80019c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f240 6216 	movw	r2, #1558	; 0x616
 80019d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80019dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f240 6241 	movw	r2, #1601	; 0x641
 80019e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f240 6243 	movw	r2, #1603	; 0x643
 80019f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f240 6245 	movw	r2, #1605	; 0x645
 80019fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f240 6246 	movw	r2, #1606	; 0x646
 8001a04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8001a0e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f240 6249 	movw	r2, #1609	; 0x649
 8001a18:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f240 624b 	movw	r2, #1611	; 0x64b
 8001a22:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f240 624d 	movw	r2, #1613	; 0x64d
 8001a2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f240 624e 	movw	r2, #1614	; 0x64e
 8001a36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f44f 62ca 	mov.w	r2, #1616	; 0x650
 8001a40:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f240 6252 	movw	r2, #1618	; 0x652
 8001a4a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f240 6253 	movw	r2, #1619	; 0x653
 8001a54:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f240 6255 	movw	r2, #1621	; 0x655
 8001a5e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f240 6257 	movw	r2, #1623	; 0x657
 8001a68:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f44f 62cb 	mov.w	r2, #1624	; 0x658
 8001a72:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f240 625a 	movw	r2, #1626	; 0x65a
 8001a7c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f240 625c 	movw	r2, #1628	; 0x65c
 8001a86:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f240 625d 	movw	r2, #1629	; 0x65d
 8001a90:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f240 625f 	movw	r2, #1631	; 0x65f
 8001a9a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f240 6261 	movw	r2, #1633	; 0x661
 8001aa4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f240 6262 	movw	r2, #1634	; 0x662
 8001aae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f240 6264 	movw	r2, #1636	; 0x664
 8001ab8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f240 6266 	movw	r2, #1638	; 0x666
 8001ac2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f44f 62cd 	mov.w	r2, #1640	; 0x668
 8001acc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f240 6269 	movw	r2, #1641	; 0x669
 8001ad6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f240 626b 	movw	r2, #1643	; 0x66b
 8001ae0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f240 626d 	movw	r2, #1645	; 0x66d
 8001aea:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f240 626e 	movw	r2, #1646	; 0x66e
 8001af4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8001afe:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f240 6272 	movw	r2, #1650	; 0x672
 8001b08:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f240 6273 	movw	r2, #1651	; 0x673
 8001b12:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f240 6275 	movw	r2, #1653	; 0x675
 8001b1c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f240 6277 	movw	r2, #1655	; 0x677
 8001b26:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f240 6279 	movw	r2, #1657	; 0x679
 8001b30:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f240 627a 	movw	r2, #1658	; 0x67a
 8001b3a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001b44:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f240 62a6 	movw	r2, #1702	; 0x6a6
 8001b4e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f240 62a7 	movw	r2, #1703	; 0x6a7
 8001b58:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f240 62a9 	movw	r2, #1705	; 0x6a9
 8001b62:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f240 62ab 	movw	r2, #1707	; 0x6ab
 8001b6c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f240 62ac 	movw	r2, #1708	; 0x6ac
 8001b76:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f240 62ae 	movw	r2, #1710	; 0x6ae
 8001b80:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f44f 62d6 	mov.w	r2, #1712	; 0x6b0
 8001b8a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f240 62b2 	movw	r2, #1714	; 0x6b2
 8001b94:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f240 62b3 	movw	r2, #1715	; 0x6b3
 8001b9e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f240 62b5 	movw	r2, #1717	; 0x6b5
 8001ba8:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f240 62b7 	movw	r2, #1719	; 0x6b7
 8001bb2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f44f 62d7 	mov.w	r2, #1720	; 0x6b8
 8001bbc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f240 62ba 	movw	r2, #1722	; 0x6ba
 8001bc6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f240 62bc 	movw	r2, #1724	; 0x6bc
 8001bd0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f240 62bd 	movw	r2, #1725	; 0x6bd
 8001bda:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f240 62bf 	movw	r2, #1727	; 0x6bf
 8001be4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8001bee:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f240 62c2 	movw	r2, #1730	; 0x6c2
 8001bf8:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f240 62c4 	movw	r2, #1732	; 0x6c4
 8001c02:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f240 62c6 	movw	r2, #1734	; 0x6c6
 8001c0c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f44f 62d9 	mov.w	r2, #1736	; 0x6c8
 8001c16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f240 62c9 	movw	r2, #1737	; 0x6c9
 8001c20:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f240 62cb 	movw	r2, #1739	; 0x6cb
 8001c2a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f240 62cd 	movw	r2, #1741	; 0x6cd
 8001c34:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f240 62ce 	movw	r2, #1742	; 0x6ce
 8001c3e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f44f 62da 	mov.w	r2, #1744	; 0x6d0
 8001c48:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f240 62d2 	movw	r2, #1746	; 0x6d2
 8001c52:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f240 62d3 	movw	r2, #1747	; 0x6d3
 8001c5c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8001c66:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f240 62d7 	movw	r2, #1751	; 0x6d7
 8001c70:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f240 62d9 	movw	r2, #1753	; 0x6d9
 8001c7a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f240 62da 	movw	r2, #1754	; 0x6da
 8001c84:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f240 62dc 	movw	r2, #1756	; 0x6dc
 8001c8e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f240 62de 	movw	r2, #1758	; 0x6de
 8001c98:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001ca2:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f240 7209 	movw	r2, #1801	; 0x709
 8001cac:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f240 720b 	movw	r2, #1803	; 0x70b
 8001cb6:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f240 720d 	movw	r2, #1805	; 0x70d
 8001cc0:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f240 720e 	movw	r2, #1806	; 0x70e
 8001cca:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 8001cd4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f240 7212 	movw	r2, #1810	; 0x712
 8001cde:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f240 7214 	movw	r2, #1812	; 0x714
 8001ce8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f240 7216 	movw	r2, #1814	; 0x716
 8001cf2:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f240 7217 	movw	r2, #1815	; 0x717
 8001cfc:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f240 7219 	movw	r2, #1817	; 0x719
 8001d06:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f240 721b 	movw	r2, #1819	; 0x71b
 8001d10:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f240 721d 	movw	r2, #1821	; 0x71d
 8001d1a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f240 721e 	movw	r2, #1822	; 0x71e
 8001d24:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8001d2e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f240 7222 	movw	r2, #1826	; 0x722
 8001d38:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f240 7224 	movw	r2, #1828	; 0x724
 8001d42:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f240 7226 	movw	r2, #1830	; 0x726
 8001d4c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f240 7227 	movw	r2, #1831	; 0x727
 8001d56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f240 7229 	movw	r2, #1833	; 0x729
 8001d60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f240 722b 	movw	r2, #1835	; 0x72b
 8001d6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f240 722d 	movw	r2, #1837	; 0x72d
 8001d74:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f240 722f 	movw	r2, #1839	; 0x72f
 8001d7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8001d88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f240 7232 	movw	r2, #1842	; 0x732
 8001d92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f240 7234 	movw	r2, #1844	; 0x734
 8001d9c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f240 7236 	movw	r2, #1846	; 0x736
 8001da6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f44f 62e7 	mov.w	r2, #1848	; 0x738
 8001db0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f240 723a 	movw	r2, #1850	; 0x73a
 8001dba:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f240 723b 	movw	r2, #1851	; 0x73b
 8001dc4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f240 723d 	movw	r2, #1853	; 0x73d
 8001dce:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f240 723f 	movw	r2, #1855	; 0x73f
 8001dd8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f240 7241 	movw	r2, #1857	; 0x741
 8001de2:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f240 7243 	movw	r2, #1859	; 0x743
 8001dec:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f240 726c 	movw	r2, #1900	; 0x76c
 8001df6:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f240 726e 	movw	r2, #1902	; 0x76e
 8001e00:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f44f 62ee 	mov.w	r2, #1904	; 0x770
 8001e0a:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f240 7272 	movw	r2, #1906	; 0x772
 8001e14:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f240 7274 	movw	r2, #1908	; 0x774
 8001e1e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f240 7275 	movw	r2, #1909	; 0x775
 8001e28:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f240 7277 	movw	r2, #1911	; 0x777
 8001e32:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f240 7279 	movw	r2, #1913	; 0x779
 8001e3c:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f240 727b 	movw	r2, #1915	; 0x77b
 8001e46:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f240 727c 	movw	r2, #1916	; 0x77c
 8001e50:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f240 727e 	movw	r2, #1918	; 0x77e
 8001e5a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8001e64:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f240 7281 	movw	r2, #1921	; 0x781
 8001e6e:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f240 7283 	movw	r2, #1923	; 0x783
 8001e78:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f240 7285 	movw	r2, #1925	; 0x785
 8001e82:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f240 7286 	movw	r2, #1926	; 0x786
 8001e8c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8001e96:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f240 728a 	movw	r2, #1930	; 0x78a
 8001ea0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f240 728b 	movw	r2, #1931	; 0x78b
 8001eaa:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f240 728d 	movw	r2, #1933	; 0x78d
 8001eb4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f240 728e 	movw	r2, #1934	; 0x78e
 8001ebe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f44f 62f2 	mov.w	r2, #1936	; 0x790
 8001ec8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f240 7291 	movw	r2, #1937	; 0x791
 8001ed2:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f240 7292 	movw	r2, #1938	; 0x792
 8001edc:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f240 7294 	movw	r2, #1940	; 0x794
 8001ee6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f240 7295 	movw	r2, #1941	; 0x795
 8001ef0:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f240 7296 	movw	r2, #1942	; 0x796
 8001efa:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f44f 62f3 	mov.w	r2, #1944	; 0x798
 8001f04:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f240 7299 	movw	r2, #1945	; 0x799
 8001f0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f240 729a 	movw	r2, #1946	; 0x79a
 8001f18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f240 729b 	movw	r2, #1947	; 0x79b
 8001f22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f240 729c 	movw	r2, #1948	; 0x79c
 8001f2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f240 729d 	movw	r2, #1949	; 0x79d
 8001f36:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f240 729e 	movw	r2, #1950	; 0x79e
 8001f40:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f240 729f 	movw	r2, #1951	; 0x79f
 8001f4a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 8001f54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f240 72a1 	movw	r2, #1953	; 0x7a1
 8001f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f240 72a2 	movw	r2, #1954	; 0x7a2
 8001f68:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f240 72a2 	movw	r2, #1954	; 0x7a2
 8001f72:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f240 72a3 	movw	r2, #1955	; 0x7a3
 8001f7c:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f240 72a4 	movw	r2, #1956	; 0x7a4
 8001f86:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f240 72a4 	movw	r2, #1956	; 0x7a4
 8001f90:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f240 72a5 	movw	r2, #1957	; 0x7a5
 8001f9a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f240 72a5 	movw	r2, #1957	; 0x7a5
 8001fa4:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f240 72a5 	movw	r2, #1957	; 0x7a5
 8001fae:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f240 72a6 	movw	r2, #1958	; 0x7a6
 8001fb8:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f240 72a6 	movw	r2, #1958	; 0x7a6
 8001fc2:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f240 72a6 	movw	r2, #1958	; 0x7a6
 8001fcc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f240 72a6 	movw	r2, #1958	; 0x7a6
 8001fd6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f240 72a6 	movw	r2, #1958	; 0x7a6
 8001fe0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f240 72a6 	movw	r2, #1958	; 0x7a6
 8001fea:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f240 72a6 	movw	r2, #1958	; 0x7a6
 8001ff4:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f240 72a6 	movw	r2, #1958	; 0x7a6
 8001ffe:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f240 72a6 	movw	r2, #1958	; 0x7a6
 8002008:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f240 72a6 	movw	r2, #1958	; 0x7a6
 8002012:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f240 72a5 	movw	r2, #1957	; 0x7a5
 800201c:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f240 72a5 	movw	r2, #1957	; 0x7a5
 8002026:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f240 72a4 	movw	r2, #1956	; 0x7a4
 8002030:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f240 72a4 	movw	r2, #1956	; 0x7a4
 800203a:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f240 72a3 	movw	r2, #1955	; 0x7a3
 8002044:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f240 72a3 	movw	r2, #1955	; 0x7a3
 800204e:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f240 72a2 	movw	r2, #1954	; 0x7a2
 8002058:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f240 72a1 	movw	r2, #1953	; 0x7a1
 8002062:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f240 72a1 	movw	r2, #1953	; 0x7a1
 800206c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f44f 62f4 	mov.w	r2, #1952	; 0x7a0
 8002076:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f240 729f 	movw	r2, #1951	; 0x79f
 8002080:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f240 729e 	movw	r2, #1950	; 0x79e
 800208a:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f240 729d 	movw	r2, #1949	; 0x79d
 8002094:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f240 729c 	movw	r2, #1948	; 0x79c
 800209e:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f240 729b 	movw	r2, #1947	; 0x79b
 80020a8:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f240 7299 	movw	r2, #1945	; 0x799
 80020b2:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f44f 62f3 	mov.w	r2, #1944	; 0x798
 80020bc:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f240 7297 	movw	r2, #1943	; 0x797
 80020c6:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f240 7296 	movw	r2, #1942	; 0x796
 80020d0:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f240 7294 	movw	r2, #1940	; 0x794
 80020da:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f240 7293 	movw	r2, #1939	; 0x793
 80020e4:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f240 7291 	movw	r2, #1937	; 0x791
 80020ee:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f44f 62f2 	mov.w	r2, #1936	; 0x790
 80020f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f240 728e 	movw	r2, #1934	; 0x78e
 8002102:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f240 728d 	movw	r2, #1933	; 0x78d
 800210c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f240 728b 	movw	r2, #1931	; 0x78b
 8002116:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f240 728a 	movw	r2, #1930	; 0x78a
 8002120:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800212a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f240 7286 	movw	r2, #1926	; 0x786
 8002134:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f240 7285 	movw	r2, #1925	; 0x785
 800213e:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f240 7283 	movw	r2, #1923	; 0x783
 8002148:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f240 7281 	movw	r2, #1921	; 0x781
 8002152:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f240 727f 	movw	r2, #1919	; 0x77f
 800215c:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f240 727d 	movw	r2, #1917	; 0x77d
 8002166:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f240 727b 	movw	r2, #1915	; 0x77b
 8002170:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f240 727a 	movw	r2, #1914	; 0x77a
 800217a:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f44f 62ef 	mov.w	r2, #1912	; 0x778
 8002184:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f240 7276 	movw	r2, #1910	; 0x776
 800218e:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f240 7274 	movw	r2, #1908	; 0x774
 8002198:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f240 7272 	movw	r2, #1906	; 0x772
 80021a2:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f44f 62ee 	mov.w	r2, #1904	; 0x770
 80021ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f240 726e 	movw	r2, #1902	; 0x76e
 80021b6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f240 726c 	movw	r2, #1900	; 0x76c
 80021c0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f240 7242 	movw	r2, #1858	; 0x742
 80021ca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f240 723f 	movw	r2, #1855	; 0x73f
 80021d4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f240 723d 	movw	r2, #1853	; 0x73d
 80021de:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f240 723b 	movw	r2, #1851	; 0x73b
 80021e8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f240 7239 	movw	r2, #1849	; 0x739
 80021f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f240 7237 	movw	r2, #1847	; 0x737
 80021fc:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f240 7235 	movw	r2, #1845	; 0x735
 8002206:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f240 7232 	movw	r2, #1842	; 0x732
 8002210:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 800221a:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f240 722e 	movw	r2, #1838	; 0x72e
 8002224:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f240 722c 	movw	r2, #1836	; 0x72c
 800222e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f240 722a 	movw	r2, #1834	; 0x72a
 8002238:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f240 7227 	movw	r2, #1831	; 0x727
 8002242:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f240 7225 	movw	r2, #1829	; 0x725
 800224c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f240 7223 	movw	r2, #1827	; 0x723
 8002256:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f240 7221 	movw	r2, #1825	; 0x721
 8002260:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f240 721e 	movw	r2, #1822	; 0x71e
 800226a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f240 721c 	movw	r2, #1820	; 0x71c
 8002274:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f240 721a 	movw	r2, #1818	; 0x71a
 800227e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f240 7217 	movw	r2, #1815	; 0x717
 8002288:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f240 7215 	movw	r2, #1813	; 0x715
 8002292:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f240 7213 	movw	r2, #1811	; 0x713
 800229c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 80022a6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f240 720e 	movw	r2, #1806	; 0x70e
 80022b0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f240 720c 	movw	r2, #1804	; 0x70c
 80022ba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f240 7209 	movw	r2, #1801	; 0x709
 80022c4:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f240 62df 	movw	r2, #1759	; 0x6df
 80022ce:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80022d8:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f240 62da 	movw	r2, #1754	; 0x6da
 80022e2:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f44f 62db 	mov.w	r2, #1752	; 0x6d8
 80022ec:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80022f6:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f240 62d3 	movw	r2, #1747	; 0x6d3
 8002300:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f240 62d1 	movw	r2, #1745	; 0x6d1
 800230a:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f240 62cf 	movw	r2, #1743	; 0x6cf
 8002314:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800231e:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f240 62ca 	movw	r2, #1738	; 0x6ca
 8002328:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f44f 62d9 	mov.w	r2, #1736	; 0x6c8
 8002332:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f240 62c5 	movw	r2, #1733	; 0x6c5
 800233c:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f240 62c3 	movw	r2, #1731	; 0x6c3
 8002346:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8002350:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f240 62be 	movw	r2, #1726	; 0x6be
 800235a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f240 62bc 	movw	r2, #1724	; 0x6bc
 8002364:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f240 62ba 	movw	r2, #1722	; 0x6ba
 800236e:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f240 62b7 	movw	r2, #1719	; 0x6b7
 8002378:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f240 62b5 	movw	r2, #1717	; 0x6b5
 8002382:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f240 62b3 	movw	r2, #1715	; 0x6b3
 800238c:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f240 62b1 	movw	r2, #1713	; 0x6b1
 8002396:	f8c3 2488 	str.w	r2, [r3, #1160]	; 0x488
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f240 62ae 	movw	r2, #1710	; 0x6ae
 80023a0:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f240 62ac 	movw	r2, #1708	; 0x6ac
 80023aa:	f8c3 2490 	str.w	r2, [r3, #1168]	; 0x490
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f240 62aa 	movw	r2, #1706	; 0x6aa
 80023b4:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f240 62a7 	movw	r2, #1703	; 0x6a7
 80023be:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f240 62a5 	movw	r2, #1701	; 0x6a5
 80023c8:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f240 627b 	movw	r2, #1659	; 0x67b
 80023d2:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f240 6279 	movw	r2, #1657	; 0x679
 80023dc:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f240 6277 	movw	r2, #1655	; 0x677
 80023e6:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f240 6274 	movw	r2, #1652	; 0x674
 80023f0:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f240 6272 	movw	r2, #1650	; 0x672
 80023fa:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8002404:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f240 626e 	movw	r2, #1646	; 0x66e
 800240e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f240 626c 	movw	r2, #1644	; 0x66c
 8002418:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f240 626a 	movw	r2, #1642	; 0x66a
 8002422:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f240 6267 	movw	r2, #1639	; 0x667
 800242c:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f240 6265 	movw	r2, #1637	; 0x665
 8002436:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f240 6263 	movw	r2, #1635	; 0x663
 8002440:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f240 6261 	movw	r2, #1633	; 0x661
 800244a:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f240 625f 	movw	r2, #1631	; 0x65f
 8002454:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f240 625d 	movw	r2, #1629	; 0x65d
 800245e:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f240 625b 	movw	r2, #1627	; 0x65b
 8002468:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f240 6259 	movw	r2, #1625	; 0x659
 8002472:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f240 6257 	movw	r2, #1623	; 0x657
 800247c:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f240 6255 	movw	r2, #1621	; 0x655
 8002486:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f240 6253 	movw	r2, #1619	; 0x653
 8002490:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f240 6251 	movw	r2, #1617	; 0x651
 800249a:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f240 624f 	movw	r2, #1615	; 0x64f
 80024a4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f240 624e 	movw	r2, #1614	; 0x64e
 80024ae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f240 624c 	movw	r2, #1612	; 0x64c
 80024b8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f240 624a 	movw	r2, #1610	; 0x64a
 80024c2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80024cc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f240 6246 	movw	r2, #1606	; 0x646
 80024d6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f240 6245 	movw	r2, #1605	; 0x645
 80024e0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f240 6243 	movw	r2, #1603	; 0x643
 80024ea:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f240 6241 	movw	r2, #1601	; 0x641
 80024f4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f240 6217 	movw	r2, #1559	; 0x617
 80024fe:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f240 6216 	movw	r2, #1558	; 0x616
 8002508:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f240 6214 	movw	r2, #1556	; 0x614
 8002512:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f240 6213 	movw	r2, #1555	; 0x613
 800251c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f240 6211 	movw	r2, #1553	; 0x611
 8002526:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8002530:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f240 620e 	movw	r2, #1550	; 0x60e
 800253a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f240 620d 	movw	r2, #1549	; 0x60d
 8002544:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f240 620b 	movw	r2, #1547	; 0x60b
 800254e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f240 620a 	movw	r2, #1546	; 0x60a
 8002558:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f44f 62c1 	mov.w	r2, #1544	; 0x608
 8002562:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f240 6207 	movw	r2, #1543	; 0x607
 800256c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f240 6206 	movw	r2, #1542	; 0x606
 8002576:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f240 6205 	movw	r2, #1541	; 0x605
 8002580:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f240 6203 	movw	r2, #1539	; 0x603
 800258a:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f240 6202 	movw	r2, #1538	; 0x602
 8002594:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f240 6201 	movw	r2, #1537	; 0x601
 800259e:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80025a8:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80025b2:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f240 52fe 	movw	r2, #1534	; 0x5fe
 80025bc:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80025c6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80025d0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f240 52fb 	movw	r2, #1531	; 0x5fb
 80025da:	f8c3 2574 	str.w	r2, [r3, #1396]	; 0x574
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f240 52fb 	movw	r2, #1531	; 0x5fb
 80025e4:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f240 52fa 	movw	r2, #1530	; 0x5fa
 80025ee:	f8c3 257c 	str.w	r2, [r3, #1404]	; 0x57c
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80025f8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 8002602:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 800260c:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f240 52f7 	movw	r2, #1527	; 0x5f7
 8002616:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f240 52f7 	movw	r2, #1527	; 0x5f7
 8002620:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f240 52f6 	movw	r2, #1526	; 0x5f6
 800262a:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f240 52f6 	movw	r2, #1526	; 0x5f6
 8002634:	f8c3 259c 	str.w	r2, [r3, #1436]	; 0x59c
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f240 52f5 	movw	r2, #1525	; 0x5f5
 800263e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8002648:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8002652:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800265c:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002666:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002670:	f8c3 25b4 	str.w	r2, [r3, #1460]	; 0x5b4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800267a:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002684:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800268e:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002698:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80026a2:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80026ac:	f8c3 25cc 	str.w	r2, [r3, #1484]	; 0x5cc
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80026b6:	f8c3 25d0 	str.w	r2, [r3, #1488]	; 0x5d0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f240 52f5 	movw	r2, #1525	; 0x5f5
 80026c0:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f240 52f5 	movw	r2, #1525	; 0x5f5
 80026ca:	f8c3 25d8 	str.w	r2, [r3, #1496]	; 0x5d8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f240 52f5 	movw	r2, #1525	; 0x5f5
 80026d4:	f8c3 25dc 	str.w	r2, [r3, #1500]	; 0x5dc
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f240 52f6 	movw	r2, #1526	; 0x5f6
 80026de:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f240 52f6 	movw	r2, #1526	; 0x5f6
 80026e8:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f240 52f7 	movw	r2, #1527	; 0x5f7
 80026f2:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f240 52f7 	movw	r2, #1527	; 0x5f7
 80026fc:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 8002706:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
 8002710:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800271a:	f8c3 25f8 	str.w	r2, [r3, #1528]	; 0x5f8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f240 52fa 	movw	r2, #1530	; 0x5fa
 8002724:	f8c3 25fc 	str.w	r2, [r3, #1532]	; 0x5fc
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f240 52fa 	movw	r2, #1530	; 0x5fa
 800272e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8002738:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8002742:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800274c:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
{
	this->scheduler = scheduler;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	609a      	str	r2, [r3, #8]

	scheduler->RestoreScheduledEvents();
 8002756:	6838      	ldr	r0, [r7, #0]
 8002758:	f003 fa4a 	bl	8005bf0 <_ZN9Scheduler22RestoreScheduledEventsEv>
	RestoreSettings();
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f001 f8dd 	bl	800391c <_ZN5Board15RestoreSettingsEv>
}
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void Board::ProcessGetRequest(struct netconn *conn, const std::string & endpoint)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b0c7      	sub	sp, #284	; 0x11c
 8002770:	af02      	add	r7, sp, #8
 8002772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800277a:	6018      	str	r0, [r3, #0]
 800277c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002784:	6019      	str	r1, [r3, #0]
 8002786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800278a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800278e:	601a      	str	r2, [r3, #0]
	//RespondHttp(conn);
	if (endpoint == "/getStatus")
 8002790:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002794:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002798:	49ad      	ldr	r1, [pc, #692]	; (8002a50 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e4>)
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	f001 fba4 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d028      	beq.n	80027f8 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>
	{
		std::string status = lights->GetStatus();
 80027a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 feb5 	bl	8005528 <_ZN6Lights9GetStatusB5cxx11Ev>
		netconn_write(conn, status.c_str(), (size_t)status.length(), NETCONN_NOCOPY);
 80027be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 fa46 	bl	8003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80027c8:	4604      	mov	r4, r0
 80027ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe f969 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80027d4:	4602      	mov	r2, r0
 80027d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027da:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 80027de:	2300      	movs	r3, #0
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2300      	movs	r3, #0
 80027e4:	4621      	mov	r1, r4
 80027e6:	6800      	ldr	r0, [r0, #0]
 80027e8:	f00e f996 	bl	8010b18 <netconn_write_partly>
		std::string status = lights->GetStatus();
 80027ec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe f930 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		netconn_write(conn, settings.c_str(), (size_t)settings.length(), NETCONN_NOCOPY);

		delete [] time;
	}
}
 80027f6:	e1e3      	b.n	8002bc0 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x454>
	else if (endpoint == "/getScheduledEvents")
 80027f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002800:	4994      	ldr	r1, [pc, #592]	; (8002a54 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e8>)
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	f001 fb70 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d042      	beq.n	8002894 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x128>
		std::string events = scheduler->GetEvents();
 800280e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800281e:	4611      	mov	r1, r2
 8002820:	4618      	mov	r0, r3
 8002822:	f003 f94b 	bl	8005abc <_ZN9Scheduler9GetEventsB5cxx11Ev>
		if (events.length() > 0)
 8002826:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe f93b 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	bf14      	ite	ne
 8002836:	2301      	movne	r3, #1
 8002838:	2300      	moveq	r3, #0
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d017      	beq.n	8002870 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x104>
			netconn_write(conn, events.c_str(), (size_t)events.length(), NETCONN_NOCOPY);
 8002840:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fa05 	bl	8003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800284a:	4604      	mov	r4, r0
 800284c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe f928 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002856:	4602      	mov	r2, r0
 8002858:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800285c:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 8002860:	2300      	movs	r3, #0
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2300      	movs	r3, #0
 8002866:	4621      	mov	r1, r4
 8002868:	6800      	ldr	r0, [r0, #0]
 800286a:	f00e f955 	bl	8010b18 <netconn_write_partly>
 800286e:	e00b      	b.n	8002888 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x11c>
			netconn_write(conn, "No jobs", (size_t)6, NETCONN_NOCOPY);
 8002870:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002874:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 8002878:	2300      	movs	r3, #0
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2300      	movs	r3, #0
 800287e:	2206      	movs	r2, #6
 8002880:	4975      	ldr	r1, [pc, #468]	; (8002a58 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2ec>)
 8002882:	6800      	ldr	r0, [r0, #0]
 8002884:	f00e f948 	bl	8010b18 <netconn_write_partly>
		std::string events = scheduler->GetEvents();
 8002888:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe f8e2 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002892:	e195      	b.n	8002bc0 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x454>
	else if (endpoint == "/getTime")
 8002894:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002898:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800289c:	496f      	ldr	r1, [pc, #444]	; (8002a5c <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f0>)
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	f001 fb22 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d036      	beq.n	8002918 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ac>
		const char * time = GetTime();
 80028aa:	f005 f903 	bl	8007ab4 <GetTime>
 80028ae:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
		std::string timeString(time);
 80028b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028b6:	4618      	mov	r0, r3
 80028b8:	f01b fa1d 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80028bc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80028c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028c4:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe f91b 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80028ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028d2:	4618      	mov	r0, r3
 80028d4:	f01b fa11 	bl	801dcfa <_ZNSaIcED1Ev>
		netconn_write(conn, time, timeString.length(), NETCONN_NOCOPY);
 80028d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe f8e2 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80028e2:	4602      	mov	r2, r0
 80028e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028e8:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 80028ec:	2300      	movs	r3, #0
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80028f6:	6800      	ldr	r0, [r0, #0]
 80028f8:	f00e f90e 	bl	8010b18 <netconn_write_partly>
		delete [] time;
 80028fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a0>
 8002904:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002908:	f01b f9de 	bl	801dcc8 <_ZdaPv>
		std::string timeString(time);
 800290c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe f8a0 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002916:	e153      	b.n	8002bc0 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x454>
	else if (endpoint == "/getTwilightMode")
 8002918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800291c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002920:	494f      	ldr	r1, [pc, #316]	; (8002a60 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f4>)
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	f001 fae0 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d029      	beq.n	8002982 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x216>
		std::string strTwilightMode = std::to_string(twilightMode);
 800292e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	7b1b      	ldrb	r3, [r3, #12]
 800293a:	461a      	mov	r2, r3
 800293c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe ff66 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
		netconn_write(conn, strTwilightMode.c_str(), (size_t)strTwilightMode.length(), NETCONN_NOCOPY);
 8002948:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800294c:	4618      	mov	r0, r3
 800294e:	f001 f981 	bl	8003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002952:	4604      	mov	r4, r0
 8002954:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe f8a4 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800295e:	4602      	mov	r2, r0
 8002960:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002964:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 8002968:	2300      	movs	r3, #0
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2300      	movs	r3, #0
 800296e:	4621      	mov	r1, r4
 8002970:	6800      	ldr	r0, [r0, #0]
 8002972:	f00e f8d1 	bl	8010b18 <netconn_write_partly>
		std::string strTwilightMode = std::to_string(twilightMode);
 8002976:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe f86b 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002980:	e11e      	b.n	8002bc0 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x454>
	else if (endpoint == "/getHolidayMode")
 8002982:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002986:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800298a:	4936      	ldr	r1, [pc, #216]	; (8002a64 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2f8>)
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	f001 faab 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d029      	beq.n	80029ec <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x280>
		std::string strHolidayMode = std::to_string(holidayMode);
 8002998:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800299c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	7b9b      	ldrb	r3, [r3, #14]
 80029a4:	461a      	mov	r2, r3
 80029a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe ff31 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
		netconn_write(conn, strHolidayMode.c_str(), (size_t)strHolidayMode.length(), NETCONN_NOCOPY);
 80029b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 f94c 	bl	8003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80029bc:	4604      	mov	r4, r0
 80029be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe f86f 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029ce:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 80029d2:	2300      	movs	r3, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2300      	movs	r3, #0
 80029d8:	4621      	mov	r1, r4
 80029da:	6800      	ldr	r0, [r0, #0]
 80029dc:	f00e f89c 	bl	8010b18 <netconn_write_partly>
		std::string strHolidayMode = std::to_string(holidayMode);
 80029e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe f836 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80029ea:	e0e9      	b.n	8002bc0 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x454>
	else if (endpoint == "/getMorningMode")
 80029ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029f4:	491c      	ldr	r1, [pc, #112]	; (8002a68 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2fc>)
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	f001 fa76 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d034      	beq.n	8002a6c <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x300>
		std::string strMorningMode = GetMorningModeText();
 8002a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	4610      	mov	r0, r2
 8002a12:	f000 fd0f 	bl	8003434 <_ZN5Board18GetMorningModeTextB5cxx11Ev>
		netconn_write(conn, strMorningMode.c_str(), (size_t)strMorningMode.length(), NETCONN_NOCOPY);
 8002a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 f91a 	bl	8003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002a20:	4604      	mov	r4, r0
 8002a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe f83d 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a32:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 8002a36:	2300      	movs	r3, #0
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	6800      	ldr	r0, [r0, #0]
 8002a40:	f00e f86a 	bl	8010b18 <netconn_write_partly>
		std::string strMorningMode = GetMorningModeText();
 8002a44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe f804 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002a4e:	e0b7      	b.n	8002bc0 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x454>
 8002a50:	0801f3a4 	.word	0x0801f3a4
 8002a54:	0801f3b0 	.word	0x0801f3b0
 8002a58:	0801f3c4 	.word	0x0801f3c4
 8002a5c:	0801f3cc 	.word	0x0801f3cc
 8002a60:	0801f3d8 	.word	0x0801f3d8
 8002a64:	0801f3ec 	.word	0x0801f3ec
 8002a68:	0801f3fc 	.word	0x0801f3fc
	else if (endpoint == "/getAllSettings")
 8002a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a74:	4955      	ldr	r1, [pc, #340]	; (8002bcc <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x460>)
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	f001 fa36 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 809e 	beq.w	8002bc0 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x454>
		const char * time = GetTime();
 8002a84:	f005 f816 	bl	8007ab4 <GetTime>
 8002a88:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		std::string settings(time);
 8002a8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002a90:	4618      	mov	r0, r3
 8002a92:	f01b f930 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8002a96:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8002a9a:	f107 0310 	add.w	r3, r7, #16
 8002a9e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe f82e 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8002aa8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002aac:	4618      	mov	r0, r3
 8002aae:	f01b f924 	bl	801dcfa <_ZNSaIcED1Ev>
		settings += "holidayMode: ";
 8002ab2:	f107 0310 	add.w	r3, r7, #16
 8002ab6:	4946      	ldr	r1, [pc, #280]	; (8002bd0 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x464>)
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f001 fa28 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		settings += std::to_string(holidayMode);
 8002abe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ac2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	7b9b      	ldrb	r3, [r3, #14]
 8002aca:	461a      	mov	r2, r3
 8002acc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fe9e 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
 8002ad8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002adc:	f107 0310 	add.w	r3, r7, #16
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 fa21 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8002ae8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd ffb2 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		settings += "\n";
 8002af2:	f107 0310 	add.w	r3, r7, #16
 8002af6:	4937      	ldr	r1, [pc, #220]	; (8002bd4 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x468>)
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 fa08 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		settings += "twilightMode: ";
 8002afe:	f107 0310 	add.w	r3, r7, #16
 8002b02:	4935      	ldr	r1, [pc, #212]	; (8002bd8 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46c>)
 8002b04:	4618      	mov	r0, r3
 8002b06:	f001 fa02 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		settings += std::to_string(twilightMode);
 8002b0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	7b1b      	ldrb	r3, [r3, #12]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fe78 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
 8002b24:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8002b28:	f107 0310 	add.w	r3, r7, #16
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 f9fb 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8002b34:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd ff8c 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		settings += "\n";
 8002b3e:	f107 0310 	add.w	r3, r7, #16
 8002b42:	4924      	ldr	r1, [pc, #144]	; (8002bd4 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x468>)
 8002b44:	4618      	mov	r0, r3
 8002b46:	f001 f9e2 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		settings += GetMorningModeText();
 8002b4a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002b4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b56:	6819      	ldr	r1, [r3, #0]
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f000 fc6b 	bl	8003434 <_ZN5Board18GetMorningModeTextB5cxx11Ev>
 8002b5e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 f9de 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8002b6e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd ff6f 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		netconn_write(conn, settings.c_str(), (size_t)settings.length(), NETCONN_NOCOPY);
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 f869 	bl	8003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002b82:	4604      	mov	r4, r0
 8002b84:	f107 0310 	add.w	r3, r7, #16
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd ff8c 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002b94:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	6800      	ldr	r0, [r0, #0]
 8002ba2:	f00d ffb9 	bl	8010b18 <netconn_write_partly>
		delete [] time;
 8002ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x44a>
 8002bae:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8002bb2:	f01b f889 	bl	801dcc8 <_ZdaPv>
		std::string settings(time);
 8002bb6:	f107 0310 	add.w	r3, r7, #16
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd ff4b 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8002bc0:	bf00      	nop
 8002bc2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd90      	pop	{r4, r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	0801f40c 	.word	0x0801f40c
 8002bd0:	0801f41c 	.word	0x0801f41c
 8002bd4:	0801f42c 	.word	0x0801f42c
 8002bd8:	0801f430 	.word	0x0801f430

08002bdc <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_>:

void Board::ProcessPostRequest(struct netconn *conn, const std::string & endpoint, const std::string & body)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8002be2:	af02      	add	r7, sp, #8
 8002be4:	f507 741a 	add.w	r4, r7, #616	; 0x268
 8002be8:	f5a4 7417 	sub.w	r4, r4, #604	; 0x25c
 8002bec:	6020      	str	r0, [r4, #0]
 8002bee:	f507 701a 	add.w	r0, r7, #616	; 0x268
 8002bf2:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
 8002bf6:	6001      	str	r1, [r0, #0]
 8002bf8:	f507 711a 	add.w	r1, r7, #616	; 0x268
 8002bfc:	f5a1 7119 	sub.w	r1, r1, #612	; 0x264
 8002c00:	600a      	str	r2, [r1, #0]
 8002c02:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8002c06:	f5a2 721a 	sub.w	r2, r2, #616	; 0x268
 8002c0a:	6013      	str	r3, [r2, #0]
	if (endpoint == "/impulsOswietlenie" || endpoint == "/impulsRolety")
 8002c0c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002c10:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002c14:	499d      	ldr	r1, [pc, #628]	; (8002e8c <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x2b0>)
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	f001 f966 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10a      	bne.n	8002c38 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x5c>
 8002c22:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002c26:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002c2a:	4999      	ldr	r1, [pc, #612]	; (8002e90 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x2b4>)
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	f001 f95b 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x60>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x62>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80ad 	beq.w	8002d9e <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x1c2>
	{
		bool value;
		std::string parameter = ParseHttpBoolParameter(body, &value);
 8002c44:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002c48:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002c4c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	4610      	mov	r0, r2
 8002c54:	f7fd ffb5 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002c58:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002c5c:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8002c60:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 8002c64:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c68:	f507 711a 	add.w	r1, r7, #616	; 0x268
 8002c6c:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 8002c70:	6809      	ldr	r1, [r1, #0]
 8002c72:	f000 fba9 	bl	80033c8 <_ZN5Board22ParseHttpBoolParameterENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPb>
 8002c76:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd feeb 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		if (endpoint == "/impulsOswietlenie")
 8002c80:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002c84:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002c88:	4980      	ldr	r1, [pc, #512]	; (8002e8c <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x2b0>)
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	f001 f92c 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d031      	beq.n	8002cfa <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x11e>
		{
		  if (parameter == "allOff")
 8002c96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c9a:	497e      	ldr	r1, [pc, #504]	; (8002e94 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x2b8>)
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 f923 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0xe0>
			lights->AllLightsOff();
 8002ca8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002cac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f002 fb23 	bl	8005300 <_ZN6Lights12AllLightsOffEv>
 8002cba:	e06a      	b.n	8002d92 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x1b6>
		  else
			lights->SwitchLight(parameter, value);
 8002cbc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002cc0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681c      	ldr	r4, [r3, #0]
 8002cc8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002ccc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd ff75 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002cd8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002cdc:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f002 fbe0 	bl	80054ae <_ZN6Lights11SwitchLightENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8002cee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd feaf 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002cf8:	e04b      	b.n	8002d92 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x1b6>
		}
		else if (endpoint == "/impulsRolety")
 8002cfa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002cfe:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002d02:	4963      	ldr	r1, [pc, #396]	; (8002e90 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x2b4>)
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	f001 f8ef 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d040      	beq.n	8002d92 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x1b6>
		{
		  if (parameter == "allRoletyUp")
 8002d10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d14:	4960      	ldr	r1, [pc, #384]	; (8002e98 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x2bc>)
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 f8e6 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x15a>
			blinds->AllBlindsUp();
 8002d22:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002d26:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fd81 	bl	8000836 <_ZN6Blinds11AllBlindsUpEv>
 8002d34:	e02d      	b.n	8002d92 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x1b6>
		  else if (parameter == "allRoletyDown")
 8002d36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d3a:	4958      	ldr	r1, [pc, #352]	; (8002e9c <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x2c0>)
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 f8d3 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x180>
			blinds->AllBlindsDown();
 8002d48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002d4c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fda0 	bl	800089a <_ZN6Blinds13AllBlindsDownEv>
 8002d5a:	e01a      	b.n	8002d92 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x1b6>
		  else
			blinds->MoveBlind(body);
 8002d5c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002d60:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685c      	ldr	r4, [r3, #4]
 8002d68:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002d6c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002d70:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002d74:	6819      	ldr	r1, [r3, #0]
 8002d76:	4610      	mov	r0, r2
 8002d78:	f7fd ff23 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002d7c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d80:	4619      	mov	r1, r3
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7fd fd20 	bl	80007c8 <_ZN6Blinds9MoveBlindENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002d88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fe62 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		std::string parameter = ParseHttpBoolParameter(body, &value);
 8002d92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fe5d 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002d9c:	e2c9      	b.n	8003332 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x756>
		}
	}
	else if (endpoint == "/schedule")
 8002d9e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002da2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002da6:	493e      	ldr	r1, [pc, #248]	; (8002ea0 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x2c4>)
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	f001 f89d 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d056      	beq.n	8002e62 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x286>
	{
		int parameterCount;
		std::string * records = ParseBodyLines(body, &parameterCount);
 8002db4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002db8:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002dbc:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8002dc0:	6819      	ldr	r1, [r3, #0]
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f7fd fefd 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002dc8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002dcc:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002dd0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002dd4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	f000 fde5 	bl	80039a8 <_ZN5Board14ParseBodyLinesENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPi>
 8002dde:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
 8002de2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd fe35 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		scheduler->Schedule(records, parameterCount);
 8002dec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002df0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6898      	ldr	r0, [r3, #8]
 8002df8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002dfc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8002e08:	f002 fc9a 	bl	8005740 <_ZN9Scheduler8ScheduleEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
		delete [] records;
 8002e0c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 828e 	beq.w	8003332 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x756>
 8002e16:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	461a      	mov	r2, r3
 8002e28:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002e2c:	189c      	adds	r4, r3, r2
 8002e2e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002e32:	429c      	cmp	r4, r3
 8002e34:	d004      	beq.n	8002e40 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x264>
 8002e36:	3c18      	subs	r4, #24
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f7fd fe0c 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002e3e:	e7f6      	b.n	8002e2e <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x252>
 8002e40:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002e44:	f1a3 0008 	sub.w	r0, r3, #8
 8002e48:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8002e4c:	3b04      	subs	r3, #4
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	3308      	adds	r3, #8
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f01a ff36 	bl	801dccc <_ZdaPvj>
 8002e60:	e267      	b.n	8003332 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x756>
	}
	else if (endpoint == "/clearSchedule")
 8002e62:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002e66:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002e6a:	490e      	ldr	r1, [pc, #56]	; (8002ea4 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x2c8>)
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	f001 f83b 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d017      	beq.n	8002ea8 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x2cc>
	{
		scheduler->Clear();
 8002e78:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002e7c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f002 fd93 	bl	80059b0 <_ZN9Scheduler5ClearEv>
 8002e8a:	e252      	b.n	8003332 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x756>
 8002e8c:	0801f440 	.word	0x0801f440
 8002e90:	0801f454 	.word	0x0801f454
 8002e94:	0801f464 	.word	0x0801f464
 8002e98:	0801f46c 	.word	0x0801f46c
 8002e9c:	0801f478 	.word	0x0801f478
 8002ea0:	0801f488 	.word	0x0801f488
 8002ea4:	0801f494 	.word	0x0801f494
	}
	else if (endpoint == "/setTime")
 8002ea8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002eac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8002eb0:	49aa      	ldr	r1, [pc, #680]	; (800315c <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x580>)
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	f001 f818 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 80ca 	beq.w	8003054 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x478>
	{
		std::string timeValue;
 8002ec0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd fdfa 	bl	8000abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		ParseHttpParameter(body, &timeValue);
 8002eca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002ece:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002ed2:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f7fd fe72 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002ede:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002ee2:	f5a3 70c4 	sub.w	r0, r3, #392	; 0x188
 8002ee6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002eea:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8002eee:	f507 711a 	add.w	r1, r7, #616	; 0x268
 8002ef2:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 8002ef6:	6809      	ldr	r1, [r1, #0]
 8002ef8:	f000 fa38 	bl	800336c <_ZN5Board18ParseHttpParameterENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_>
 8002efc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fda8 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002f06:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd fda3 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		int hours = stoi(timeValue.substr(0, 2));
 8002f10:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002f14:	f5a3 70ac 	sub.w	r0, r3, #344	; 0x158
 8002f18:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f001 f812 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8002f24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f28:	220a      	movs	r2, #10
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe fc57 	bl	80017e0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8002f32:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
 8002f36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fd8b 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		int minutes = stoi(timeValue.substr(3, 5));
 8002f40:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002f44:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 8002f48:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002f4c:	2305      	movs	r3, #5
 8002f4e:	2203      	movs	r2, #3
 8002f50:	f000 fffa 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8002f54:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002f58:	220a      	movs	r2, #10
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fc3f 	bl	80017e0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8002f62:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
 8002f66:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fd73 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		int seconds = stoi(timeValue.substr(6, 8));
 8002f70:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002f74:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 8002f78:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	2206      	movs	r2, #6
 8002f80:	f000 ffe2 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8002f84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002f88:	220a      	movs	r2, #10
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe fc27 	bl	80017e0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8002f92:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
 8002f96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fd5b 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		int day = stoi(timeValue.substr(9, 11));
 8002fa0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002fa4:	f5a3 7088 	sub.w	r0, r3, #272	; 0x110
 8002fa8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002fac:	230b      	movs	r3, #11
 8002fae:	2209      	movs	r2, #9
 8002fb0:	f000 ffca 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8002fb4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002fb8:	220a      	movs	r2, #10
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe fc0f 	bl	80017e0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8002fc2:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
 8002fc6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fd43 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		int month = stoi(timeValue.substr(12, 14));
 8002fd0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8002fd4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002fd8:	230e      	movs	r3, #14
 8002fda:	220c      	movs	r2, #12
 8002fdc:	f000 ffb4 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8002fe0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002fe4:	220a      	movs	r2, #10
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fbf9 	bl	80017e0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8002fee:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
 8002ff2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd fd2d 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		int year = stoi(timeValue.substr(15, 19));
 8002ffc:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 8003000:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003004:	2313      	movs	r3, #19
 8003006:	220f      	movs	r2, #15
 8003008:	f000 ff9e 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800300c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003010:	220a      	movs	r2, #10
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fbe3 	bl	80017e0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800301a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800301e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd fd17 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

		SetTime(hours, minutes, seconds, day, month, year);
 8003028:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003038:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 800303c:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8003040:	f8d7 0260 	ldr.w	r0, [r7, #608]	; 0x260
 8003044:	f004 fcb0 	bl	80079a8 <SetTime>
		std::string timeValue;
 8003048:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fd02 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003052:	e16e      	b.n	8003332 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x756>
	}
	else
	{
		if (endpoint == "/enableTwilightMode")
 8003054:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003058:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800305c:	4940      	ldr	r1, [pc, #256]	; (8003160 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x584>)
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	f000 ff42 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x49e>
			twilightMode = true;
 800306a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800306e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2201      	movs	r2, #1
 8003076:	731a      	strb	r2, [r3, #12]
 8003078:	e154      	b.n	8003324 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x748>
		else if (endpoint == "/disableTwilightMode")
 800307a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800307e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003082:	4938      	ldr	r1, [pc, #224]	; (8003164 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x588>)
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	f000 ff2f 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x4c4>
			twilightMode = false;
 8003090:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003094:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2200      	movs	r2, #0
 800309c:	731a      	strb	r2, [r3, #12]
 800309e:	e141      	b.n	8003324 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x748>
		else if (endpoint == "/enableHolidayMode")
 80030a0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80030a4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80030a8:	492f      	ldr	r1, [pc, #188]	; (8003168 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x58c>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	f000 ff1c 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x4ea>
			holidayMode = true;
 80030b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80030ba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2201      	movs	r2, #1
 80030c2:	739a      	strb	r2, [r3, #14]
 80030c4:	e12e      	b.n	8003324 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x748>
		else if (endpoint == "/disableHolidayMode")
 80030c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80030ca:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80030ce:	4927      	ldr	r1, [pc, #156]	; (800316c <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x590>)
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	f000 ff09 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x510>
			holidayMode = false;
 80030dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80030e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2200      	movs	r2, #0
 80030e8:	739a      	strb	r2, [r3, #14]
 80030ea:	e11b      	b.n	8003324 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x748>
		 else if (endpoint == "/setMorningMode")
 80030ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80030f0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80030f4:	491e      	ldr	r1, [pc, #120]	; (8003170 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x594>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	f000 fef6 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8110 	beq.w	8003324 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x748>
		 {
			 int parameterCount;
			 std::string * morningParameters = ParseBodyLines(body, &parameterCount);
 8003104:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003108:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800310c:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	4610      	mov	r0, r2
 8003114:	f7fd fd55 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003118:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800311c:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8003120:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003124:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	f000 fc3d 	bl	80039a8 <_ZN5Board14ParseBodyLinesENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPi>
 800312e:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
 8003132:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fc8d 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

			 if (morningParameters[0] == "false")
 800313c:	490d      	ldr	r1, [pc, #52]	; (8003174 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x598>)
 800313e:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 8003142:	f000 fed1 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d015      	beq.n	8003178 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x59c>
				 morningMode = false;
 800314c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003150:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	735a      	strb	r2, [r3, #13]
 800315a:	e0ba      	b.n	80032d2 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x6f6>
 800315c:	0801f4a4 	.word	0x0801f4a4
 8003160:	0801f4b0 	.word	0x0801f4b0
 8003164:	0801f4c4 	.word	0x0801f4c4
 8003168:	0801f4dc 	.word	0x0801f4dc
 800316c:	0801f4f0 	.word	0x0801f4f0
 8003170:	0801f504 	.word	0x0801f504
 8003174:	0801f514 	.word	0x0801f514
			 else if (morningParameters[0] == "true")
 8003178:	4976      	ldr	r1, [pc, #472]	; (8003354 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x778>)
 800317a:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 800317e:	f000 feb3 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80a4 	beq.w	80032d2 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x6f6>
			 {
				std::string morningDaysValue;
 800318a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd fc95 	bl	8000abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
				ParseHttpParameter(morningParameters[1], &morningDaysValue);
 8003194:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003198:	f103 0218 	add.w	r2, r3, #24
 800319c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd fd0d 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80031a8:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 80031ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031b0:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 80031b4:	f507 711a 	add.w	r1, r7, #616	; 0x268
 80031b8:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 80031bc:	6809      	ldr	r1, [r1, #0]
 80031be:	f000 f8d5 	bl	800336c <_ZN5Board18ParseHttpParameterENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_>
 80031c2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd fc45 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80031cc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fc40 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				morningDays = stoi(morningDaysValue);
 80031d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031da:	220a      	movs	r2, #10
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe fafe 	bl	80017e0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80031ec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	619a      	str	r2, [r3, #24]

				std::string morningTimeValue;
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd fc60 	bl	8000abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
				ParseHttpParameter(morningParameters[2], &morningTimeValue);
 80031fe:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003202:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd fcd8 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003212:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 8003216:	f107 0314 	add.w	r3, r7, #20
 800321a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800321e:	f507 711a 	add.w	r1, r7, #616	; 0x268
 8003222:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 8003226:	6809      	ldr	r1, [r1, #0]
 8003228:	f000 f8a0 	bl	800336c <_ZN5Board18ParseHttpParameterENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_>
 800322c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd fc10 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fc0b 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

				morningHour = stoi(morningTimeValue.substr(0, 2));
 8003240:	f507 7006 	add.w	r0, r7, #536	; 0x218
 8003244:	f107 0114 	add.w	r1, r7, #20
 8003248:	2302      	movs	r3, #2
 800324a:	2200      	movs	r2, #0
 800324c:	f000 fe7c 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8003250:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003254:	220a      	movs	r2, #10
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe fac1 	bl	80017e0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003266:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	611a      	str	r2, [r3, #16]
 800326e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd fbef 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				morningMinute = stoi(morningTimeValue.substr(3, 5));
 8003278:	f507 700c 	add.w	r0, r7, #560	; 0x230
 800327c:	f107 0114 	add.w	r1, r7, #20
 8003280:	2305      	movs	r3, #5
 8003282:	2203      	movs	r2, #3
 8003284:	f000 fe60 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8003288:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800328c:	220a      	movs	r2, #10
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe faa5 	bl	80017e0 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800329e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	615a      	str	r2, [r3, #20]
 80032a6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd fbd3 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

				morningMode = true;
 80032b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80032b4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2201      	movs	r2, #1
 80032bc:	735a      	strb	r2, [r3, #13]
				std::string morningTimeValue;
 80032be:	f107 0314 	add.w	r3, r7, #20
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd fbc7 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				std::string morningDaysValue;
 80032c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd fbc2 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			 }
			 delete [] morningParameters;
 80032d2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d024      	beq.n	8003324 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x748>
 80032da:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80032de:	3b04      	subs	r3, #4
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	461a      	mov	r2, r3
 80032ec:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80032f0:	189c      	adds	r4, r3, r2
 80032f2:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80032f6:	429c      	cmp	r4, r3
 80032f8:	d004      	beq.n	8003304 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x728>
 80032fa:	3c18      	subs	r4, #24
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7fd fbaa 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003302:	e7f6      	b.n	80032f2 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x716>
 8003304:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003308:	f1a3 0008 	sub.w	r0, r3, #8
 800330c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8003310:	3b04      	subs	r3, #4
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	3308      	adds	r3, #8
 800331e:	4619      	mov	r1, r3
 8003320:	f01a fcd4 	bl	801dccc <_ZdaPvj>
		 }

		StoreSettings();
 8003324:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003328:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	f000 f90b 	bl	8003548 <_ZN5Board13StoreSettingsEv>
	}

	//RespondHttp(conn);
	netconn_write(conn, (const unsigned char*)"OK", (size_t)2, NETCONN_NOCOPY);
 8003332:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003336:	f5a3 7018 	sub.w	r0, r3, #608	; 0x260
 800333a:	2300      	movs	r3, #0
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2300      	movs	r3, #0
 8003340:	2202      	movs	r2, #2
 8003342:	4905      	ldr	r1, [pc, #20]	; (8003358 <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_+0x77c>)
 8003344:	6800      	ldr	r0, [r0, #0]
 8003346:	f00d fbe7 	bl	8010b18 <netconn_write_partly>
}
 800334a:	bf00      	nop
 800334c:	f507 771b 	add.w	r7, r7, #620	; 0x26c
 8003350:	46bd      	mov	sp, r7
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	0801f51c 	.word	0x0801f51c
 8003358:	0801f524 	.word	0x0801f524

0800335c <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE27_S_propagate_on_move_assignEv>:
    static constexpr bool _S_propagate_on_move_assign()
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_move_assignment::value; }
 8003360:	2301      	movs	r3, #1
 8003362:	4618      	mov	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <_ZN5Board18ParseHttpParameterENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_>:

	netconn_write(conn, response.c_str(), (size_t)response.length(), NETCONN_NOCOPY);
}

std::string Board::ParseHttpParameter(std::string parameters, std::string * outValue)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	; 0x30
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
    int equalsIndex = parameters.find('=');
 800337a:	2200      	movs	r2, #0
 800337c:	213d      	movs	r1, #61	; 0x3d
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fdfa 	bl	8003f78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8003384:	4603      	mov	r3, r0
 8003386:	62fb      	str	r3, [r7, #44]	; 0x2c
    string parameter = parameters.substr(0, equalsIndex);
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	f000 fdda 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
    *outValue = parameters.substr(equalsIndex + 1);
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	3301      	adds	r3, #1
 8003398:	461a      	mov	r2, r3
 800339a:	f107 0014 	add.w	r0, r7, #20
 800339e:	f04f 33ff 	mov.w	r3, #4294967295
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	f000 fdd0 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	4619      	mov	r1, r3
 80033ae:	6838      	ldr	r0, [r7, #0]
 80033b0:	f000 fe12 	bl	8003fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd fb4c 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

    return parameter;
 80033be:	bf00      	nop
}
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	3730      	adds	r7, #48	; 0x30
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <_ZN5Board22ParseHttpBoolParameterENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPb>:

std::string Board::ParseHttpBoolParameter(std::string parameters, bool * outValue)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b090      	sub	sp, #64	; 0x40
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
	std::string boolString;
 80033d6:	f107 0310 	add.w	r3, r7, #16
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd fb6f 	bl	8000abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	std::string parameter = ParseHttpParameter(parameters, &boolString);
 80033e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fbeb 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f107 0310 	add.w	r3, r7, #16
 80033f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	f7ff ffb8 	bl	800336c <_ZN5Board18ParseHttpParameterENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPS5_>
 80033fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd fb28 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

    *outValue = (boolString == "true");
 8003406:	f107 0310 	add.w	r3, r7, #16
 800340a:	4909      	ldr	r1, [pc, #36]	; (8003430 <_ZN5Board22ParseHttpBoolParameterENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPb+0x68>)
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fd6b 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003412:	4603      	mov	r3, r0
 8003414:	461a      	mov	r2, r3
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	701a      	strb	r2, [r3, #0]
    return parameter;
 800341a:	bf00      	nop
	std::string boolString;
 800341c:	f107 0310 	add.w	r3, r7, #16
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd fb18 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return parameter;
 8003426:	bf00      	nop
}
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	3740      	adds	r7, #64	; 0x40
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	0801f51c 	.word	0x0801f51c

08003434 <_ZN5Board18GetMorningModeTextB5cxx11Ev>:

std::string Board::GetMorningModeText()
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b09c      	sub	sp, #112	; 0x70
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
	std::string text = "morningMode: ";
 800343e:	f107 030c 	add.w	r3, r7, #12
 8003442:	4618      	mov	r0, r3
 8003444:	f01a fc57 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8003448:	f107 030c 	add.w	r3, r7, #12
 800344c:	461a      	mov	r2, r3
 800344e:	4939      	ldr	r1, [pc, #228]	; (8003534 <_ZN5Board18GetMorningModeTextB5cxx11Ev+0x100>)
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7fd fb57 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8003456:	f107 030c 	add.w	r3, r7, #12
 800345a:	4618      	mov	r0, r3
 800345c:	f01a fc4d 	bl	801dcfa <_ZNSaIcED1Ev>
	text += std::to_string(morningMode);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	7b5b      	ldrb	r3, [r3, #13]
 8003464:	461a      	mov	r2, r3
 8003466:	f107 0310 	add.w	r3, r7, #16
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe f9d1 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
 8003472:	f107 0310 	add.w	r3, r7, #16
 8003476:	4619      	mov	r1, r3
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fd56 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800347e:	f107 0310 	add.w	r3, r7, #16
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd fae7 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	text += "\n";
 8003488:	492b      	ldr	r1, [pc, #172]	; (8003538 <_ZN5Board18GetMorningModeTextB5cxx11Ev+0x104>)
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fd3f 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	text += "morningDays: ";
 8003490:	492a      	ldr	r1, [pc, #168]	; (800353c <_ZN5Board18GetMorningModeTextB5cxx11Ev+0x108>)
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fd3b 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	text += std::to_string(morningDays);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe f9ef 	bl	8001886 <_ZNSt7__cxx119to_stringEj>
 80034a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034ac:	4619      	mov	r1, r3
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fd3b 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 80034b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd facc 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	text += "\n";
 80034be:	491e      	ldr	r1, [pc, #120]	; (8003538 <_ZN5Board18GetMorningModeTextB5cxx11Ev+0x104>)
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fd24 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	text += "morningTime: ";
 80034c6:	491e      	ldr	r1, [pc, #120]	; (8003540 <_ZN5Board18GetMorningModeTextB5cxx11Ev+0x10c>)
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fd20 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	text += std::to_string(morningHour);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fe f9d4 	bl	8001886 <_ZNSt7__cxx119to_stringEj>
 80034de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034e2:	4619      	mov	r1, r3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fd20 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 80034ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd fab1 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	text += ":";
 80034f4:	4913      	ldr	r1, [pc, #76]	; (8003544 <_ZN5Board18GetMorningModeTextB5cxx11Ev+0x110>)
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fd09 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	text += std::to_string(morningMinute);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	695a      	ldr	r2, [r3, #20]
 8003500:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe f9bd 	bl	8001886 <_ZNSt7__cxx119to_stringEj>
 800350c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fd09 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8003518:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd fa9a 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	text += "\n";
 8003522:	4905      	ldr	r1, [pc, #20]	; (8003538 <_ZN5Board18GetMorningModeTextB5cxx11Ev+0x104>)
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fcf2 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>

	return text;
 800352a:	bf00      	nop
}
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	3770      	adds	r7, #112	; 0x70
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	0801f570 	.word	0x0801f570
 8003538:	0801f42c 	.word	0x0801f42c
 800353c:	0801f580 	.word	0x0801f580
 8003540:	0801f590 	.word	0x0801f590
 8003544:	0801f5a0 	.word	0x0801f5a0

08003548 <_ZN5Board13StoreSettingsEv>:

void Board::StoreSettings()
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	uint32_t address = settingsAddress;
 8003550:	4b22      	ldr	r3, [pc, #136]	; (80035dc <_ZN5Board13StoreSettingsEv+0x94>)
 8003552:	60fb      	str	r3, [r7, #12]

	Flash_Write_Data(address, reinterpret_cast<uint8_t*>(&twilightMode), sizeof(bool), true);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f103 010c 	add.w	r1, r3, #12
 800355a:	2301      	movs	r3, #1
 800355c:	2201      	movs	r2, #1
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f001 fc6a 	bl	8004e38 <_Z16Flash_Write_DatamPhtb>
	address += sizeof(bool);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3301      	adds	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]

	Flash_Write_Data(address, reinterpret_cast<uint8_t*>(&morningMode), sizeof(bool), false);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f103 010d 	add.w	r1, r3, #13
 8003570:	2300      	movs	r3, #0
 8003572:	2201      	movs	r2, #1
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f001 fc5f 	bl	8004e38 <_Z16Flash_Write_DatamPhtb>
	address += sizeof(bool);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3301      	adds	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]

	Flash_Write_Data(address, reinterpret_cast<uint8_t*>(&holidayMode), sizeof(bool), false);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f103 010e 	add.w	r1, r3, #14
 8003586:	2300      	movs	r3, #0
 8003588:	2201      	movs	r2, #1
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f001 fc54 	bl	8004e38 <_Z16Flash_Write_DatamPhtb>
	address += sizeof(bool);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3301      	adds	r3, #1
 8003594:	60fb      	str	r3, [r7, #12]

	Flash_Write_Data(address, reinterpret_cast<uint8_t*>(&morningHour), sizeof(int), false);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f103 0110 	add.w	r1, r3, #16
 800359c:	2300      	movs	r3, #0
 800359e:	2204      	movs	r2, #4
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f001 fc49 	bl	8004e38 <_Z16Flash_Write_DatamPhtb>
	address += sizeof(int);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3304      	adds	r3, #4
 80035aa:	60fb      	str	r3, [r7, #12]

	Flash_Write_Data(address, reinterpret_cast<uint8_t*>(&morningMinute), sizeof(int), false);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f103 0114 	add.w	r1, r3, #20
 80035b2:	2300      	movs	r3, #0
 80035b4:	2204      	movs	r2, #4
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f001 fc3e 	bl	8004e38 <_Z16Flash_Write_DatamPhtb>
	address += sizeof(int);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3304      	adds	r3, #4
 80035c0:	60fb      	str	r3, [r7, #12]

	Flash_Write_Data(address, reinterpret_cast<uint8_t*>(&morningDays), sizeof(int), false);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f103 0118 	add.w	r1, r3, #24
 80035c8:	2300      	movs	r3, #0
 80035ca:	2204      	movs	r2, #4
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f001 fc33 	bl	8004e38 <_Z16Flash_Write_DatamPhtb>
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	08050000 	.word	0x08050000

080035e0 <_ZN5Board18ChangeHolidayLightEii>:

void Board::ChangeHolidayLight(int hour, int minute)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b091      	sub	sp, #68	; 0x44
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
	currentHolidayHour = hour;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
	currentHolidayMinute = minute;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	63da      	str	r2, [r3, #60]	; 0x3c

	if (currentHolidayRoom != "")
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3320      	adds	r3, #32
 80035fc:	4943      	ldr	r1, [pc, #268]	; (800370c <_ZN5Board18ChangeHolidayLightEii+0x12c>)
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fc72 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8003604:	4603      	mov	r3, r0
 8003606:	f083 0301 	eor.w	r3, r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d016      	beq.n	800363e <_ZN5Board18ChangeHolidayLightEii+0x5e>
		lights->SwitchLight(currentHolidayRoom, false);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681c      	ldr	r4, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f103 0220 	add.w	r2, r3, #32
 800361a:	f107 0310 	add.w	r3, r7, #16
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f7fd face 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003626:	f107 0310 	add.w	r3, r7, #16
 800362a:	2200      	movs	r2, #0
 800362c:	4619      	mov	r1, r3
 800362e:	4620      	mov	r0, r4
 8003630:	f001 ff3d 	bl	80054ae <_ZN6Lights11SwitchLightENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8003634:	f107 0310 	add.w	r3, r7, #16
 8003638:	4618      	mov	r0, r3
 800363a:	f7fd fa0c 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	HAL_Delay(5000 + (random() % 10)*1000);
 800363e:	f01a feef 	bl	801e420 <random>
 8003642:	4601      	mov	r1, r0
 8003644:	4b32      	ldr	r3, [pc, #200]	; (8003710 <_ZN5Board18ChangeHolidayLightEii+0x130>)
 8003646:	fb83 2301 	smull	r2, r3, r3, r1
 800364a:	109a      	asrs	r2, r3, #2
 800364c:	17cb      	asrs	r3, r1, #31
 800364e:	1ad2      	subs	r2, r2, r3
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	1aca      	subs	r2, r1, r3
 800365a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800365e:	fb03 f202 	mul.w	r2, r3, r2
 8003662:	f241 3388 	movw	r3, #5000	; 0x1388
 8003666:	4413      	add	r3, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f004 fe93 	bl	8008394 <HAL_Delay>

	switch (random() % 4)
 800366e:	f01a fed7 	bl	801e420 <random>
 8003672:	4603      	mov	r3, r0
 8003674:	425a      	negs	r2, r3
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	f002 0203 	and.w	r2, r2, #3
 800367e:	bf58      	it	pl
 8003680:	4253      	negpl	r3, r2
 8003682:	2b03      	cmp	r3, #3
 8003684:	d826      	bhi.n	80036d4 <_ZN5Board18ChangeHolidayLightEii+0xf4>
 8003686:	a201      	add	r2, pc, #4	; (adr r2, 800368c <_ZN5Board18ChangeHolidayLightEii+0xac>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036ab 	.word	0x080036ab
 8003694:	080036b9 	.word	0x080036b9
 8003698:	080036c7 	.word	0x080036c7
	{
		case 0:
			currentHolidayRoom = "salon_led";
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3320      	adds	r3, #32
 80036a0:	491c      	ldr	r1, [pc, #112]	; (8003714 <_ZN5Board18ChangeHolidayLightEii+0x134>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fd84 	bl	80041b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			break;
 80036a8:	e014      	b.n	80036d4 <_ZN5Board18ChangeHolidayLightEii+0xf4>
		case 1:
			currentHolidayRoom = "jadalnia";
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3320      	adds	r3, #32
 80036ae:	491a      	ldr	r1, [pc, #104]	; (8003718 <_ZN5Board18ChangeHolidayLightEii+0x138>)
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fd7d 	bl	80041b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			break;
 80036b6:	e00d      	b.n	80036d4 <_ZN5Board18ChangeHolidayLightEii+0xf4>
		case 2:
			currentHolidayRoom = "salon_kominek";
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3320      	adds	r3, #32
 80036bc:	4917      	ldr	r1, [pc, #92]	; (800371c <_ZN5Board18ChangeHolidayLightEii+0x13c>)
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fd76 	bl	80041b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			break;
 80036c4:	e006      	b.n	80036d4 <_ZN5Board18ChangeHolidayLightEii+0xf4>
		case 3:
			currentHolidayRoom = "hall";
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3320      	adds	r3, #32
 80036ca:	4915      	ldr	r1, [pc, #84]	; (8003720 <_ZN5Board18ChangeHolidayLightEii+0x140>)
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fd6f 	bl	80041b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			break;
 80036d2:	bf00      	nop
	}
	lights->SwitchLight(currentHolidayRoom, true);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681c      	ldr	r4, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f103 0220 	add.w	r2, r3, #32
 80036de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fd fa6c 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80036ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ee:	2201      	movs	r2, #1
 80036f0:	4619      	mov	r1, r3
 80036f2:	4620      	mov	r0, r4
 80036f4:	f001 fedb 	bl	80054ae <_ZN6Lights11SwitchLightENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 80036f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fd f9aa 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8003702:	bf00      	nop
 8003704:	3744      	adds	r7, #68	; 0x44
 8003706:	46bd      	mov	sp, r7
 8003708:	bd90      	pop	{r4, r7, pc}
 800370a:	bf00      	nop
 800370c:	0801f5a4 	.word	0x0801f5a4
 8003710:	66666667 	.word	0x66666667
 8003714:	0801f5a8 	.word	0x0801f5a8
 8003718:	0801f5b4 	.word	0x0801f5b4
 800371c:	0801f5c0 	.word	0x0801f5c0
 8003720:	0801f5d0 	.word	0x0801f5d0

08003724 <_ZN5Board20ResetHolidaySettingsEv>:

void Board::ResetHolidaySettings()
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	holidayLighting = false;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	771a      	strb	r2, [r3, #28]
	currentHolidayRoom = "";
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3320      	adds	r3, #32
 8003736:	4907      	ldr	r1, [pc, #28]	; (8003754 <_ZN5Board20ResetHolidaySettingsEv+0x30>)
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fd39 	bl	80041b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	currentHolidayHour = 0;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
	currentHolidayMinute = 0;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	0801f5a4 	.word	0x0801f5a4

08003758 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef>:

void Board::TimerEvent(RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate)
{
 8003758:	b084      	sub	sp, #16
 800375a:	b5b0      	push	{r4, r5, r7, lr}
 800375c:	b086      	sub	sp, #24
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (twilightMode)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	7b1b      	ldrb	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d041      	beq.n	80037f6 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x9e>
	{
	  int offset = sDate.Month > 10 || sDate.Month < 4 ? 1 : 2;
 8003772:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003776:	2b0a      	cmp	r3, #10
 8003778:	d803      	bhi.n	8003782 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x2a>
 800377a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800377e:	2b03      	cmp	r3, #3
 8003780:	d801      	bhi.n	8003786 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x2e>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x30>
 8003786:	2302      	movs	r3, #2
 8003788:	617b      	str	r3, [r7, #20]
	  int twilightTime = twilight[sDate.Month - 1][sDate.Date - 1];
 800378a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800378e:	1e5a      	subs	r2, r3, #1
 8003790:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003794:	1e58      	subs	r0, r3, #1
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	015b      	lsls	r3, r3, #5
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	4403      	add	r3, r0
 80037a0:	3310      	adds	r3, #16
 80037a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037a6:	613b      	str	r3, [r7, #16]
	  int twilightHour = (twilightTime / 100) + offset;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4a5a      	ldr	r2, [pc, #360]	; (8003914 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x1bc>)
 80037ac:	fb82 1203 	smull	r1, r2, r2, r3
 80037b0:	1152      	asrs	r2, r2, #5
 80037b2:	17db      	asrs	r3, r3, #31
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4413      	add	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
	  int twilightMinute = twilightTime % 100;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4a55      	ldr	r2, [pc, #340]	; (8003914 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x1bc>)
 80037c0:	fb82 1203 	smull	r1, r2, r2, r3
 80037c4:	1151      	asrs	r1, r2, #5
 80037c6:	17da      	asrs	r2, r3, #31
 80037c8:	1a8a      	subs	r2, r1, r2
 80037ca:	2164      	movs	r1, #100	; 0x64
 80037cc:	fb01 f202 	mul.w	r2, r1, r2
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]

	  if (sTime.Hours == twilightHour && sTime.Minutes == twilightMinute)
 80037d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80037d8:	461a      	mov	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4293      	cmp	r3, r2
 80037de:	d10a      	bne.n	80037f6 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x9e>
 80037e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037e4:	461a      	mov	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d104      	bne.n	80037f6 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x9e>
		 blinds->AllBlindsDown();
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fd f852 	bl	800089a <_ZN6Blinds13AllBlindsDownEv>
	}

	if (morningMode)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7b5b      	ldrb	r3, [r3, #13]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d021      	beq.n	8003842 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0xea>
	{
		if (sTime.Hours == Board::morningHour && sTime.Minutes == morningMinute && (morningDays & (1 << sDate.WeekDay)) == (1 << sDate.WeekDay))
 80037fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003802:	461a      	mov	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	429a      	cmp	r2, r3
 800380a:	d11a      	bne.n	8003842 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0xea>
 800380c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003810:	461a      	mov	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	429a      	cmp	r2, r3
 8003818:	d113      	bne.n	8003842 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0xea>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8003822:	4611      	mov	r1, r2
 8003824:	2201      	movs	r2, #1
 8003826:	408a      	lsls	r2, r1
 8003828:	4013      	ands	r3, r2
 800382a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800382e:	4611      	mov	r1, r2
 8003830:	2201      	movs	r2, #1
 8003832:	408a      	lsls	r2, r1
 8003834:	4293      	cmp	r3, r2
 8003836:	d104      	bne.n	8003842 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0xea>
			blinds->AllBlindsUp();
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fc fffa 	bl	8000836 <_ZN6Blinds11AllBlindsUpEv>
	}

	if (holidayMode)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	7b9b      	ldrb	r3, [r3, #14]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d05d      	beq.n	8003906 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x1ae>
	{
		if (sTime.Hours == 19 && sTime.Minutes == 50)
 800384a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800384e:	2b13      	cmp	r3, #19
 8003850:	d10f      	bne.n	8003872 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x11a>
 8003852:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003856:	2b32      	cmp	r3, #50	; 0x32
 8003858:	d10b      	bne.n	8003872 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x11a>
		{
			holidayLighting = true;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	771a      	strb	r2, [r3, #28]
			ChangeHolidayLight(sTime.Hours, sTime.Minutes);
 8003860:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003864:	4619      	mov	r1, r3
 8003866:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800386a:	461a      	mov	r2, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff feb7 	bl	80035e0 <_ZN5Board18ChangeHolidayLightEii>
		}
		if (sTime.Hours == 22 && sTime.Minutes == 0)
 8003872:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003876:	2b16      	cmp	r3, #22
 8003878:	d10b      	bne.n	8003892 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x13a>
 800387a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800387e:	2b00      	cmp	r3, #0
 8003880:	d107      	bne.n	8003892 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x13a>
		{
			ResetHolidaySettings();
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff ff4e 	bl	8003724 <_ZN5Board20ResetHolidaySettingsEv>
			lights->AllLightsOff();
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f001 fd37 	bl	8005300 <_ZN6Lights12AllLightsOffEv>
		}
		if (holidayLighting)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	7f1b      	ldrb	r3, [r3, #28]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d035      	beq.n	8003906 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x1ae>
		{
			if (sTime.Hours*60 + sTime.Minutes > currentHolidayHour*60 + currentHolidayMinute + 10 + (random() % 10))
 800389a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800389e:	461a      	mov	r2, r3
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	461a      	mov	r2, r3
 80038aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038ae:	18d4      	adds	r4, r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	461a      	mov	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	4413      	add	r3, r2
 80038c4:	f103 050a 	add.w	r5, r3, #10
 80038c8:	f01a fdaa 	bl	801e420 <random>
 80038cc:	4601      	mov	r1, r0
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x1c0>)
 80038d0:	fb83 2301 	smull	r2, r3, r3, r1
 80038d4:	109a      	asrs	r2, r3, #2
 80038d6:	17cb      	asrs	r3, r1, #31
 80038d8:	1ad2      	subs	r2, r2, r3
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	1aca      	subs	r2, r1, r3
 80038e4:	18ab      	adds	r3, r5, r2
 80038e6:	429c      	cmp	r4, r3
 80038e8:	bfcc      	ite	gt
 80038ea:	2301      	movgt	r3, #1
 80038ec:	2300      	movle	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef+0x1ae>
				ChangeHolidayLight(sTime.Hours, sTime.Minutes);
 80038f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80038f8:	4619      	mov	r1, r3
 80038fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038fe:	461a      	mov	r2, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fe6d 	bl	80035e0 <_ZN5Board18ChangeHolidayLightEii>
		}
	}
}
 8003906:	bf00      	nop
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003910:	b004      	add	sp, #16
 8003912:	4770      	bx	lr
 8003914:	51eb851f 	.word	0x51eb851f
 8003918:	66666667 	.word	0x66666667

0800391c <_ZN5Board15RestoreSettingsEv>:

void Board::RestoreSettings()
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	uint32_t address = settingsAddress;
 8003924:	4b1f      	ldr	r3, [pc, #124]	; (80039a4 <_ZN5Board15RestoreSettingsEv+0x88>)
 8003926:	60fb      	str	r3, [r7, #12]

	Flash_Read_Data(address, reinterpret_cast<uint8_t*>(&twilightMode), sizeof(bool));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	330c      	adds	r3, #12
 800392c:	2201      	movs	r2, #1
 800392e:	4619      	mov	r1, r3
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f001 faef 	bl	8004f14 <_Z15Flash_Read_DatamPht>
	address += sizeof(bool);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3301      	adds	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]

	Flash_Read_Data(address, reinterpret_cast<uint8_t*>(&morningMode), sizeof(bool));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	330d      	adds	r3, #13
 8003940:	2201      	movs	r2, #1
 8003942:	4619      	mov	r1, r3
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f001 fae5 	bl	8004f14 <_Z15Flash_Read_DatamPht>
	address += sizeof(bool);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3301      	adds	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]

	Flash_Read_Data(address, reinterpret_cast<uint8_t*>(&holidayMode), sizeof(bool));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	330e      	adds	r3, #14
 8003954:	2201      	movs	r2, #1
 8003956:	4619      	mov	r1, r3
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f001 fadb 	bl	8004f14 <_Z15Flash_Read_DatamPht>
	address += sizeof(bool);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3301      	adds	r3, #1
 8003962:	60fb      	str	r3, [r7, #12]

	Flash_Read_Data(address, reinterpret_cast<uint8_t*>(&morningHour), sizeof(int));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3310      	adds	r3, #16
 8003968:	2204      	movs	r2, #4
 800396a:	4619      	mov	r1, r3
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f001 fad1 	bl	8004f14 <_Z15Flash_Read_DatamPht>
	address += sizeof(int);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3304      	adds	r3, #4
 8003976:	60fb      	str	r3, [r7, #12]

	Flash_Read_Data(address, reinterpret_cast<uint8_t*>(&morningMinute), sizeof(int));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3314      	adds	r3, #20
 800397c:	2204      	movs	r2, #4
 800397e:	4619      	mov	r1, r3
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f001 fac7 	bl	8004f14 <_Z15Flash_Read_DatamPht>
	address += sizeof(int);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3304      	adds	r3, #4
 800398a:	60fb      	str	r3, [r7, #12]

	Flash_Read_Data(address, reinterpret_cast<uint8_t*>(&morningDays), sizeof(int));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3318      	adds	r3, #24
 8003990:	2204      	movs	r2, #4
 8003992:	4619      	mov	r1, r3
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f001 fabd 	bl	8004f14 <_Z15Flash_Read_DatamPht>
}
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	08050000 	.word	0x08050000

080039a8 <_ZN5Board14ParseBodyLinesENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPi>:

std::string * Board::ParseBodyLines(std::string body, int * parameterCount)
{
 80039a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039aa:	b0a1      	sub	sp, #132	; 0x84
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
	*parameterCount = std::count(body.begin(), body.end(), '\n');
 80039b4:	68b8      	ldr	r0, [r7, #8]
 80039b6:	f000 fc09 	bl	80041cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80039ba:	4604      	mov	r4, r0
 80039bc:	68b8      	ldr	r0, [r7, #8]
 80039be:	f000 fc1b 	bl	80041f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 80039c2:	4601      	mov	r1, r0
 80039c4:	230a      	movs	r3, #10
 80039c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80039ca:	f107 0343 	add.w	r3, r7, #67	; 0x43
 80039ce:	461a      	mov	r2, r3
 80039d0:	4620      	mov	r0, r4
 80039d2:	f000 fc2c 	bl	800422e <_ZSt5countIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcENSt15iterator_traitsIT_E15difference_typeESB_SB_RKT0_>
 80039d6:	4602      	mov	r2, r0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	601a      	str	r2, [r3, #0]
	std::string * records = new std::string[*parameterCount];
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461c      	mov	r4, r3
 80039e2:	4b49      	ldr	r3, [pc, #292]	; (8003b08 <_ZN5Board14ParseBodyLinesENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPi+0x160>)
 80039e4:	429c      	cmp	r4, r3
 80039e6:	d805      	bhi.n	80039f4 <_ZN5Board14ParseBodyLinesENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPi+0x4c>
 80039e8:	4623      	mov	r3, r4
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4423      	add	r3, r4
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	3308      	adds	r3, #8
 80039f2:	e001      	b.n	80039f8 <_ZN5Board14ParseBodyLinesENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPi+0x50>
 80039f4:	f04f 33ff 	mov.w	r3, #4294967295
 80039f8:	4618      	mov	r0, r3
 80039fa:	f01a f97a 	bl	801dcf2 <_Znaj>
 80039fe:	4603      	mov	r3, r0
 8003a00:	461d      	mov	r5, r3
 8003a02:	1d2b      	adds	r3, r5, #4
 8003a04:	3b04      	subs	r3, #4
 8003a06:	2218      	movs	r2, #24
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	1d2b      	adds	r3, r5, #4
 8003a0c:	601c      	str	r4, [r3, #0]
 8003a0e:	f105 0308 	add.w	r3, r5, #8
 8003a12:	1e62      	subs	r2, r4, #1
 8003a14:	4614      	mov	r4, r2
 8003a16:	461e      	mov	r6, r3
 8003a18:	2c00      	cmp	r4, #0
 8003a1a:	db05      	blt.n	8003a28 <_ZN5Board14ParseBodyLinesENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPi+0x80>
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f7fd f84e 	bl	8000abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8003a22:	3618      	adds	r6, #24
 8003a24:	3c01      	subs	r4, #1
 8003a26:	e7f7      	b.n	8003a18 <_ZN5Board14ParseBodyLinesENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPi+0x70>
 8003a28:	f105 0308 	add.w	r3, r5, #8
 8003a2c:	67bb      	str	r3, [r7, #120]	; 0x78

	size_t pos = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	677b      	str	r3, [r7, #116]	; 0x74
	std::string line;
 8003a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd f841 	bl	8000abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	int count = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
	std::string payload = body;
 8003a40:	f107 0310 	add.w	r3, r7, #16
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd f8bb 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
	while ((pos = payload.find("\r\n")) != std::string::npos)
 8003a4c:	f107 0310 	add.w	r3, r7, #16
 8003a50:	2200      	movs	r2, #0
 8003a52:	492e      	ldr	r1, [pc, #184]	; (8003b0c <_ZN5Board14ParseBodyLinesENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPi+0x164>)
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fbfe 	bl	8004256 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8003a5a:	6778      	str	r0, [r7, #116]	; 0x74
 8003a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d03c      	beq.n	8003ae8 <_ZN5Board14ParseBodyLinesENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPi+0x140>
	{
		line = payload.substr(0, pos);
 8003a6e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003a72:	f107 0110 	add.w	r1, r7, #16
 8003a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f000 fa65 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8003a7e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 faa5 	bl	8003fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003a8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fc ffdf 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		payload = payload.substr(pos + 2);
 8003a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a9a:	1c9a      	adds	r2, r3, #2
 8003a9c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8003aa0:	f107 0110 	add.w	r1, r7, #16
 8003aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa8:	f000 fa4e 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8003aac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003ab0:	f107 0310 	add.w	r3, r7, #16
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fa8e 	bl	8003fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003abc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fc ffc8 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		records[count++] = line;
 8003ac6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ac8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aca:	1c59      	adds	r1, r3, #1
 8003acc:	67f9      	str	r1, [r7, #124]	; 0x7c
 8003ace:	4619      	mov	r1, r3
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	440b      	add	r3, r1
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd f836 	bl	8000b52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	while ((pos = payload.find("\r\n")) != std::string::npos)
 8003ae6:	e7b1      	b.n	8003a4c <_ZN5Board14ParseBodyLinesENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPi+0xa4>
	}

	return records;
 8003ae8:	6fbc      	ldr	r4, [r7, #120]	; 0x78
	std::string payload = body;
 8003aea:	f107 0310 	add.w	r3, r7, #16
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fc ffb1 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	std::string line;
 8003af4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc ffac 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return records;
 8003afe:	4623      	mov	r3, r4
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3784      	adds	r7, #132	; 0x84
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b08:	05555555 	.word	0x05555555
 8003b0c:	0801f5d8 	.word	0x0801f5d8

08003b10 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcjRS2_>:
    char_traits<_CharT>::
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
      for (std::size_t __i = 0; __i < __n; ++__i)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d211      	bcs.n	8003b4c <_ZN9__gnu_cxx11char_traitsIcE4findEPKcjRS2_+0x3c>
        if (eq(__s[__i], __a))
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fc ff25 	bl	8000980 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcjRS2_+0x34>
          return __s + __i;
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	4413      	add	r3, r2
 8003b42:	e004      	b.n	8003b4e <_ZN9__gnu_cxx11char_traitsIcE4findEPKcjRS2_+0x3e>
      for (std::size_t __i = 0; __i < __n; ++__i)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	3301      	adds	r3, #1
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e7e9      	b.n	8003b20 <_ZN9__gnu_cxx11char_traitsIcE4findEPKcjRS2_+0x10>
      return 0;
 8003b4c:	2300      	movs	r3, #0
    }
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <_ZSt13copy_backwardIPKcPcET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003b56:	b590      	push	{r4, r7, lr}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7fd f864 	bl	8000c30 <_ZSt12__miter_baseIPKcET_S2_>
 8003b68:	4604      	mov	r4, r0
 8003b6a:	68b8      	ldr	r0, [r7, #8]
 8003b6c:	f7fd f860 	bl	8000c30 <_ZSt12__miter_baseIPKcET_S2_>
 8003b70:	4603      	mov	r3, r0
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4619      	mov	r1, r3
 8003b76:	4620      	mov	r0, r4
 8003b78:	f000 fb81 	bl	800427e <_ZSt22__copy_move_backward_aILb0EPKcPcET1_T0_S4_S3_>
 8003b7c:	4603      	mov	r3, r0
    }
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd90      	pop	{r4, r7, pc}

08003b86 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj>:
    char_traits<_CharT>::
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
      if (__n == 0)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x16>
	return __s1;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	e02a      	b.n	8003bf2 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x6c>
      if (std::is_constant_evaluated())
 8003b9c:	f7fc fd2a 	bl	80005f4 <_ZSt21is_constant_evaluatedv>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01e      	beq.n	8003be4 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x5e>
	  if (__s1 > __s2 && __s1 < __s2 + __n)
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d910      	bls.n	8003bd0 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x4a>
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d20a      	bcs.n	8003bd0 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x4a>
	    std::copy_backward(__s2, __s2 + __n, __s1 + __n);
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	18d1      	adds	r1, r2, r3
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68b8      	ldr	r0, [r7, #8]
 8003bca:	f7ff ffc4 	bl	8003b56 <_ZSt13copy_backwardIPKcPcET0_T_S4_S3_>
 8003bce:	e007      	b.n	8003be0 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x5a>
	    std::copy(__s2, __s2 + __n, __s1);
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	68b8      	ldr	r0, [r7, #8]
 8003bdc:	f7fc ff04 	bl	80009e8 <_ZSt4copyIPKcPcET0_T_S4_S3_>
	  return __s1;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	e006      	b.n	8003bf2 <_ZN9__gnu_cxx11char_traitsIcE4moveEPcPKcj+0x6c>
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f01a fac1 	bl	801e170 <memmove>
 8003bee:	4603      	mov	r3, r0
						    __n * sizeof(char_type)));
 8003bf0:	bf00      	nop
    }
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <_ZSt6fill_nIPcjcET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8003bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8003c06:	68fc      	ldr	r4, [r7, #12]
 8003c08:	68b8      	ldr	r0, [r7, #8]
 8003c0a:	f7fd fd75 	bl	80016f8 <_ZSt17__size_to_integerj>
 8003c0e:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8003c10:	f107 030c 	add.w	r3, r7, #12
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fd f839 	bl	8000c8c <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8003c1a:	4633      	mov	r3, r6
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	4629      	mov	r1, r5
 8003c20:	4620      	mov	r0, r4
 8003c22:	f000 fb4f 	bl	80042c4 <_ZSt10__fill_n_aIPcjcET_S1_T0_RKT1_St26random_access_iterator_tag>
 8003c26:	4603      	mov	r3, r0
    }
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c30 <_ZN9__gnu_cxx11char_traitsIcE6assignEPcjc>:
    char_traits<_CharT>::
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	71fb      	strb	r3, [r7, #7]
      std::fill_n(__s, __n, __a);
 8003c3e:	1dfb      	adds	r3, r7, #7
 8003c40:	461a      	mov	r2, r3
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff ffd8 	bl	8003bfa <_ZSt6fill_nIPcjcET_S1_T0_RKT1_>
      return __s;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
    }
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
      c_str() const _GLIBCXX_NOEXCEPT
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
      { return _M_data(); }
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7fd f81f 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev+0x24>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev+0x24>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	2000fb24 	.word	0x2000fb24

08003c94 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x28>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d103      	bne.n	8003cac <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x18>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x28>)
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	2000fb24 	.word	0x2000fb24

08003cc0 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8003cca:	2300      	movs	r3, #0
	  }
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b08b      	sub	sp, #44	; 0x2c
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ffbe 	bl	8003c6c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f107 0118 	add.w	r1, r7, #24
 8003cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	4798      	blx	r3
 8003cfc:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d102      	bne.n	8003d0c <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8003d06:	68b8      	ldr	r0, [r7, #8]
 8003d08:	f019 fffe 	bl	801dd08 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8003d0c:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x88>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8003d10:	2b22      	cmp	r3, #34	; 0x22
 8003d12:	d006      	beq.n	8003d22 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4a>
 8003d14:	4621      	mov	r1, r4
 8003d16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d18:	f7ff ffd2 	bl	8003cc0 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x50>
 8003d26:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5a>
	std::__throw_out_of_range(__name);
 8003d2c:	68b8      	ldr	r0, [r7, #8]
 8003d2e:	f019 fff1 	bl	801dd14 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	623b      	str	r3, [r7, #32]

      if (__idx)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x70>
	*__idx = __endptr - __str;
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	601a      	str	r2, [r3, #0]

      return __ret;
 8003d48:	6a3c      	ldr	r4, [r7, #32]
      } const __save_errno;
 8003d4a:	f107 0314 	add.w	r3, r7, #20
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ffa0 	bl	8003c94 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8003d54:	4623      	mov	r3, r4
    }
 8003d56:	4618      	mov	r0, r3
 8003d58:	372c      	adds	r7, #44	; 0x2c
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd90      	pop	{r4, r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	2000fb24 	.word	0x2000fb24

08003d64 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	fb03 f303 	mul.w	r3, r3, r3
 8003d78:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d201      	bcs.n	8003d9a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	e01d      	b.n	8003dd6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d202      	bcs.n	8003da8 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	3301      	adds	r3, #1
 8003da6:	e016      	b.n	8003dd6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d202      	bcs.n	8003db6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3302      	adds	r3, #2
 8003db4:	e00f      	b.n	8003dd6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d202      	bcs.n	8003dc4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	3303      	adds	r3, #3
 8003dc2:	e008      	b.n	8003dd6 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8003dd4:	e7db      	b.n	8003d8e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEjcRKS3_>:
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 8003de2:	b590      	push	{r4, r7, lr}
 8003de4:	b085      	sub	sp, #20
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	4613      	mov	r3, r2
 8003df0:	71fb      	strb	r3, [r7, #7]
      : _M_dataplus(_M_local_data(), __a)
 8003df2:	68fc      	ldr	r4, [r7, #12]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7fc ff5f 	bl	8000cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4620      	mov	r0, r4
 8003e02:	f7fc ff67 	bl	8000cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__n, __c); }
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fa74 	bl	80042fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd90      	pop	{r4, r7, pc}

08003e1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
      operator[](size_type __pos)
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
	return _M_data()[__pos];
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fc ff3a 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	4413      	add	r3, r2
      }
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	; 0x24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b63      	cmp	r3, #99	; 0x63
 8003e52:	d925      	bls.n	8003ea0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x64>
	{
	  auto const __num = (__val % 100) * 2;
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8003e58:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	2164      	movs	r1, #100	; 0x64
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	61bb      	str	r3, [r7, #24]
	  __val /= 100;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a1c      	ldr	r2, [pc, #112]	; (8003ee0 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	68f9      	ldr	r1, [r7, #12]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	440b      	add	r3, r1
 8003e80:	4918      	ldr	r1, [pc, #96]	; (8003ee4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003e82:	5c8a      	ldrb	r2, [r1, r2]
 8003e84:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	4915      	ldr	r1, [pc, #84]	; (8003ee4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	440a      	add	r2, r1
 8003e94:	7812      	ldrb	r2, [r2, #0]
 8003e96:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	3b02      	subs	r3, #2
 8003e9c:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8003e9e:	e7d6      	b.n	8003e4e <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x12>
	}
      if (__val >= 10)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b09      	cmp	r3, #9
 8003ea4:	d910      	bls.n	8003ec8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
	  __first[1] = __digits[__num + 1];
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	490b      	ldr	r1, [pc, #44]	; (8003ee4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003eb6:	5c8a      	ldrb	r2, [r1, r2]
 8003eb8:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8003eba:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	781a      	ldrb	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8003ec6:	e005      	b.n	8003ed4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	3330      	adds	r3, #48	; 0x30
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	701a      	strb	r2, [r3, #0]
    }
 8003ed4:	bf00      	nop
 8003ed6:	3724      	adds	r7, #36	; 0x24
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	51eb851f 	.word	0x51eb851f
 8003ee4:	080232d8 	.word	0x080232d8

08003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
    { return __lhs.compare(__rhs) == 0; }
 8003ef2:	6839      	ldr	r1, [r7, #0]
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fa72 	bl	80043de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>:
      operator+=(const _CharT* __s)
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	6039      	str	r1, [r7, #0]
      { return this->append(__s); }
 8003f18:	6839      	ldr	r1, [r7, #0]
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa2c 	bl	8004378 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8003f20:	4603      	mov	r3, r0
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
      operator+=(const basic_string& __str)
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]
      { return this->append(__str); }
 8003f34:	6839      	ldr	r1, [r7, #0]
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fa3a 	bl	80043b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
      substr(size_type __pos = 0, size_type __n = npos) const
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
			    _M_check(__pos, "basic_string::substr"), __n); }
 8003f56:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x2c>)
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	68b8      	ldr	r0, [r7, #8]
 8003f5c:	f000 fa72 	bl	8004444 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8003f60:	4602      	mov	r2, r0
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fa8e 	bl	8004488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	0801f5dc 	.word	0x0801f5dc

08003f78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	460b      	mov	r3, r1
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	72fb      	strb	r3, [r7, #11]
    find(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT
    {
      size_type __ret = npos;
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __size = this->size();
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7fc fd72 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003f92:	6238      	str	r0, [r7, #32]
      if (__pos < __size)
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d218      	bcs.n	8003fce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x56>
	{
	  const _CharT* __data = _M_data();
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7fc fe7f 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8003fa2:	61f8      	str	r0, [r7, #28]
	  const size_type __n = __size - __pos;
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	61bb      	str	r3, [r7, #24]
	  const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f107 020b 	add.w	r2, r7, #11
 8003fb6:	69b9      	ldr	r1, [r7, #24]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fd fba8 	bl	800170e <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8003fbe:	6178      	str	r0, [r7, #20]
	  if (__p)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x56>
	    __ret = __p - __data;
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
	}
      return __ret;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3728      	adds	r7, #40	; 0x28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
      operator=(basic_string&& __str)
 8003fd8:	b5b0      	push	{r4, r5, r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fc fecb 	bl	8000d7e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f083 0301 	eor.w	r3, r3, #1
 8003fee:	b2db      	uxtb	r3, r3
	    && _M_get_allocator() != __str._M_get_allocator())
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x5e>
	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 8003ff4:	f7ff f9b2 	bl	800335c <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE27_S_propagate_on_move_assignEv>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d01b      	beq.n	8004036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x5e>
	    && !_Alloc_traits::_S_always_equal()
 8003ffe:	f7fc ff7d 	bl	8000efc <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE15_S_always_equalEv>
 8004002:	4603      	mov	r3, r0
 8004004:	f083 0301 	eor.w	r3, r3, #1
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d013      	beq.n	8004036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x5e>
	    && _M_get_allocator() != __str._M_get_allocator())
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fc fe89 	bl	8000d26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8004014:	4604      	mov	r4, r0
 8004016:	6838      	ldr	r0, [r7, #0]
 8004018:	f7fc fe85 	bl	8000d26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 800401c:	4603      	mov	r3, r0
 800401e:	4619      	mov	r1, r3
 8004020:	4620      	mov	r0, r4
 8004022:	f7fc ff73 	bl	8000f0c <_ZSteqRKSaIcES1_>
 8004026:	4603      	mov	r3, r0
 8004028:	f083 0301 	eor.w	r3, r3, #1
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x5e>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x60>
 8004036:	2300      	movs	r3, #0
	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 8004038:	2b00      	cmp	r3, #0
 800403a:	d011      	beq.n	8004060 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x88>
	    _M_destroy(_M_allocated_capacity);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd f8d0 	bl	80011e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
	    _M_data(_M_local_data());
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7fc fe35 	bl	8000cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800404e:	4603      	mov	r3, r0
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fc fea8 	bl	8000da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_set_length(0);
 8004058:	2100      	movs	r1, #0
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fc fece 	bl	8000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7fc fe60 	bl	8000d26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8004066:	4604      	mov	r4, r0
 8004068:	6838      	ldr	r0, [r7, #0]
 800406a:	f7fc fe5c 	bl	8000d26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 800406e:	4603      	mov	r3, r0
 8004070:	4619      	mov	r1, r3
 8004072:	4620      	mov	r0, r4
 8004074:	f000 fa46 	bl	8004504 <_ZSt15__alloc_on_moveISaIcEEvRT_S2_>
	if (__str._M_is_local())
 8004078:	6838      	ldr	r0, [r7, #0]
 800407a:	f7fc fe80 	bl	8000d7e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d024      	beq.n	80040ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0xf6>
	    if (__str.size())
 8004084:	6838      	ldr	r0, [r7, #0]
 8004086:	f7fc fcf6 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf14      	ite	ne
 8004090:	2301      	movne	r3, #1
 8004092:	2300      	moveq	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d010      	beq.n	80040bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0xe4>
	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fc fe00 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80040a0:	4604      	mov	r4, r0
 80040a2:	6838      	ldr	r0, [r7, #0]
 80040a4:	f7fc fdfc 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80040a8:	4605      	mov	r5, r0
 80040aa:	6838      	ldr	r0, [r7, #0]
 80040ac:	f7fc fce3 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80040b0:	4603      	mov	r3, r0
 80040b2:	461a      	mov	r2, r3
 80040b4:	4629      	mov	r1, r5
 80040b6:	4620      	mov	r0, r4
 80040b8:	f7fd f9c8 	bl	800144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
	    _M_set_length(__str.size());
 80040bc:	6838      	ldr	r0, [r7, #0]
 80040be:	f7fc fcda 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fc fe98 	bl	8000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
 80040cc:	e068      	b.n	80041a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c8>
	else if (_Alloc_traits::_S_propagate_on_move_assign()
 80040ce:	f7ff f945 	bl	800335c <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE27_S_propagate_on_move_assignEv>
 80040d2:	4603      	mov	r3, r0
	    || _M_get_allocator() == __str._M_get_allocator())
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d113      	bne.n	8004100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x128>
	    || _Alloc_traits::_S_always_equal()
 80040d8:	f7fc ff10 	bl	8000efc <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE15_S_always_equalEv>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10e      	bne.n	8004100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x128>
	    || _M_get_allocator() == __str._M_get_allocator())
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc fe1f 	bl	8000d26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 80040e8:	4604      	mov	r4, r0
 80040ea:	6838      	ldr	r0, [r7, #0]
 80040ec:	f7fc fe1b 	bl	8000d26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 80040f0:	4603      	mov	r3, r0
 80040f2:	4619      	mov	r1, r3
 80040f4:	4620      	mov	r0, r4
 80040f6:	f7fc ff09 	bl	8000f0c <_ZSteqRKSaIcES1_>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x12c>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x12e>
 8004104:	2300      	movs	r3, #0
	else if (_Alloc_traits::_S_propagate_on_move_assign()
 8004106:	2b00      	cmp	r3, #0
 8004108:	d046      	beq.n	8004198 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c0>
	    pointer __data = nullptr;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
	    if (!_M_is_local())
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fc fe35 	bl	8000d7e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8004114:	4603      	mov	r3, r0
 8004116:	f083 0301 	eor.w	r3, r3, #1
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d012      	beq.n	8004146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x16e>
		if (_Alloc_traits::_S_always_equal())
 8004120:	f7fc feec 	bl	8000efc <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE15_S_always_equalEv>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x162>
		    __data = _M_data();
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fc fdb8 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004130:	60f8      	str	r0, [r7, #12]
		    __capacity = _M_allocated_capacity;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	e005      	b.n	8004146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x16e>
		  _M_destroy(_M_allocated_capacity);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4619      	mov	r1, r3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fd f851 	bl	80011e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
	    _M_data(__str._M_data());
 8004146:	6838      	ldr	r0, [r7, #0]
 8004148:	f7fc fdaa 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800414c:	4603      	mov	r3, r0
 800414e:	4619      	mov	r1, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7fc fe29 	bl	8000da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_length(__str.length());
 8004156:	6838      	ldr	r0, [r7, #0]
 8004158:	f7fc fca5 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800415c:	4603      	mov	r3, r0
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fc fe3d 	bl	8000de0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEj>
	    _M_capacity(__str._M_allocated_capacity);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fc fe29 	bl	8000dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	    if (__data)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1b2>
		__str._M_data(__data);
 8004178:	68f9      	ldr	r1, [r7, #12]
 800417a:	6838      	ldr	r0, [r7, #0]
 800417c:	f7fc fe14 	bl	8000da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
		__str._M_capacity(__capacity);
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	6838      	ldr	r0, [r7, #0]
 8004184:	f7fc fe1e 	bl	8000dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 8004188:	e00a      	b.n	80041a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c8>
	      __str._M_data(__str._M_local_buf);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	3308      	adds	r3, #8
 800418e:	4619      	mov	r1, r3
 8004190:	6838      	ldr	r0, [r7, #0]
 8004192:	f7fc fe09 	bl	8000da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
 8004196:	e003      	b.n	80041a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c8>
	  assign(__str);
 8004198:	6839      	ldr	r1, [r7, #0]
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fc fee0 	bl	8000f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignERKS4_>
	__str.clear();
 80041a0:	6838      	ldr	r0, [r7, #0]
 80041a2:	f000 f9bb 	bl	800451c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	return *this;
 80041a6:	687b      	ldr	r3, [r7, #4]
      }
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bdb0      	pop	{r4, r5, r7, pc}

080041b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
      operator=(const _CharT* __s)
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
      { return this->assign(__s); }
 80041ba:	6839      	ldr	r1, [r7, #0]
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f9b9 	bl	8004534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80041c2:	4603      	mov	r3, r0
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
      { return iterator(_M_data()); }
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7fc fd63 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80041da:	4603      	mov	r3, r0
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	f107 020c 	add.w	r2, r7, #12
 80041e2:	f107 0308 	add.w	r3, r7, #8
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f9bc 	bl	8004566 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS1_>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80041f8:	b590      	push	{r4, r7, lr}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
      { return iterator(_M_data() + this->size()); }
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7fc fd4d 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004206:	4604      	mov	r4, r0
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fc fc34 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800420e:	4603      	mov	r3, r0
 8004210:	4423      	add	r3, r4
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	f107 020c 	add.w	r2, r7, #12
 8004218:	f107 0308 	add.w	r3, r7, #8
 800421c:	4611      	mov	r1, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f9a1 	bl	8004566 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS1_>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bd90      	pop	{r4, r7, pc}

0800422e <_ZSt5countIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEcENSt15iterator_traitsIT_E15difference_typeESB_SB_RKT0_>:
   *  for which @c *i == @p __value
  */
  template<typename _InputIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_EqualOpConcept<
	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__count_if(__first, __last,
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f9a3 	bl	8004586 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>
 8004240:	4603      	mov	r3, r0
 8004242:	461a      	mov	r2, r3
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fa02 	bl	8004650 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_>
 800424c:	4603      	mov	r3, r0
			     __gnu_cxx::__ops::__iter_equals_val(__value));
    }
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>:
      find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
	return this->find(__s, __pos, traits_type::length(__s));
 8004262:	68b8      	ldr	r0, [r7, #8]
 8004264:	f7fc fa33 	bl	80006ce <_ZNSt11char_traitsIcE6lengthEPKc>
 8004268:	4603      	mov	r3, r0
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fa1a 	bl	80046a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 8004274:	4603      	mov	r3, r0
      }
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <_ZSt22__copy_move_backward_aILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800427e:	b5b0      	push	{r4, r5, r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f7fc ff23 	bl	80010d6 <_ZSt12__niter_baseIPKcET_S2_>
 8004290:	4604      	mov	r4, r0
 8004292:	68b8      	ldr	r0, [r7, #8]
 8004294:	f7fc ff1f 	bl	80010d6 <_ZSt12__niter_baseIPKcET_S2_>
 8004298:	4605      	mov	r5, r0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4618      	mov	r0, r3
 800429e:	f7fc ff25 	bl	80010ec <_ZSt12__niter_baseIPcET_S1_>
 80042a2:	4603      	mov	r3, r0
 80042a4:	461a      	mov	r2, r3
 80042a6:	4629      	mov	r1, r5
 80042a8:	4620      	mov	r0, r4
 80042aa:	f000 fa63 	bl	8004774 <_ZSt23__copy_move_backward_a1ILb0EPKcPcET1_T0_S4_S3_>
 80042ae:	4602      	mov	r2, r0
 80042b0:	1d3b      	adds	r3, r7, #4
 80042b2:	4611      	mov	r1, r2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fc ff24 	bl	8001102 <_ZSt12__niter_wrapIPcET_RKS1_S1_>
 80042ba:	4603      	mov	r3, r0
    }
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bdb0      	pop	{r4, r5, r7, pc}

080042c4 <_ZSt10__fill_n_aIPcjcET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <_ZSt10__fill_n_aIPcjcET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	e00a      	b.n	80042f2 <_ZSt10__fill_n_aIPcjcET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4413      	add	r3, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4619      	mov	r1, r3
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fa54 	bl	8004794 <_ZSt8__fill_aIPccEvT_S1_RKT0_>
      return __first + __n;
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4413      	add	r3, r2
    }
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
    basic_string<_CharT, _Traits, _Alloc>::
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	4613      	mov	r3, r2
 8004306:	71fb      	strb	r3, [r7, #7]
      if (__n > size_type(_S_local_capacity))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b0f      	cmp	r3, #15
 800430c:	d910      	bls.n	8004330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x36>
	  _M_data(_M_create(__n, size_type(0)));
 800430e:	f107 0308 	add.w	r3, r7, #8
 8004312:	2200      	movs	r2, #0
 8004314:	4619      	mov	r1, r3
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7fc ff1c 	bl	8001154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800431c:	4603      	mov	r3, r0
 800431e:	4619      	mov	r1, r3
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f7fc fd41 	bl	8000da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	  _M_capacity(__n);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4619      	mov	r1, r3
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7fc fd4a 	bl	8000dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
      if (__n)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x4c>
	this->_S_assign(_M_data(), __n, __c);
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7fc fcb2 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	79fa      	ldrb	r2, [r7, #7]
 8004340:	4619      	mov	r1, r3
 8004342:	f000 fa36 	bl	80047b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
      _M_set_length(__n);
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4619      	mov	r1, r3
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f7fc fd56 	bl	8000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
    }
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fa3c 	bl	80047e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>
        }
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
      append(const _CharT* __s)
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
	const size_type __n = traits_type::length(__s);
 8004382:	6838      	ldr	r0, [r7, #0]
 8004384:	f7fc f9a3 	bl	80006ce <_ZNSt11char_traitsIcE6lengthEPKc>
 8004388:	60f8      	str	r0, [r7, #12]
	_M_check_length(size_type(0), __n, "basic_string::append");
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x34>)
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	2100      	movs	r1, #0
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fa39 	bl	8004808 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
	return _M_append(__s, __n);
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fa55 	bl	800484a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80043a0:	4603      	mov	r3, r0
      }
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	0801f620 	.word	0x0801f620

080043b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
      append(const basic_string& __str)
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
      { return _M_append(__str._M_data(), __str.size()); }
 80043ba:	6838      	ldr	r0, [r7, #0]
 80043bc:	f7fc fc70 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80043c0:	4604      	mov	r4, r0
 80043c2:	6838      	ldr	r0, [r7, #0]
 80043c4:	f7fc fb57 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80043c8:	4603      	mov	r3, r0
 80043ca:	461a      	mov	r2, r3
 80043cc:	4621      	mov	r1, r4
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fa3b 	bl	800484a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd90      	pop	{r4, r7, pc}

080043de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	6039      	str	r1, [r7, #0]
    compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT
    {
      __glibcxx_requires_string(__s);
      const size_type __size = this->size();
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fc fb44 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80043ee:	4603      	mov	r3, r0
 80043f0:	60fb      	str	r3, [r7, #12]
      const size_type __osize = traits_type::length(__s);
 80043f2:	6838      	ldr	r0, [r7, #0]
 80043f4:	f7fc f96b 	bl	80006ce <_ZNSt11char_traitsIcE6lengthEPKc>
 80043f8:	4603      	mov	r3, r0
 80043fa:	60bb      	str	r3, [r7, #8]
      const size_type __len = std::min(__size, __osize);
 80043fc:	f107 0208 	add.w	r2, r7, #8
 8004400:	f107 030c 	add.w	r3, r7, #12
 8004404:	4611      	mov	r1, r2
 8004406:	4618      	mov	r0, r3
 8004408:	f7fd fa6b 	bl	80018e2 <_ZSt3minIjERKT_S2_S2_>
 800440c:	4603      	mov	r3, r0
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	613b      	str	r3, [r7, #16]
      int __r = traits_type::compare(_M_data(), __s, __len);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fc fc44 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004418:	4603      	mov	r3, r0
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	6839      	ldr	r1, [r7, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc f913 	bl	800064a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8004424:	6178      	str	r0, [r7, #20]
      if (!__r)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d106      	bne.n	800443a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x5c>
	__r = _S_compare(__size, __osize);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	4611      	mov	r1, r2
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fa48 	bl	80048c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEjj>
 8004438:	6178      	str	r0, [r7, #20]
      return __r;
 800443a:	697b      	ldr	r3, [r7, #20]
    }
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
      _M_check(size_type __pos, const char* __s) const
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
	if (__pos > this->size())
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f7fc fb10 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8004456:	4602      	mov	r2, r0
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4293      	cmp	r3, r2
 800445c:	bf8c      	ite	hi
 800445e:	2301      	movhi	r3, #1
 8004460:	2300      	movls	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x36>
	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f7fc fb04 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800446e:	4603      	mov	r3, r0
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4803      	ldr	r0, [pc, #12]	; (8004484 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x40>)
 8004476:	f019 fc50 	bl	801dd1a <_ZSt24__throw_out_of_range_fmtPKcz>
	return __pos;
 800447a:	68bb      	ldr	r3, [r7, #8]
      }
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	0801f638 	.word	0x0801f638

08004488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
      basic_string(const basic_string& __str, size_type __pos,
 8004488:	b5b0      	push	{r4, r5, r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
      : _M_dataplus(_M_local_data())
 8004496:	68fc      	ldr	r4, [r7, #12]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7fc fc0d 	bl	8000cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 800449e:	4605      	mov	r5, r0
 80044a0:	f107 0310 	add.w	r3, r7, #16
 80044a4:	4618      	mov	r0, r3
 80044a6:	f019 fc26 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80044aa:	f107 0310 	add.w	r3, r7, #16
 80044ae:	461a      	mov	r2, r3
 80044b0:	4629      	mov	r1, r5
 80044b2:	4620      	mov	r0, r4
 80044b4:	f7fc fc4d 	bl	8000d52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcOS3_>
 80044b8:	f107 0310 	add.w	r3, r7, #16
 80044bc:	4618      	mov	r0, r3
 80044be:	f019 fc1c 	bl	801dcfa <_ZNSaIcED1Ev>
	const _CharT* __start = __str._M_data()
 80044c2:	68b8      	ldr	r0, [r7, #8]
 80044c4:	f7fc fbec 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80044c8:	4604      	mov	r4, r0
	  + __str._M_check(__pos, "basic_string::basic_string");
 80044ca:	4a0d      	ldr	r2, [pc, #52]	; (8004500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x78>)
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	68b8      	ldr	r0, [r7, #8]
 80044d0:	f7ff ffb8 	bl	8004444 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80044d4:	4603      	mov	r3, r0
	const _CharT* __start = __str._M_data()
 80044d6:	4423      	add	r3, r4
 80044d8:	617b      	str	r3, [r7, #20]
	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	68b8      	ldr	r0, [r7, #8]
 80044e0:	f000 fa02 	bl	80048e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEjj>
 80044e4:	4602      	mov	r2, r0
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	4413      	add	r3, r2
 80044ea:	461a      	mov	r2, r3
 80044ec:	6979      	ldr	r1, [r7, #20]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff ff32 	bl	8004358 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_>
      }
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bdb0      	pop	{r4, r5, r7, pc}
 80044fe:	bf00      	nop
 8004500:	0801f670 	.word	0x0801f670

08004504 <_ZSt15__alloc_on_moveISaIcEEvRT_S2_>:
    { }
#endif

  template<typename _Alloc>
    _GLIBCXX14_CONSTEXPR inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
 800450e:	6838      	ldr	r0, [r7, #0]
 8004510:	f7fc fc14 	bl	8000d3c <_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_>
#else
      __do_alloc_on_move(__one, __two, __pocma());
#endif
    }
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
      { _M_set_length(0); }
 8004524:	2100      	movs	r1, #0
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fc fc68 	bl	8000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
      assign(const _CharT* __s)
 8004534:	b590      	push	{r4, r7, lr}
 8004536:	b085      	sub	sp, #20
 8004538:	af02      	add	r7, sp, #8
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
	return _M_replace(size_type(0), this->size(), __s,
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc fa99 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8004544:	4604      	mov	r4, r0
 8004546:	6838      	ldr	r0, [r7, #0]
 8004548:	f7fc f8c1 	bl	80006ce <_ZNSt11char_traitsIcE6lengthEPKc>
 800454c:	4603      	mov	r3, r0
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4622      	mov	r2, r4
 8004554:	2100      	movs	r1, #0
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f9e8 	bl	800492c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800455c:	4603      	mov	r3, r0
      }
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bd90      	pop	{r4, r7, pc}

08004566 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <_ZN9__gnu_cxx5__ops17__iter_equals_valIKcEENS0_16_Iter_equals_valIT_EERS4_>:
    };

  template<typename _Value>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
    { return _Iter_equals_val<_Value>(__val); }
 800458e:	f107 030c 	add.w	r3, r7, #12
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fa87 	bl	8004aa8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
	++_M_current;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	601a      	str	r2, [r3, #0]
	return *this;
 80045cc:	687b      	ldr	r3, [r7, #4]
      }
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>:
	operator()(_Iterator __it)
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
	{ return *__it == _M_value; }
 80045fc:	463b      	mov	r3, r7
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff ffeb 	bl	80045da <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8004604:	4603      	mov	r3, r0
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	bf0c      	ite	eq
 8004612:	2301      	moveq	r3, #1
 8004614:	2300      	movne	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <_ZN9__gnu_cxxeqIPcS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7ff ffba 	bl	80045a4 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8004630:	4603      	mov	r3, r0
 8004632:	681c      	ldr	r4, [r3, #0]
 8004634:	6838      	ldr	r0, [r7, #0]
 8004636:	f7ff ffb5 	bl	80045a4 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800463a:	4603      	mov	r3, r0
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	429c      	cmp	r4, r3
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	bd90      	pop	{r4, r7, pc}

08004650 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_>:
    }

  template<typename _InputIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8004660:	f107 0208 	add.w	r2, r7, #8
 8004664:	f107 030c 	add.w	r3, r7, #12
 8004668:	4611      	mov	r1, r2
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff ffd8 	bl	8004620 <_ZN9__gnu_cxxeqIPcS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8004670:	4603      	mov	r3, r0
 8004672:	f083 0301 	eor.w	r3, r3, #1
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d010      	beq.n	800469e <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_+0x4e>
	if (__pred(__first))
 800467c:	1d3b      	adds	r3, r7, #4
 800467e:	68f9      	ldr	r1, [r7, #12]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ffb6 	bl	80045f2 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEclINS_17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEEbT_>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_+0x42>
	  ++__n;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3301      	adds	r3, #1
 8004690:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8004692:	f107 030c 	add.w	r3, r7, #12
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff ff8f 	bl	80045ba <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800469c:	e7e0      	b.n	8004660 <_ZSt10__count_ifIN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS0_5__ops16_Iter_equals_valIKcEEENSt15iterator_traitsIT_E15difference_typeESF_SF_T0_+0x10>
      return __n;
 800469e:	697b      	ldr	r3, [r7, #20]
    }
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
    basic_string<_CharT, _Traits, _Alloc>::
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
      const size_type __size = this->size();
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7fc f9dd 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80046bc:	61f8      	str	r0, [r7, #28]
      if (__n == 0)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x30>
	return __pos <= __size ? __pos : npos;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d302      	bcc.n	80046d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x2a>
 80046cc:	1d3b      	adds	r3, r7, #4
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	e04c      	b.n	800476c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0xc4>
 80046d2:	f04f 33ff 	mov.w	r3, #4294967295
 80046d6:	e049      	b.n	800476c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0xc4>
      if (__pos >= __size)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d802      	bhi.n	80046e6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x3e>
	return npos;
 80046e0:	f04f 33ff 	mov.w	r3, #4294967295
 80046e4:	e042      	b.n	800476c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0xc4>
      const _CharT __elem0 = __s[0];
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	74fb      	strb	r3, [r7, #19]
      const _CharT* const __data = data();
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7fc f9ce 	bl	8000a8e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 80046f2:	61b8      	str	r0, [r7, #24]
      const _CharT* __first = __data + __pos;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4413      	add	r3, r2
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
      const _CharT* const __last = __data + __size;
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
      size_type __len = __size - __pos;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	623b      	str	r3, [r7, #32]
      while (__len >= __n)
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d329      	bcc.n	8004768 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0xc0>
	  __first = traits_type::find(__first, __len - __n + 1, __elem0);
 8004714:	6a3a      	ldr	r2, [r7, #32]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	3301      	adds	r3, #1
 800471c:	f107 0213 	add.w	r2, r7, #19
 8004720:	4619      	mov	r1, r3
 8004722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004724:	f7fc fff3 	bl	800170e <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8004728:	6278      	str	r0, [r7, #36]	; 0x24
	  if (!__first)
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	2b00      	cmp	r3, #0
 800472e:	d102      	bne.n	8004736 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x8e>
	    return npos;
 8004730:	f04f 33ff 	mov.w	r3, #4294967295
 8004734:	e01a      	b.n	800476c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0xc4>
	  if (traits_type::compare(__first, __s, __n) == 0)
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800473c:	f7fb ff85 	bl	800064a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0xb0>
	    return __first - __data;
 8004750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	e009      	b.n	800476c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0xc4>
	  __len = __last - ++__first;
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	3301      	adds	r3, #1
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	623b      	str	r3, [r7, #32]
      while (__len >= __n)
 8004766:	e7d1      	b.n	800470c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x64>
      return npos;
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
    }
 800476c:	4618      	mov	r0, r3
 800476e:	3728      	adds	r7, #40	; 0x28
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <_ZSt23__copy_move_backward_a1ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f99e 	bl	8004ac6 <_ZSt23__copy_move_backward_a2ILb0EPKcPcET1_T0_S4_S3_>
 800478a:	4603      	mov	r3, r0
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <_ZSt8__fill_aIPccEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f9ab 	bl	8004b00 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 80047aa:	bf00      	nop
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	4613      	mov	r3, r2
 80047be:	71fb      	strb	r3, [r7, #7]
	if (__n == 1)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d105      	bne.n	80047d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x20>
	  traits_type::assign(*__d, __c);
 80047c6:	1dfb      	adds	r3, r7, #7
 80047c8:	4619      	mov	r1, r3
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f7fb ff1a 	bl	8000604 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 80047d0:	e005      	b.n	80047de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x2c>
	  traits_type::assign(__d, __n, __c);
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	461a      	mov	r2, r3
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7fc ffdc 	bl	8001796 <_ZNSt11char_traitsIcE6assignEPcjc>
      }
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPKcEEvT_S8_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 80047e6:	b590      	push	{r4, r7, lr}
 80047e8:	b087      	sub	sp, #28
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	703b      	strb	r3, [r7, #0]
          _M_construct(__beg, __end, _Tag());
 80047f4:	4623      	mov	r3, r4
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7fc fb2e 	bl	8000e5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
	}
 8004800:	bf00      	nop
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	bd90      	pop	{r4, r7, pc}

08004808 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
	if (this->max_size() - (this->size() - __n1) < __n2)
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f7fc fddb 	bl	80013d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 800481c:	4604      	mov	r4, r0
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f7fc f929 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	4423      	add	r3, r4
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	429a      	cmp	r2, r3
 8004830:	bf8c      	ite	hi
 8004832:	2301      	movhi	r3, #1
 8004834:	2300      	movls	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x3a>
	  __throw_length_error(__N(__s));
 800483c:	6838      	ldr	r0, [r7, #0]
 800483e:	f019 fa66 	bl	801dd0e <_ZSt20__throw_length_errorPKc>
      }
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bd90      	pop	{r4, r7, pc}

0800484a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
    basic_string<_CharT, _Traits, _Alloc>::
 800484a:	b590      	push	{r4, r7, lr}
 800484c:	b089      	sub	sp, #36	; 0x24
 800484e:	af02      	add	r7, sp, #8
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
      const size_type __len = __n + this->size();
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7fc f90d 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800485c:	4602      	mov	r2, r0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4413      	add	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
      if (__len <= this->capacity())
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7fc fe25 	bl	80014b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800486a:	4602      	mov	r2, r0
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	4293      	cmp	r3, r2
 8004870:	bf94      	ite	ls
 8004872:	2301      	movls	r3, #1
 8004874:	2300      	movhi	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d011      	beq.n	80048a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x56>
	  if (__n)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d019      	beq.n	80048b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x6c>
	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7fc fa0c 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004888:	4604      	mov	r4, r0
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f7fc f8f3 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8004890:	4603      	mov	r3, r0
 8004892:	4423      	add	r3, r4
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	4618      	mov	r0, r3
 800489a:	f7fc fdd7 	bl	800144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800489e:	e00a      	b.n	80048b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x6c>
	this->_M_mutate(this->size(), size_type(0), __s, __n);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7fc f8e8 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80048a6:	4601      	mov	r1, r0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2200      	movs	r2, #0
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 f950 	bl	8004b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
      this->_M_set_length(__len);
 80048b6:	6979      	ldr	r1, [r7, #20]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f7fc fa9f 	bl	8000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      return *this;
 80048be:	68fb      	ldr	r3, [r7, #12]
    }
 80048c0:	4618      	mov	r0, r3
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd90      	pop	{r4, r7, pc}

080048c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_S_compareEjj>:
      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	const difference_type __d = difference_type(__n1 - __n2);
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	60fb      	str	r3, [r7, #12]
	  return int(__d);
 80048da:	68fb      	ldr	r3, [r7, #12]
      }
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEjj>:
      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
	const bool __testoff =  __off < this->size() - __pos;
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7fc f8be 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80048fa:	4602      	mov	r2, r0
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	429a      	cmp	r2, r3
 8004904:	bf34      	ite	cc
 8004906:	2301      	movcc	r3, #1
 8004908:	2300      	movcs	r3, #0
 800490a:	75fb      	strb	r3, [r7, #23]
	return __testoff ? __off : this->size() - __pos;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEjj+0x2e>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	e005      	b.n	8004922 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_limitEjj+0x3a>
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7fc f8ad 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800491c:	4602      	mov	r2, r0
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	1ad3      	subs	r3, r2, r3
      }
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
    basic_string<_CharT, _Traits, _Alloc>::
 800492c:	b580      	push	{r7, lr}
 800492e:	b08c      	sub	sp, #48	; 0x30
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
      _M_check_length(__len1, __len2, "basic_string::_M_replace");
 800493a:	4b5a      	ldr	r3, [pc, #360]	; (8004aa4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x178>)
 800493c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f7ff ff61 	bl	8004808 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
      const size_type __old_size = this->size();
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f7fc f895 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800494c:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __new_size = __old_size + __len2 - __len1;
 800494e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	441a      	add	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	623b      	str	r3, [r7, #32]
      if (__new_size <= this->capacity())
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f7fc fdaa 	bl	80014b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8004960:	4602      	mov	r2, r0
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	4293      	cmp	r3, r2
 8004966:	bf94      	ite	ls
 8004968:	2301      	movls	r3, #1
 800496a:	2300      	movhi	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8086 	beq.w	8004a80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x154>
	  pointer __p = this->_M_data() + __pos;
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f7fc f993 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 800497a:	4602      	mov	r2, r0
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4413      	add	r3, r2
 8004980:	61fb      	str	r3, [r7, #28]
	  const size_type __how_much = __old_size - __pos - __len1;
 8004982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	1ad2      	subs	r2, r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	61bb      	str	r3, [r7, #24]
	  if (_M_disjunct(__s))
 800498e:	6839      	ldr	r1, [r7, #0]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f943 	bl	8004c1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d019      	beq.n	80049d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa4>
	      if (__how_much && __len1 != __len2)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00d      	beq.n	80049be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x92>
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d009      	beq.n	80049be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x92>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	18d0      	adds	r0, r2, r3
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4413      	add	r3, r2
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4619      	mov	r1, r3
 80049ba:	f000 f95a 	bl	8004c72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
	      if (__len2)
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d065      	beq.n	8004a90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x164>
		this->_S_copy(__p, __s, __len2);
 80049c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c6:	6839      	ldr	r1, [r7, #0]
 80049c8:	69f8      	ldr	r0, [r7, #28]
 80049ca:	f7fc fd3f 	bl	800144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80049ce:	e05f      	b.n	8004a90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x164>
	      if (__len2 && __len2 <= __len1)
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 80049d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d804      	bhi.n	80049e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
		this->_S_move(__p, __s, __len2);
 80049de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	69f8      	ldr	r0, [r7, #28]
 80049e4:	f000 f945 	bl	8004c72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
	      if (__how_much && __len1 != __len2)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d009      	beq.n	8004a0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
		this->_S_move(__p + __len2, __p + __len1, __how_much);
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	18d0      	adds	r0, r2, r3
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4413      	add	r3, r2
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4619      	mov	r1, r3
 8004a06:	f000 f934 	bl	8004c72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
	      if (__len2 > __len1)
 8004a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d93e      	bls.n	8004a90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x164>
		  if (__s + __len2 <= __p + __len1)
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	441a      	add	r2, r3
 8004a18:	69f9      	ldr	r1, [r7, #28]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	440b      	add	r3, r1
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d805      	bhi.n	8004a2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x102>
		    this->_S_move(__p, __s, __len2);
 8004a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a24:	6839      	ldr	r1, [r7, #0]
 8004a26:	69f8      	ldr	r0, [r7, #28]
 8004a28:	f000 f923 	bl	8004c72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8004a2c:	e030      	b.n	8004a90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x164>
		  else if (__s >= __p + __len1)
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4413      	add	r3, r2
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d30a      	bcc.n	8004a50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x124>
		    this->_S_copy(__p, __s + __len2 - __len1, __len2);
 8004a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	4413      	add	r3, r2
 8004a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a46:	4619      	mov	r1, r3
 8004a48:	69f8      	ldr	r0, [r7, #28]
 8004a4a:	f7fc fcff 	bl	800144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004a4e:	e01f      	b.n	8004a90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x164>
		      const size_type __nleft = (__p + __len1) - __s;
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	441a      	add	r2, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	617b      	str	r3, [r7, #20]
		      this->_S_move(__p, __s, __nleft);
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	6839      	ldr	r1, [r7, #0]
 8004a60:	69f8      	ldr	r0, [r7, #28]
 8004a62:	f000 f906 	bl	8004c72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
		      this->_S_copy(__p + __nleft, __p + __len2,
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	18d0      	adds	r0, r2, r3
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	18d1      	adds	r1, r2, r3
 8004a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f7fc fce7 	bl	800144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8004a7e:	e007      	b.n	8004a90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x164>
	this->_M_mutate(__pos, __len1, __s, __len2);
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f863 	bl	8004b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
      this->_M_set_length(__new_size);
 8004a90:	6a39      	ldr	r1, [r7, #32]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7fc f9b2 	bl	8000dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      return *this;
 8004a98:	68fb      	ldr	r3, [r7, #12]
    }
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3728      	adds	r7, #40	; 0x28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	0801f6a4 	.word	0x0801f6a4

08004aa8 <_ZN9__gnu_cxx5__ops16_Iter_equals_valIKcEC1ERS2_>:
      _Iter_equals_val(_Value& __value)
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
	: _M_value(__value)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	601a      	str	r2, [r3, #0]
      { }
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <_ZSt23__copy_move_backward_a2ILb0EPKcPcET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8004ad2:	f7fb fd8f 	bl	80005f4 <_ZSt21is_constant_evaluatedv>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d006      	beq.n	8004aea <_ZSt23__copy_move_backward_a2ILb0EPKcPcET1_T0_S4_S3_+0x24>
	  __copy_move_b(__first, __last, __result);
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f8dd 	bl	8004ca0 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPKcPcEET0_T_S7_S6_>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	e006      	b.n	8004af8 <_ZSt23__copy_move_backward_a2ILb0EPKcPcET1_T0_S4_S3_+0x32>
				       _Category>::__copy_move_b(__first,
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f8f8 	bl	8004ce4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>
 8004af4:	4603      	mov	r3, r0
								 __result);
 8004af6:	bf00      	nop
    }
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	75fb      	strb	r3, [r7, #23]
      if (std::is_constant_evaluated())
 8004b12:	f7fb fd6f 	bl	80005f4 <_ZSt21is_constant_evaluatedv>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x32>
	  for (; __first != __last; ++__first)
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d014      	beq.n	8004b4e <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x4e>
	    *__first = __tmp;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	7dfa      	ldrb	r2, [r7, #23]
 8004b28:	701a      	strb	r2, [r3, #0]
	  for (; __first != __last; ++__first)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	e7f4      	b.n	8004b1c <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x1c>
      if (const size_t __len = __last - __first)
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x50>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4619      	mov	r1, r3
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f019 fb2c 	bl	801e1a4 <memset>
 8004b4c:	e000      	b.n	8004b50 <_ZSt9__fill_a1IcEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x50>
	  return;
 8004b4e:	bf00      	nop
    }
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
    basic_string<_CharT, _Traits, _Alloc>::
 8004b56:	b590      	push	{r4, r7, lr}
 8004b58:	b089      	sub	sp, #36	; 0x24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	603b      	str	r3, [r7, #0]
      const size_type __how_much = length() - __pos - __len1;
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7fb ff9e 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	61fb      	str	r3, [r7, #28]
      size_type __new_capacity = length() + __len2 - __len1;
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f7fb ff95 	bl	8000aa6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	441a      	add	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	617b      	str	r3, [r7, #20]
      pointer __r = _M_create(__new_capacity, capacity());
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7fc fc93 	bl	80014b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	f107 0314 	add.w	r3, r7, #20
 8004b94:	4619      	mov	r1, r3
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7fc fadc 	bl	8001154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8004b9c:	61b8      	str	r0, [r7, #24]
      if (__pos)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x60>
	this->_S_copy(__r, _M_data(), __pos);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7fc f87b 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004baa:	4603      	mov	r3, r0
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	69b8      	ldr	r0, [r7, #24]
 8004bb2:	f7fc fc4b 	bl	800144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
      if (__s && __len2)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x7c>
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x7c>
	this->_S_copy(__r + __pos, __s, __len2);
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bca:	6839      	ldr	r1, [r7, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fc fc3d 	bl	800144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
      if (__how_much)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d011      	beq.n	8004bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0xa6>
	this->_S_copy(__r + __pos + __len2,
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	4413      	add	r3, r2
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	18d4      	adds	r4, r2, r3
		      _M_data() + __pos + __len1, __how_much);
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7fc f85c 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004be8:	4601      	mov	r1, r0
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4413      	add	r3, r2
 8004bf0:	440b      	add	r3, r1
	this->_S_copy(__r + __pos + __len2,
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f7fc fc28 	bl	800144c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
      _M_dispose();
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7fc f87b 	bl	8000cf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      _M_data(__r);
 8004c02:	69b9      	ldr	r1, [r7, #24]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7fc f8cf 	bl	8000da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
      _M_capacity(__new_capacity);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7fc f8d8 	bl	8000dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
    }
 8004c14:	bf00      	nop
 8004c16:	3724      	adds	r7, #36	; 0x24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd90      	pop	{r4, r7, pc}

08004c1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
	return (less<const _CharT*>()(__s, _M_data())
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fc f83a 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	f107 0308 	add.w	r3, r7, #8
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f873 	bl	8004d20 <_ZNKSt4lessIPKcEclES1_S1_>
 8004c3a:	4603      	mov	r3, r0
		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d111      	bne.n	8004c64 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x48>
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7fc f82d 	bl	8000ca0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8004c46:	4604      	mov	r4, r0
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7fb ff14 	bl	8000a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	18e1      	adds	r1, r4, r3
 8004c52:	f107 030c 	add.w	r3, r7, #12
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f861 	bl	8004d20 <_ZNKSt4lessIPKcEclES1_S1_>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x4c>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x4e>
 8004c68:	2300      	movs	r3, #0
      }
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd90      	pop	{r4, r7, pc}

08004c72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
	if (__n == 1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d104      	bne.n	8004c8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0x1c>
	  traits_type::assign(*__d, *__s);
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f7fb fcbc 	bl	8000604 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 8004c8c:	e004      	b.n	8004c98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0x26>
	  traits_type::move(__d, __s, __n);
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f7fc fd5d 	bl	8001752 <_ZNSt11char_traitsIcE4moveEPcPKcj>
      }
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPKcPcEET0_T_S7_S6_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	dd0d      	ble.n	8004cd6 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPKcPcEET0_T_S7_S6_+0x36>
	    *--__result = *--__last;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	781a      	ldrb	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	701a      	strb	r2, [r3, #0]
	  for (; __n > 0; --__n)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	e7ee      	b.n	8004cb4 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPKcPcEET0_T_S7_S6_+0x14>
	  return __result;
 8004cd6:	687b      	ldr	r3, [r7, #4]
	}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d008      	beq.n	8004d10 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIcEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	425b      	negs	r3, r3
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	4413      	add	r3, r2
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	68f9      	ldr	r1, [r7, #12]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f019 fa30 	bl	801e170 <memmove>
	  return __result - _Num;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	425b      	negs	r3, r3
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	4413      	add	r3, r2
	}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <_ZNKSt4lessIPKcEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	bf34      	ite	cc
 8004d34:	2301      	movcc	r3, #1
 8004d36:	2300      	movcs	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
      }
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <_ZL9GetSectorm>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08007FFF) && (Address >= 0x08000000))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a2e      	ldr	r2, [pc, #184]	; (8004e10 <_ZL9GetSectorm+0xc8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d806      	bhi.n	8004d6a <_ZL9GetSectorm+0x22>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d62:	d302      	bcc.n	8004d6a <_ZL9GetSectorm+0x22>
  {
    sector = FLASH_SECTOR_0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e04b      	b.n	8004e02 <_ZL9GetSectorm+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x08008000))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a29      	ldr	r2, [pc, #164]	; (8004e14 <_ZL9GetSectorm+0xcc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d206      	bcs.n	8004d80 <_ZL9GetSectorm+0x38>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a28      	ldr	r2, [pc, #160]	; (8004e18 <_ZL9GetSectorm+0xd0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d302      	bcc.n	8004d80 <_ZL9GetSectorm+0x38>
  {
    sector = FLASH_SECTOR_1;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e040      	b.n	8004e02 <_ZL9GetSectorm+0xba>
  }
  else if((Address < 0x08017FFF) && (Address >= 0x08010000))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a26      	ldr	r2, [pc, #152]	; (8004e1c <_ZL9GetSectorm+0xd4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d806      	bhi.n	8004d96 <_ZL9GetSectorm+0x4e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a22      	ldr	r2, [pc, #136]	; (8004e14 <_ZL9GetSectorm+0xcc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d902      	bls.n	8004d96 <_ZL9GetSectorm+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8004d90:	2302      	movs	r3, #2
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	e035      	b.n	8004e02 <_ZL9GetSectorm+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08018000))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a21      	ldr	r2, [pc, #132]	; (8004e20 <_ZL9GetSectorm+0xd8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d206      	bcs.n	8004dac <_ZL9GetSectorm+0x64>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a20      	ldr	r2, [pc, #128]	; (8004e24 <_ZL9GetSectorm+0xdc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d302      	bcc.n	8004dac <_ZL9GetSectorm+0x64>
  {
    sector = FLASH_SECTOR_3;
 8004da6:	2303      	movs	r3, #3
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	e02a      	b.n	8004e02 <_ZL9GetSectorm+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a1e      	ldr	r2, [pc, #120]	; (8004e28 <_ZL9GetSectorm+0xe0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d206      	bcs.n	8004dc2 <_ZL9GetSectorm+0x7a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a1a      	ldr	r2, [pc, #104]	; (8004e20 <_ZL9GetSectorm+0xd8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d902      	bls.n	8004dc2 <_ZL9GetSectorm+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e01f      	b.n	8004e02 <_ZL9GetSectorm+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08040000))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <_ZL9GetSectorm+0xe4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d206      	bcs.n	8004dd8 <_ZL9GetSectorm+0x90>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a16      	ldr	r2, [pc, #88]	; (8004e28 <_ZL9GetSectorm+0xe0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d902      	bls.n	8004dd8 <_ZL9GetSectorm+0x90>
  {
    sector = FLASH_SECTOR_5;
 8004dd2:	2305      	movs	r3, #5
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e014      	b.n	8004e02 <_ZL9GetSectorm+0xba>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x08080000))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <_ZL9GetSectorm+0xe8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d206      	bcs.n	8004dee <_ZL9GetSectorm+0xa6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a12      	ldr	r2, [pc, #72]	; (8004e2c <_ZL9GetSectorm+0xe4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d902      	bls.n	8004dee <_ZL9GetSectorm+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8004de8:	2306      	movs	r3, #6
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e009      	b.n	8004e02 <_ZL9GetSectorm+0xba>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080C0000))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <_ZL9GetSectorm+0xec>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d805      	bhi.n	8004e02 <_ZL9GetSectorm+0xba>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a0d      	ldr	r2, [pc, #52]	; (8004e30 <_ZL9GetSectorm+0xe8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <_ZL9GetSectorm+0xba>
  {
    sector = FLASH_SECTOR_7;
 8004dfe:	2307      	movs	r3, #7
 8004e00:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8004e02:	68fb      	ldr	r3, [r7, #12]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	08007ffe 	.word	0x08007ffe
 8004e14:	0800ffff 	.word	0x0800ffff
 8004e18:	08008000 	.word	0x08008000
 8004e1c:	08017ffe 	.word	0x08017ffe
 8004e20:	0801ffff 	.word	0x0801ffff
 8004e24:	08018000 	.word	0x08018000
 8004e28:	0803ffff 	.word	0x0803ffff
 8004e2c:	0807ffff 	.word	0x0807ffff
 8004e30:	080bffff 	.word	0x080bffff
 8004e34:	080ffffe 	.word	0x080ffffe

08004e38 <_Z16Flash_Write_DatamPhtb>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint8_t *Data, uint16_t numberofbytes, bool erase)
{
 8004e38:	b5b0      	push	{r4, r5, r7, lr}
 8004e3a:	b08a      	sub	sp, #40	; 0x28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	4611      	mov	r1, r2
 8004e44:	461a      	mov	r2, r3
 8004e46:	460b      	mov	r3, r1
 8004e48:	80fb      	strh	r3, [r7, #6]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	717b      	strb	r3, [r7, #5]
	int sofar=0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24

	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8004e52:	f004 fecb 	bl	8009bec <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  if (erase)
 8004e56:	797b      	ldrb	r3, [r7, #5]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d02c      	beq.n	8004eb6 <_Z16Flash_Write_DatamPhtb+0x7e>
	  {
		  static FLASH_EraseInitTypeDef EraseInitStruct;
		  uint32_t SECTORError;

		  uint32_t StartSector = GetSector(StartSectorAddress);
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff ff73 	bl	8004d48 <_ZL9GetSectorm>
 8004e62:	6238      	str	r0, [r7, #32]
		  uint32_t EndSectorAddress = StartSectorAddress + numberofbytes;
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4413      	add	r3, r2
 8004e6a:	61fb      	str	r3, [r7, #28]
		  uint32_t EndSector = GetSector(EndSectorAddress);
 8004e6c:	69f8      	ldr	r0, [r7, #28]
 8004e6e:	f7ff ff6b 	bl	8004d48 <_ZL9GetSectorm>
 8004e72:	61b8      	str	r0, [r7, #24]

		  /* Fill EraseInit structure*/
		  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8004e74:	4b26      	ldr	r3, [pc, #152]	; (8004f10 <_Z16Flash_Write_DatamPhtb+0xd8>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
		  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8004e7a:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <_Z16Flash_Write_DatamPhtb+0xd8>)
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	611a      	str	r2, [r3, #16]
		  EraseInitStruct.Sector        = StartSector;
 8004e80:	4a23      	ldr	r2, [pc, #140]	; (8004f10 <_Z16Flash_Write_DatamPhtb+0xd8>)
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	6093      	str	r3, [r2, #8]
		  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	4a20      	ldr	r2, [pc, #128]	; (8004f10 <_Z16Flash_Write_DatamPhtb+0xd8>)
 8004e90:	60d3      	str	r3, [r2, #12]

		  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
			 you have to make sure that these data are rewritten before they are accessed during code
			 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
			 DCRST and ICRST bits in the FLASH_CR register. */
		  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8004e92:	f107 0314 	add.w	r3, r7, #20
 8004e96:	4619      	mov	r1, r3
 8004e98:	481d      	ldr	r0, [pc, #116]	; (8004f10 <_Z16Flash_Write_DatamPhtb+0xd8>)
 8004e9a:	f005 f815 	bl	8009ec8 <HAL_FLASHEx_Erase>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bf14      	ite	ne
 8004ea4:	2301      	movne	r3, #1
 8004ea6:	2300      	moveq	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <_Z16Flash_Write_DatamPhtb+0x7e>
		  {
			  return HAL_FLASH_GetError ();
 8004eae:	f004 fecf 	bl	8009c50 <HAL_FLASH_GetError>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	e027      	b.n	8004f06 <_Z16Flash_Write_DatamPhtb+0xce>
	  }

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofbytes)
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	da20      	bge.n	8004f00 <_Z16Flash_Write_DatamPhtb+0xc8>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, StartSectorAddress, Data[sofar]) == HAL_OK)
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2200      	movs	r2, #0
 8004eca:	461c      	mov	r4, r3
 8004ecc:	4615      	mov	r5, r2
 8004ece:	4622      	mov	r2, r4
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	68f9      	ldr	r1, [r7, #12]
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	f004 fe2d 	bl	8009b34 <HAL_FLASH_Program>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf0c      	ite	eq
 8004ee0:	2301      	moveq	r3, #1
 8004ee2:	2300      	movne	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d006      	beq.n	8004ef8 <_Z16Flash_Write_DatamPhtb+0xc0>
	     {
	    	 StartSectorAddress += 1;  // use StartPageAddress += 2 for half word and 8 for double word
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3301      	adds	r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef6:	e7de      	b.n	8004eb6 <_Z16Flash_Write_DatamPhtb+0x7e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8004ef8:	f004 feaa 	bl	8009c50 <HAL_FLASH_GetError>
 8004efc:	4603      	mov	r3, r0
 8004efe:	e002      	b.n	8004f06 <_Z16Flash_Write_DatamPhtb+0xce>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8004f00:	f004 fe96 	bl	8009c30 <HAL_FLASH_Lock>

	   return 0;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3728      	adds	r7, #40	; 0x28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200001f0 	.word	0x200001f0

08004f14 <_Z15Flash_Read_DatamPht>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint8_t *RxBuf, uint16_t numberofbytes)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint8_t *)StartSectorAddress;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	701a      	strb	r2, [r3, #0]
		StartSectorAddress += 1;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	3301      	adds	r3, #1
 8004f36:	60bb      	str	r3, [r7, #8]
		if (!(numberofbytes--)) break;
 8004f38:	88fb      	ldrh	r3, [r7, #6]
 8004f3a:	1e5a      	subs	r2, r3, #1
 8004f3c:	80fa      	strh	r2, [r7, #6]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bf0c      	ite	eq
 8004f42:	2301      	moveq	r3, #1
 8004f44:	2300      	movne	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d100      	bne.n	8004f4e <_Z15Flash_Read_DatamPht+0x3a>
		*RxBuf = *(__IO uint8_t *)StartSectorAddress;
 8004f4c:	e7e9      	b.n	8004f22 <_Z15Flash_Read_DatamPht+0xe>
		if (!(numberofbytes--)) break;
 8004f4e:	bf00      	nop
	}
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <_ZN10HttpServer14handle_requestEP7netconn>:
#include "lwip/api.h"
#include "lwip.h"
#include <string>

void HttpServer::handle_request(struct netconn *conn)
{
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b0af      	sub	sp, #188	; 0xbc
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
	err_t recv_err;
	char *buf;
	u16_t buflen;

	/* Read the data from the port, blocking if nothing yet there */
	recv_err = netconn_recv(conn, &inbuf);
 8004f66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6838      	ldr	r0, [r7, #0]
 8004f6e:	f00b fd59 	bl	8010a24 <netconn_recv>
 8004f72:	4603      	mov	r3, r0
 8004f74:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	if (recv_err == ERR_OK)
 8004f78:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 80e8 	bne.w	8005152 <_ZN10HttpServer14handle_requestEP7netconn+0x1f6>
	{
		if (netconn_err(conn) == ERR_OK)
 8004f82:	6838      	ldr	r0, [r7, #0]
 8004f84:	f00b fed7 	bl	8010d36 <netconn_err>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	bf0c      	ite	eq
 8004f8e:	2301      	moveq	r3, #1
 8004f90:	2300      	movne	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80dc 	beq.w	8005152 <_ZN10HttpServer14handle_requestEP7netconn+0x1f6>
		{
			/* Get the data pointer and length of the data inside a netbuf */
			netbuf_data(inbuf, (void**)&buf, &buflen);
 8004f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f9c:	f107 0272 	add.w	r2, r7, #114	; 0x72
 8004fa0:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f00d fad3 	bl	8012550 <netbuf_data>

			std::string request(buf);
 8004faa:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8004fac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f018 fea0 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8004fb6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8004fba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fb fd9f 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8004fc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f018 fe95 	bl	801dcfa <_ZNSaIcED1Ev>
			int firstSpacePos = request.find(" ");
 8004fd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	4964      	ldr	r1, [pc, #400]	; (8005168 <_ZN10HttpServer14handle_requestEP7netconn+0x20c>)
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff f93c 	bl	8004256 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			std::string method = request.substr(0, firstSpacePos);
 8004fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fe8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8004fec:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f7fe ffa9 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
			request = request.substr(firstSpacePos + 1);
 8004ff6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8005002:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005006:	f04f 33ff 	mov.w	r3, #4294967295
 800500a:	f7fe ff9d 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800500e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8005012:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f7fe ffdd 	bl	8003fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800501e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005022:	4618      	mov	r0, r3
 8005024:	f7fb fd17 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			std::string url = request.substr(0, request.find(" "));
 8005028:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800502c:	2200      	movs	r2, #0
 800502e:	494e      	ldr	r1, [pc, #312]	; (8005168 <_ZN10HttpServer14handle_requestEP7netconn+0x20c>)
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff f910 	bl	8004256 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 8005036:	4603      	mov	r3, r0
 8005038:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800503c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005040:	2200      	movs	r2, #0
 8005042:	f7fe ff81 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>

			if (method.compare("POST") == 0)
 8005046:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800504a:	4948      	ldr	r1, [pc, #288]	; (800516c <_ZN10HttpServer14handle_requestEP7netconn+0x210>)
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff f9c6 	bl	80043de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	bf0c      	ite	eq
 8005058:	2301      	moveq	r3, #1
 800505a:	2300      	movne	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d052      	beq.n	8005108 <_ZN10HttpServer14handle_requestEP7netconn+0x1ac>
			{
				std::string body;
 8005062:	f107 0310 	add.w	r3, r7, #16
 8005066:	4618      	mov	r0, r3
 8005068:	f7fb fd29 	bl	8000abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>

				struct netbuf *inbuf2;
				char *buf2;

				recv_err = netconn_recv(conn, &inbuf2);
 800506c:	f107 030c 	add.w	r3, r7, #12
 8005070:	4619      	mov	r1, r3
 8005072:	6838      	ldr	r0, [r7, #0]
 8005074:	f00b fcd6 	bl	8010a24 <netconn_recv>
 8005078:	4603      	mov	r3, r0
 800507a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
				if (recv_err == ERR_OK)
 800507e:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10f      	bne.n	80050a6 <_ZN10HttpServer14handle_requestEP7netconn+0x14a>
				{
					netbuf_data(inbuf2, (void**)&buf2, &buflen);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f107 0272 	add.w	r2, r7, #114	; 0x72
 800508c:	f107 0108 	add.w	r1, r7, #8
 8005090:	4618      	mov	r0, r3
 8005092:	f00d fa5d 	bl	8012550 <netbuf_data>
					body = buf2;
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	f107 0310 	add.w	r3, r7, #16
 800509c:	4611      	mov	r1, r2
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff f886 	bl	80041b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
 80050a4:	e01d      	b.n	80050e2 <_ZN10HttpServer14handle_requestEP7netconn+0x186>
				}
				else
				{
					body = request.substr(request.find("\r\n\r\n") + 3);
 80050a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80050aa:	2200      	movs	r2, #0
 80050ac:	4930      	ldr	r1, [pc, #192]	; (8005170 <_ZN10HttpServer14handle_requestEP7netconn+0x214>)
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff f8d1 	bl	8004256 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcj>
 80050b4:	4603      	mov	r3, r0
 80050b6:	1cda      	adds	r2, r3, #3
 80050b8:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80050bc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80050c0:	f04f 33ff 	mov.w	r3, #4294967295
 80050c4:	f7fe ff40 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80050c8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80050cc:	f107 0310 	add.w	r3, r7, #16
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe ff80 	bl	8003fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80050d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fb fcba 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				}

				netbuf_delete(inbuf2);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f00d fa13 	bl	8012510 <netbuf_delete>

				board.ProcessPostRequest(conn, url, body);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	f107 0310 	add.w	r3, r7, #16
 80050f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80050f6:	6839      	ldr	r1, [r7, #0]
 80050f8:	f7fd fd70 	bl	8002bdc <_ZN5Board18ProcessPostRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_>
				std::string body;
 80050fc:	f107 0310 	add.w	r3, r7, #16
 8005100:	4618      	mov	r0, r3
 8005102:	f7fb fca8 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005106:	e015      	b.n	8005134 <_ZN10HttpServer14handle_requestEP7netconn+0x1d8>
			}
			else if (method.compare("GET") == 0)
 8005108:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800510c:	4919      	ldr	r1, [pc, #100]	; (8005174 <_ZN10HttpServer14handle_requestEP7netconn+0x218>)
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff f965 	bl	80043de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d007      	beq.n	8005134 <_ZN10HttpServer14handle_requestEP7netconn+0x1d8>
			{
				board.ProcessGetRequest(conn, url);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7fd fb1c 	bl	800276c <_ZN5Board17ProcessGetRequestEP7netconnRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
			std::string url = request.substr(0, request.find(" "));
 8005134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005138:	4618      	mov	r0, r3
 800513a:	f7fb fc8c 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			std::string method = request.substr(0, firstSpacePos);
 800513e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005142:	4618      	mov	r0, r3
 8005144:	f7fb fc87 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			std::string request(buf);
 8005148:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800514c:	4618      	mov	r0, r3
 800514e:	f7fb fc82 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			}
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 8005152:	6838      	ldr	r0, [r7, #0]
 8005154:	f00b fde2 	bl	8010d1c <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 8005158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800515a:	4618      	mov	r0, r3
 800515c:	f00d f9d8 	bl	8012510 <netbuf_delete>
}
 8005160:	bf00      	nop
 8005162:	37bc      	adds	r7, #188	; 0xbc
 8005164:	46bd      	mov	sp, r7
 8005166:	bd90      	pop	{r4, r7, pc}
 8005168:	0801f6c0 	.word	0x0801f6c0
 800516c:	0801f6c4 	.word	0x0801f6c4
 8005170:	0801f6cc 	.word	0x0801f6cc
 8005174:	0801f6d4 	.word	0x0801f6d4

08005178 <_ZN10HttpServer11http_threadEv>:

void HttpServer::http_thread()
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;

  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 8005180:	2200      	movs	r2, #0
 8005182:	2100      	movs	r1, #0
 8005184:	2010      	movs	r0, #16
 8005186:	f00b f927 	bl	80103d8 <netconn_new_with_proto_and_callback>
 800518a:	6178      	str	r0, [r7, #20]

  if (conn!= NULL)
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d024      	beq.n	80051dc <_ZN10HttpServer11http_threadEv+0x64>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, IP_ADDR_ANY, 80);
 8005192:	2250      	movs	r2, #80	; 0x50
 8005194:	4913      	ldr	r1, [pc, #76]	; (80051e4 <_ZN10HttpServer11http_threadEv+0x6c>)
 8005196:	6978      	ldr	r0, [r7, #20]
 8005198:	f00b f9d8 	bl	801054c <netconn_bind>
 800519c:	4603      	mov	r3, r0
 800519e:	74fb      	strb	r3, [r7, #19]

    if (err == ERR_OK)
 80051a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d119      	bne.n	80051dc <_ZN10HttpServer11http_threadEv+0x64>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 80051a8:	21ff      	movs	r1, #255	; 0xff
 80051aa:	6978      	ldr	r0, [r7, #20]
 80051ac:	f00b fa06 	bl	80105bc <netconn_listen_with_backlog>

      while(1)
      {
        /* accept any incoming connection */
        accept_err = netconn_accept(conn, &newconn);
 80051b0:	f107 030c 	add.w	r3, r7, #12
 80051b4:	4619      	mov	r1, r3
 80051b6:	6978      	ldr	r0, [r7, #20]
 80051b8:	f00b fa2c 	bl	8010614 <netconn_accept>
 80051bc:	4603      	mov	r3, r0
 80051be:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 80051c0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f3      	bne.n	80051b0 <_ZN10HttpServer11http_threadEv+0x38>
        {
          /* serve connection */
        	handle_request(newconn);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4619      	mov	r1, r3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff fec5 	bl	8004f5c <_ZN10HttpServer14handle_requestEP7netconn>

          /* delete connection */
        	netconn_delete(newconn);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f00b f99d 	bl	8010514 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 80051da:	e7e9      	b.n	80051b0 <_ZN10HttpServer11http_threadEv+0x38>
        }
      }
    }
  }
}
 80051dc:	bf00      	nop
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	080234dc 	.word	0x080234dc

080051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>:

#include "lights.hpp"
#include <string>


Light::Light(GPIO_TypeDef * outputPeripheral, uint16_t output, GPIO_TypeDef * switchPeripheral, uint16_t mainSwitch, string roomName,
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	4613      	mov	r3, r2
 80051f6:	80fb      	strh	r3, [r7, #6]
		GPIO_TypeDef * altSwitchPeripheral, uint16_t altSwitch, byte id)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3318      	adds	r3, #24
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fb fc5e 	bl	8000abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
	this->outputPeripheral = outputPeripheral;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	601a      	str	r2, [r3, #0]
	this->outputNumber = output;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	88fa      	ldrh	r2, [r7, #6]
 800520c:	809a      	strh	r2, [r3, #4]
	this->switchPeripheral = switchPeripheral;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	609a      	str	r2, [r3, #8]
	this->switchNumber = mainSwitch;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8b3a      	ldrh	r2, [r7, #24]
 8005218:	819a      	strh	r2, [r3, #12]
	this->room = roomName;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3318      	adds	r3, #24
 800521e:	69f9      	ldr	r1, [r7, #28]
 8005220:	4618      	mov	r0, r3
 8005222:	f7fb fc96 	bl	8000b52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
	this->altSwitchPeripheral = altSwitchPeripheral;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a3a      	ldr	r2, [r7, #32]
 800522a:	611a      	str	r2, [r3, #16]
	this->altSwitchNumber = altSwitch;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005230:	829a      	strh	r2, [r3, #20]
	this->state = false;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	this->switchState = CheckSwitchState();
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f82e 	bl	800529c <_ZN5Light16CheckSwitchStateEv>
 8005240:	4603      	mov	r3, r0
 8005242:	461a      	mov	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	this->altSwitchState = CheckAltSwitchState();
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f83c 	bl	80052c8 <_ZN5Light19CheckAltSwitchStateEv>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	this->id = id;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005260:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <_ZN5Light11SwitchLightEb>:
//				old.lights[i].room, old.lights[i].altSwitchPeripheral, old.lights[i].altSwitchNumber, old.lights[i].id);
//	}
//}

void Light::SwitchLight(bool value)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	460b      	mov	r3, r1
 8005278:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(outputPeripheral, outputNumber, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8899      	ldrh	r1, [r3, #4]
 8005282:	78fb      	ldrb	r3, [r7, #3]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <_ZN5Light11SwitchLightEb+0x1e>
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <_ZN5Light11SwitchLightEb+0x20>
 800528c:	2300      	movs	r3, #0
 800528e:	461a      	mov	r2, r3
 8005290:	f005 f8dc 	bl	800a44c <HAL_GPIO_WritePin>
}
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <_ZN5Light16CheckSwitchStateEv>:

bool Light::CheckSwitchState()
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(switchPeripheral, switchNumber) == GPIO_PIN_SET;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	899b      	ldrh	r3, [r3, #12]
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f005 f8b4 	bl	800a41c <HAL_GPIO_ReadPin>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	bf0c      	ite	eq
 80052ba:	2301      	moveq	r3, #1
 80052bc:	2300      	movne	r3, #0
 80052be:	b2db      	uxtb	r3, r3
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <_ZN5Light19CheckAltSwitchStateEv>:

bool Light::CheckAltSwitchState()
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	if (altSwitchNumber != 0)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8a9b      	ldrh	r3, [r3, #20]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00e      	beq.n	80052f6 <_ZN5Light19CheckAltSwitchStateEv+0x2e>
		return HAL_GPIO_ReadPin(altSwitchPeripheral, (uint16_t)altSwitchNumber) == GPIO_PIN_SET;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8a9b      	ldrh	r3, [r3, #20]
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f005 f89a 	bl	800a41c <HAL_GPIO_ReadPin>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	bf0c      	ite	eq
 80052ee:	2301      	moveq	r3, #1
 80052f0:	2300      	movne	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	e000      	b.n	80052f8 <_ZN5Light19CheckAltSwitchStateEv+0x30>
	else
		return false;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <_ZN6Lights12AllLightsOffEv>:

void Lights::AllLightsOff()
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < initializedLights; i++)
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b20      	cmp	r3, #32
 8005310:	dc20      	bgt.n	8005354 <_ZN6Lights12AllLightsOffEv+0x54>
	{
		if (lights[i].state == true)
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2134      	movs	r1, #52	; 0x34
 8005318:	fb01 f303 	mul.w	r3, r1, r3
 800531c:	4413      	add	r3, r2
 800531e:	3330      	adds	r3, #48	; 0x30
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d112      	bne.n	800534c <_ZN6Lights12AllLightsOffEv+0x4c>
		{
			lights[i].SwitchLight(false);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2234      	movs	r2, #52	; 0x34
 800532a:	fb02 f303 	mul.w	r3, r2, r3
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4413      	add	r3, r2
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff ff9a 	bl	800526e <_ZN5Light11SwitchLightEb>
			lights[i].state = false;
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2134      	movs	r1, #52	; 0x34
 8005340:	fb01 f303 	mul.w	r3, r1, r3
 8005344:	4413      	add	r3, r2
 8005346:	3330      	adds	r3, #48	; 0x30
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < initializedLights; i++)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e7db      	b.n	800530c <_ZN6Lights12AllLightsOffEv+0xc>
		}
	}
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <_ZN6Lights20CheckAndSwitchLightsEv>:

bool Lights::CheckAndSwitchLights()
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < initializedLights; i++)
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b20      	cmp	r3, #32
 800536c:	f300 809a 	bgt.w	80054a4 <_ZN6Lights20CheckAndSwitchLightsEv+0x148>
	{
		bool switchState = lights[i].CheckSwitchState();
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2234      	movs	r2, #52	; 0x34
 8005374:	fb02 f303 	mul.w	r3, r2, r3
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4413      	add	r3, r2
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff ff8d 	bl	800529c <_ZN5Light16CheckSwitchStateEv>
 8005382:	4603      	mov	r3, r0
 8005384:	72fb      	strb	r3, [r7, #11]
		if (lights[i].switchState != switchState)
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2134      	movs	r1, #52	; 0x34
 800538c:	fb01 f303 	mul.w	r3, r1, r3
 8005390:	4413      	add	r3, r2
 8005392:	3331      	adds	r3, #49	; 0x31
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	7afa      	ldrb	r2, [r7, #11]
 8005398:	429a      	cmp	r2, r3
 800539a:	d02f      	beq.n	80053fc <_ZN6Lights20CheckAndSwitchLightsEv+0xa0>
		{
			lights[i].switchState = switchState;
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2134      	movs	r1, #52	; 0x34
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	4413      	add	r3, r2
 80053a8:	3331      	adds	r3, #49	; 0x31
 80053aa:	7afa      	ldrb	r2, [r7, #11]
 80053ac:	701a      	strb	r2, [r3, #0]
			lights[i].state = !lights[i].state;
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2134      	movs	r1, #52	; 0x34
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	4413      	add	r3, r2
 80053ba:	3330      	adds	r3, #48	; 0x30
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	f083 0301 	eor.w	r3, r3, #1
 80053c2:	b2d8      	uxtb	r0, r3
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2134      	movs	r1, #52	; 0x34
 80053ca:	fb01 f303 	mul.w	r3, r1, r3
 80053ce:	4413      	add	r3, r2
 80053d0:	3330      	adds	r3, #48	; 0x30
 80053d2:	4602      	mov	r2, r0
 80053d4:	701a      	strb	r2, [r3, #0]
			lights[i].SwitchLight(lights[i].state);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2234      	movs	r2, #52	; 0x34
 80053da:	fb02 f303 	mul.w	r3, r2, r3
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	18d0      	adds	r0, r2, r3
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2134      	movs	r1, #52	; 0x34
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	4413      	add	r3, r2
 80053ee:	3330      	adds	r3, #48	; 0x30
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	4619      	mov	r1, r3
 80053f4:	f7ff ff3b 	bl	800526e <_ZN5Light11SwitchLightEb>

			return true;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e054      	b.n	80054a6 <_ZN6Lights20CheckAndSwitchLightsEv+0x14a>
		}
		else if (lights[i].altSwitchNumber != 0)
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2134      	movs	r1, #52	; 0x34
 8005402:	fb01 f303 	mul.w	r3, r1, r3
 8005406:	4413      	add	r3, r2
 8005408:	3314      	adds	r3, #20
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d045      	beq.n	800549c <_ZN6Lights20CheckAndSwitchLightsEv+0x140>
		{
			bool altSwitchState = lights[i].CheckAltSwitchState();
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2234      	movs	r2, #52	; 0x34
 8005414:	fb02 f303 	mul.w	r3, r2, r3
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	4413      	add	r3, r2
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff ff53 	bl	80052c8 <_ZN5Light19CheckAltSwitchStateEv>
 8005422:	4603      	mov	r3, r0
 8005424:	72bb      	strb	r3, [r7, #10]
			if (lights[i].altSwitchState != altSwitchState)
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2134      	movs	r1, #52	; 0x34
 800542c:	fb01 f303 	mul.w	r3, r1, r3
 8005430:	4413      	add	r3, r2
 8005432:	3332      	adds	r3, #50	; 0x32
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	7aba      	ldrb	r2, [r7, #10]
 8005438:	429a      	cmp	r2, r3
 800543a:	d02f      	beq.n	800549c <_ZN6Lights20CheckAndSwitchLightsEv+0x140>
			{
				lights[i].altSwitchState = altSwitchState;
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2134      	movs	r1, #52	; 0x34
 8005442:	fb01 f303 	mul.w	r3, r1, r3
 8005446:	4413      	add	r3, r2
 8005448:	3332      	adds	r3, #50	; 0x32
 800544a:	7aba      	ldrb	r2, [r7, #10]
 800544c:	701a      	strb	r2, [r3, #0]
				lights[i].state = !lights[i].state;
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2134      	movs	r1, #52	; 0x34
 8005454:	fb01 f303 	mul.w	r3, r1, r3
 8005458:	4413      	add	r3, r2
 800545a:	3330      	adds	r3, #48	; 0x30
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	f083 0301 	eor.w	r3, r3, #1
 8005462:	b2d8      	uxtb	r0, r3
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2134      	movs	r1, #52	; 0x34
 800546a:	fb01 f303 	mul.w	r3, r1, r3
 800546e:	4413      	add	r3, r2
 8005470:	3330      	adds	r3, #48	; 0x30
 8005472:	4602      	mov	r2, r0
 8005474:	701a      	strb	r2, [r3, #0]
				lights[i].SwitchLight(lights[i].state);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2234      	movs	r2, #52	; 0x34
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	18d0      	adds	r0, r2, r3
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2134      	movs	r1, #52	; 0x34
 8005488:	fb01 f303 	mul.w	r3, r1, r3
 800548c:	4413      	add	r3, r2
 800548e:	3330      	adds	r3, #48	; 0x30
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	4619      	mov	r1, r3
 8005494:	f7ff feeb 	bl	800526e <_ZN5Light11SwitchLightEb>

				return true;
 8005498:	2301      	movs	r3, #1
 800549a:	e004      	b.n	80054a6 <_ZN6Lights20CheckAndSwitchLightsEv+0x14a>
	for (int i = 0; i < initializedLights; i++)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e761      	b.n	8005368 <_ZN6Lights20CheckAndSwitchLightsEv+0xc>
			}
		}
	}
	return false;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <_ZN6Lights11SwitchLightENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>:

void Lights::SwitchLight(std::string room, bool value)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b086      	sub	sp, #24
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	4613      	mov	r3, r2
 80054ba:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < initializedLights; i++)
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	dc2c      	bgt.n	8005520 <_ZN6Lights11SwitchLightENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x72>
	{
		if (lights[i].room == room)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2234      	movs	r2, #52	; 0x34
 80054ca:	fb02 f303 	mul.w	r3, r2, r3
 80054ce:	3318      	adds	r3, #24
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fb fb49 	bl	8000b6e <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKNSt7__cxx1112basic_stringIS3_St11char_traitsIS3_ESaIS3_EEESE_>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01a      	beq.n	8005518 <_ZN6Lights11SwitchLightENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x6a>
		{
			lights[i].state = value;
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2134      	movs	r1, #52	; 0x34
 80054e8:	fb01 f303 	mul.w	r3, r1, r3
 80054ec:	4413      	add	r3, r2
 80054ee:	3330      	adds	r3, #48	; 0x30
 80054f0:	79fa      	ldrb	r2, [r7, #7]
 80054f2:	701a      	strb	r2, [r3, #0]
			lights[i].SwitchLight(lights[i].state);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2234      	movs	r2, #52	; 0x34
 80054f8:	fb02 f303 	mul.w	r3, r2, r3
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	18d0      	adds	r0, r2, r3
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2134      	movs	r1, #52	; 0x34
 8005506:	fb01 f303 	mul.w	r3, r1, r3
 800550a:	4413      	add	r3, r2
 800550c:	3330      	adds	r3, #48	; 0x30
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	4619      	mov	r1, r3
 8005512:	f7ff feac 	bl	800526e <_ZN5Light11SwitchLightEb>
			return;
 8005516:	e003      	b.n	8005520 <_ZN6Lights11SwitchLightENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x72>
	for (int i = 0; i < initializedLights; i++)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	3301      	adds	r3, #1
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	e7cf      	b.n	80054c0 <_ZN6Lights11SwitchLightENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x12>
		}
	}
}
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <_ZN6Lights9GetStatusB5cxx11Ev>:
		action(lights[i].outputNumber, lights[i].room, lights[i].switchNumber, lights[i].altSwitchNumber);
	}
}

std::string Lights::GetStatus()
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b090      	sub	sp, #64	; 0x40
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
	std::string status;
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fb fac3 	bl	8000abe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	for (int i = 0; i < initializedLights; i++)
 8005538:	2300      	movs	r3, #0
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800553c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553e:	2b20      	cmp	r3, #32
 8005540:	dc3f      	bgt.n	80055c2 <_ZN6Lights9GetStatusB5cxx11Ev+0x9a>
	{
		//client->print(lights[i].outputNumber);
		//client->print('=');
		//client->println(lights[i].state);
		status += std::to_string((int)lights[i].outputNumber);
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005546:	2134      	movs	r1, #52	; 0x34
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	4413      	add	r3, r2
 800554e:	3304      	adds	r3, #4
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	f107 030c 	add.w	r3, r7, #12
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f7fc f95a 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
 8005560:	f107 030c 	add.w	r3, r7, #12
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fe fcdf 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800556c:	f107 030c 	add.w	r3, r7, #12
 8005570:	4618      	mov	r0, r3
 8005572:	f7fb fa70 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		status += "=";
 8005576:	4915      	ldr	r1, [pc, #84]	; (80055cc <_ZN6Lights9GetStatusB5cxx11Ev+0xa4>)
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7fe fcc8 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		status += std::to_string(lights[i].state);
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005582:	2134      	movs	r1, #52	; 0x34
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	4413      	add	r3, r2
 800558a:	3330      	adds	r3, #48	; 0x30
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005594:	4611      	mov	r1, r2
 8005596:	4618      	mov	r0, r3
 8005598:	f7fc f93c 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
 800559c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fe fcc1 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 80055a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fb fa52 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		status += "\n";
 80055b2:	4907      	ldr	r1, [pc, #28]	; (80055d0 <_ZN6Lights9GetStatusB5cxx11Ev+0xa8>)
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fe fcaa 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	for (int i = 0; i < initializedLights; i++)
 80055ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055bc:	3301      	adds	r3, #1
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c0:	e7bc      	b.n	800553c <_ZN6Lights9GetStatusB5cxx11Ev+0x14>
	}
	return status;
 80055c2:	bf00      	nop
}
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	3740      	adds	r7, #64	; 0x40
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	0801f7a4 	.word	0x0801f7a4
 80055d0:	0801f7a8 	.word	0x0801f7a8

080055d4 <_ZN6Lights11GetNameByIdB5cxx11ESt4byte>:
	}
	return (byte)0;
}

std::string Lights::GetNameById(byte id)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	4613      	mov	r3, r2
 80055e0:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < initializedLights; i++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	dc1a      	bgt.n	8005622 <_ZN6Lights11GetNameByIdB5cxx11ESt4byte+0x4e>
	{
		if (lights[i].id == id)
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2134      	movs	r1, #52	; 0x34
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	4413      	add	r3, r2
 80055f8:	3333      	adds	r3, #51	; 0x33
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	79fa      	ldrb	r2, [r7, #7]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d10b      	bne.n	800561a <_ZN6Lights11GetNameByIdB5cxx11ESt4byte+0x46>
			return lights[i].room;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2234      	movs	r2, #52	; 0x34
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	3318      	adds	r3, #24
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	4413      	add	r3, r2
 8005610:	4619      	mov	r1, r3
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f7fb fad5 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005618:	e014      	b.n	8005644 <_ZN6Lights11GetNameByIdB5cxx11ESt4byte+0x70>
	for (int i = 0; i < initializedLights; i++)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	3301      	adds	r3, #1
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	e7e1      	b.n	80055e6 <_ZN6Lights11GetNameByIdB5cxx11ESt4byte+0x12>
	}
	return "";
 8005622:	f107 0310 	add.w	r3, r7, #16
 8005626:	4618      	mov	r0, r3
 8005628:	f018 fb65 	bl	801dcf6 <_ZNSaIcEC1Ev>
 800562c:	f107 0310 	add.w	r3, r7, #16
 8005630:	461a      	mov	r2, r3
 8005632:	4906      	ldr	r1, [pc, #24]	; (800564c <_ZN6Lights11GetNameByIdB5cxx11ESt4byte+0x78>)
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7fb fa65 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800563a:	f107 0310 	add.w	r3, r7, #16
 800563e:	4618      	mov	r0, r3
 8005640:	f018 fb5b 	bl	801dcfa <_ZNSaIcED1Ev>
}
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	0801f7ac 	.word	0x0801f7ac

08005650 <_ZN10TimeRecordC1Ev>:
	byte minute;
	byte days;
	bool onOrUp;

  TimeRecord(byte roomId, RecordType type, byte hour, byte minute, byte days, bool onOrUp);
  TimeRecord() {}
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <_ZN10TimeRecordC1ESt4byte10RecordTypeS0_S0_S0_b>:

#include "scheduler.hpp"
#include "FLASH_SECTOR_F4.h"
#include <memory>

TimeRecord::TimeRecord(byte roomId, RecordType type, byte hour, byte minute, byte days, bool onOrUp)
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	4608      	mov	r0, r1
 8005670:	4611      	mov	r1, r2
 8005672:	461a      	mov	r2, r3
 8005674:	4603      	mov	r3, r0
 8005676:	70fb      	strb	r3, [r7, #3]
 8005678:	460b      	mov	r3, r1
 800567a:	70bb      	strb	r3, [r7, #2]
 800567c:	4613      	mov	r3, r2
 800567e:	707b      	strb	r3, [r7, #1]
{
	this->roomId = roomId;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	701a      	strb	r2, [r3, #0]
	this->type = type;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	78ba      	ldrb	r2, [r7, #2]
 800568a:	705a      	strb	r2, [r3, #1]
	this->hour = hour;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	787a      	ldrb	r2, [r7, #1]
 8005690:	709a      	strb	r2, [r3, #2]
	this->minute = minute;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	7c3a      	ldrb	r2, [r7, #16]
 8005696:	70da      	strb	r2, [r3, #3]
	this->onOrUp = onOrUp;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	7e3a      	ldrb	r2, [r7, #24]
 800569c:	715a      	strb	r2, [r3, #5]
	this->days = days;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	7d3a      	ldrb	r2, [r7, #20]
 80056a2:	711a      	strb	r2, [r3, #4]
}
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <_ZN9Scheduler3AddENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10RecordTypeSt4byteS7_S7_b>:

TimeRecord Scheduler::Add(std::string room, RecordType type, byte hour, byte minute, byte days, bool onOrUp)
{
 80056b2:	b590      	push	{r4, r7, lr}
 80056b4:	b08b      	sub	sp, #44	; 0x2c
 80056b6:	af04      	add	r7, sp, #16
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	70fb      	strb	r3, [r7, #3]
	byte id = (byte)2;//type == RecordType::LIGHTS ? lights->GetId(room) : blinds->GetId(room);
 80056c0:	2302      	movs	r3, #2
 80056c2:	75fb      	strb	r3, [r7, #23]
	records[count] = TimeRecord(id, type, hour, minute, days, onOrUp);
 80056c4:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80056c8:	78fa      	ldrb	r2, [r7, #3]
 80056ca:	7df9      	ldrb	r1, [r7, #23]
 80056cc:	f107 0010 	add.w	r0, r7, #16
 80056d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80056d4:	9302      	str	r3, [sp, #8]
 80056d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	4623      	mov	r3, r4
 80056e4:	f7ff ffbf 	bl	8005666 <_ZN10TimeRecordC1ESt4byte10RecordTypeS0_S0_S0_b>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4613      	mov	r3, r2
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	4413      	add	r3, r2
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	440b      	add	r3, r1
 80056fa:	461a      	mov	r2, r3
 80056fc:	f107 0310 	add.w	r3, r7, #16
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	6010      	str	r0, [r2, #0]
 8005704:	889b      	ldrh	r3, [r3, #4]
 8005706:	8093      	strh	r3, [r2, #4]
	count++;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

	return records[count - 1];
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 800571c:	1e5a      	subs	r2, r3, #1
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	4613      	mov	r3, r2
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	4413      	add	r3, r2
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	18ca      	adds	r2, r1, r3
 800572c:	4603      	mov	r3, r0
 800572e:	6811      	ldr	r1, [r2, #0]
 8005730:	6019      	str	r1, [r3, #0]
 8005732:	8892      	ldrh	r2, [r2, #4]
 8005734:	809a      	strh	r2, [r3, #4]
}
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	bd90      	pop	{r4, r7, pc}
	...

08005740 <_ZN9Scheduler8ScheduleEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:

void Scheduler::Schedule(string * records, int recordsCount)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b0b8      	sub	sp, #224	; 0xe0
 8005744:	af04      	add	r7, sp, #16
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
	  uint32_t address = startAddress;
 800574c:	4b96      	ldr	r3, [pc, #600]	; (80059a8 <_ZN9Scheduler8ScheduleEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x268>)
 800574e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  Flash_Write_Data(address, reinterpret_cast<uint8_t*>(&recordsCount), sizeof(int), true);
 8005752:	1d39      	adds	r1, r7, #4
 8005754:	2301      	movs	r3, #1
 8005756:	2204      	movs	r2, #4
 8005758:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800575c:	f7ff fb6c 	bl	8004e38 <_Z16Flash_Write_DatamPhtb>
	  address += sizeof(int);
 8005760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005764:	3304      	adds	r3, #4
 8005766:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	  count = 0;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	  for (int i = 0; i < recordsCount; i++)
 8005772:	2300      	movs	r3, #0
 8005774:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800577e:	429a      	cmp	r2, r3
 8005780:	f280 810e 	bge.w	80059a0 <_ZN9Scheduler8ScheduleEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x260>
	  {
	      int comma = records[i].find(',');
 8005784:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005788:	4613      	mov	r3, r2
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	4413      	add	r3, r2
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	461a      	mov	r2, r3
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4413      	add	r3, r2
 8005796:	2200      	movs	r2, #0
 8005798:	212c      	movs	r1, #44	; 0x2c
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe fbec 	bl	8003f78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	      std::string room = records[i].substr(0, comma);
 80057a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057aa:	4613      	mov	r3, r2
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	4413      	add	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	461a      	mov	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	1899      	adds	r1, r3, r2
 80057b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057bc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80057c0:	2200      	movs	r2, #0
 80057c2:	f7fe fbc1 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
	      std::string type = records[i].substr(comma + 1, 1);
 80057c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057ca:	4613      	mov	r3, r2
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	4413      	add	r3, r2
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	461a      	mov	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	1899      	adds	r1, r3, r2
 80057d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057dc:	3301      	adds	r3, #1
 80057de:	461a      	mov	r2, r3
 80057e0:	f107 0018 	add.w	r0, r7, #24
 80057e4:	2301      	movs	r3, #1
 80057e6:	f7fe fbaf 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
	      byte hours = (byte)atoi(records[i].substr(comma + 3, 2).c_str());
 80057ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057ee:	4613      	mov	r3, r2
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	4413      	add	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	461a      	mov	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	1899      	adds	r1, r3, r2
 80057fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005800:	3303      	adds	r3, #3
 8005802:	461a      	mov	r2, r3
 8005804:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8005808:	2302      	movs	r3, #2
 800580a:	f7fe fb9d 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800580e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005812:	4618      	mov	r0, r3
 8005814:	f7fe fa1e 	bl	8003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8005818:	4603      	mov	r3, r0
 800581a:	4618      	mov	r0, r3
 800581c:	f018 fb3d 	bl	801de9a <atoi>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8005826:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800582a:	4618      	mov	r0, r3
 800582c:	f7fb f913 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	      byte minutes = (byte)atoi(records[i].substr(comma + 6, 2).c_str());
 8005830:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005834:	4613      	mov	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	4413      	add	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	461a      	mov	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	1899      	adds	r1, r3, r2
 8005842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005846:	3306      	adds	r3, #6
 8005848:	461a      	mov	r2, r3
 800584a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800584e:	2302      	movs	r3, #2
 8005850:	f7fe fb7a 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8005854:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005858:	4618      	mov	r0, r3
 800585a:	f7fe f9fb 	bl	8003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800585e:	4603      	mov	r3, r0
 8005860:	4618      	mov	r0, r3
 8005862:	f018 fb1a 	bl	801de9a <atoi>
 8005866:	4603      	mov	r3, r0
 8005868:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 800586c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005870:	4618      	mov	r0, r3
 8005872:	f7fb f8f0 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	      byte days = (byte)atoi(records[i].substr(comma + 9, 3).c_str());
 8005876:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800587a:	4613      	mov	r3, r2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	4413      	add	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	461a      	mov	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	1899      	adds	r1, r3, r2
 8005888:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800588c:	3309      	adds	r3, #9
 800588e:	461a      	mov	r2, r3
 8005890:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8005894:	2303      	movs	r3, #3
 8005896:	f7fe fb57 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 800589a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe f9d8 	bl	8003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80058a4:	4603      	mov	r3, r0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f018 faf7 	bl	801de9a <atoi>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 80058b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fb f8cd 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	      byte onOrUp = (byte)atoi(records[i].substr(comma + 13, 1).c_str());
 80058bc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80058c0:	4613      	mov	r3, r2
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	4413      	add	r3, r2
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	461a      	mov	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	1899      	adds	r1, r3, r2
 80058ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058d2:	330d      	adds	r3, #13
 80058d4:	461a      	mov	r2, r3
 80058d6:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80058da:	2301      	movs	r3, #1
 80058dc:	f7fe fb34 	bl	8003f48 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80058e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fe f9b5 	bl	8003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80058ea:	4603      	mov	r3, r0
 80058ec:	4618      	mov	r0, r3
 80058ee:	f018 fad4 	bl	801de9a <atoi>
 80058f2:	4603      	mov	r3, r0
 80058f4:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
 80058f8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fb f8aa 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	      TimeRecord record = Add(room, type == "L" ? RecordType::LIGHTS : RecordType::BLINDS, hours, minutes, days, onOrUp == (byte)1);
 8005902:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005906:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800590a:	4611      	mov	r1, r2
 800590c:	4618      	mov	r0, r3
 800590e:	f7fb f958 	bl	8000bc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005912:	f107 0318 	add.w	r3, r7, #24
 8005916:	4925      	ldr	r1, [pc, #148]	; (80059ac <_ZN9Scheduler8ScheduleEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x26c>)
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fae5 	bl	8003ee8 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <_ZN9Scheduler8ScheduleEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x1e8>
 8005924:	2100      	movs	r1, #0
 8005926:	e000      	b.n	800592a <_ZN9Scheduler8ScheduleEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x1ea>
 8005928:	2101      	movs	r1, #1
 800592a:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800592e:	2b01      	cmp	r3, #1
 8005930:	bf0c      	ite	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	2300      	movne	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	f107 0010 	add.w	r0, r7, #16
 800593c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005940:	9303      	str	r3, [sp, #12]
 8005942:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8005946:	9302      	str	r3, [sp, #8]
 8005948:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	460b      	mov	r3, r1
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	f7ff feab 	bl	80056b2 <_ZN9Scheduler3AddENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE10RecordTypeSt4byteS7_S7_b>
 800595c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005960:	4618      	mov	r0, r3
 8005962:	f7fb f878 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

	      Flash_Write_Data(address, reinterpret_cast<uint8_t*>(&record), sizeof(TimeRecord), false);
 8005966:	f107 0110 	add.w	r1, r7, #16
 800596a:	2300      	movs	r3, #0
 800596c:	2206      	movs	r2, #6
 800596e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005972:	f7ff fa61 	bl	8004e38 <_Z16Flash_Write_DatamPhtb>
	      address += sizeof(TimeRecord);
 8005976:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800597a:	3306      	adds	r3, #6
 800597c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	      std::string type = records[i].substr(comma + 1, 1);
 8005980:	f107 0318 	add.w	r3, r7, #24
 8005984:	4618      	mov	r0, r3
 8005986:	f7fb f866 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	      std::string room = records[i].substr(0, comma);
 800598a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800598e:	4618      	mov	r0, r3
 8005990:	f7fb f861 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	  for (int i = 0; i < recordsCount; i++)
 8005994:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005998:	3301      	adds	r3, #1
 800599a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800599e:	e6eb      	b.n	8005778 <_ZN9Scheduler8ScheduleEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x38>
	  }
}
 80059a0:	bf00      	nop
 80059a2:	37d0      	adds	r7, #208	; 0xd0
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	08040000 	.word	0x08040000
 80059ac:	0801f80c 	.word	0x0801f80c

080059b0 <_ZN9Scheduler5ClearEv>:

void Scheduler::Clear()
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	count = 0;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	Flash_Write_Data(startAddress, reinterpret_cast<uint8_t*>(&count), sizeof(int), true);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f503 7116 	add.w	r1, r3, #600	; 0x258
 80059c6:	2301      	movs	r3, #1
 80059c8:	2204      	movs	r2, #4
 80059ca:	4803      	ldr	r0, [pc, #12]	; (80059d8 <_ZN9Scheduler5ClearEv+0x28>)
 80059cc:	f7ff fa34 	bl	8004e38 <_Z16Flash_Write_DatamPhtb>
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	08040000 	.word	0x08040000

080059dc <_ZN9Scheduler7ExecuteEiii>:

void Scheduler::Execute(int hour, int minute, int currentDay)
{
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b095      	sub	sp, #84	; 0x54
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < count; i++)
 80059ea:	2300      	movs	r3, #0
 80059ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 80059f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059f6:	429a      	cmp	r2, r3
 80059f8:	da5b      	bge.n	8005ab2 <_ZN9Scheduler7ExecuteEiii+0xd6>
	{
		TimeRecord record = records[i];
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059fe:	4613      	mov	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	18ca      	adds	r2, r1, r3
 8005a08:	f107 0314 	add.w	r3, r7, #20
 8005a0c:	6810      	ldr	r0, [r2, #0]
 8005a0e:	6018      	str	r0, [r3, #0]
 8005a10:	8892      	ldrh	r2, [r2, #4]
 8005a12:	809a      	strh	r2, [r3, #4]

		if ((int)record.hour == hour && (int)record.minute == minute && ((int)record.days & (1 << (int)currentDay)) == (1 << (int)currentDay))
 8005a14:	7dbb      	ldrb	r3, [r7, #22]
 8005a16:	461a      	mov	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d145      	bne.n	8005aaa <_ZN9Scheduler7ExecuteEiii+0xce>
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	461a      	mov	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d140      	bne.n	8005aaa <_ZN9Scheduler7ExecuteEiii+0xce>
 8005a28:	7e3b      	ldrb	r3, [r7, #24]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	ea01 0203 	and.w	r2, r1, r3
 8005a38:	2101      	movs	r1, #1
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d132      	bne.n	8005aaa <_ZN9Scheduler7ExecuteEiii+0xce>
		{
			if (record.type == RecordType::LIGHTS)
 8005a44:	7d7b      	ldrb	r3, [r7, #21]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d118      	bne.n	8005a7c <_ZN9Scheduler7ExecuteEiii+0xa0>
				lights->SwitchLight(lights->GetNameById(record.roomId), record.onOrUp ? true : false);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8d3 425c 	ldr.w	r4, [r3, #604]	; 0x25c
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8d3 125c 	ldr.w	r1, [r3, #604]	; 0x25c
 8005a56:	7d3a      	ldrb	r2, [r7, #20]
 8005a58:	f107 031c 	add.w	r3, r7, #28
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fdb9 	bl	80055d4 <_ZN6Lights11GetNameByIdB5cxx11ESt4byte>
 8005a62:	7e7a      	ldrb	r2, [r7, #25]
 8005a64:	f107 031c 	add.w	r3, r7, #28
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f7ff fd1f 	bl	80054ae <_ZN6Lights11SwitchLightENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8005a70:	f107 031c 	add.w	r3, r7, #28
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fa ffee 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005a7a:	e016      	b.n	8005aaa <_ZN9Scheduler7ExecuteEiii+0xce>
			else
				blinds->MoveBlind(blinds->GetNameById(record.roomId));
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8d3 4260 	ldr.w	r4, [r3, #608]	; 0x260
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
 8005a88:	7d3a      	ldrb	r2, [r7, #20]
 8005a8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fa ff36 	bl	8000900 <_ZN6Blinds11GetNameByIdB5cxx11ESt4byte>
 8005a94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f7fa fe94 	bl	80007c8 <_ZN6Blinds9MoveBlindENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8005aa0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fa ffd6 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	for (int i = 0; i < count; i++)
 8005aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aac:	3301      	adds	r3, #1
 8005aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab0:	e79d      	b.n	80059ee <_ZN9Scheduler7ExecuteEiii+0x12>
		}
	}
}
 8005ab2:	bf00      	nop
 8005ab4:	3754      	adds	r7, #84	; 0x54
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd90      	pop	{r4, r7, pc}
	...

08005abc <_ZN9Scheduler9GetEventsB5cxx11Ev>:

std::string Scheduler::GetEvents()
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	; 0x28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
	 std::string output = "2";
 8005ac6:	f107 0320 	add.w	r3, r7, #32
 8005aca:	4618      	mov	r0, r3
 8005acc:	f018 f913 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8005ad0:	f107 0320 	add.w	r3, r7, #32
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	493e      	ldr	r1, [pc, #248]	; (8005bd0 <_ZN9Scheduler9GetEventsB5cxx11Ev+0x114>)
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fb f813 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005ade:	f107 0320 	add.w	r3, r7, #32
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f018 f909 	bl	801dcfa <_ZNSaIcED1Ev>
 	 for (int i = 0; i < count; i++)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8005af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af4:	429a      	cmp	r2, r3
 8005af6:	da66      	bge.n	8005bc6 <_ZN9Scheduler9GetEventsB5cxx11Ev+0x10a>
	 {
		 TimeRecord record = records[i];
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afc:	4613      	mov	r3, r2
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	4413      	add	r3, r2
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	18ca      	adds	r2, r1, r3
 8005b06:	f107 0318 	add.w	r3, r7, #24
 8005b0a:	6810      	ldr	r0, [r2, #0]
 8005b0c:	6018      	str	r0, [r3, #0]
 8005b0e:	8892      	ldrh	r2, [r2, #4]
 8005b10:	809a      	strh	r2, [r3, #4]

		 char hourStr[2];
		 char minuteStr[2];
		 char daysStr[3];
		 itoa((int)record.hour, hourStr, 10);
 8005b12:	7ebb      	ldrb	r3, [r7, #26]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f107 0314 	add.w	r3, r7, #20
 8005b1a:	220a      	movs	r2, #10
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	f018 faf3 	bl	801e108 <itoa>
		 itoa((int)record.minute, minuteStr, 10);
 8005b22:	7efb      	ldrb	r3, [r7, #27]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f107 0310 	add.w	r3, r7, #16
 8005b2a:	220a      	movs	r2, #10
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f018 faeb 	bl	801e108 <itoa>
		 itoa((int)record.days, daysStr, 10);
 8005b32:	7f3b      	ldrb	r3, [r7, #28]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f107 030c 	add.w	r3, r7, #12
 8005b3a:	220a      	movs	r2, #10
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	f018 fae3 	bl	801e108 <itoa>

		 //output += record.type == RecordType::LIGHTS ? lights->GetNameById(record.roomId) : blinds->GetNameById(record.roomId);
		 output += ",";
 8005b42:	4924      	ldr	r1, [pc, #144]	; (8005bd4 <_ZN9Scheduler9GetEventsB5cxx11Ev+0x118>)
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7fe f9e2 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		 output += record.type == RecordType::LIGHTS ? "L" : "B";
 8005b4a:	7e7b      	ldrb	r3, [r7, #25]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <_ZN9Scheduler9GetEventsB5cxx11Ev+0x98>
 8005b50:	4b21      	ldr	r3, [pc, #132]	; (8005bd8 <_ZN9Scheduler9GetEventsB5cxx11Ev+0x11c>)
 8005b52:	e000      	b.n	8005b56 <_ZN9Scheduler9GetEventsB5cxx11Ev+0x9a>
 8005b54:	4b21      	ldr	r3, [pc, #132]	; (8005bdc <_ZN9Scheduler9GetEventsB5cxx11Ev+0x120>)
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7fe f9d8 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		 output += ",";
 8005b5e:	491d      	ldr	r1, [pc, #116]	; (8005bd4 <_ZN9Scheduler9GetEventsB5cxx11Ev+0x118>)
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fe f9d4 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		 output += hourStr;
 8005b66:	f107 0314 	add.w	r3, r7, #20
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7fe f9ce 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		 output += ":";
 8005b72:	491b      	ldr	r1, [pc, #108]	; (8005be0 <_ZN9Scheduler9GetEventsB5cxx11Ev+0x124>)
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fe f9ca 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		 output += minuteStr;
 8005b7a:	f107 0310 	add.w	r3, r7, #16
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7fe f9c4 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		 output += ",";
 8005b86:	4913      	ldr	r1, [pc, #76]	; (8005bd4 <_ZN9Scheduler9GetEventsB5cxx11Ev+0x118>)
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fe f9c0 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		 output += daysStr;
 8005b8e:	f107 030c 	add.w	r3, r7, #12
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7fe f9ba 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		 output += ",";
 8005b9a:	490e      	ldr	r1, [pc, #56]	; (8005bd4 <_ZN9Scheduler9GetEventsB5cxx11Ev+0x118>)
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7fe f9b6 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		 output += record.onOrUp ? "1" : "0";
 8005ba2:	7f7b      	ldrb	r3, [r7, #29]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <_ZN9Scheduler9GetEventsB5cxx11Ev+0xf0>
 8005ba8:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <_ZN9Scheduler9GetEventsB5cxx11Ev+0x128>)
 8005baa:	e000      	b.n	8005bae <_ZN9Scheduler9GetEventsB5cxx11Ev+0xf2>
 8005bac:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <_ZN9Scheduler9GetEventsB5cxx11Ev+0x12c>)
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7fe f9ac 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
		 output += ";\n";
 8005bb6:	490d      	ldr	r1, [pc, #52]	; (8005bec <_ZN9Scheduler9GetEventsB5cxx11Ev+0x130>)
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fe f9a8 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
 	 for (int i = 0; i < count; i++)
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc4:	e792      	b.n	8005aec <_ZN9Scheduler9GetEventsB5cxx11Ev+0x30>
	 }
	 return output;
 8005bc6:	bf00      	nop
}
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	3728      	adds	r7, #40	; 0x28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	0801f810 	.word	0x0801f810
 8005bd4:	0801f814 	.word	0x0801f814
 8005bd8:	0801f80c 	.word	0x0801f80c
 8005bdc:	0801f818 	.word	0x0801f818
 8005be0:	0801f81c 	.word	0x0801f81c
 8005be4:	0801f820 	.word	0x0801f820
 8005be8:	0801f824 	.word	0x0801f824
 8005bec:	0801f828 	.word	0x0801f828

08005bf0 <_ZN9Scheduler22RestoreScheduledEventsEv>:

void Scheduler::RestoreScheduledEvents()
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
	uint32_t address = startAddress;
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <_ZN9Scheduler22RestoreScheduledEventsEv+0x7c>)
 8005bfa:	617b      	str	r3, [r7, #20]
	Flash_Read_Data(address, reinterpret_cast<uint8_t*>(&count), sizeof(int));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005c02:	2204      	movs	r2, #4
 8005c04:	4619      	mov	r1, r3
 8005c06:	6978      	ldr	r0, [r7, #20]
 8005c08:	f7ff f984 	bl	8004f14 <_Z15Flash_Read_DatamPht>

	address += sizeof(int);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < count; i++)
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	da20      	bge.n	8005c64 <_ZN9Scheduler22RestoreScheduledEventsEv+0x74>
	{
		TimeRecord record;
 8005c22:	f107 0308 	add.w	r3, r7, #8
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff fd12 	bl	8005650 <_ZN10TimeRecordC1Ev>
		Flash_Read_Data(address, reinterpret_cast<uint8_t*>(&record), sizeof(TimeRecord));
 8005c2c:	f107 0308 	add.w	r3, r7, #8
 8005c30:	2206      	movs	r2, #6
 8005c32:	4619      	mov	r1, r3
 8005c34:	6978      	ldr	r0, [r7, #20]
 8005c36:	f7ff f96d 	bl	8004f14 <_Z15Flash_Read_DatamPht>
		records[i] = record;
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	4413      	add	r3, r2
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	440b      	add	r3, r1
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f107 0308 	add.w	r3, r7, #8
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	6010      	str	r0, [r2, #0]
 8005c52:	889b      	ldrh	r3, [r3, #4]
 8005c54:	8093      	strh	r3, [r2, #4]
		address += sizeof(TimeRecord);
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	3306      	adds	r3, #6
 8005c5a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < count; i++)
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	e7d8      	b.n	8005c16 <_ZN9Scheduler22RestoreScheduledEventsEv+0x26>
	}
}
 8005c64:	bf00      	nop
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	08040000 	.word	0x08040000

08005c70 <_ZN5BlindD1Ev>:
{
	UP,
	DOWN
};

class Blind
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fa feea 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <_ZN5LightD1Ev>:

using namespace std;

typedef void (*LightAction) (uint16_t outputNumber, string room, uint16_t mainSwitch, uint16_t altSwitch);

class Light
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3318      	adds	r3, #24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fa fedc 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <_ZN9SchedulerC1EP6LightsP6Blinds>:
	void Execute(int hour, int minute, int currentDay);
	std::string GetEvents();
	void RestoreScheduledEvents();
	void Schedule(std::string * records, int count);

    Scheduler(Lights * lights, Blinds * blinds)
 8005ca8:	b5b0      	push	{r4, r5, r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
    {
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2463      	movs	r4, #99	; 0x63
 8005cb8:	461d      	mov	r5, r3
 8005cba:	2c00      	cmp	r4, #0
 8005cbc:	db05      	blt.n	8005cca <_ZN9SchedulerC1EP6LightsP6Blinds+0x22>
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f7ff fcc6 	bl	8005650 <_ZN10TimeRecordC1Ev>
 8005cc4:	3506      	adds	r5, #6
 8005cc6:	3c01      	subs	r4, #1
 8005cc8:	e7f7      	b.n	8005cba <_ZN9SchedulerC1EP6LightsP6Blinds+0x12>
	  this->lights = lights;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	  this->blinds = blinds;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260

	  count = 0;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
    }
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bdb0      	pop	{r4, r5, r7, pc}

08005cec <_ZN10HttpServerC1ER5Board>:
#include "Board.hpp"

class HttpServer
{
  public:
	HttpServer(Board & b) : board(b) {}
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
	...

08005d0c <_ZN6LightsC1Ev>:
	void SwitchLight(bool value);
	bool CheckSwitchState();
	bool CheckAltSwitchState();
};

class Lights
 8005d0c:	b590      	push	{r4, r7, lr}
 8005d0e:	f5ad 7d71 	sub.w	sp, sp, #964	; 0x3c4
 8005d12:	af06      	add	r7, sp, #24
 8005d14:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8005d18:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8005d1c:	6018      	str	r0, [r3, #0]
 8005d1e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8005d22:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8005d26:	681c      	ldr	r4, [r3, #0]
 8005d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f017 ffe2 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8005d32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005d36:	f107 030c 	add.w	r3, r7, #12
 8005d3a:	49d5      	ldr	r1, [pc, #852]	; (8006090 <_ZN6LightsC1Ev+0x384>)
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fa fee1 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005d42:	2300      	movs	r3, #0
 8005d44:	9304      	str	r3, [sp, #16]
 8005d46:	2300      	movs	r3, #0
 8005d48:	9303      	str	r3, [sp, #12]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	9302      	str	r3, [sp, #8]
 8005d4e:	f107 030c 	add.w	r3, r7, #12
 8005d52:	9301      	str	r3, [sp, #4]
 8005d54:	2301      	movs	r3, #1
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	4bce      	ldr	r3, [pc, #824]	; (8006094 <_ZN6LightsC1Ev+0x388>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	49ce      	ldr	r1, [pc, #824]	; (8006098 <_ZN6LightsC1Ev+0x38c>)
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f7ff fa42 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fa fe74 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d72:	4618      	mov	r0, r3
 8005d74:	f017 ffc1 	bl	801dcfa <_ZNSaIcED1Ev>
 8005d78:	3434      	adds	r4, #52	; 0x34
 8005d7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f017 ffb9 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8005d84:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005d88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d8c:	49c3      	ldr	r1, [pc, #780]	; (800609c <_ZN6LightsC1Ev+0x390>)
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fa feb8 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005d94:	2301      	movs	r3, #1
 8005d96:	9304      	str	r3, [sp, #16]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	9302      	str	r3, [sp, #8]
 8005da0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	2310      	movs	r3, #16
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	4bba      	ldr	r3, [pc, #744]	; (8006094 <_ZN6LightsC1Ev+0x388>)
 8005dac:	2210      	movs	r2, #16
 8005dae:	49ba      	ldr	r1, [pc, #744]	; (8006098 <_ZN6LightsC1Ev+0x38c>)
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7ff fa19 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8005db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fa fe4b 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005dc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f017 ff98 	bl	801dcfa <_ZNSaIcED1Ev>
 8005dca:	3434      	adds	r4, #52	; 0x34
 8005dcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f017 ff90 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8005dd6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005dda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005dde:	49b0      	ldr	r1, [pc, #704]	; (80060a0 <_ZN6LightsC1Ev+0x394>)
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fa fe8f 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005de6:	2302      	movs	r3, #2
 8005de8:	9304      	str	r3, [sp, #16]
 8005dea:	2300      	movs	r3, #0
 8005dec:	9303      	str	r3, [sp, #12]
 8005dee:	2300      	movs	r3, #0
 8005df0:	9302      	str	r3, [sp, #8]
 8005df2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	2320      	movs	r3, #32
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	4ba5      	ldr	r3, [pc, #660]	; (8006094 <_ZN6LightsC1Ev+0x388>)
 8005dfe:	2220      	movs	r2, #32
 8005e00:	49a5      	ldr	r1, [pc, #660]	; (8006098 <_ZN6LightsC1Ev+0x38c>)
 8005e02:	4620      	mov	r0, r4
 8005e04:	f7ff f9f0 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8005e08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fa fe22 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e16:	4618      	mov	r0, r3
 8005e18:	f017 ff6f 	bl	801dcfa <_ZNSaIcED1Ev>
 8005e1c:	3434      	adds	r4, #52	; 0x34
 8005e1e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e22:	4618      	mov	r0, r3
 8005e24:	f017 ff67 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8005e28:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8005e2c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005e30:	499c      	ldr	r1, [pc, #624]	; (80060a4 <_ZN6LightsC1Ev+0x398>)
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fa fe66 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005e38:	2303      	movs	r3, #3
 8005e3a:	9304      	str	r3, [sp, #16]
 8005e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e40:	9303      	str	r3, [sp, #12]
 8005e42:	4b99      	ldr	r3, [pc, #612]	; (80060a8 <_ZN6LightsC1Ev+0x39c>)
 8005e44:	9302      	str	r3, [sp, #8]
 8005e46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	2340      	movs	r3, #64	; 0x40
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	4b90      	ldr	r3, [pc, #576]	; (8006094 <_ZN6LightsC1Ev+0x388>)
 8005e52:	2240      	movs	r2, #64	; 0x40
 8005e54:	4990      	ldr	r1, [pc, #576]	; (8006098 <_ZN6LightsC1Ev+0x38c>)
 8005e56:	4620      	mov	r0, r4
 8005e58:	f7ff f9c6 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8005e5c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fa fdf8 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f017 ff45 	bl	801dcfa <_ZNSaIcED1Ev>
 8005e70:	3434      	adds	r4, #52	; 0x34
 8005e72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005e76:	4618      	mov	r0, r3
 8005e78:	f017 ff3d 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8005e7c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8005e80:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005e84:	4989      	ldr	r1, [pc, #548]	; (80060ac <_ZN6LightsC1Ev+0x3a0>)
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fa fe3c 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	9304      	str	r3, [sp, #16]
 8005e90:	2300      	movs	r3, #0
 8005e92:	9303      	str	r3, [sp, #12]
 8005e94:	2300      	movs	r3, #0
 8005e96:	9302      	str	r3, [sp, #8]
 8005e98:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	4b7b      	ldr	r3, [pc, #492]	; (8006094 <_ZN6LightsC1Ev+0x388>)
 8005ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eaa:	497b      	ldr	r1, [pc, #492]	; (8006098 <_ZN6LightsC1Ev+0x38c>)
 8005eac:	4620      	mov	r0, r4
 8005eae:	f7ff f99b 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8005eb2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fa fdcd 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005ebc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f017 ff1a 	bl	801dcfa <_ZNSaIcED1Ev>
 8005ec6:	3434      	adds	r4, #52	; 0x34
 8005ec8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f017 ff12 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8005ed2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005ed6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005eda:	4975      	ldr	r1, [pc, #468]	; (80060b0 <_ZN6LightsC1Ev+0x3a4>)
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fa fe11 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005ee2:	2305      	movs	r3, #5
 8005ee4:	9304      	str	r3, [sp, #16]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	9303      	str	r3, [sp, #12]
 8005eea:	2300      	movs	r3, #0
 8005eec:	9302      	str	r3, [sp, #8]
 8005eee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	4b66      	ldr	r3, [pc, #408]	; (8006094 <_ZN6LightsC1Ev+0x388>)
 8005efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f00:	4965      	ldr	r1, [pc, #404]	; (8006098 <_ZN6LightsC1Ev+0x38c>)
 8005f02:	4620      	mov	r0, r4
 8005f04:	f7ff f970 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8005f08:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fa fda2 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005f12:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005f16:	4618      	mov	r0, r3
 8005f18:	f017 feef 	bl	801dcfa <_ZNSaIcED1Ev>
 8005f1c:	3434      	adds	r4, #52	; 0x34
 8005f1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005f22:	4618      	mov	r0, r3
 8005f24:	f017 fee7 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8005f28:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8005f2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f30:	4960      	ldr	r1, [pc, #384]	; (80060b4 <_ZN6LightsC1Ev+0x3a8>)
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fa fde6 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005f38:	2306      	movs	r3, #6
 8005f3a:	9304      	str	r3, [sp, #16]
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9303      	str	r3, [sp, #12]
 8005f40:	2300      	movs	r3, #0
 8005f42:	9302      	str	r3, [sp, #8]
 8005f44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	4b50      	ldr	r3, [pc, #320]	; (8006094 <_ZN6LightsC1Ev+0x388>)
 8005f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f56:	4950      	ldr	r1, [pc, #320]	; (8006098 <_ZN6LightsC1Ev+0x38c>)
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f7ff f945 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8005f5e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fa fd77 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005f68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f017 fec4 	bl	801dcfa <_ZNSaIcED1Ev>
 8005f72:	3434      	adds	r4, #52	; 0x34
 8005f74:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f017 febc 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8005f7e:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8005f82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005f86:	494c      	ldr	r1, [pc, #304]	; (80060b8 <_ZN6LightsC1Ev+0x3ac>)
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fa fdbb 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005f8e:	2307      	movs	r3, #7
 8005f90:	9304      	str	r3, [sp, #16]
 8005f92:	2300      	movs	r3, #0
 8005f94:	9303      	str	r3, [sp, #12]
 8005f96:	2300      	movs	r3, #0
 8005f98:	9302      	str	r3, [sp, #8]
 8005f9a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005f9e:	9301      	str	r3, [sp, #4]
 8005fa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	4b3b      	ldr	r3, [pc, #236]	; (8006094 <_ZN6LightsC1Ev+0x388>)
 8005fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fac:	493a      	ldr	r1, [pc, #232]	; (8006098 <_ZN6LightsC1Ev+0x38c>)
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f7ff f91a 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8005fb4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fa fd4c 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005fbe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f017 fe99 	bl	801dcfa <_ZNSaIcED1Ev>
 8005fc8:	3434      	adds	r4, #52	; 0x34
 8005fca:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f017 fe91 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8005fd4:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8005fd8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005fdc:	4937      	ldr	r1, [pc, #220]	; (80060bc <_ZN6LightsC1Ev+0x3b0>)
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fa fd90 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	9304      	str	r3, [sp, #16]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	9303      	str	r3, [sp, #12]
 8005fec:	2300      	movs	r3, #0
 8005fee:	9302      	str	r3, [sp, #8]
 8005ff0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	4b25      	ldr	r3, [pc, #148]	; (8006094 <_ZN6LightsC1Ev+0x388>)
 8005ffe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006002:	4925      	ldr	r1, [pc, #148]	; (8006098 <_ZN6LightsC1Ev+0x38c>)
 8006004:	4620      	mov	r0, r4
 8006006:	f7ff f8ef 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 800600a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800600e:	4618      	mov	r0, r3
 8006010:	f7fa fd21 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006014:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006018:	4618      	mov	r0, r3
 800601a:	f017 fe6e 	bl	801dcfa <_ZNSaIcED1Ev>
 800601e:	3434      	adds	r4, #52	; 0x34
 8006020:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006024:	4618      	mov	r0, r3
 8006026:	f017 fe66 	bl	801dcf6 <_ZNSaIcEC1Ev>
 800602a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800602e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006032:	4923      	ldr	r1, [pc, #140]	; (80060c0 <_ZN6LightsC1Ev+0x3b4>)
 8006034:	4618      	mov	r0, r3
 8006036:	f7fa fd65 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800603a:	2309      	movs	r3, #9
 800603c:	9304      	str	r3, [sp, #16]
 800603e:	2300      	movs	r3, #0
 8006040:	9303      	str	r3, [sp, #12]
 8006042:	2300      	movs	r3, #0
 8006044:	9302      	str	r3, [sp, #8]
 8006046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604a:	9301      	str	r3, [sp, #4]
 800604c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	4b10      	ldr	r3, [pc, #64]	; (8006094 <_ZN6LightsC1Ev+0x388>)
 8006054:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006058:	490f      	ldr	r1, [pc, #60]	; (8006098 <_ZN6LightsC1Ev+0x38c>)
 800605a:	4620      	mov	r0, r4
 800605c:	f7ff f8c4 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8006060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006064:	4618      	mov	r0, r3
 8006066:	f7fa fcf6 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800606a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800606e:	4618      	mov	r0, r3
 8006070:	f017 fe43 	bl	801dcfa <_ZNSaIcED1Ev>
 8006074:	3434      	adds	r4, #52	; 0x34
 8006076:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800607a:	4618      	mov	r0, r3
 800607c:	f017 fe3b 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006080:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8006084:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8006088:	490e      	ldr	r1, [pc, #56]	; (80060c4 <_ZN6LightsC1Ev+0x3b8>)
 800608a:	4618      	mov	r0, r3
 800608c:	e01c      	b.n	80060c8 <_ZN6LightsC1Ev+0x3bc>
 800608e:	bf00      	nop
 8006090:	0801f8f4 	.word	0x0801f8f4
 8006094:	40020400 	.word	0x40020400
 8006098:	40020000 	.word	0x40020000
 800609c:	0801f8fc 	.word	0x0801f8fc
 80060a0:	0801f904 	.word	0x0801f904
 80060a4:	0801f910 	.word	0x0801f910
 80060a8:	40021800 	.word	0x40021800
 80060ac:	0801f91c 	.word	0x0801f91c
 80060b0:	0801f924 	.word	0x0801f924
 80060b4:	0801f930 	.word	0x0801f930
 80060b8:	0801f93c 	.word	0x0801f93c
 80060bc:	0801f948 	.word	0x0801f948
 80060c0:	0801f950 	.word	0x0801f950
 80060c4:	0801f95c 	.word	0x0801f95c
 80060c8:	f7fa fd1c 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80060cc:	230a      	movs	r3, #10
 80060ce:	9304      	str	r3, [sp, #16]
 80060d0:	2300      	movs	r3, #0
 80060d2:	9303      	str	r3, [sp, #12]
 80060d4:	2300      	movs	r3, #0
 80060d6:	9302      	str	r3, [sp, #8]
 80060d8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80060dc:	9301      	str	r3, [sp, #4]
 80060de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	4bd5      	ldr	r3, [pc, #852]	; (800643c <_ZN6LightsC1Ev+0x730>)
 80060e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060ea:	49d4      	ldr	r1, [pc, #848]	; (800643c <_ZN6LightsC1Ev+0x730>)
 80060ec:	4620      	mov	r0, r4
 80060ee:	f7ff f87b 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 80060f2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fa fcad 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80060fc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8006100:	4618      	mov	r0, r3
 8006102:	f017 fdfa 	bl	801dcfa <_ZNSaIcED1Ev>
 8006106:	3434      	adds	r4, #52	; 0x34
 8006108:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800610c:	4618      	mov	r0, r3
 800610e:	f017 fdf2 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006112:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8006116:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800611a:	49c9      	ldr	r1, [pc, #804]	; (8006440 <_ZN6LightsC1Ev+0x734>)
 800611c:	4618      	mov	r0, r3
 800611e:	f7fa fcf1 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006122:	230b      	movs	r3, #11
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	2300      	movs	r3, #0
 8006128:	9303      	str	r3, [sp, #12]
 800612a:	2300      	movs	r3, #0
 800612c:	9302      	str	r3, [sp, #8]
 800612e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006132:	9301      	str	r3, [sp, #4]
 8006134:	2304      	movs	r3, #4
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	4bc2      	ldr	r3, [pc, #776]	; (8006444 <_ZN6LightsC1Ev+0x738>)
 800613a:	2202      	movs	r2, #2
 800613c:	49c1      	ldr	r1, [pc, #772]	; (8006444 <_ZN6LightsC1Ev+0x738>)
 800613e:	4620      	mov	r0, r4
 8006140:	f7ff f852 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8006144:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006148:	4618      	mov	r0, r3
 800614a:	f7fa fc84 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800614e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006152:	4618      	mov	r0, r3
 8006154:	f017 fdd1 	bl	801dcfa <_ZNSaIcED1Ev>
 8006158:	3434      	adds	r4, #52	; 0x34
 800615a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800615e:	4618      	mov	r0, r3
 8006160:	f017 fdc9 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006164:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8006168:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800616c:	49b6      	ldr	r1, [pc, #728]	; (8006448 <_ZN6LightsC1Ev+0x73c>)
 800616e:	4618      	mov	r0, r3
 8006170:	f7fa fcc8 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006174:	230c      	movs	r3, #12
 8006176:	9304      	str	r3, [sp, #16]
 8006178:	2300      	movs	r3, #0
 800617a:	9303      	str	r3, [sp, #12]
 800617c:	2300      	movs	r3, #0
 800617e:	9302      	str	r3, [sp, #8]
 8006180:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	2301      	movs	r3, #1
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	4bb0      	ldr	r3, [pc, #704]	; (800644c <_ZN6LightsC1Ev+0x740>)
 800618c:	2201      	movs	r2, #1
 800618e:	49b0      	ldr	r1, [pc, #704]	; (8006450 <_ZN6LightsC1Ev+0x744>)
 8006190:	4620      	mov	r0, r4
 8006192:	f7ff f829 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8006196:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800619a:	4618      	mov	r0, r3
 800619c:	f7fa fc5b 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80061a0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80061a4:	4618      	mov	r0, r3
 80061a6:	f017 fda8 	bl	801dcfa <_ZNSaIcED1Ev>
 80061aa:	3434      	adds	r4, #52	; 0x34
 80061ac:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80061b0:	4618      	mov	r0, r3
 80061b2:	f017 fda0 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80061b6:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80061ba:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80061be:	49a5      	ldr	r1, [pc, #660]	; (8006454 <_ZN6LightsC1Ev+0x748>)
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fa fc9f 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80061c6:	230d      	movs	r3, #13
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	2300      	movs	r3, #0
 80061cc:	9303      	str	r3, [sp, #12]
 80061ce:	2300      	movs	r3, #0
 80061d0:	9302      	str	r3, [sp, #8]
 80061d2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80061d6:	9301      	str	r3, [sp, #4]
 80061d8:	2304      	movs	r3, #4
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	4b9b      	ldr	r3, [pc, #620]	; (800644c <_ZN6LightsC1Ev+0x740>)
 80061de:	2204      	movs	r2, #4
 80061e0:	499b      	ldr	r1, [pc, #620]	; (8006450 <_ZN6LightsC1Ev+0x744>)
 80061e2:	4620      	mov	r0, r4
 80061e4:	f7ff f800 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 80061e8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fa fc32 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80061f2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80061f6:	4618      	mov	r0, r3
 80061f8:	f017 fd7f 	bl	801dcfa <_ZNSaIcED1Ev>
 80061fc:	3434      	adds	r4, #52	; 0x34
 80061fe:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8006202:	4618      	mov	r0, r3
 8006204:	f017 fd77 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006208:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 800620c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8006210:	4991      	ldr	r1, [pc, #580]	; (8006458 <_ZN6LightsC1Ev+0x74c>)
 8006212:	4618      	mov	r0, r3
 8006214:	f7fa fc76 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006218:	230e      	movs	r3, #14
 800621a:	9304      	str	r3, [sp, #16]
 800621c:	2300      	movs	r3, #0
 800621e:	9303      	str	r3, [sp, #12]
 8006220:	2300      	movs	r3, #0
 8006222:	9302      	str	r3, [sp, #8]
 8006224:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	2308      	movs	r3, #8
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	4b87      	ldr	r3, [pc, #540]	; (800644c <_ZN6LightsC1Ev+0x740>)
 8006230:	2208      	movs	r2, #8
 8006232:	4987      	ldr	r1, [pc, #540]	; (8006450 <_ZN6LightsC1Ev+0x744>)
 8006234:	4620      	mov	r0, r4
 8006236:	f7fe ffd7 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 800623a:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800623e:	4618      	mov	r0, r3
 8006240:	f7fa fc09 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006244:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8006248:	4618      	mov	r0, r3
 800624a:	f017 fd56 	bl	801dcfa <_ZNSaIcED1Ev>
 800624e:	3434      	adds	r4, #52	; 0x34
 8006250:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8006254:	4618      	mov	r0, r3
 8006256:	f017 fd4e 	bl	801dcf6 <_ZNSaIcEC1Ev>
 800625a:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800625e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8006262:	497e      	ldr	r1, [pc, #504]	; (800645c <_ZN6LightsC1Ev+0x750>)
 8006264:	4618      	mov	r0, r3
 8006266:	f7fa fc4d 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800626a:	230f      	movs	r3, #15
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	2300      	movs	r3, #0
 8006270:	9303      	str	r3, [sp, #12]
 8006272:	2300      	movs	r3, #0
 8006274:	9302      	str	r3, [sp, #8]
 8006276:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	2320      	movs	r3, #32
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	4b72      	ldr	r3, [pc, #456]	; (800644c <_ZN6LightsC1Ev+0x740>)
 8006282:	2210      	movs	r2, #16
 8006284:	4971      	ldr	r1, [pc, #452]	; (800644c <_ZN6LightsC1Ev+0x740>)
 8006286:	4620      	mov	r0, r4
 8006288:	f7fe ffae 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 800628c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8006290:	4618      	mov	r0, r3
 8006292:	f7fa fbe0 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006296:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800629a:	4618      	mov	r0, r3
 800629c:	f017 fd2d 	bl	801dcfa <_ZNSaIcED1Ev>
 80062a0:	3434      	adds	r4, #52	; 0x34
 80062a2:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80062a6:	4618      	mov	r0, r3
 80062a8:	f017 fd25 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80062ac:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 80062b0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80062b4:	496a      	ldr	r1, [pc, #424]	; (8006460 <_ZN6LightsC1Ev+0x754>)
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fa fc24 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80062bc:	2310      	movs	r3, #16
 80062be:	9304      	str	r3, [sp, #16]
 80062c0:	2300      	movs	r3, #0
 80062c2:	9303      	str	r3, [sp, #12]
 80062c4:	2300      	movs	r3, #0
 80062c6:	9302      	str	r3, [sp, #8]
 80062c8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	2340      	movs	r3, #64	; 0x40
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	4b5e      	ldr	r3, [pc, #376]	; (800644c <_ZN6LightsC1Ev+0x740>)
 80062d4:	2240      	movs	r2, #64	; 0x40
 80062d6:	495e      	ldr	r1, [pc, #376]	; (8006450 <_ZN6LightsC1Ev+0x744>)
 80062d8:	4620      	mov	r0, r4
 80062da:	f7fe ff85 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 80062de:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fa fbb7 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062e8:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80062ec:	4618      	mov	r0, r3
 80062ee:	f017 fd04 	bl	801dcfa <_ZNSaIcED1Ev>
 80062f2:	3434      	adds	r4, #52	; 0x34
 80062f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062f8:	4618      	mov	r0, r3
 80062fa:	f017 fcfc 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80062fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006302:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8006306:	4957      	ldr	r1, [pc, #348]	; (8006464 <_ZN6LightsC1Ev+0x758>)
 8006308:	4618      	mov	r0, r3
 800630a:	f7fa fbfb 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800630e:	2311      	movs	r3, #17
 8006310:	9304      	str	r3, [sp, #16]
 8006312:	2300      	movs	r3, #0
 8006314:	9303      	str	r3, [sp, #12]
 8006316:	2300      	movs	r3, #0
 8006318:	9302      	str	r3, [sp, #8]
 800631a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	4b49      	ldr	r3, [pc, #292]	; (800644c <_ZN6LightsC1Ev+0x740>)
 8006326:	2280      	movs	r2, #128	; 0x80
 8006328:	4949      	ldr	r1, [pc, #292]	; (8006450 <_ZN6LightsC1Ev+0x744>)
 800632a:	4620      	mov	r0, r4
 800632c:	f7fe ff5c 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8006330:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8006334:	4618      	mov	r0, r3
 8006336:	f7fa fb8e 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800633a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800633e:	4618      	mov	r0, r3
 8006340:	f017 fcdb 	bl	801dcfa <_ZNSaIcED1Ev>
 8006344:	3434      	adds	r4, #52	; 0x34
 8006346:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800634a:	4618      	mov	r0, r3
 800634c:	f017 fcd3 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006350:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8006354:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8006358:	4943      	ldr	r1, [pc, #268]	; (8006468 <_ZN6LightsC1Ev+0x75c>)
 800635a:	4618      	mov	r0, r3
 800635c:	f7fa fbd2 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006360:	2312      	movs	r3, #18
 8006362:	9304      	str	r3, [sp, #16]
 8006364:	2300      	movs	r3, #0
 8006366:	9303      	str	r3, [sp, #12]
 8006368:	2300      	movs	r3, #0
 800636a:	9302      	str	r3, [sp, #8]
 800636c:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8006370:	9301      	str	r3, [sp, #4]
 8006372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	4b34      	ldr	r3, [pc, #208]	; (800644c <_ZN6LightsC1Ev+0x740>)
 800637a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800637e:	4934      	ldr	r1, [pc, #208]	; (8006450 <_ZN6LightsC1Ev+0x744>)
 8006380:	4620      	mov	r0, r4
 8006382:	f7fe ff31 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8006386:	f507 7301 	add.w	r3, r7, #516	; 0x204
 800638a:	4618      	mov	r0, r3
 800638c:	f7fa fb63 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006390:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8006394:	4618      	mov	r0, r3
 8006396:	f017 fcb0 	bl	801dcfa <_ZNSaIcED1Ev>
 800639a:	3434      	adds	r4, #52	; 0x34
 800639c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80063a0:	4618      	mov	r0, r3
 80063a2:	f017 fca8 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80063a6:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80063aa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80063ae:	492f      	ldr	r1, [pc, #188]	; (800646c <_ZN6LightsC1Ev+0x760>)
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fa fba7 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80063b6:	2313      	movs	r3, #19
 80063b8:	9304      	str	r3, [sp, #16]
 80063ba:	2300      	movs	r3, #0
 80063bc:	9303      	str	r3, [sp, #12]
 80063be:	2300      	movs	r3, #0
 80063c0:	9302      	str	r3, [sp, #8]
 80063c2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	4b1f      	ldr	r3, [pc, #124]	; (800644c <_ZN6LightsC1Ev+0x740>)
 80063d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063d4:	491e      	ldr	r1, [pc, #120]	; (8006450 <_ZN6LightsC1Ev+0x744>)
 80063d6:	4620      	mov	r0, r4
 80063d8:	f7fe ff06 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 80063dc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fa fb38 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80063e6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80063ea:	4618      	mov	r0, r3
 80063ec:	f017 fc85 	bl	801dcfa <_ZNSaIcED1Ev>
 80063f0:	3434      	adds	r4, #52	; 0x34
 80063f2:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80063f6:	4618      	mov	r0, r3
 80063f8:	f017 fc7d 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80063fc:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8006400:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8006404:	491a      	ldr	r1, [pc, #104]	; (8006470 <_ZN6LightsC1Ev+0x764>)
 8006406:	4618      	mov	r0, r3
 8006408:	f7fa fb7c 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800640c:	2314      	movs	r3, #20
 800640e:	9304      	str	r3, [sp, #16]
 8006410:	2300      	movs	r3, #0
 8006412:	9303      	str	r3, [sp, #12]
 8006414:	2300      	movs	r3, #0
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	4b09      	ldr	r3, [pc, #36]	; (800644c <_ZN6LightsC1Ev+0x740>)
 8006426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800642a:	4909      	ldr	r1, [pc, #36]	; (8006450 <_ZN6LightsC1Ev+0x744>)
 800642c:	4620      	mov	r0, r4
 800642e:	f7fe fedb 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8006432:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8006436:	4618      	mov	r0, r3
 8006438:	e01c      	b.n	8006474 <_ZN6LightsC1Ev+0x768>
 800643a:	bf00      	nop
 800643c:	40021800 	.word	0x40021800
 8006440:	0801f964 	.word	0x0801f964
 8006444:	40020400 	.word	0x40020400
 8006448:	0801f970 	.word	0x0801f970
 800644c:	40020c00 	.word	0x40020c00
 8006450:	40020800 	.word	0x40020800
 8006454:	0801f978 	.word	0x0801f978
 8006458:	0801f988 	.word	0x0801f988
 800645c:	0801f990 	.word	0x0801f990
 8006460:	0801f9a0 	.word	0x0801f9a0
 8006464:	0801f9b0 	.word	0x0801f9b0
 8006468:	0801f9b8 	.word	0x0801f9b8
 800646c:	0801f9c8 	.word	0x0801f9c8
 8006470:	0801f9d4 	.word	0x0801f9d4
 8006474:	f7fa faef 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006478:	f507 7315 	add.w	r3, r7, #596	; 0x254
 800647c:	4618      	mov	r0, r3
 800647e:	f017 fc3c 	bl	801dcfa <_ZNSaIcED1Ev>
 8006482:	3434      	adds	r4, #52	; 0x34
 8006484:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8006488:	4618      	mov	r0, r3
 800648a:	f017 fc34 	bl	801dcf6 <_ZNSaIcEC1Ev>
 800648e:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8006492:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8006496:	49d4      	ldr	r1, [pc, #848]	; (80067e8 <_ZN6LightsC1Ev+0xadc>)
 8006498:	4618      	mov	r0, r3
 800649a:	f7fa fb33 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800649e:	2315      	movs	r3, #21
 80064a0:	9304      	str	r3, [sp, #16]
 80064a2:	2300      	movs	r3, #0
 80064a4:	9303      	str	r3, [sp, #12]
 80064a6:	2300      	movs	r3, #0
 80064a8:	9302      	str	r3, [sp, #8]
 80064aa:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80064ae:	9301      	str	r3, [sp, #4]
 80064b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	4bcd      	ldr	r3, [pc, #820]	; (80067ec <_ZN6LightsC1Ev+0xae0>)
 80064b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064bc:	49cc      	ldr	r1, [pc, #816]	; (80067f0 <_ZN6LightsC1Ev+0xae4>)
 80064be:	4620      	mov	r0, r4
 80064c0:	f7fe fe92 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 80064c4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fa fac4 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80064ce:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80064d2:	4618      	mov	r0, r3
 80064d4:	f017 fc11 	bl	801dcfa <_ZNSaIcED1Ev>
 80064d8:	3434      	adds	r4, #52	; 0x34
 80064da:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80064de:	4618      	mov	r0, r3
 80064e0:	f017 fc09 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80064e4:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 80064e8:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80064ec:	49c1      	ldr	r1, [pc, #772]	; (80067f4 <_ZN6LightsC1Ev+0xae8>)
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fa fb08 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80064f4:	2316      	movs	r3, #22
 80064f6:	9304      	str	r3, [sp, #16]
 80064f8:	2300      	movs	r3, #0
 80064fa:	9303      	str	r3, [sp, #12]
 80064fc:	2300      	movs	r3, #0
 80064fe:	9302      	str	r3, [sp, #8]
 8006500:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	4bb7      	ldr	r3, [pc, #732]	; (80067ec <_ZN6LightsC1Ev+0xae0>)
 800650e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006512:	49b6      	ldr	r1, [pc, #728]	; (80067ec <_ZN6LightsC1Ev+0xae0>)
 8006514:	4620      	mov	r0, r4
 8006516:	f7fe fe67 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 800651a:	f507 731d 	add.w	r3, r7, #628	; 0x274
 800651e:	4618      	mov	r0, r3
 8006520:	f7fa fa99 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006524:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8006528:	4618      	mov	r0, r3
 800652a:	f017 fbe6 	bl	801dcfa <_ZNSaIcED1Ev>
 800652e:	3434      	adds	r4, #52	; 0x34
 8006530:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8006534:	4618      	mov	r0, r3
 8006536:	f017 fbde 	bl	801dcf6 <_ZNSaIcEC1Ev>
 800653a:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 800653e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8006542:	49ad      	ldr	r1, [pc, #692]	; (80067f8 <_ZN6LightsC1Ev+0xaec>)
 8006544:	4618      	mov	r0, r3
 8006546:	f7fa fadd 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800654a:	2317      	movs	r3, #23
 800654c:	9304      	str	r3, [sp, #16]
 800654e:	2300      	movs	r3, #0
 8006550:	9303      	str	r3, [sp, #12]
 8006552:	2300      	movs	r3, #0
 8006554:	9302      	str	r3, [sp, #8]
 8006556:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	4ba2      	ldr	r3, [pc, #648]	; (80067ec <_ZN6LightsC1Ev+0xae0>)
 8006564:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006568:	49a1      	ldr	r1, [pc, #644]	; (80067f0 <_ZN6LightsC1Ev+0xae4>)
 800656a:	4620      	mov	r0, r4
 800656c:	f7fe fe3c 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8006570:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8006574:	4618      	mov	r0, r3
 8006576:	f7fa fa6e 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800657a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800657e:	4618      	mov	r0, r3
 8006580:	f017 fbbb 	bl	801dcfa <_ZNSaIcED1Ev>
 8006584:	3434      	adds	r4, #52	; 0x34
 8006586:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800658a:	4618      	mov	r0, r3
 800658c:	f017 fbb3 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006590:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8006594:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8006598:	4998      	ldr	r1, [pc, #608]	; (80067fc <_ZN6LightsC1Ev+0xaf0>)
 800659a:	4618      	mov	r0, r3
 800659c:	f7fa fab2 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80065a0:	2318      	movs	r3, #24
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	2300      	movs	r3, #0
 80065a6:	9303      	str	r3, [sp, #12]
 80065a8:	2300      	movs	r3, #0
 80065aa:	9302      	str	r3, [sp, #8]
 80065ac:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	4b8c      	ldr	r3, [pc, #560]	; (80067ec <_ZN6LightsC1Ev+0xae0>)
 80065ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80065be:	498c      	ldr	r1, [pc, #560]	; (80067f0 <_ZN6LightsC1Ev+0xae4>)
 80065c0:	4620      	mov	r0, r4
 80065c2:	f7fe fe11 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 80065c6:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fa fa43 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80065d0:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80065d4:	4618      	mov	r0, r3
 80065d6:	f017 fb90 	bl	801dcfa <_ZNSaIcED1Ev>
 80065da:	3434      	adds	r4, #52	; 0x34
 80065dc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80065e0:	4618      	mov	r0, r3
 80065e2:	f017 fb88 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80065e6:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80065ea:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80065ee:	4984      	ldr	r1, [pc, #528]	; (8006800 <_ZN6LightsC1Ev+0xaf4>)
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fa fa87 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80065f6:	2319      	movs	r3, #25
 80065f8:	9304      	str	r3, [sp, #16]
 80065fa:	2300      	movs	r3, #0
 80065fc:	9303      	str	r3, [sp, #12]
 80065fe:	2300      	movs	r3, #0
 8006600:	9302      	str	r3, [sp, #8]
 8006602:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	2301      	movs	r3, #1
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	4b7d      	ldr	r3, [pc, #500]	; (8006804 <_ZN6LightsC1Ev+0xaf8>)
 800660e:	2201      	movs	r2, #1
 8006610:	497d      	ldr	r1, [pc, #500]	; (8006808 <_ZN6LightsC1Ev+0xafc>)
 8006612:	4620      	mov	r0, r4
 8006614:	f7fe fde8 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8006618:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800661c:	4618      	mov	r0, r3
 800661e:	f7fa fa1a 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006622:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8006626:	4618      	mov	r0, r3
 8006628:	f017 fb67 	bl	801dcfa <_ZNSaIcED1Ev>
 800662c:	3434      	adds	r4, #52	; 0x34
 800662e:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8006632:	4618      	mov	r0, r3
 8006634:	f017 fb5f 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006638:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 800663c:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8006640:	4972      	ldr	r1, [pc, #456]	; (800680c <_ZN6LightsC1Ev+0xb00>)
 8006642:	4618      	mov	r0, r3
 8006644:	f7fa fa5e 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006648:	231a      	movs	r3, #26
 800664a:	9304      	str	r3, [sp, #16]
 800664c:	2300      	movs	r3, #0
 800664e:	9303      	str	r3, [sp, #12]
 8006650:	2300      	movs	r3, #0
 8006652:	9302      	str	r3, [sp, #8]
 8006654:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	2302      	movs	r3, #2
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	4b69      	ldr	r3, [pc, #420]	; (8006804 <_ZN6LightsC1Ev+0xaf8>)
 8006660:	2202      	movs	r2, #2
 8006662:	4969      	ldr	r1, [pc, #420]	; (8006808 <_ZN6LightsC1Ev+0xafc>)
 8006664:	4620      	mov	r0, r4
 8006666:	f7fe fdbf 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 800666a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800666e:	4618      	mov	r0, r3
 8006670:	f7fa f9f1 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006674:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8006678:	4618      	mov	r0, r3
 800667a:	f017 fb3e 	bl	801dcfa <_ZNSaIcED1Ev>
 800667e:	3434      	adds	r4, #52	; 0x34
 8006680:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8006684:	4618      	mov	r0, r3
 8006686:	f017 fb36 	bl	801dcf6 <_ZNSaIcEC1Ev>
 800668a:	f507 7246 	add.w	r2, r7, #792	; 0x318
 800668e:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8006692:	495f      	ldr	r1, [pc, #380]	; (8006810 <_ZN6LightsC1Ev+0xb04>)
 8006694:	4618      	mov	r0, r3
 8006696:	f7fa fa35 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800669a:	231b      	movs	r3, #27
 800669c:	9304      	str	r3, [sp, #16]
 800669e:	2308      	movs	r3, #8
 80066a0:	9303      	str	r3, [sp, #12]
 80066a2:	4b59      	ldr	r3, [pc, #356]	; (8006808 <_ZN6LightsC1Ev+0xafc>)
 80066a4:	9302      	str	r3, [sp, #8]
 80066a6:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	2304      	movs	r3, #4
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	4b54      	ldr	r3, [pc, #336]	; (8006804 <_ZN6LightsC1Ev+0xaf8>)
 80066b2:	2204      	movs	r2, #4
 80066b4:	4954      	ldr	r1, [pc, #336]	; (8006808 <_ZN6LightsC1Ev+0xafc>)
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7fe fd96 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 80066bc:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fa f9c8 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80066c6:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80066ca:	4618      	mov	r0, r3
 80066cc:	f017 fb15 	bl	801dcfa <_ZNSaIcED1Ev>
 80066d0:	3434      	adds	r4, #52	; 0x34
 80066d2:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80066d6:	4618      	mov	r0, r3
 80066d8:	f017 fb0d 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80066dc:	f507 724d 	add.w	r2, r7, #820	; 0x334
 80066e0:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 80066e4:	494b      	ldr	r1, [pc, #300]	; (8006814 <_ZN6LightsC1Ev+0xb08>)
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fa fa0c 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80066ec:	231c      	movs	r3, #28
 80066ee:	9304      	str	r3, [sp, #16]
 80066f0:	2308      	movs	r3, #8
 80066f2:	9303      	str	r3, [sp, #12]
 80066f4:	4b43      	ldr	r3, [pc, #268]	; (8006804 <_ZN6LightsC1Ev+0xaf8>)
 80066f6:	9302      	str	r3, [sp, #8]
 80066f8:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 80066fc:	9301      	str	r3, [sp, #4]
 80066fe:	2310      	movs	r3, #16
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	4b40      	ldr	r3, [pc, #256]	; (8006804 <_ZN6LightsC1Ev+0xaf8>)
 8006704:	2210      	movs	r2, #16
 8006706:	4940      	ldr	r1, [pc, #256]	; (8006808 <_ZN6LightsC1Ev+0xafc>)
 8006708:	4620      	mov	r0, r4
 800670a:	f7fe fd6d 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 800670e:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8006712:	4618      	mov	r0, r3
 8006714:	f7fa f99f 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006718:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800671c:	4618      	mov	r0, r3
 800671e:	f017 faec 	bl	801dcfa <_ZNSaIcED1Ev>
 8006722:	3434      	adds	r4, #52	; 0x34
 8006724:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8006728:	4618      	mov	r0, r3
 800672a:	f017 fae4 	bl	801dcf6 <_ZNSaIcEC1Ev>
 800672e:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8006732:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8006736:	4938      	ldr	r1, [pc, #224]	; (8006818 <_ZN6LightsC1Ev+0xb0c>)
 8006738:	4618      	mov	r0, r3
 800673a:	f7fa f9e3 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800673e:	231d      	movs	r3, #29
 8006740:	9304      	str	r3, [sp, #16]
 8006742:	2300      	movs	r3, #0
 8006744:	9303      	str	r3, [sp, #12]
 8006746:	2300      	movs	r3, #0
 8006748:	9302      	str	r3, [sp, #8]
 800674a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	2320      	movs	r3, #32
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	4b2b      	ldr	r3, [pc, #172]	; (8006804 <_ZN6LightsC1Ev+0xaf8>)
 8006756:	2220      	movs	r2, #32
 8006758:	492b      	ldr	r1, [pc, #172]	; (8006808 <_ZN6LightsC1Ev+0xafc>)
 800675a:	4620      	mov	r0, r4
 800675c:	f7fe fd44 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8006760:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8006764:	4618      	mov	r0, r3
 8006766:	f7fa f976 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800676a:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800676e:	4618      	mov	r0, r3
 8006770:	f017 fac3 	bl	801dcfa <_ZNSaIcED1Ev>
 8006774:	3434      	adds	r4, #52	; 0x34
 8006776:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 800677a:	4618      	mov	r0, r3
 800677c:	f017 fabb 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006780:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8006784:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8006788:	4924      	ldr	r1, [pc, #144]	; (800681c <_ZN6LightsC1Ev+0xb10>)
 800678a:	4618      	mov	r0, r3
 800678c:	f7fa f9ba 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006790:	231e      	movs	r3, #30
 8006792:	9304      	str	r3, [sp, #16]
 8006794:	2300      	movs	r3, #0
 8006796:	9303      	str	r3, [sp, #12]
 8006798:	2300      	movs	r3, #0
 800679a:	9302      	str	r3, [sp, #8]
 800679c:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	2340      	movs	r3, #64	; 0x40
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	4b17      	ldr	r3, [pc, #92]	; (8006804 <_ZN6LightsC1Ev+0xaf8>)
 80067a8:	2240      	movs	r2, #64	; 0x40
 80067aa:	4917      	ldr	r1, [pc, #92]	; (8006808 <_ZN6LightsC1Ev+0xafc>)
 80067ac:	4620      	mov	r0, r4
 80067ae:	f7fe fd1b 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 80067b2:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fa f94d 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80067bc:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80067c0:	4618      	mov	r0, r3
 80067c2:	f017 fa9a 	bl	801dcfa <_ZNSaIcED1Ev>
 80067c6:	3434      	adds	r4, #52	; 0x34
 80067c8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80067cc:	4618      	mov	r0, r3
 80067ce:	f017 fa92 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80067d2:	f507 7262 	add.w	r2, r7, #904	; 0x388
 80067d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80067da:	4911      	ldr	r1, [pc, #68]	; (8006820 <_ZN6LightsC1Ev+0xb14>)
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fa f991 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80067e2:	231f      	movs	r3, #31
 80067e4:	9304      	str	r3, [sp, #16]
 80067e6:	e01d      	b.n	8006824 <_ZN6LightsC1Ev+0xb18>
 80067e8:	0801f9dc 	.word	0x0801f9dc
 80067ec:	40020c00 	.word	0x40020c00
 80067f0:	40020800 	.word	0x40020800
 80067f4:	0801f9e4 	.word	0x0801f9e4
 80067f8:	0801f9f4 	.word	0x0801f9f4
 80067fc:	0801fa08 	.word	0x0801fa08
 8006800:	0801fa18 	.word	0x0801fa18
 8006804:	40021400 	.word	0x40021400
 8006808:	40021000 	.word	0x40021000
 800680c:	0801fa20 	.word	0x0801fa20
 8006810:	0801fa30 	.word	0x0801fa30
 8006814:	0801fa3c 	.word	0x0801fa3c
 8006818:	0801fa4c 	.word	0x0801fa4c
 800681c:	0801fa54 	.word	0x0801fa54
 8006820:	0801fa5c 	.word	0x0801fa5c
 8006824:	2300      	movs	r3, #0
 8006826:	9303      	str	r3, [sp, #12]
 8006828:	2300      	movs	r3, #0
 800682a:	9302      	str	r3, [sp, #8]
 800682c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	2380      	movs	r3, #128	; 0x80
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	4b22      	ldr	r3, [pc, #136]	; (80068c0 <_ZN6LightsC1Ev+0xbb4>)
 8006838:	2280      	movs	r2, #128	; 0x80
 800683a:	4922      	ldr	r1, [pc, #136]	; (80068c4 <_ZN6LightsC1Ev+0xbb8>)
 800683c:	4620      	mov	r0, r4
 800683e:	f7fe fcd3 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8006842:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8006846:	4618      	mov	r0, r3
 8006848:	f7fa f905 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800684c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8006850:	4618      	mov	r0, r3
 8006852:	f017 fa52 	bl	801dcfa <_ZNSaIcED1Ev>
 8006856:	3434      	adds	r4, #52	; 0x34
 8006858:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800685c:	4618      	mov	r0, r3
 800685e:	f017 fa4a 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006862:	f507 7269 	add.w	r2, r7, #932	; 0x3a4
 8006866:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800686a:	4917      	ldr	r1, [pc, #92]	; (80068c8 <_ZN6LightsC1Ev+0xbbc>)
 800686c:	4618      	mov	r0, r3
 800686e:	f7fa f949 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006872:	2320      	movs	r3, #32
 8006874:	9304      	str	r3, [sp, #16]
 8006876:	2300      	movs	r3, #0
 8006878:	9303      	str	r3, [sp, #12]
 800687a:	2300      	movs	r3, #0
 800687c:	9302      	str	r3, [sp, #8]
 800687e:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	4b0d      	ldr	r3, [pc, #52]	; (80068c0 <_ZN6LightsC1Ev+0xbb4>)
 800688c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006890:	490c      	ldr	r1, [pc, #48]	; (80068c4 <_ZN6LightsC1Ev+0xbb8>)
 8006892:	4620      	mov	r0, r4
 8006894:	f7fe fca8 	bl	80051e8 <_ZN5LightC1EP12GPIO_TypeDeftS1_tNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES1_tSt4byte>
 8006898:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800689c:	4618      	mov	r0, r3
 800689e:	f7fa f8da 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80068a2:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80068a6:	4618      	mov	r0, r3
 80068a8:	f017 fa27 	bl	801dcfa <_ZNSaIcED1Ev>
 80068ac:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80068b0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f507 776b 	add.w	r7, r7, #940	; 0x3ac
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd90      	pop	{r4, r7, pc}
 80068c0:	40021400 	.word	0x40021400
 80068c4:	40021000 	.word	0x40021000
 80068c8:	0801fa6c 	.word	0x0801fa6c

080068cc <_ZN6BlindsC1Ev>:

	Blind(GPIO_TypeDef * outputPeripheral, uint16_t output, string roomName, BlindDirection blindDirection, byte id);
	Blind() {}
};

class Blinds
 80068cc:	b590      	push	{r4, r7, lr}
 80068ce:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 80068d2:	af02      	add	r7, sp, #8
 80068d4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80068d8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80068dc:	6018      	str	r0, [r3, #0]
 80068de:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80068e2:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80068e6:	681c      	ldr	r4, [r3, #0]
 80068e8:	f107 0320 	add.w	r3, r7, #32
 80068ec:	4618      	mov	r0, r3
 80068ee:	f017 fa02 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80068f2:	f107 0220 	add.w	r2, r7, #32
 80068f6:	f107 0308 	add.w	r3, r7, #8
 80068fa:	49e4      	ldr	r1, [pc, #912]	; (8006c8c <_ZN6BlindsC1Ev+0x3c0>)
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fa f901 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006902:	f107 0308 	add.w	r3, r7, #8
 8006906:	2200      	movs	r2, #0
 8006908:	9201      	str	r2, [sp, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	9200      	str	r2, [sp, #0]
 800690e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006912:	49df      	ldr	r1, [pc, #892]	; (8006c90 <_ZN6BlindsC1Ev+0x3c4>)
 8006914:	4620      	mov	r0, r4
 8006916:	f7f9 ff16 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 800691a:	f107 0308 	add.w	r3, r7, #8
 800691e:	4618      	mov	r0, r3
 8006920:	f7fa f899 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006924:	f107 0320 	add.w	r3, r7, #32
 8006928:	4618      	mov	r0, r3
 800692a:	f017 f9e6 	bl	801dcfa <_ZNSaIcED1Ev>
 800692e:	3424      	adds	r4, #36	; 0x24
 8006930:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006934:	4618      	mov	r0, r3
 8006936:	f017 f9de 	bl	801dcf6 <_ZNSaIcEC1Ev>
 800693a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800693e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006942:	49d4      	ldr	r1, [pc, #848]	; (8006c94 <_ZN6BlindsC1Ev+0x3c8>)
 8006944:	4618      	mov	r0, r3
 8006946:	f7fa f8dd 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800694a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800694e:	2201      	movs	r2, #1
 8006950:	9201      	str	r2, [sp, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	9200      	str	r2, [sp, #0]
 8006956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800695a:	49cd      	ldr	r1, [pc, #820]	; (8006c90 <_ZN6BlindsC1Ev+0x3c4>)
 800695c:	4620      	mov	r0, r4
 800695e:	f7f9 fef2 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006966:	4618      	mov	r0, r3
 8006968:	f7fa f875 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800696c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006970:	4618      	mov	r0, r3
 8006972:	f017 f9c2 	bl	801dcfa <_ZNSaIcED1Ev>
 8006976:	3424      	adds	r4, #36	; 0x24
 8006978:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800697c:	4618      	mov	r0, r3
 800697e:	f017 f9ba 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006982:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006986:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800698a:	49c3      	ldr	r1, [pc, #780]	; (8006c98 <_ZN6BlindsC1Ev+0x3cc>)
 800698c:	4618      	mov	r0, r3
 800698e:	f7fa f8b9 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006992:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006996:	2202      	movs	r2, #2
 8006998:	9201      	str	r2, [sp, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	9200      	str	r2, [sp, #0]
 800699e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069a2:	49bb      	ldr	r1, [pc, #748]	; (8006c90 <_ZN6BlindsC1Ev+0x3c4>)
 80069a4:	4620      	mov	r0, r4
 80069a6:	f7f9 fece 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 80069aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fa f851 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80069b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80069b8:	4618      	mov	r0, r3
 80069ba:	f017 f99e 	bl	801dcfa <_ZNSaIcED1Ev>
 80069be:	3424      	adds	r4, #36	; 0x24
 80069c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80069c4:	4618      	mov	r0, r3
 80069c6:	f017 f996 	bl	801dcf6 <_ZNSaIcEC1Ev>
 80069ca:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80069ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80069d2:	49b2      	ldr	r1, [pc, #712]	; (8006c9c <_ZN6BlindsC1Ev+0x3d0>)
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7fa f895 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80069da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80069de:	2203      	movs	r2, #3
 80069e0:	9201      	str	r2, [sp, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	9200      	str	r2, [sp, #0]
 80069e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069ea:	49a9      	ldr	r1, [pc, #676]	; (8006c90 <_ZN6BlindsC1Ev+0x3c4>)
 80069ec:	4620      	mov	r0, r4
 80069ee:	f7f9 feaa 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 80069f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fa f82d 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80069fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006a00:	4618      	mov	r0, r3
 8006a02:	f017 f97a 	bl	801dcfa <_ZNSaIcED1Ev>
 8006a06:	3424      	adds	r4, #36	; 0x24
 8006a08:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f017 f972 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006a12:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8006a16:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006a1a:	49a1      	ldr	r1, [pc, #644]	; (8006ca0 <_ZN6BlindsC1Ev+0x3d4>)
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fa f871 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006a22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006a26:	2204      	movs	r2, #4
 8006a28:	9201      	str	r2, [sp, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	9200      	str	r2, [sp, #0]
 8006a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a32:	4997      	ldr	r1, [pc, #604]	; (8006c90 <_ZN6BlindsC1Ev+0x3c4>)
 8006a34:	4620      	mov	r0, r4
 8006a36:	f7f9 fe86 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006a3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fa f809 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006a44:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f017 f956 	bl	801dcfa <_ZNSaIcED1Ev>
 8006a4e:	3424      	adds	r4, #36	; 0x24
 8006a50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006a54:	4618      	mov	r0, r3
 8006a56:	f017 f94e 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006a5a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006a5e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006a62:	4990      	ldr	r1, [pc, #576]	; (8006ca4 <_ZN6BlindsC1Ev+0x3d8>)
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fa f84d 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006a6a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006a6e:	2205      	movs	r2, #5
 8006a70:	9201      	str	r2, [sp, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	9200      	str	r2, [sp, #0]
 8006a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a7a:	4985      	ldr	r1, [pc, #532]	; (8006c90 <_ZN6BlindsC1Ev+0x3c4>)
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f7f9 fe62 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006a82:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7f9 ffe5 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006a8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006a90:	4618      	mov	r0, r3
 8006a92:	f017 f932 	bl	801dcfa <_ZNSaIcED1Ev>
 8006a96:	3424      	adds	r4, #36	; 0x24
 8006a98:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f017 f92a 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006aa2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8006aa6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006aaa:	497f      	ldr	r1, [pc, #508]	; (8006ca8 <_ZN6BlindsC1Ev+0x3dc>)
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fa f829 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006ab2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006ab6:	2206      	movs	r2, #6
 8006ab8:	9201      	str	r2, [sp, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	9200      	str	r2, [sp, #0]
 8006abe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006ac2:	4973      	ldr	r1, [pc, #460]	; (8006c90 <_ZN6BlindsC1Ev+0x3c4>)
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f7f9 fe3e 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006aca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7f9 ffc1 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ad4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f017 f90e 	bl	801dcfa <_ZNSaIcED1Ev>
 8006ade:	3424      	adds	r4, #36	; 0x24
 8006ae0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f017 f906 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006aea:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8006aee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006af2:	496e      	ldr	r1, [pc, #440]	; (8006cac <_ZN6BlindsC1Ev+0x3e0>)
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fa f805 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006afa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006afe:	2207      	movs	r2, #7
 8006b00:	9201      	str	r2, [sp, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	9200      	str	r2, [sp, #0]
 8006b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b0a:	4969      	ldr	r1, [pc, #420]	; (8006cb0 <_ZN6BlindsC1Ev+0x3e4>)
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f7f9 fe1a 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006b12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7f9 ff9d 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006b1c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006b20:	4618      	mov	r0, r3
 8006b22:	f017 f8ea 	bl	801dcfa <_ZNSaIcED1Ev>
 8006b26:	3424      	adds	r4, #36	; 0x24
 8006b28:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f017 f8e2 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006b32:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8006b36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006b3a:	495e      	ldr	r1, [pc, #376]	; (8006cb4 <_ZN6BlindsC1Ev+0x3e8>)
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7f9 ffe1 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006b42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006b46:	2208      	movs	r2, #8
 8006b48:	9201      	str	r2, [sp, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	9200      	str	r2, [sp, #0]
 8006b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b52:	4957      	ldr	r1, [pc, #348]	; (8006cb0 <_ZN6BlindsC1Ev+0x3e4>)
 8006b54:	4620      	mov	r0, r4
 8006b56:	f7f9 fdf6 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006b5a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7f9 ff79 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006b64:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f017 f8c6 	bl	801dcfa <_ZNSaIcED1Ev>
 8006b6e:	3424      	adds	r4, #36	; 0x24
 8006b70:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8006b74:	4618      	mov	r0, r3
 8006b76:	f017 f8be 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006b7a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8006b7e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006b82:	494d      	ldr	r1, [pc, #308]	; (8006cb8 <_ZN6BlindsC1Ev+0x3ec>)
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7f9 ffbd 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006b8a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006b8e:	2209      	movs	r2, #9
 8006b90:	9201      	str	r2, [sp, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	9200      	str	r2, [sp, #0]
 8006b96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b9a:	4945      	ldr	r1, [pc, #276]	; (8006cb0 <_ZN6BlindsC1Ev+0x3e4>)
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f7f9 fdd2 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006ba2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7f9 ff55 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006bac:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f017 f8a2 	bl	801dcfa <_ZNSaIcED1Ev>
 8006bb6:	3424      	adds	r4, #36	; 0x24
 8006bb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f017 f89a 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006bc2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006bc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006bca:	493c      	ldr	r1, [pc, #240]	; (8006cbc <_ZN6BlindsC1Ev+0x3f0>)
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7f9 ff99 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006bd2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006bd6:	220a      	movs	r2, #10
 8006bd8:	9201      	str	r2, [sp, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	9200      	str	r2, [sp, #0]
 8006bde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006be2:	4933      	ldr	r1, [pc, #204]	; (8006cb0 <_ZN6BlindsC1Ev+0x3e4>)
 8006be4:	4620      	mov	r0, r4
 8006be6:	f7f9 fdae 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006bea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7f9 ff31 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006bf4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f017 f87e 	bl	801dcfa <_ZNSaIcED1Ev>
 8006bfe:	3424      	adds	r4, #36	; 0x24
 8006c00:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8006c04:	4618      	mov	r0, r3
 8006c06:	f017 f876 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006c0a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8006c0e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8006c12:	492b      	ldr	r1, [pc, #172]	; (8006cc0 <_ZN6BlindsC1Ev+0x3f4>)
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7f9 ff75 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006c1a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8006c1e:	220b      	movs	r2, #11
 8006c20:	9201      	str	r2, [sp, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	9200      	str	r2, [sp, #0]
 8006c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c2a:	4921      	ldr	r1, [pc, #132]	; (8006cb0 <_ZN6BlindsC1Ev+0x3e4>)
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f7f9 fd8a 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006c32:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7f9 ff0d 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006c3c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8006c40:	4618      	mov	r0, r3
 8006c42:	f017 f85a 	bl	801dcfa <_ZNSaIcED1Ev>
 8006c46:	3424      	adds	r4, #36	; 0x24
 8006c48:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f017 f852 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006c52:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8006c56:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006c5a:	491a      	ldr	r1, [pc, #104]	; (8006cc4 <_ZN6BlindsC1Ev+0x3f8>)
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7f9 ff51 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006c62:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006c66:	220c      	movs	r2, #12
 8006c68:	9201      	str	r2, [sp, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	9200      	str	r2, [sp, #0]
 8006c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c72:	490f      	ldr	r1, [pc, #60]	; (8006cb0 <_ZN6BlindsC1Ev+0x3e4>)
 8006c74:	4620      	mov	r0, r4
 8006c76:	f7f9 fd66 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006c7a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7f9 fee9 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006c84:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8006c88:	4618      	mov	r0, r3
 8006c8a:	e01d      	b.n	8006cc8 <_ZN6BlindsC1Ev+0x3fc>
 8006c8c:	0801fa7c 	.word	0x0801fa7c
 8006c90:	40021000 	.word	0x40021000
 8006c94:	0801fa8c 	.word	0x0801fa8c
 8006c98:	0801fa9c 	.word	0x0801fa9c
 8006c9c:	0801faa8 	.word	0x0801faa8
 8006ca0:	0801fab8 	.word	0x0801fab8
 8006ca4:	0801fac4 	.word	0x0801fac4
 8006ca8:	0801fad4 	.word	0x0801fad4
 8006cac:	0801fae0 	.word	0x0801fae0
 8006cb0:	40021400 	.word	0x40021400
 8006cb4:	0801faec 	.word	0x0801faec
 8006cb8:	0801faf8 	.word	0x0801faf8
 8006cbc:	0801fb04 	.word	0x0801fb04
 8006cc0:	0801fb10 	.word	0x0801fb10
 8006cc4:	0801fb1c 	.word	0x0801fb1c
 8006cc8:	f017 f817 	bl	801dcfa <_ZNSaIcED1Ev>
 8006ccc:	3424      	adds	r4, #36	; 0x24
 8006cce:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f017 f80f 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006cd8:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8006cdc:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8006ce0:	499d      	ldr	r1, [pc, #628]	; (8006f58 <_ZN6BlindsC1Ev+0x68c>)
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7f9 ff0e 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006ce8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8006cec:	220d      	movs	r2, #13
 8006cee:	9201      	str	r2, [sp, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	9200      	str	r2, [sp, #0]
 8006cf4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006cf8:	4998      	ldr	r1, [pc, #608]	; (8006f5c <_ZN6BlindsC1Ev+0x690>)
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f7f9 fd23 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006d00:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7f9 fea6 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006d0a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f016 fff3 	bl	801dcfa <_ZNSaIcED1Ev>
 8006d14:	3424      	adds	r4, #36	; 0x24
 8006d16:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f016 ffeb 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006d20:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8006d24:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8006d28:	498d      	ldr	r1, [pc, #564]	; (8006f60 <_ZN6BlindsC1Ev+0x694>)
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7f9 feea 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006d30:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8006d34:	220e      	movs	r2, #14
 8006d36:	9201      	str	r2, [sp, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	9200      	str	r2, [sp, #0]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	4989      	ldr	r1, [pc, #548]	; (8006f64 <_ZN6BlindsC1Ev+0x698>)
 8006d40:	4620      	mov	r0, r4
 8006d42:	f7f9 fd00 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006d46:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7f9 fe83 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006d50:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8006d54:	4618      	mov	r0, r3
 8006d56:	f016 ffd0 	bl	801dcfa <_ZNSaIcED1Ev>
 8006d5a:	3424      	adds	r4, #36	; 0x24
 8006d5c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f016 ffc8 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006d66:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8006d6a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8006d6e:	497e      	ldr	r1, [pc, #504]	; (8006f68 <_ZN6BlindsC1Ev+0x69c>)
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7f9 fec7 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006d76:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8006d7a:	220f      	movs	r2, #15
 8006d7c:	9201      	str	r2, [sp, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	9200      	str	r2, [sp, #0]
 8006d82:	2202      	movs	r2, #2
 8006d84:	4977      	ldr	r1, [pc, #476]	; (8006f64 <_ZN6BlindsC1Ev+0x698>)
 8006d86:	4620      	mov	r0, r4
 8006d88:	f7f9 fcdd 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006d8c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7f9 fe60 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006d96:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f016 ffad 	bl	801dcfa <_ZNSaIcED1Ev>
 8006da0:	3424      	adds	r4, #36	; 0x24
 8006da2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f016 ffa5 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006dac:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8006db0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8006db4:	496d      	ldr	r1, [pc, #436]	; (8006f6c <_ZN6BlindsC1Ev+0x6a0>)
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7f9 fea4 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006dbc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8006dc0:	2210      	movs	r2, #16
 8006dc2:	9201      	str	r2, [sp, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	9200      	str	r2, [sp, #0]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	4966      	ldr	r1, [pc, #408]	; (8006f64 <_ZN6BlindsC1Ev+0x698>)
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f7f9 fcba 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006dd2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7f9 fe3d 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ddc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8006de0:	4618      	mov	r0, r3
 8006de2:	f016 ff8a 	bl	801dcfa <_ZNSaIcED1Ev>
 8006de6:	3424      	adds	r4, #36	; 0x24
 8006de8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8006dec:	4618      	mov	r0, r3
 8006dee:	f016 ff82 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006df2:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8006df6:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8006dfa:	495d      	ldr	r1, [pc, #372]	; (8006f70 <_ZN6BlindsC1Ev+0x6a4>)
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7f9 fe81 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006e02:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8006e06:	2211      	movs	r2, #17
 8006e08:	9201      	str	r2, [sp, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	9200      	str	r2, [sp, #0]
 8006e0e:	2208      	movs	r2, #8
 8006e10:	4954      	ldr	r1, [pc, #336]	; (8006f64 <_ZN6BlindsC1Ev+0x698>)
 8006e12:	4620      	mov	r0, r4
 8006e14:	f7f9 fc97 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006e18:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7f9 fe1a 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006e22:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8006e26:	4618      	mov	r0, r3
 8006e28:	f016 ff67 	bl	801dcfa <_ZNSaIcED1Ev>
 8006e2c:	3424      	adds	r4, #36	; 0x24
 8006e2e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006e32:	4618      	mov	r0, r3
 8006e34:	f016 ff5f 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006e38:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8006e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e40:	494c      	ldr	r1, [pc, #304]	; (8006f74 <_ZN6BlindsC1Ev+0x6a8>)
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7f9 fe5e 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e4c:	2212      	movs	r2, #18
 8006e4e:	9201      	str	r2, [sp, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	9200      	str	r2, [sp, #0]
 8006e54:	2210      	movs	r2, #16
 8006e56:	4943      	ldr	r1, [pc, #268]	; (8006f64 <_ZN6BlindsC1Ev+0x698>)
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f7f9 fc74 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7f9 fdf7 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006e68:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f016 ff44 	bl	801dcfa <_ZNSaIcED1Ev>
 8006e72:	3424      	adds	r4, #36	; 0x24
 8006e74:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f016 ff3c 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006e7e:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8006e82:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8006e86:	493c      	ldr	r1, [pc, #240]	; (8006f78 <_ZN6BlindsC1Ev+0x6ac>)
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7f9 fe3b 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006e8e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8006e92:	2213      	movs	r2, #19
 8006e94:	9201      	str	r2, [sp, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	9200      	str	r2, [sp, #0]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	4931      	ldr	r1, [pc, #196]	; (8006f64 <_ZN6BlindsC1Ev+0x698>)
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f7f9 fc51 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006ea4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7f9 fdd4 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006eae:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f016 ff21 	bl	801dcfa <_ZNSaIcED1Ev>
 8006eb8:	3424      	adds	r4, #36	; 0x24
 8006eba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f016 ff19 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006ec4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ec8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006ecc:	492b      	ldr	r1, [pc, #172]	; (8006f7c <_ZN6BlindsC1Ev+0x6b0>)
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7f9 fe18 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006ed4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006ed8:	2214      	movs	r2, #20
 8006eda:	9201      	str	r2, [sp, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	9200      	str	r2, [sp, #0]
 8006ee0:	2240      	movs	r2, #64	; 0x40
 8006ee2:	4920      	ldr	r1, [pc, #128]	; (8006f64 <_ZN6BlindsC1Ev+0x698>)
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f7f9 fc2e 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006eea:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7f9 fdb1 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006ef4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f016 fefe 	bl	801dcfa <_ZNSaIcED1Ev>
 8006efe:	3424      	adds	r4, #36	; 0x24
 8006f00:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8006f04:	4618      	mov	r0, r3
 8006f06:	f016 fef6 	bl	801dcf6 <_ZNSaIcEC1Ev>
 8006f0a:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 8006f0e:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006f12:	491b      	ldr	r1, [pc, #108]	; (8006f80 <_ZN6BlindsC1Ev+0x6b4>)
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7f9 fdf5 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006f1a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006f1e:	2215      	movs	r2, #21
 8006f20:	9201      	str	r2, [sp, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	9200      	str	r2, [sp, #0]
 8006f26:	2280      	movs	r2, #128	; 0x80
 8006f28:	490e      	ldr	r1, [pc, #56]	; (8006f64 <_ZN6BlindsC1Ev+0x698>)
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f7f9 fc0b 	bl	8000746 <_ZN5BlindC1EP12GPIO_TypeDeftNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE14BlindDirectionSt4byte>
 8006f30:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7f9 fd8e 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006f3a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f016 fedb 	bl	801dcfa <_ZNSaIcED1Ev>
 8006f44:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8006f48:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f507 771d 	add.w	r7, r7, #628	; 0x274
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd90      	pop	{r4, r7, pc}
 8006f58:	0801fb28 	.word	0x0801fb28
 8006f5c:	40021400 	.word	0x40021400
 8006f60:	0801fb38 	.word	0x0801fb38
 8006f64:	40021800 	.word	0x40021800
 8006f68:	0801fb44 	.word	0x0801fb44
 8006f6c:	0801fb54 	.word	0x0801fb54
 8006f70:	0801fb60 	.word	0x0801fb60
 8006f74:	0801fb70 	.word	0x0801fb70
 8006f78:	0801fb80 	.word	0x0801fb80
 8006f7c:	0801fb90 	.word	0x0801fb90
 8006f80:	0801fba0 	.word	0x0801fba0

08006f84 <http_listen>:
{
	board.ResetHolidaySettings();
}

void http_listen()
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
	server.http_thread();
 8006f88:	4802      	ldr	r0, [pc, #8]	; (8006f94 <http_listen+0x10>)
 8006f8a:	f7fe f8f5 	bl	8005178 <_ZN10HttpServer11http_threadEv>
}
 8006f8e:	bf00      	nop
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20001444 	.word	0x20001444

08006f98 <TriggerScheduler>:

void TriggerScheduler(RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate)
{
 8006f98:	b084      	sub	sp, #16
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af04      	add	r7, sp, #16
 8006fa0:	f107 0c08 	add.w	ip, r7, #8
 8006fa4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	scheduler.Execute(sTime.Hours, sTime.Minutes, sTime.Seconds);
 8006fa8:	7a3b      	ldrb	r3, [r7, #8]
 8006faa:	4619      	mov	r1, r3
 8006fac:	7a7b      	ldrb	r3, [r7, #9]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	7abb      	ldrb	r3, [r7, #10]
 8006fb2:	480c      	ldr	r0, [pc, #48]	; (8006fe4 <TriggerScheduler+0x4c>)
 8006fb4:	f7fe fd12 	bl	80059dc <_ZN9Scheduler7ExecuteEiii>
	board.TimerEvent(sTime, sDate);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	9302      	str	r3, [sp, #8]
 8006fbc:	466a      	mov	r2, sp
 8006fbe:	f107 0314 	add.w	r3, r7, #20
 8006fc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006fc6:	e882 0003 	stmia.w	r2, {r0, r1}
 8006fca:	f107 0308 	add.w	r3, r7, #8
 8006fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fd0:	4805      	ldr	r0, [pc, #20]	; (8006fe8 <TriggerScheduler+0x50>)
 8006fd2:	f7fc fbc1 	bl	8003758 <_ZN5Board10TimerEventE15RTC_TimeTypeDef15RTC_DateTypeDef>
}
 8006fd6:	bf00      	nop
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fde:	b004      	add	sp, #16
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000bd0 	.word	0x20000bd0
 8006fe8:	20000e34 	.word	0x20000e34

08006fec <CheckAndSwitchLights>:

void CheckAndSwitchLights()
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
	lights.CheckAndSwitchLights();
 8006ff0:	4802      	ldr	r0, [pc, #8]	; (8006ffc <CheckAndSwitchLights+0x10>)
 8006ff2:	f7fe f9b3 	bl	800535c <_ZN6Lights20CheckAndSwitchLightsEv>
}
 8006ff6:	bf00      	nop
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000204 	.word	0x20000204

08007000 <TimeToString>:

const char * TimeToString(RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate)
{
 8007000:	b084      	sub	sp, #16
 8007002:	b590      	push	{r4, r7, lr}
 8007004:	b0ad      	sub	sp, #180	; 0xb4
 8007006:	af00      	add	r7, sp, #0
 8007008:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 800700c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	std::string time = "Time: ";
 8007010:	f107 031c 	add.w	r3, r7, #28
 8007014:	4618      	mov	r0, r3
 8007016:	f016 fe6e 	bl	801dcf6 <_ZNSaIcEC1Ev>
 800701a:	f107 021c 	add.w	r2, r7, #28
 800701e:	1d3b      	adds	r3, r7, #4
 8007020:	495d      	ldr	r1, [pc, #372]	; (8007198 <TimeToString+0x198>)
 8007022:	4618      	mov	r0, r3
 8007024:	f7f9 fd6e 	bl	8000b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8007028:	f107 031c 	add.w	r3, r7, #28
 800702c:	4618      	mov	r0, r3
 800702e:	f016 fe64 	bl	801dcfa <_ZNSaIcED1Ev>
	time += std::to_string(sTime.Hours);
 8007032:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8007036:	461a      	mov	r2, r3
 8007038:	f107 0320 	add.w	r3, r7, #32
 800703c:	4611      	mov	r1, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f7fa fbe8 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
 8007044:	f107 0220 	add.w	r2, r7, #32
 8007048:	1d3b      	adds	r3, r7, #4
 800704a:	4611      	mov	r1, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f7fc ff6c 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8007052:	f107 0320 	add.w	r3, r7, #32
 8007056:	4618      	mov	r0, r3
 8007058:	f7f9 fcfd 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	time += ":";
 800705c:	1d3b      	adds	r3, r7, #4
 800705e:	494f      	ldr	r1, [pc, #316]	; (800719c <TimeToString+0x19c>)
 8007060:	4618      	mov	r0, r3
 8007062:	f7fc ff54 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	time += std::to_string(sTime.Minutes);
 8007066:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 800706a:	461a      	mov	r2, r3
 800706c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007070:	4611      	mov	r1, r2
 8007072:	4618      	mov	r0, r3
 8007074:	f7fa fbce 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
 8007078:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800707c:	1d3b      	adds	r3, r7, #4
 800707e:	4611      	mov	r1, r2
 8007080:	4618      	mov	r0, r3
 8007082:	f7fc ff52 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8007086:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800708a:	4618      	mov	r0, r3
 800708c:	f7f9 fce3 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	time += ":";
 8007090:	1d3b      	adds	r3, r7, #4
 8007092:	4942      	ldr	r1, [pc, #264]	; (800719c <TimeToString+0x19c>)
 8007094:	4618      	mov	r0, r3
 8007096:	f7fc ff3a 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	time += std::to_string(sTime.Seconds);
 800709a:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 800709e:	461a      	mov	r2, r3
 80070a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070a4:	4611      	mov	r1, r2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fa fbb4 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
 80070ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80070b0:	1d3b      	adds	r3, r7, #4
 80070b2:	4611      	mov	r1, r2
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fc ff38 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 80070ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070be:	4618      	mov	r0, r3
 80070c0:	f7f9 fcc9 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	time += "\n";
 80070c4:	1d3b      	adds	r3, r7, #4
 80070c6:	4936      	ldr	r1, [pc, #216]	; (80071a0 <TimeToString+0x1a0>)
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fc ff20 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	time += "Date: ";
 80070ce:	1d3b      	adds	r3, r7, #4
 80070d0:	4934      	ldr	r1, [pc, #208]	; (80071a4 <TimeToString+0x1a4>)
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fc ff1b 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	time += std::to_string(sDate.Year);
 80070d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80070dc:	461a      	mov	r2, r3
 80070de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fa fb95 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
 80070ea:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80070ee:	1d3b      	adds	r3, r7, #4
 80070f0:	4611      	mov	r1, r2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fc ff19 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 80070f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7f9 fcaa 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	time += "-";
 8007102:	1d3b      	adds	r3, r7, #4
 8007104:	4928      	ldr	r1, [pc, #160]	; (80071a8 <TimeToString+0x1a8>)
 8007106:	4618      	mov	r0, r3
 8007108:	f7fc ff01 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	time += std::to_string(sDate.Month);
 800710c:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 8007110:	461a      	mov	r2, r3
 8007112:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007116:	4611      	mov	r1, r2
 8007118:	4618      	mov	r0, r3
 800711a:	f7fa fb7b 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
 800711e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007122:	1d3b      	adds	r3, r7, #4
 8007124:	4611      	mov	r1, r2
 8007126:	4618      	mov	r0, r3
 8007128:	f7fc feff 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 800712c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007130:	4618      	mov	r0, r3
 8007132:	f7f9 fc90 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	time += "-";
 8007136:	1d3b      	adds	r3, r7, #4
 8007138:	491b      	ldr	r1, [pc, #108]	; (80071a8 <TimeToString+0x1a8>)
 800713a:	4618      	mov	r0, r3
 800713c:	f7fc fee7 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>
	time += std::to_string(sDate.Date);
 8007140:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8007144:	461a      	mov	r2, r3
 8007146:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800714a:	4611      	mov	r1, r2
 800714c:	4618      	mov	r0, r3
 800714e:	f7fa fb61 	bl	8001814 <_ZNSt7__cxx119to_stringEi>
 8007152:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8007156:	1d3b      	adds	r3, r7, #4
 8007158:	4611      	mov	r1, r2
 800715a:	4618      	mov	r0, r3
 800715c:	f7fc fee5 	bl	8003f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
 8007160:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007164:	4618      	mov	r0, r3
 8007166:	f7f9 fc76 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	time += "\n";
 800716a:	1d3b      	adds	r3, r7, #4
 800716c:	490c      	ldr	r1, [pc, #48]	; (80071a0 <TimeToString+0x1a0>)
 800716e:	4618      	mov	r0, r3
 8007170:	f7fc fecd 	bl	8003f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc>

	//length = time.length();
	return time.c_str();
 8007174:	1d3b      	adds	r3, r7, #4
 8007176:	4618      	mov	r0, r3
 8007178:	f7fc fd6c 	bl	8003c54 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800717c:	4604      	mov	r4, r0
 800717e:	bf00      	nop
	std::string time = "Time: ";
 8007180:	1d3b      	adds	r3, r7, #4
 8007182:	4618      	mov	r0, r3
 8007184:	f7f9 fc67 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return time.c_str();
 8007188:	4623      	mov	r3, r4
}
 800718a:	4618      	mov	r0, r3
 800718c:	37b4      	adds	r7, #180	; 0xb4
 800718e:	46bd      	mov	sp, r7
 8007190:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8007194:	b004      	add	sp, #16
 8007196:	4770      	bx	lr
 8007198:	0801fbb0 	.word	0x0801fbb0
 800719c:	0801fbb8 	.word	0x0801fbb8
 80071a0:	0801fbbc 	.word	0x0801fbbc
 80071a4:	0801fbc0 	.word	0x0801fbc0
 80071a8:	0801fbc8 	.word	0x0801fbc8

080071ac <_ZN5BoardD1Ev>:
#include "Scheduler.hpp"
#include "lwip/api.h"
#include <string>
#include <cstdint>

class Board {
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3320      	adds	r3, #32
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7f9 fc4c 	bl	8000a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <_ZN6BlindsD1Ev>:
 80071c8:	b590      	push	{r4, r7, lr}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <_ZN6BlindsD1Ev+0x24>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f503 7446 	add.w	r4, r3, #792	; 0x318
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	429c      	cmp	r4, r3
 80071e0:	d004      	beq.n	80071ec <_ZN6BlindsD1Ev+0x24>
 80071e2:	3c24      	subs	r4, #36	; 0x24
 80071e4:	4620      	mov	r0, r4
 80071e6:	f7fe fd43 	bl	8005c70 <_ZN5BlindD1Ev>
 80071ea:	e7f7      	b.n	80071dc <_ZN6BlindsD1Ev+0x14>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4618      	mov	r0, r3
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd90      	pop	{r4, r7, pc}

080071f6 <_ZN6LightsD1Ev>:
 80071f6:	b590      	push	{r4, r7, lr}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <_ZN6LightsD1Ev+0x24>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f203 64b4 	addw	r4, r3, #1716	; 0x6b4
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	429c      	cmp	r4, r3
 800720e:	d004      	beq.n	800721a <_ZN6LightsD1Ev+0x24>
 8007210:	3c34      	subs	r4, #52	; 0x34
 8007212:	4620      	mov	r0, r4
 8007214:	f7fe fd3a 	bl	8005c8c <_ZN5LightD1Ev>
 8007218:	e7f7      	b.n	800720a <_ZN6LightsD1Ev+0x14>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	bd90      	pop	{r4, r7, pc}

08007224 <_Z41__static_initialization_and_destruction_0ii>:

#ifdef __cplusplus
}
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d117      	bne.n	8007264 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800723a:	4293      	cmp	r3, r2
 800723c:	d112      	bne.n	8007264 <_Z41__static_initialization_and_destruction_0ii+0x40>
Lights lights;
 800723e:	4814      	ldr	r0, [pc, #80]	; (8007290 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8007240:	f7fe fd64 	bl	8005d0c <_ZN6LightsC1Ev>
Blinds blinds;
 8007244:	4813      	ldr	r0, [pc, #76]	; (8007294 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8007246:	f7ff fb41 	bl	80068cc <_ZN6BlindsC1Ev>
Scheduler scheduler(&lights, &blinds);
 800724a:	4a12      	ldr	r2, [pc, #72]	; (8007294 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800724c:	4910      	ldr	r1, [pc, #64]	; (8007290 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800724e:	4812      	ldr	r0, [pc, #72]	; (8007298 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8007250:	f7fe fd2a 	bl	8005ca8 <_ZN9SchedulerC1EP6LightsP6Blinds>
Board board(&scheduler);
 8007254:	4910      	ldr	r1, [pc, #64]	; (8007298 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8007256:	4811      	ldr	r0, [pc, #68]	; (800729c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007258:	f7fa fb57 	bl	800190a <_ZN5BoardC1EP9Scheduler>
HttpServer server(board);
 800725c:	490f      	ldr	r1, [pc, #60]	; (800729c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800725e:	4810      	ldr	r0, [pc, #64]	; (80072a0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007260:	f7fe fd44 	bl	8005cec <_ZN10HttpServerC1ER5Board>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10d      	bne.n	8007286 <_Z41__static_initialization_and_destruction_0ii+0x62>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007270:	4293      	cmp	r3, r2
 8007272:	d108      	bne.n	8007286 <_Z41__static_initialization_and_destruction_0ii+0x62>
Board board(&scheduler);
 8007274:	4809      	ldr	r0, [pc, #36]	; (800729c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007276:	f7ff ff99 	bl	80071ac <_ZN5BoardD1Ev>
Blinds blinds;
 800727a:	4806      	ldr	r0, [pc, #24]	; (8007294 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800727c:	f7ff ffa4 	bl	80071c8 <_ZN6BlindsD1Ev>
Lights lights;
 8007280:	4803      	ldr	r0, [pc, #12]	; (8007290 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8007282:	f7ff ffb8 	bl	80071f6 <_ZN6LightsD1Ev>
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000204 	.word	0x20000204
 8007294:	200008b8 	.word	0x200008b8
 8007298:	20000bd0 	.word	0x20000bd0
 800729c:	20000e34 	.word	0x20000e34
 80072a0:	20001444 	.word	0x20001444

080072a4 <_GLOBAL__sub_I_lights>:
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072ac:	2001      	movs	r0, #1
 80072ae:	f7ff ffb9 	bl	8007224 <_Z41__static_initialization_and_destruction_0ii>
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <_GLOBAL__sub_D_lights>:
 80072b4:	b580      	push	{r7, lr}
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072bc:	2000      	movs	r0, #0
 80072be:	f7ff ffb1 	bl	8007224 <_Z41__static_initialization_and_destruction_0ii>
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4a07      	ldr	r2, [pc, #28]	; (80072f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80072d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	4a06      	ldr	r2, [pc, #24]	; (80072f4 <vApplicationGetIdleTaskMemory+0x30>)
 80072da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2280      	movs	r2, #128	; 0x80
 80072e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	20001448 	.word	0x20001448
 80072f4:	200014fc 	.word	0x200014fc

080072f8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80072fc:	f3bf 8f4f 	dsb	sy
}
 8007300:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007302:	f3bf 8f6f 	isb	sy
}
 8007306:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007308:	4b0d      	ldr	r3, [pc, #52]	; (8007340 <SCB_EnableICache+0x48>)
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007310:	f3bf 8f4f 	dsb	sy
}
 8007314:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007316:	f3bf 8f6f 	isb	sy
}
 800731a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800731c:	4b08      	ldr	r3, [pc, #32]	; (8007340 <SCB_EnableICache+0x48>)
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	4a07      	ldr	r2, [pc, #28]	; (8007340 <SCB_EnableICache+0x48>)
 8007322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007326:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007328:	f3bf 8f4f 	dsb	sy
}
 800732c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800732e:	f3bf 8f6f 	isb	sy
}
 8007332:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8007334:	bf00      	nop
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	e000ed00 	.word	0xe000ed00

08007344 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800734a:	4b1f      	ldr	r3, [pc, #124]	; (80073c8 <SCB_EnableDCache+0x84>)
 800734c:	2200      	movs	r2, #0
 800734e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007352:	f3bf 8f4f 	dsb	sy
}
 8007356:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8007358:	4b1b      	ldr	r3, [pc, #108]	; (80073c8 <SCB_EnableDCache+0x84>)
 800735a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800735e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	0b5b      	lsrs	r3, r3, #13
 8007364:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007368:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	08db      	lsrs	r3, r3, #3
 800736e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007372:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800737c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007382:	4911      	ldr	r1, [pc, #68]	; (80073c8 <SCB_EnableDCache+0x84>)
 8007384:	4313      	orrs	r3, r2
 8007386:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	1e5a      	subs	r2, r3, #1
 800738e:	60ba      	str	r2, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1ef      	bne.n	8007374 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	1e5a      	subs	r2, r3, #1
 8007398:	60fa      	str	r2, [r7, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e5      	bne.n	800736a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800739e:	f3bf 8f4f 	dsb	sy
}
 80073a2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80073a4:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <SCB_EnableDCache+0x84>)
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	4a07      	ldr	r2, [pc, #28]	; (80073c8 <SCB_EnableDCache+0x84>)
 80073aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80073b0:	f3bf 8f4f 	dsb	sy
}
 80073b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80073b6:	f3bf 8f6f 	isb	sy
}
 80073ba:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	e000ed00 	.word	0xe000ed00

080073cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80073d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80073d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d013      	beq.n	800740c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80073e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80073e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80073ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80073f4:	e000      	b.n	80073f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80073f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80073f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0f9      	beq.n	80073f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007402:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800740c:	687b      	ldr	r3, [r7, #4]
}
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
	...

0800741c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800741c:	b5b0      	push	{r4, r5, r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8007422:	f000 fba3 	bl	8007b6c <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8007426:	f7ff ff67 	bl	80072f8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800742a:	f7ff ff8b 	bl	8007344 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800742e:	f000 ff7b 	bl	8008328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007432:	f000 f823 	bl	800747c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007436:	f000 f939 	bl	80076ac <MX_GPIO_Init>
  MX_RTC_Init();
 800743a:	f000 f88f 	bl	800755c <MX_RTC_Init>
  MX_TIM2_Init();
 800743e:	f000 f8e7 	bl	8007610 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8007442:	480b      	ldr	r0, [pc, #44]	; (8007470 <main+0x54>)
 8007444:	f004 fcae 	bl	800bda4 <HAL_TIM_Base_Start_IT>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8007448:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <main+0x58>)
 800744a:	1d3c      	adds	r4, r7, #4
 800744c:	461d      	mov	r5, r3
 800744e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007452:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	2100      	movs	r1, #0
 800745e:	4618      	mov	r0, r3
 8007460:	f005 ff82 	bl	800d368 <osThreadCreate>
 8007464:	4603      	mov	r3, r0
 8007466:	4a04      	ldr	r2, [pc, #16]	; (8007478 <main+0x5c>)
 8007468:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800746a:	f005 ff66 	bl	800d33a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800746e:	e7fe      	b.n	800746e <main+0x52>
 8007470:	2000171c 	.word	0x2000171c
 8007474:	0801fc34 	.word	0x0801fc34
 8007478:	20001768 	.word	0x20001768

0800747c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b094      	sub	sp, #80	; 0x50
 8007480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007482:	f107 031c 	add.w	r3, r7, #28
 8007486:	2234      	movs	r2, #52	; 0x34
 8007488:	2100      	movs	r1, #0
 800748a:	4618      	mov	r0, r3
 800748c:	f016 fe8a 	bl	801e1a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007490:	f107 0308 	add.w	r3, r7, #8
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	605a      	str	r2, [r3, #4]
 800749a:	609a      	str	r2, [r3, #8]
 800749c:	60da      	str	r2, [r3, #12]
 800749e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80074a0:	4b2c      	ldr	r3, [pc, #176]	; (8007554 <SystemClock_Config+0xd8>)
 80074a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a4:	4a2b      	ldr	r2, [pc, #172]	; (8007554 <SystemClock_Config+0xd8>)
 80074a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074aa:	6413      	str	r3, [r2, #64]	; 0x40
 80074ac:	4b29      	ldr	r3, [pc, #164]	; (8007554 <SystemClock_Config+0xd8>)
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074b4:	607b      	str	r3, [r7, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80074b8:	4b27      	ldr	r3, [pc, #156]	; (8007558 <SystemClock_Config+0xdc>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a26      	ldr	r2, [pc, #152]	; (8007558 <SystemClock_Config+0xdc>)
 80074be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	4b24      	ldr	r3, [pc, #144]	; (8007558 <SystemClock_Config+0xdc>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074cc:	603b      	str	r3, [r7, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80074d0:	230a      	movs	r3, #10
 80074d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80074d4:	2301      	movs	r3, #1
 80074d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80074d8:	2310      	movs	r3, #16
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80074dc:	2301      	movs	r3, #1
 80074de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80074e0:	2302      	movs	r3, #2
 80074e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80074e4:	2300      	movs	r3, #0
 80074e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80074e8:	2308      	movs	r3, #8
 80074ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80074ec:	23d8      	movs	r3, #216	; 0xd8
 80074ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80074f0:	2302      	movs	r3, #2
 80074f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80074f4:	2302      	movs	r3, #2
 80074f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80074f8:	2302      	movs	r3, #2
 80074fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80074fc:	f107 031c 	add.w	r3, r7, #28
 8007500:	4618      	mov	r0, r3
 8007502:	f003 f80d 	bl	800a520 <HAL_RCC_OscConfig>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800750c:	f000 fb9c 	bl	8007c48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007510:	f002 ffb6 	bl	800a480 <HAL_PWREx_EnableOverDrive>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800751a:	f000 fb95 	bl	8007c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800751e:	230f      	movs	r3, #15
 8007520:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007522:	2302      	movs	r3, #2
 8007524:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007526:	2300      	movs	r3, #0
 8007528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800752a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800752e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007534:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8007536:	f107 0308 	add.w	r3, r7, #8
 800753a:	2107      	movs	r1, #7
 800753c:	4618      	mov	r0, r3
 800753e:	f003 fa9d 	bl	800aa7c <HAL_RCC_ClockConfig>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8007548:	f000 fb7e 	bl	8007c48 <Error_Handler>
  }
}
 800754c:	bf00      	nop
 800754e:	3750      	adds	r7, #80	; 0x50
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	40023800 	.word	0x40023800
 8007558:	40007000 	.word	0x40007000

0800755c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8007562:	1d3b      	adds	r3, r7, #4
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	605a      	str	r2, [r3, #4]
 800756a:	609a      	str	r2, [r3, #8]
 800756c:	60da      	str	r2, [r3, #12]
 800756e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8007570:	2300      	movs	r3, #0
 8007572:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007574:	4b24      	ldr	r3, [pc, #144]	; (8007608 <MX_RTC_Init+0xac>)
 8007576:	4a25      	ldr	r2, [pc, #148]	; (800760c <MX_RTC_Init+0xb0>)
 8007578:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800757a:	4b23      	ldr	r3, [pc, #140]	; (8007608 <MX_RTC_Init+0xac>)
 800757c:	2200      	movs	r2, #0
 800757e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007580:	4b21      	ldr	r3, [pc, #132]	; (8007608 <MX_RTC_Init+0xac>)
 8007582:	227f      	movs	r2, #127	; 0x7f
 8007584:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007586:	4b20      	ldr	r3, [pc, #128]	; (8007608 <MX_RTC_Init+0xac>)
 8007588:	22ff      	movs	r2, #255	; 0xff
 800758a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800758c:	4b1e      	ldr	r3, [pc, #120]	; (8007608 <MX_RTC_Init+0xac>)
 800758e:	2200      	movs	r2, #0
 8007590:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007592:	4b1d      	ldr	r3, [pc, #116]	; (8007608 <MX_RTC_Init+0xac>)
 8007594:	2200      	movs	r2, #0
 8007596:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007598:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <MX_RTC_Init+0xac>)
 800759a:	2200      	movs	r2, #0
 800759c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800759e:	481a      	ldr	r0, [pc, #104]	; (8007608 <MX_RTC_Init+0xac>)
 80075a0:	f004 f898 	bl	800b6d4 <HAL_RTC_Init>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80075aa:	f000 fb4d 	bl	8007c48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80075ba:	2300      	movs	r3, #0
 80075bc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80075be:	2300      	movs	r3, #0
 80075c0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80075c2:	1d3b      	adds	r3, r7, #4
 80075c4:	2201      	movs	r2, #1
 80075c6:	4619      	mov	r1, r3
 80075c8:	480f      	ldr	r0, [pc, #60]	; (8007608 <MX_RTC_Init+0xac>)
 80075ca:	f004 f907 	bl	800b7dc <HAL_RTC_SetTime>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80075d4:	f000 fb38 	bl	8007c48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80075d8:	2301      	movs	r3, #1
 80075da:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80075dc:	2301      	movs	r3, #1
 80075de:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80075e0:	2301      	movs	r3, #1
 80075e2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80075e8:	463b      	mov	r3, r7
 80075ea:	2201      	movs	r2, #1
 80075ec:	4619      	mov	r1, r3
 80075ee:	4806      	ldr	r0, [pc, #24]	; (8007608 <MX_RTC_Init+0xac>)
 80075f0:	f004 f9ec 	bl	800b9cc <HAL_RTC_SetDate>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80075fa:	f000 fb25 	bl	8007c48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80075fe:	bf00      	nop
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	200016fc 	.word	0x200016fc
 800760c:	40002800 	.word	0x40002800

08007610 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007616:	f107 0310 	add.w	r3, r7, #16
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	605a      	str	r2, [r3, #4]
 8007620:	609a      	str	r2, [r3, #8]
 8007622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007624:	1d3b      	adds	r3, r7, #4
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	605a      	str	r2, [r3, #4]
 800762c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800762e:	4b1d      	ldr	r3, [pc, #116]	; (80076a4 <MX_TIM2_Init+0x94>)
 8007630:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007634:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8007636:	4b1b      	ldr	r3, [pc, #108]	; (80076a4 <MX_TIM2_Init+0x94>)
 8007638:	226b      	movs	r2, #107	; 0x6b
 800763a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800763c:	4b19      	ldr	r3, [pc, #100]	; (80076a4 <MX_TIM2_Init+0x94>)
 800763e:	2200      	movs	r2, #0
 8007640:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000000-1;
 8007642:	4b18      	ldr	r3, [pc, #96]	; (80076a4 <MX_TIM2_Init+0x94>)
 8007644:	4a18      	ldr	r2, [pc, #96]	; (80076a8 <MX_TIM2_Init+0x98>)
 8007646:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007648:	4b16      	ldr	r3, [pc, #88]	; (80076a4 <MX_TIM2_Init+0x94>)
 800764a:	2200      	movs	r2, #0
 800764c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800764e:	4b15      	ldr	r3, [pc, #84]	; (80076a4 <MX_TIM2_Init+0x94>)
 8007650:	2200      	movs	r2, #0
 8007652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007654:	4813      	ldr	r0, [pc, #76]	; (80076a4 <MX_TIM2_Init+0x94>)
 8007656:	f004 fb4d 	bl	800bcf4 <HAL_TIM_Base_Init>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007660:	f000 faf2 	bl	8007c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007668:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800766a:	f107 0310 	add.w	r3, r7, #16
 800766e:	4619      	mov	r1, r3
 8007670:	480c      	ldr	r0, [pc, #48]	; (80076a4 <MX_TIM2_Init+0x94>)
 8007672:	f004 fd2f 	bl	800c0d4 <HAL_TIM_ConfigClockSource>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800767c:	f000 fae4 	bl	8007c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007680:	2300      	movs	r3, #0
 8007682:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007684:	2300      	movs	r3, #0
 8007686:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007688:	1d3b      	adds	r3, r7, #4
 800768a:	4619      	mov	r1, r3
 800768c:	4805      	ldr	r0, [pc, #20]	; (80076a4 <MX_TIM2_Init+0x94>)
 800768e:	f004 ff4d 	bl	800c52c <HAL_TIMEx_MasterConfigSynchronization>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007698:	f000 fad6 	bl	8007c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800769c:	bf00      	nop
 800769e:	3720      	adds	r7, #32
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	2000171c 	.word	0x2000171c
 80076a8:	039386ff 	.word	0x039386ff

080076ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08e      	sub	sp, #56	; 0x38
 80076b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	605a      	str	r2, [r3, #4]
 80076bc:	609a      	str	r2, [r3, #8]
 80076be:	60da      	str	r2, [r3, #12]
 80076c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80076c2:	4ba2      	ldr	r3, [pc, #648]	; (800794c <MX_GPIO_Init+0x2a0>)
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	4aa1      	ldr	r2, [pc, #644]	; (800794c <MX_GPIO_Init+0x2a0>)
 80076c8:	f043 0310 	orr.w	r3, r3, #16
 80076cc:	6313      	str	r3, [r2, #48]	; 0x30
 80076ce:	4b9f      	ldr	r3, [pc, #636]	; (800794c <MX_GPIO_Init+0x2a0>)
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	f003 0310 	and.w	r3, r3, #16
 80076d6:	623b      	str	r3, [r7, #32]
 80076d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076da:	4b9c      	ldr	r3, [pc, #624]	; (800794c <MX_GPIO_Init+0x2a0>)
 80076dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076de:	4a9b      	ldr	r2, [pc, #620]	; (800794c <MX_GPIO_Init+0x2a0>)
 80076e0:	f043 0304 	orr.w	r3, r3, #4
 80076e4:	6313      	str	r3, [r2, #48]	; 0x30
 80076e6:	4b99      	ldr	r3, [pc, #612]	; (800794c <MX_GPIO_Init+0x2a0>)
 80076e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ea:	f003 0304 	and.w	r3, r3, #4
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80076f2:	4b96      	ldr	r3, [pc, #600]	; (800794c <MX_GPIO_Init+0x2a0>)
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	4a95      	ldr	r2, [pc, #596]	; (800794c <MX_GPIO_Init+0x2a0>)
 80076f8:	f043 0320 	orr.w	r3, r3, #32
 80076fc:	6313      	str	r3, [r2, #48]	; 0x30
 80076fe:	4b93      	ldr	r3, [pc, #588]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	61bb      	str	r3, [r7, #24]
 8007708:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800770a:	4b90      	ldr	r3, [pc, #576]	; (800794c <MX_GPIO_Init+0x2a0>)
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	4a8f      	ldr	r2, [pc, #572]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007714:	6313      	str	r3, [r2, #48]	; 0x30
 8007716:	4b8d      	ldr	r3, [pc, #564]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007722:	4b8a      	ldr	r3, [pc, #552]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	4a89      	ldr	r2, [pc, #548]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007728:	f043 0301 	orr.w	r3, r3, #1
 800772c:	6313      	str	r3, [r2, #48]	; 0x30
 800772e:	4b87      	ldr	r3, [pc, #540]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800773a:	4b84      	ldr	r3, [pc, #528]	; (800794c <MX_GPIO_Init+0x2a0>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	4a83      	ldr	r2, [pc, #524]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007740:	f043 0302 	orr.w	r3, r3, #2
 8007744:	6313      	str	r3, [r2, #48]	; 0x30
 8007746:	4b81      	ldr	r3, [pc, #516]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007752:	4b7e      	ldr	r3, [pc, #504]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	4a7d      	ldr	r2, [pc, #500]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800775c:	6313      	str	r3, [r2, #48]	; 0x30
 800775e:	4b7b      	ldr	r3, [pc, #492]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	60bb      	str	r3, [r7, #8]
 8007768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800776a:	4b78      	ldr	r3, [pc, #480]	; (800794c <MX_GPIO_Init+0x2a0>)
 800776c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776e:	4a77      	ldr	r2, [pc, #476]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007770:	f043 0308 	orr.w	r3, r3, #8
 8007774:	6313      	str	r3, [r2, #48]	; 0x30
 8007776:	4b75      	ldr	r3, [pc, #468]	; (800794c <MX_GPIO_Init+0x2a0>)
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	f003 0308 	and.w	r3, r3, #8
 800777e:	607b      	str	r3, [r7, #4]
 8007780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8007782:	2200      	movs	r2, #0
 8007784:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8007788:	4871      	ldr	r0, [pc, #452]	; (8007950 <MX_GPIO_Init+0x2a4>)
 800778a:	f002 fe5f 	bl	800a44c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_2
 800778e:	2200      	movs	r2, #0
 8007790:	f64d 71cd 	movw	r1, #57293	; 0xdfcd
 8007794:	486f      	ldr	r0, [pc, #444]	; (8007954 <MX_GPIO_Init+0x2a8>)
 8007796:	f002 fe59 	bl	800a44c <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800779a:	2200      	movs	r2, #0
 800779c:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 80077a0:	486d      	ldr	r0, [pc, #436]	; (8007958 <MX_GPIO_Init+0x2ac>)
 80077a2:	f002 fe53 	bl	800a44c <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80077a6:	2200      	movs	r2, #0
 80077a8:	f641 7171 	movw	r1, #8049	; 0x1f71
 80077ac:	486b      	ldr	r0, [pc, #428]	; (800795c <MX_GPIO_Init+0x2b0>)
 80077ae:	f002 fe4d 	bl	800a44c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 80077b2:	2200      	movs	r2, #0
 80077b4:	f244 0182 	movw	r1, #16514	; 0x4082
 80077b8:	4869      	ldr	r0, [pc, #420]	; (8007960 <MX_GPIO_Init+0x2b4>)
 80077ba:	f002 fe47 	bl	800a44c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80077be:	2200      	movs	r2, #0
 80077c0:	f240 41ff 	movw	r1, #1279	; 0x4ff
 80077c4:	4867      	ldr	r0, [pc, #412]	; (8007964 <MX_GPIO_Init+0x2b8>)
 80077c6:	f002 fe41 	bl	800a44c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_4, GPIO_PIN_RESET);
 80077ca:	2200      	movs	r2, #0
 80077cc:	f44f 7188 	mov.w	r1, #272	; 0x110
 80077d0:	4865      	ldr	r0, [pc, #404]	; (8007968 <MX_GPIO_Init+0x2bc>)
 80077d2:	f002 fe3b 	bl	800a44c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6
                           PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80077d6:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077dc:	2301      	movs	r3, #1
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077e4:	2300      	movs	r3, #0
 80077e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80077e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ec:	4619      	mov	r1, r3
 80077ee:	4858      	ldr	r0, [pc, #352]	; (8007950 <MX_GPIO_Init+0x2a4>)
 80077f0:	f002 fc68 	bl	800a0c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80077f4:	2308      	movs	r3, #8
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077f8:	2300      	movs	r3, #0
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80077fc:	2301      	movs	r3, #1
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007804:	4619      	mov	r1, r3
 8007806:	4852      	ldr	r0, [pc, #328]	; (8007950 <MX_GPIO_Init+0x2a4>)
 8007808:	f002 fc5c 	bl	800a0c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800780c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007812:	2300      	movs	r3, #0
 8007814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007816:	2301      	movs	r3, #1
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800781a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800781e:	4619      	mov	r1, r3
 8007820:	484c      	ldr	r0, [pc, #304]	; (8007954 <MX_GPIO_Init+0x2a8>)
 8007822:	f002 fc4f 	bl	800a0c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC2
                           PC3 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_2
 8007826:	f64d 73cd 	movw	r3, #57293	; 0xdfcd
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800782c:	2301      	movs	r3, #1
 800782e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007830:	2300      	movs	r3, #0
 8007832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007834:	2300      	movs	r3, #0
 8007836:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800783c:	4619      	mov	r1, r3
 800783e:	4845      	ldr	r0, [pc, #276]	; (8007954 <MX_GPIO_Init+0x2a8>)
 8007840:	f002 fc40 	bl	800a0c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007844:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800784a:	2300      	movs	r3, #0
 800784c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800784e:	2301      	movs	r3, #1
 8007850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007856:	4619      	mov	r1, r3
 8007858:	483f      	ldr	r0, [pc, #252]	; (8007958 <MX_GPIO_Init+0x2ac>)
 800785a:	f002 fc33 	bl	800a0c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 PF11 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800785e:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007864:	2301      	movs	r3, #1
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007868:	2300      	movs	r3, #0
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800786c:	2300      	movs	r3, #0
 800786e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007874:	4619      	mov	r1, r3
 8007876:	4838      	ldr	r0, [pc, #224]	; (8007958 <MX_GPIO_Init+0x2ac>)
 8007878:	f002 fc24 	bl	800a0c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA6
                           PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800787c:	f641 7371 	movw	r3, #8049	; 0x1f71
 8007880:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007882:	2301      	movs	r3, #1
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007886:	2300      	movs	r3, #0
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800788a:	2300      	movs	r3, #0
 800788c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800788e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007892:	4619      	mov	r1, r3
 8007894:	4831      	ldr	r0, [pc, #196]	; (800795c <MX_GPIO_Init+0x2b0>)
 8007896:	f002 fc15 	bl	800a0c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB12 PB15 PB4 PB5
                           PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 800789a:	f649 7375 	movw	r3, #40821	; 0x9f75
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078a0:	2300      	movs	r3, #0
 80078a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078a4:	2301      	movs	r3, #1
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ac:	4619      	mov	r1, r3
 80078ae:	482c      	ldr	r0, [pc, #176]	; (8007960 <MX_GPIO_Init+0x2b4>)
 80078b0:	f002 fc08 	bl	800a0c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|LD1_Pin;
 80078b4:	f244 0382 	movw	r3, #16514	; 0x4082
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078ba:	2301      	movs	r3, #1
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078c2:	2300      	movs	r3, #0
 80078c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ca:	4619      	mov	r1, r3
 80078cc:	4824      	ldr	r0, [pc, #144]	; (8007960 <MX_GPIO_Init+0x2b4>)
 80078ce:	f002 fbf9 	bl	800a0c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80078d2:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078d8:	2301      	movs	r3, #1
 80078da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078dc:	2300      	movs	r3, #0
 80078de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078e0:	2300      	movs	r3, #0
 80078e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80078e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078e8:	4619      	mov	r1, r3
 80078ea:	481e      	ldr	r0, [pc, #120]	; (8007964 <MX_GPIO_Init+0x2b8>)
 80078ec:	f002 fbea 	bl	800a0c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4;
 80078f0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078f6:	2301      	movs	r3, #1
 80078f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078fe:	2300      	movs	r3, #0
 8007900:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007906:	4619      	mov	r1, r3
 8007908:	4817      	ldr	r0, [pc, #92]	; (8007968 <MX_GPIO_Init+0x2bc>)
 800790a:	f002 fbdb 	bl	800a0c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 PD11 PD12
                           PD13 PD14 PD15 PD0
                           PD2 PD3 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 800790e:	f64f 63ed 	movw	r3, #65261	; 0xfeed
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007914:	2300      	movs	r3, #0
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007918:	2301      	movs	r3, #1
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800791c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007920:	4619      	mov	r1, r3
 8007922:	4811      	ldr	r0, [pc, #68]	; (8007968 <MX_GPIO_Init+0x2bc>)
 8007924:	f002 fbce 	bl	800a0c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8007928:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800792e:	2300      	movs	r3, #0
 8007930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007932:	2301      	movs	r3, #1
 8007934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800793a:	4619      	mov	r1, r3
 800793c:	4809      	ldr	r0, [pc, #36]	; (8007964 <MX_GPIO_Init+0x2b8>)
 800793e:	f002 fbc1 	bl	800a0c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007942:	bf00      	nop
 8007944:	3738      	adds	r7, #56	; 0x38
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40023800 	.word	0x40023800
 8007950:	40021000 	.word	0x40021000
 8007954:	40020800 	.word	0x40020800
 8007958:	40021400 	.word	0x40021400
 800795c:	40020000 	.word	0x40020000
 8007960:	40020400 	.word	0x40020400
 8007964:	40021800 	.word	0x40021800
 8007968:	40020c00 	.word	0x40020c00

0800796c <http_thread>:

/* USER CODE BEGIN 4 */
void http_thread(void *arg)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	http_listen();
 8007974:	f7ff fb06 	bl	8006f84 <http_listen>
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <http_server_init>:

void http_server_init()
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af02      	add	r7, sp, #8
	sys_thread_new("http_thread", http_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 8007986:	2300      	movs	r3, #0
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800798e:	2200      	movs	r2, #0
 8007990:	4903      	ldr	r1, [pc, #12]	; (80079a0 <http_server_init+0x20>)
 8007992:	4804      	ldr	r0, [pc, #16]	; (80079a4 <http_server_init+0x24>)
 8007994:	f016 f950 	bl	801dc38 <sys_thread_new>
}
 8007998:	bf00      	nop
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	0800796d 	.word	0x0800796d
 80079a4:	0801fc50 	.word	0x0801fc50

080079a8 <SetTime>:


void SetTime(int hours, int minutes, int seconds, int day, int month, int year)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08a      	sub	sp, #40	; 0x28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
	RTC_TimeTypeDef sTime = {0};
 80079b6:	f107 0314 	add.w	r3, r7, #20
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	605a      	str	r2, [r3, #4]
 80079c0:	609a      	str	r2, [r3, #8]
 80079c2:	60da      	str	r2, [r3, #12]
 80079c4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 80079c6:	2300      	movs	r3, #0
 80079c8:	613b      	str	r3, [r7, #16]

	sTime.Hours = hours;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	753b      	strb	r3, [r7, #20]
	sTime.Minutes = minutes;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	757b      	strb	r3, [r7, #21]
	sTime.Seconds = seconds;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	75bb      	strb	r3, [r7, #22]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80079dc:	2300      	movs	r3, #0
 80079de:	623b      	str	r3, [r7, #32]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80079e0:	2300      	movs	r3, #0
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80079e4:	f107 0314 	add.w	r3, r7, #20
 80079e8:	2200      	movs	r2, #0
 80079ea:	4619      	mov	r1, r3
 80079ec:	4830      	ldr	r0, [pc, #192]	; (8007ab0 <SetTime+0x108>)
 80079ee:	f003 fef5 	bl	800b7dc <HAL_RTC_SetTime>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <SetTime+0x54>
	{
		Error_Handler();
 80079f8:	f000 f926 	bl	8007c48 <Error_Handler>
	}

	sDate.Date = day;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	74bb      	strb	r3, [r7, #18]
	sDate.Year = year;
 8007a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	74fb      	strb	r3, [r7, #19]

	switch (month)
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	2b0b      	cmp	r3, #11
 8007a0e:	d83f      	bhi.n	8007a90 <SetTime+0xe8>
 8007a10:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <SetTime+0x70>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a49 	.word	0x08007a49
 8007a1c:	08007a4f 	.word	0x08007a4f
 8007a20:	08007a55 	.word	0x08007a55
 8007a24:	08007a5b 	.word	0x08007a5b
 8007a28:	08007a61 	.word	0x08007a61
 8007a2c:	08007a67 	.word	0x08007a67
 8007a30:	08007a6d 	.word	0x08007a6d
 8007a34:	08007a73 	.word	0x08007a73
 8007a38:	08007a79 	.word	0x08007a79
 8007a3c:	08007a7f 	.word	0x08007a7f
 8007a40:	08007a85 	.word	0x08007a85
 8007a44:	08007a8b 	.word	0x08007a8b
	{
	case 1:
		sDate.Month = RTC_MONTH_JANUARY;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	747b      	strb	r3, [r7, #17]
		break;
 8007a4c:	e020      	b.n	8007a90 <SetTime+0xe8>
	case 2:
		sDate.Month = RTC_MONTH_FEBRUARY;
 8007a4e:	2302      	movs	r3, #2
 8007a50:	747b      	strb	r3, [r7, #17]
		break;
 8007a52:	e01d      	b.n	8007a90 <SetTime+0xe8>
	case 3:
		sDate.Month = RTC_MONTH_MARCH;
 8007a54:	2303      	movs	r3, #3
 8007a56:	747b      	strb	r3, [r7, #17]
		break;
 8007a58:	e01a      	b.n	8007a90 <SetTime+0xe8>
	case 4:
		sDate.Month = RTC_MONTH_APRIL;
 8007a5a:	2304      	movs	r3, #4
 8007a5c:	747b      	strb	r3, [r7, #17]
		break;
 8007a5e:	e017      	b.n	8007a90 <SetTime+0xe8>
	case 5:
		sDate.Month = RTC_MONTH_MAY;
 8007a60:	2305      	movs	r3, #5
 8007a62:	747b      	strb	r3, [r7, #17]
		break;
 8007a64:	e014      	b.n	8007a90 <SetTime+0xe8>
	case 6:
		sDate.Month = RTC_MONTH_JUNE;
 8007a66:	2306      	movs	r3, #6
 8007a68:	747b      	strb	r3, [r7, #17]
		break;
 8007a6a:	e011      	b.n	8007a90 <SetTime+0xe8>
	case 7:
		sDate.Month = RTC_MONTH_JULY;
 8007a6c:	2307      	movs	r3, #7
 8007a6e:	747b      	strb	r3, [r7, #17]
		break;
 8007a70:	e00e      	b.n	8007a90 <SetTime+0xe8>
	case 8:
		sDate.Month = RTC_MONTH_AUGUST;
 8007a72:	2308      	movs	r3, #8
 8007a74:	747b      	strb	r3, [r7, #17]
		break;
 8007a76:	e00b      	b.n	8007a90 <SetTime+0xe8>
	case 9:
		sDate.Month = RTC_MONTH_SEPTEMBER;
 8007a78:	2309      	movs	r3, #9
 8007a7a:	747b      	strb	r3, [r7, #17]
		break;
 8007a7c:	e008      	b.n	8007a90 <SetTime+0xe8>
	case 10:
		sDate.Month = RTC_MONTH_OCTOBER;
 8007a7e:	2310      	movs	r3, #16
 8007a80:	747b      	strb	r3, [r7, #17]
		break;
 8007a82:	e005      	b.n	8007a90 <SetTime+0xe8>
	case 11:
		sDate.Month = RTC_MONTH_NOVEMBER;
 8007a84:	2311      	movs	r3, #17
 8007a86:	747b      	strb	r3, [r7, #17]
		break;
 8007a88:	e002      	b.n	8007a90 <SetTime+0xe8>
	case 12:
		sDate.Month = RTC_MONTH_DECEMBER;
 8007a8a:	2312      	movs	r3, #18
 8007a8c:	747b      	strb	r3, [r7, #17]
		break;
 8007a8e:	bf00      	nop
	}

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8007a90:	f107 0310 	add.w	r3, r7, #16
 8007a94:	2200      	movs	r2, #0
 8007a96:	4619      	mov	r1, r3
 8007a98:	4805      	ldr	r0, [pc, #20]	; (8007ab0 <SetTime+0x108>)
 8007a9a:	f003 ff97 	bl	800b9cc <HAL_RTC_SetDate>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <SetTime+0x100>
	{
		Error_Handler();
 8007aa4:	f000 f8d0 	bl	8007c48 <Error_Handler>
	}
}
 8007aa8:	bf00      	nop
 8007aaa:	3728      	adds	r7, #40	; 0x28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	200016fc 	.word	0x200016fc

08007ab4 <GetTime>:

const char * GetTime()
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef sTime = {0};
 8007aba:	1d3b      	adds	r3, r7, #4
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	605a      	str	r2, [r3, #4]
 8007ac2:	609a      	str	r2, [r3, #8]
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8007ac8:	2300      	movs	r3, #0
 8007aca:	603b      	str	r3, [r7, #0]

	if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8007acc:	1d3b      	adds	r3, r7, #4
 8007ace:	2200      	movs	r2, #0
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4810      	ldr	r0, [pc, #64]	; (8007b14 <GetTime+0x60>)
 8007ad4:	f003 ff1c 	bl	800b910 <HAL_RTC_GetTime>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <GetTime+0x2e>
	{
		Error_Handler();
 8007ade:	f000 f8b3 	bl	8007c48 <Error_Handler>
	}
	if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	480a      	ldr	r0, [pc, #40]	; (8007b14 <GetTime+0x60>)
 8007aea:	f003 fff3 	bl	800bad4 <HAL_RTC_GetDate>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <GetTime+0x44>
	{
		Error_Handler();
 8007af4:	f000 f8a8 	bl	8007c48 <Error_Handler>
	}

	return TimeToString(sTime, sDate);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	1d3b      	adds	r3, r7, #4
 8007b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b04:	f7ff fa7c 	bl	8007000 <TimeToString>
 8007b08:	4603      	mov	r3, r0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	200016fc 	.word	0x200016fc

08007b18 <_write>:

int _write(int file, char *ptr, int len)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8007b24:	2300      	movs	r3, #0
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	e009      	b.n	8007b3e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	60ba      	str	r2, [r7, #8]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff fc4a 	bl	80073cc <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	617b      	str	r3, [r7, #20]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	dbf1      	blt.n	8007b2a <_write+0x12>
	}

	return len;
 8007b46:	687b      	ldr	r3, [r7, #4]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8007b58:	f004 fd94 	bl	800c684 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
	http_server_init();
 8007b5c:	f7ff ff10 	bl	8007980 <http_server_init>
	/* Infinite loop */
	for(;;)
	{
		CheckAndSwitchLights();
 8007b60:	f7ff fa44 	bl	8006fec <CheckAndSwitchLights>
		osDelay(1);
 8007b64:	2001      	movs	r0, #1
 8007b66:	f005 fc4b 	bl	800d400 <osDelay>
		CheckAndSwitchLights();
 8007b6a:	e7f9      	b.n	8007b60 <StartDefaultTask+0x10>

08007b6c <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007b72:	463b      	mov	r3, r7
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	605a      	str	r2, [r3, #4]
 8007b7a:	609a      	str	r2, [r3, #8]
 8007b7c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007b7e:	f000 fd0f 	bl	80085a0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007b82:	2301      	movs	r3, #1
 8007b84:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 8007b8a:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <MPU_Config+0x58>)
 8007b8c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32B;
 8007b8e:	2304      	movs	r3, #4
 8007b90:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007bae:	463b      	mov	r3, r7
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 fd2d 	bl	8008610 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007bb6:	2004      	movs	r0, #4
 8007bb8:	f000 fd0a 	bl	80085d0 <HAL_MPU_Enable>

}
 8007bbc:	bf00      	nop
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	2007c000 	.word	0x2007c000

08007bc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08a      	sub	sp, #40	; 0x28
 8007bcc:	af02      	add	r7, sp, #8
 8007bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a19      	ldr	r2, [pc, #100]	; (8007c3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d101      	bne.n	8007bde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007bda:	f000 fbbb 	bl	8008354 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim == &htim2)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a17      	ldr	r2, [pc, #92]	; (8007c40 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d126      	bne.n	8007c34 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		RTC_TimeTypeDef sTime = {0};
 8007be6:	f107 030c 	add.w	r3, r7, #12
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	605a      	str	r2, [r3, #4]
 8007bf0:	609a      	str	r2, [r3, #8]
 8007bf2:	60da      	str	r2, [r3, #12]
 8007bf4:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = {0};
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60bb      	str	r3, [r7, #8]

		if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 8007bfa:	f107 030c 	add.w	r3, r7, #12
 8007bfe:	2200      	movs	r2, #0
 8007c00:	4619      	mov	r1, r3
 8007c02:	4810      	ldr	r0, [pc, #64]	; (8007c44 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8007c04:	f003 fe84 	bl	800b910 <HAL_RTC_GetTime>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d112      	bne.n	8007c34 <HAL_TIM_PeriodElapsedCallback+0x6c>
				HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK)
 8007c0e:	f107 0308 	add.w	r3, r7, #8
 8007c12:	2200      	movs	r2, #0
 8007c14:	4619      	mov	r1, r3
 8007c16:	480b      	ldr	r0, [pc, #44]	; (8007c44 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8007c18:	f003 ff5c 	bl	800bad4 <HAL_RTC_GetDate>
 8007c1c:	4603      	mov	r3, r0
		if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d108      	bne.n	8007c34 <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			TriggerScheduler(sTime, sDate);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	f107 030c 	add.w	r3, r7, #12
 8007c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c30:	f7ff f9b2 	bl	8006f98 <TriggerScheduler>
		}
	}
  /* USER CODE END Callback 1 */
}
 8007c34:	bf00      	nop
 8007c36:	3720      	adds	r7, #32
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	2000171c 	.word	0x2000171c
 8007c44:	200016fc 	.word	0x200016fc

08007c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007c4c:	b672      	cpsid	i
}
 8007c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8007c50:	e7fe      	b.n	8007c50 <Error_Handler+0x8>
	...

08007c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8007c5a:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <HAL_MspInit+0x4c>)
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	4a10      	ldr	r2, [pc, #64]	; (8007ca0 <HAL_MspInit+0x4c>)
 8007c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c64:	6413      	str	r3, [r2, #64]	; 0x40
 8007c66:	4b0e      	ldr	r3, [pc, #56]	; (8007ca0 <HAL_MspInit+0x4c>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c6e:	607b      	str	r3, [r7, #4]
 8007c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c72:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <HAL_MspInit+0x4c>)
 8007c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c76:	4a0a      	ldr	r2, [pc, #40]	; (8007ca0 <HAL_MspInit+0x4c>)
 8007c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8007c7e:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <HAL_MspInit+0x4c>)
 8007c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c86:	603b      	str	r3, [r7, #0]
 8007c88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	210f      	movs	r1, #15
 8007c8e:	f06f 0001 	mvn.w	r0, #1
 8007c92:	f000 fc5b 	bl	800854c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	40023800 	.word	0x40023800

08007ca4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b0a6      	sub	sp, #152	; 0x98
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007cac:	f107 0308 	add.w	r3, r7, #8
 8007cb0:	2290      	movs	r2, #144	; 0x90
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f016 fa75 	bl	801e1a4 <memset>
  if(hrtc->Instance==RTC)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a0e      	ldr	r2, [pc, #56]	; (8007cf8 <HAL_RTC_MspInit+0x54>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d114      	bne.n	8007cee <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007cc4:	2320      	movs	r3, #32
 8007cc6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ccc:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007cce:	f107 0308 	add.w	r3, r7, #8
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f003 f8d6 	bl	800ae84 <HAL_RCCEx_PeriphCLKConfig>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8007cde:	f7ff ffb3 	bl	8007c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007ce2:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <HAL_RTC_MspInit+0x58>)
 8007ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce6:	4a05      	ldr	r2, [pc, #20]	; (8007cfc <HAL_RTC_MspInit+0x58>)
 8007ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cec:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007cee:	bf00      	nop
 8007cf0:	3798      	adds	r7, #152	; 0x98
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	40002800 	.word	0x40002800
 8007cfc:	40023800 	.word	0x40023800

08007d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d10:	d113      	bne.n	8007d3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007d12:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <HAL_TIM_Base_MspInit+0x44>)
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	4a0b      	ldr	r2, [pc, #44]	; (8007d44 <HAL_TIM_Base_MspInit+0x44>)
 8007d18:	f043 0301 	orr.w	r3, r3, #1
 8007d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8007d1e:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <HAL_TIM_Base_MspInit+0x44>)
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	60fb      	str	r3, [r7, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2105      	movs	r1, #5
 8007d2e:	201c      	movs	r0, #28
 8007d30:	f000 fc0c 	bl	800854c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007d34:	201c      	movs	r0, #28
 8007d36:	f000 fc25 	bl	8008584 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40023800 	.word	0x40023800

08007d48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08c      	sub	sp, #48	; 0x30
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007d58:	4b2f      	ldr	r3, [pc, #188]	; (8007e18 <HAL_InitTick+0xd0>)
 8007d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5c:	4a2e      	ldr	r2, [pc, #184]	; (8007e18 <HAL_InitTick+0xd0>)
 8007d5e:	f043 0301 	orr.w	r3, r3, #1
 8007d62:	6453      	str	r3, [r2, #68]	; 0x44
 8007d64:	4b2c      	ldr	r3, [pc, #176]	; (8007e18 <HAL_InitTick+0xd0>)
 8007d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	60bb      	str	r3, [r7, #8]
 8007d6e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007d70:	f107 020c 	add.w	r2, r7, #12
 8007d74:	f107 0310 	add.w	r3, r7, #16
 8007d78:	4611      	mov	r1, r2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f003 f850 	bl	800ae20 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8007d80:	f003 f83a 	bl	800adf8 <HAL_RCC_GetPCLK2Freq>
 8007d84:	4603      	mov	r3, r0
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	4a23      	ldr	r2, [pc, #140]	; (8007e1c <HAL_InitTick+0xd4>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	0c9b      	lsrs	r3, r3, #18
 8007d94:	3b01      	subs	r3, #1
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007d98:	4b21      	ldr	r3, [pc, #132]	; (8007e20 <HAL_InitTick+0xd8>)
 8007d9a:	4a22      	ldr	r2, [pc, #136]	; (8007e24 <HAL_InitTick+0xdc>)
 8007d9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007d9e:	4b20      	ldr	r3, [pc, #128]	; (8007e20 <HAL_InitTick+0xd8>)
 8007da0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007da4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007da6:	4a1e      	ldr	r2, [pc, #120]	; (8007e20 <HAL_InitTick+0xd8>)
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007dac:	4b1c      	ldr	r3, [pc, #112]	; (8007e20 <HAL_InitTick+0xd8>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007db2:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <HAL_InitTick+0xd8>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007db8:	4b19      	ldr	r3, [pc, #100]	; (8007e20 <HAL_InitTick+0xd8>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8007dbe:	4818      	ldr	r0, [pc, #96]	; (8007e20 <HAL_InitTick+0xd8>)
 8007dc0:	f003 ff98 	bl	800bcf4 <HAL_TIM_Base_Init>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8007dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d11b      	bne.n	8007e0a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007dd2:	4813      	ldr	r0, [pc, #76]	; (8007e20 <HAL_InitTick+0xd8>)
 8007dd4:	f003 ffe6 	bl	800bda4 <HAL_TIM_Base_Start_IT>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007dde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d111      	bne.n	8007e0a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007de6:	2019      	movs	r0, #25
 8007de8:	f000 fbcc 	bl	8008584 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b0f      	cmp	r3, #15
 8007df0:	d808      	bhi.n	8007e04 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8007df2:	2200      	movs	r2, #0
 8007df4:	6879      	ldr	r1, [r7, #4]
 8007df6:	2019      	movs	r0, #25
 8007df8:	f000 fba8 	bl	800854c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007dfc:	4a0a      	ldr	r2, [pc, #40]	; (8007e28 <HAL_InitTick+0xe0>)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6013      	str	r3, [r2, #0]
 8007e02:	e002      	b.n	8007e0a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8007e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3730      	adds	r7, #48	; 0x30
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	40023800 	.word	0x40023800
 8007e1c:	431bde83 	.word	0x431bde83
 8007e20:	2000176c 	.word	0x2000176c
 8007e24:	40010000 	.word	0x40010000
 8007e28:	20000004 	.word	0x20000004

08007e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007e30:	e7fe      	b.n	8007e30 <NMI_Handler+0x4>

08007e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e32:	b480      	push	{r7}
 8007e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e36:	e7fe      	b.n	8007e36 <HardFault_Handler+0x4>

08007e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e3c:	e7fe      	b.n	8007e3c <MemManage_Handler+0x4>

08007e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e42:	e7fe      	b.n	8007e42 <BusFault_Handler+0x4>

08007e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e48:	e7fe      	b.n	8007e48 <UsageFault_Handler+0x4>

08007e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e4e:	bf00      	nop
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007e5c:	4802      	ldr	r0, [pc, #8]	; (8007e68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007e5e:	f004 f819 	bl	800be94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007e62:	bf00      	nop
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	2000176c 	.word	0x2000176c

08007e6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007e70:	4802      	ldr	r0, [pc, #8]	; (8007e7c <TIM2_IRQHandler+0x10>)
 8007e72:	f004 f80f 	bl	800be94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007e76:	bf00      	nop
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	2000171c 	.word	0x2000171c

08007e80 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8007e84:	4802      	ldr	r0, [pc, #8]	; (8007e90 <ETH_IRQHandler+0x10>)
 8007e86:	f000 ff81 	bl	8008d8c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8007e8a:	bf00      	nop
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	200061c8 	.word	0x200061c8

08007e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  return 1;
 8007e98:	2301      	movs	r3, #1
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <_kill>:

int _kill(int pid, int sig)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007eae:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <_kill+0x20>)
 8007eb0:	2216      	movs	r2, #22
 8007eb2:	601a      	str	r2, [r3, #0]
  return -1;
 8007eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	2000fb24 	.word	0x2000fb24

08007ec8 <_exit>:

void _exit (int status)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff ffe5 	bl	8007ea4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007eda:	e7fe      	b.n	8007eda <_exit+0x12>

08007edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ee8:	2300      	movs	r3, #0
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	e00a      	b.n	8007f04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007eee:	f3af 8000 	nop.w
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	60ba      	str	r2, [r7, #8]
 8007efa:	b2ca      	uxtb	r2, r1
 8007efc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	3301      	adds	r3, #1
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	dbf0      	blt.n	8007eee <_read+0x12>
  }

  return len;
 8007f0c:	687b      	ldr	r3, [r7, #4]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <_close>:
  }
  return len;
}

int _close(int file)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b083      	sub	sp, #12
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f3e:	605a      	str	r2, [r3, #4]
  return 0;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <_isatty>:

int _isatty(int file)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007f56:	2301      	movs	r3, #1
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
	...

08007f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f88:	4a14      	ldr	r2, [pc, #80]	; (8007fdc <_sbrk+0x5c>)
 8007f8a:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <_sbrk+0x60>)
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f94:	4b13      	ldr	r3, [pc, #76]	; (8007fe4 <_sbrk+0x64>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007f9c:	4b11      	ldr	r3, [pc, #68]	; (8007fe4 <_sbrk+0x64>)
 8007f9e:	4a12      	ldr	r2, [pc, #72]	; (8007fe8 <_sbrk+0x68>)
 8007fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007fa2:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <_sbrk+0x64>)
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4413      	add	r3, r2
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d205      	bcs.n	8007fbc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8007fb0:	4b0e      	ldr	r3, [pc, #56]	; (8007fec <_sbrk+0x6c>)
 8007fb2:	220c      	movs	r2, #12
 8007fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fba:	e009      	b.n	8007fd0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8007fbc:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <_sbrk+0x64>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007fc2:	4b08      	ldr	r3, [pc, #32]	; (8007fe4 <_sbrk+0x64>)
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4413      	add	r3, r2
 8007fca:	4a06      	ldr	r2, [pc, #24]	; (8007fe4 <_sbrk+0x64>)
 8007fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007fce:	68fb      	ldr	r3, [r7, #12]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	20080000 	.word	0x20080000
 8007fe0:	00000400 	.word	0x00000400
 8007fe4:	200017b8 	.word	0x200017b8
 8007fe8:	2000fb28 	.word	0x2000fb28
 8007fec:	2000fb24 	.word	0x2000fb24

08007ff0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ff4:	4b06      	ldr	r3, [pc, #24]	; (8008010 <SystemInit+0x20>)
 8007ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffa:	4a05      	ldr	r2, [pc, #20]	; (8008010 <SystemInit+0x20>)
 8007ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008004:	bf00      	nop
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	e000ed00 	.word	0xe000ed00

08008014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800804c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008018:	480d      	ldr	r0, [pc, #52]	; (8008050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800801a:	490e      	ldr	r1, [pc, #56]	; (8008054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800801c:	4a0e      	ldr	r2, [pc, #56]	; (8008058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800801e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008020:	e002      	b.n	8008028 <LoopCopyDataInit>

08008022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008026:	3304      	adds	r3, #4

08008028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800802a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800802c:	d3f9      	bcc.n	8008022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800802e:	4a0b      	ldr	r2, [pc, #44]	; (800805c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008030:	4c0b      	ldr	r4, [pc, #44]	; (8008060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008034:	e001      	b.n	800803a <LoopFillZerobss>

08008036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008038:	3204      	adds	r2, #4

0800803a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800803a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800803c:	d3fb      	bcc.n	8008036 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800803e:	f7ff ffd7 	bl	8007ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008042:	f016 f825 	bl	801e090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008046:	f7ff f9e9 	bl	800741c <main>
  bx  lr    
 800804a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800804c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8008050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008054:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8008058:	08023850 	.word	0x08023850
  ldr r2, =_sbss
 800805c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8008060:	2000fb28 	.word	0x2000fb28

08008064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008064:	e7fe      	b.n	8008064 <ADC_IRQHandler>

08008066 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00b      	beq.n	800808e <LAN8742_RegisterBusIO+0x28>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d007      	beq.n	800808e <LAN8742_RegisterBusIO+0x28>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <LAN8742_RegisterBusIO+0x28>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d102      	bne.n	8008094 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800808e:	f04f 33ff 	mov.w	r3, #4294967295
 8008092:	e014      	b.n	80080be <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b086      	sub	sp, #24
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	2300      	movs	r3, #0
 80080d8:	60bb      	str	r3, [r7, #8]
 80080da:	2300      	movs	r3, #0
 80080dc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d17c      	bne.n	80081e4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80080fe:	2300      	movs	r3, #0
 8008100:	617b      	str	r3, [r7, #20]
 8008102:	e01c      	b.n	800813e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	f107 0208 	add.w	r2, r7, #8
 800810c:	2112      	movs	r1, #18
 800810e:	6978      	ldr	r0, [r7, #20]
 8008110:	4798      	blx	r3
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	da03      	bge.n	8008120 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8008118:	f06f 0304 	mvn.w	r3, #4
 800811c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800811e:	e00b      	b.n	8008138 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	f003 031f 	and.w	r3, r3, #31
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	429a      	cmp	r2, r3
 800812a:	d105      	bne.n	8008138 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	613b      	str	r3, [r7, #16]
         break;
 8008136:	e005      	b.n	8008144 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	3301      	adds	r3, #1
 800813c:	617b      	str	r3, [r7, #20]
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2b1f      	cmp	r3, #31
 8008142:	d9df      	bls.n	8008104 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b1f      	cmp	r3, #31
 800814a:	d902      	bls.n	8008152 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800814c:	f06f 0302 	mvn.w	r3, #2
 8008150:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d145      	bne.n	80081e4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6810      	ldr	r0, [r2, #0]
 8008160:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008164:	2100      	movs	r1, #0
 8008166:	4798      	blx	r3
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	db37      	blt.n	80081de <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6810      	ldr	r0, [r2, #0]
 8008176:	f107 0208 	add.w	r2, r7, #8
 800817a:	2100      	movs	r1, #0
 800817c:	4798      	blx	r3
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	db28      	blt.n	80081d6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	4798      	blx	r3
 800818a:	4603      	mov	r3, r0
 800818c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800818e:	e01c      	b.n	80081ca <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	4798      	blx	r3
 8008196:	4603      	mov	r3, r0
 8008198:	461a      	mov	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80081a2:	d80e      	bhi.n	80081c2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	6810      	ldr	r0, [r2, #0]
 80081ac:	f107 0208 	add.w	r2, r7, #8
 80081b0:	2100      	movs	r1, #0
 80081b2:	4798      	blx	r3
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	da07      	bge.n	80081ca <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80081ba:	f06f 0304 	mvn.w	r3, #4
 80081be:	613b      	str	r3, [r7, #16]
                 break;
 80081c0:	e010      	b.n	80081e4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80081c2:	f06f 0301 	mvn.w	r3, #1
 80081c6:	613b      	str	r3, [r7, #16]
               break;
 80081c8:	e00c      	b.n	80081e4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1dd      	bne.n	8008190 <LAN8742_Init+0xc6>
 80081d4:	e006      	b.n	80081e4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80081d6:	f06f 0304 	mvn.w	r3, #4
 80081da:	613b      	str	r3, [r7, #16]
 80081dc:	e002      	b.n	80081e4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80081de:	f06f 0303 	mvn.w	r3, #3
 80081e2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d112      	bne.n	8008210 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	4798      	blx	r3
 80081f0:	4603      	mov	r3, r0
 80081f2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80081f4:	bf00      	nop
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	4798      	blx	r3
 80081fc:	4603      	mov	r3, r0
 80081fe:	461a      	mov	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008208:	d9f5      	bls.n	80081f6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8008210:	693b      	ldr	r3, [r7, #16]
 }
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	6810      	ldr	r0, [r2, #0]
 800822e:	f107 020c 	add.w	r2, r7, #12
 8008232:	2101      	movs	r1, #1
 8008234:	4798      	blx	r3
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	da02      	bge.n	8008242 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800823c:	f06f 0304 	mvn.w	r3, #4
 8008240:	e06e      	b.n	8008320 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6810      	ldr	r0, [r2, #0]
 800824a:	f107 020c 	add.w	r2, r7, #12
 800824e:	2101      	movs	r1, #1
 8008250:	4798      	blx	r3
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	da02      	bge.n	800825e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8008258:	f06f 0304 	mvn.w	r3, #4
 800825c:	e060      	b.n	8008320 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8008268:	2301      	movs	r3, #1
 800826a:	e059      	b.n	8008320 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	6810      	ldr	r0, [r2, #0]
 8008274:	f107 020c 	add.w	r2, r7, #12
 8008278:	2100      	movs	r1, #0
 800827a:	4798      	blx	r3
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	da02      	bge.n	8008288 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8008282:	f06f 0304 	mvn.w	r3, #4
 8008286:	e04b      	b.n	8008320 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d11b      	bne.n	80082ca <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d006      	beq.n	80082aa <LAN8742_GetLinkState+0x90>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80082a6:	2302      	movs	r3, #2
 80082a8:	e03a      	b.n	8008320 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e033      	b.n	8008320 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80082c2:	2304      	movs	r3, #4
 80082c4:	e02c      	b.n	8008320 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80082c6:	2305      	movs	r3, #5
 80082c8:	e02a      	b.n	8008320 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6810      	ldr	r0, [r2, #0]
 80082d2:	f107 020c 	add.w	r2, r7, #12
 80082d6:	211f      	movs	r1, #31
 80082d8:	4798      	blx	r3
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	da02      	bge.n	80082e6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80082e0:	f06f 0304 	mvn.w	r3, #4
 80082e4:	e01c      	b.n	8008320 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80082f0:	2306      	movs	r3, #6
 80082f2:	e015      	b.n	8008320 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f003 031c 	and.w	r3, r3, #28
 80082fa:	2b18      	cmp	r3, #24
 80082fc:	d101      	bne.n	8008302 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80082fe:	2302      	movs	r3, #2
 8008300:	e00e      	b.n	8008320 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f003 031c 	and.w	r3, r3, #28
 8008308:	2b08      	cmp	r3, #8
 800830a:	d101      	bne.n	8008310 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800830c:	2303      	movs	r3, #3
 800830e:	e007      	b.n	8008320 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f003 031c 	and.w	r3, r3, #28
 8008316:	2b14      	cmp	r3, #20
 8008318:	d101      	bne.n	800831e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800831a:	2304      	movs	r3, #4
 800831c:	e000      	b.n	8008320 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800831e:	2305      	movs	r3, #5
    }				
  }
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800832c:	4b08      	ldr	r3, [pc, #32]	; (8008350 <HAL_Init+0x28>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a07      	ldr	r2, [pc, #28]	; (8008350 <HAL_Init+0x28>)
 8008332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008338:	2003      	movs	r0, #3
 800833a:	f000 f8fc 	bl	8008536 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800833e:	200f      	movs	r0, #15
 8008340:	f7ff fd02 	bl	8007d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008344:	f7ff fc86 	bl	8007c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	40023c00 	.word	0x40023c00

08008354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <HAL_IncTick+0x20>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	461a      	mov	r2, r3
 800835e:	4b06      	ldr	r3, [pc, #24]	; (8008378 <HAL_IncTick+0x24>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4413      	add	r3, r2
 8008364:	4a04      	ldr	r2, [pc, #16]	; (8008378 <HAL_IncTick+0x24>)
 8008366:	6013      	str	r3, [r2, #0]
}
 8008368:	bf00      	nop
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000008 	.word	0x20000008
 8008378:	200017bc 	.word	0x200017bc

0800837c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
  return uwTick;
 8008380:	4b03      	ldr	r3, [pc, #12]	; (8008390 <HAL_GetTick+0x14>)
 8008382:	681b      	ldr	r3, [r3, #0]
}
 8008384:	4618      	mov	r0, r3
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	200017bc 	.word	0x200017bc

08008394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800839c:	f7ff ffee 	bl	800837c <HAL_GetTick>
 80083a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ac:	d005      	beq.n	80083ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80083ae:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <HAL_Delay+0x44>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4413      	add	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80083ba:	bf00      	nop
 80083bc:	f7ff ffde 	bl	800837c <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d8f7      	bhi.n	80083bc <HAL_Delay+0x28>
  {
  }
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20000008 	.word	0x20000008

080083dc <__NVIC_SetPriorityGrouping>:
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083ec:	4b0b      	ldr	r3, [pc, #44]	; (800841c <__NVIC_SetPriorityGrouping+0x40>)
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80083f8:	4013      	ands	r3, r2
 80083fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008404:	4b06      	ldr	r3, [pc, #24]	; (8008420 <__NVIC_SetPriorityGrouping+0x44>)
 8008406:	4313      	orrs	r3, r2
 8008408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800840a:	4a04      	ldr	r2, [pc, #16]	; (800841c <__NVIC_SetPriorityGrouping+0x40>)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	60d3      	str	r3, [r2, #12]
}
 8008410:	bf00      	nop
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	e000ed00 	.word	0xe000ed00
 8008420:	05fa0000 	.word	0x05fa0000

08008424 <__NVIC_GetPriorityGrouping>:
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008428:	4b04      	ldr	r3, [pc, #16]	; (800843c <__NVIC_GetPriorityGrouping+0x18>)
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	0a1b      	lsrs	r3, r3, #8
 800842e:	f003 0307 	and.w	r3, r3, #7
}
 8008432:	4618      	mov	r0, r3
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	e000ed00 	.word	0xe000ed00

08008440 <__NVIC_EnableIRQ>:
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800844a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800844e:	2b00      	cmp	r3, #0
 8008450:	db0b      	blt.n	800846a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008452:	79fb      	ldrb	r3, [r7, #7]
 8008454:	f003 021f 	and.w	r2, r3, #31
 8008458:	4907      	ldr	r1, [pc, #28]	; (8008478 <__NVIC_EnableIRQ+0x38>)
 800845a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	2001      	movs	r0, #1
 8008462:	fa00 f202 	lsl.w	r2, r0, r2
 8008466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800846a:	bf00      	nop
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	e000e100 	.word	0xe000e100

0800847c <__NVIC_SetPriority>:
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	4603      	mov	r3, r0
 8008484:	6039      	str	r1, [r7, #0]
 8008486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800848c:	2b00      	cmp	r3, #0
 800848e:	db0a      	blt.n	80084a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	b2da      	uxtb	r2, r3
 8008494:	490c      	ldr	r1, [pc, #48]	; (80084c8 <__NVIC_SetPriority+0x4c>)
 8008496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800849a:	0112      	lsls	r2, r2, #4
 800849c:	b2d2      	uxtb	r2, r2
 800849e:	440b      	add	r3, r1
 80084a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80084a4:	e00a      	b.n	80084bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	4908      	ldr	r1, [pc, #32]	; (80084cc <__NVIC_SetPriority+0x50>)
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	f003 030f 	and.w	r3, r3, #15
 80084b2:	3b04      	subs	r3, #4
 80084b4:	0112      	lsls	r2, r2, #4
 80084b6:	b2d2      	uxtb	r2, r2
 80084b8:	440b      	add	r3, r1
 80084ba:	761a      	strb	r2, [r3, #24]
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	e000e100 	.word	0xe000e100
 80084cc:	e000ed00 	.word	0xe000ed00

080084d0 <NVIC_EncodePriority>:
{
 80084d0:	b480      	push	{r7}
 80084d2:	b089      	sub	sp, #36	; 0x24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	f1c3 0307 	rsb	r3, r3, #7
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	bf28      	it	cs
 80084ee:	2304      	movcs	r3, #4
 80084f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	3304      	adds	r3, #4
 80084f6:	2b06      	cmp	r3, #6
 80084f8:	d902      	bls.n	8008500 <NVIC_EncodePriority+0x30>
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	3b03      	subs	r3, #3
 80084fe:	e000      	b.n	8008502 <NVIC_EncodePriority+0x32>
 8008500:	2300      	movs	r3, #0
 8008502:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008504:	f04f 32ff 	mov.w	r2, #4294967295
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	fa02 f303 	lsl.w	r3, r2, r3
 800850e:	43da      	mvns	r2, r3
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	401a      	ands	r2, r3
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008518:	f04f 31ff 	mov.w	r1, #4294967295
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	fa01 f303 	lsl.w	r3, r1, r3
 8008522:	43d9      	mvns	r1, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008528:	4313      	orrs	r3, r2
}
 800852a:	4618      	mov	r0, r3
 800852c:	3724      	adds	r7, #36	; 0x24
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b082      	sub	sp, #8
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7ff ff4c 	bl	80083dc <__NVIC_SetPriorityGrouping>
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
 8008558:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800855e:	f7ff ff61 	bl	8008424 <__NVIC_GetPriorityGrouping>
 8008562:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	68b9      	ldr	r1, [r7, #8]
 8008568:	6978      	ldr	r0, [r7, #20]
 800856a:	f7ff ffb1 	bl	80084d0 <NVIC_EncodePriority>
 800856e:	4602      	mov	r2, r0
 8008570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008574:	4611      	mov	r1, r2
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff ff80 	bl	800847c <__NVIC_SetPriority>
}
 800857c:	bf00      	nop
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800858e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff ff54 	bl	8008440 <__NVIC_EnableIRQ>
}
 8008598:	bf00      	nop
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80085a4:	f3bf 8f5f 	dmb	sy
}
 80085a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80085aa:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <HAL_MPU_Disable+0x28>)
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	4a06      	ldr	r2, [pc, #24]	; (80085c8 <HAL_MPU_Disable+0x28>)
 80085b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085b4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <HAL_MPU_Disable+0x2c>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	605a      	str	r2, [r3, #4]
}
 80085bc:	bf00      	nop
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	e000ed00 	.word	0xe000ed00
 80085cc:	e000ed90 	.word	0xe000ed90

080085d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80085d8:	4a0b      	ldr	r2, [pc, #44]	; (8008608 <HAL_MPU_Enable+0x38>)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f043 0301 	orr.w	r3, r3, #1
 80085e0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80085e2:	4b0a      	ldr	r3, [pc, #40]	; (800860c <HAL_MPU_Enable+0x3c>)
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	4a09      	ldr	r2, [pc, #36]	; (800860c <HAL_MPU_Enable+0x3c>)
 80085e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ec:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80085ee:	f3bf 8f4f 	dsb	sy
}
 80085f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80085f4:	f3bf 8f6f 	isb	sy
}
 80085f8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	e000ed90 	.word	0xe000ed90
 800860c:	e000ed00 	.word	0xe000ed00

08008610 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	785a      	ldrb	r2, [r3, #1]
 800861c:	4b1d      	ldr	r3, [pc, #116]	; (8008694 <HAL_MPU_ConfigRegion+0x84>)
 800861e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d029      	beq.n	800867c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8008628:	4a1a      	ldr	r2, [pc, #104]	; (8008694 <HAL_MPU_ConfigRegion+0x84>)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7b1b      	ldrb	r3, [r3, #12]
 8008634:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	7adb      	ldrb	r3, [r3, #11]
 800863a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800863c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	7a9b      	ldrb	r3, [r3, #10]
 8008642:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008644:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	7b5b      	ldrb	r3, [r3, #13]
 800864a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800864c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	7b9b      	ldrb	r3, [r3, #14]
 8008652:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008654:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	7bdb      	ldrb	r3, [r3, #15]
 800865a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800865c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7a5b      	ldrb	r3, [r3, #9]
 8008662:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008664:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7a1b      	ldrb	r3, [r3, #8]
 800866a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800866c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	7812      	ldrb	r2, [r2, #0]
 8008672:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008674:	4a07      	ldr	r2, [pc, #28]	; (8008694 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008676:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008678:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800867a:	e005      	b.n	8008688 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800867c:	4b05      	ldr	r3, [pc, #20]	; (8008694 <HAL_MPU_ConfigRegion+0x84>)
 800867e:	2200      	movs	r2, #0
 8008680:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8008682:	4b04      	ldr	r3, [pc, #16]	; (8008694 <HAL_MPU_ConfigRegion+0x84>)
 8008684:	2200      	movs	r2, #0
 8008686:	611a      	str	r2, [r3, #16]
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	e000ed90 	.word	0xe000ed90

08008698 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e06a      	b.n	8008780 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d106      	bne.n	80086c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2223      	movs	r2, #35	; 0x23
 80086b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f004 fbf9 	bl	800ceb4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086c2:	4b31      	ldr	r3, [pc, #196]	; (8008788 <HAL_ETH_Init+0xf0>)
 80086c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c6:	4a30      	ldr	r2, [pc, #192]	; (8008788 <HAL_ETH_Init+0xf0>)
 80086c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086cc:	6453      	str	r3, [r2, #68]	; 0x44
 80086ce:	4b2e      	ldr	r3, [pc, #184]	; (8008788 <HAL_ETH_Init+0xf0>)
 80086d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086d6:	60bb      	str	r3, [r7, #8]
 80086d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80086da:	4b2c      	ldr	r3, [pc, #176]	; (800878c <HAL_ETH_Init+0xf4>)
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	4a2b      	ldr	r2, [pc, #172]	; (800878c <HAL_ETH_Init+0xf4>)
 80086e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80086e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80086e6:	4b29      	ldr	r3, [pc, #164]	; (800878c <HAL_ETH_Init+0xf4>)
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	4927      	ldr	r1, [pc, #156]	; (800878c <HAL_ETH_Init+0xf4>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80086f4:	4b25      	ldr	r3, [pc, #148]	; (800878c <HAL_ETH_Init+0xf4>)
 80086f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	6812      	ldr	r2, [r2, #0]
 8008706:	f043 0301 	orr.w	r3, r3, #1
 800870a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800870e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008710:	f7ff fe34 	bl	800837c <HAL_GetTick>
 8008714:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8008716:	e011      	b.n	800873c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8008718:	f7ff fe30 	bl	800837c <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008726:	d909      	bls.n	800873c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2204      	movs	r2, #4
 800872c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	22e0      	movs	r2, #224	; 0xe0
 8008734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e021      	b.n	8008780 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e4      	bne.n	8008718 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 ff4c 	bl	80095ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fff3 	bl	8009740 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 f849 	bl	80097f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	461a      	mov	r2, r3
 8008766:	2100      	movs	r1, #0
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 ffb1 	bl	80096d0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2210      	movs	r2, #16
 800877a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	40023800 	.word	0x40023800
 800878c:	40013800 	.word	0x40013800

08008790 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800879e:	2b10      	cmp	r3, #16
 80087a0:	d17b      	bne.n	800889a <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2223      	movs	r2, #35	; 0x23
 80087a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80087be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	4b35      	ldr	r3, [pc, #212]	; (80088a4 <HAL_ETH_Start_IT+0x114>)
 80087ce:	430b      	orrs	r3, r1
 80087d0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80087e4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2204      	movs	r2, #4
 80087ec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f9fc 	bl	8008bec <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f042 0208 	orr.w	r2, r2, #8
 8008802:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800880c:	2001      	movs	r0, #1
 800880e:	f7ff fdc1 	bl	8008394 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f042 0204 	orr.w	r2, r2, #4
 8008828:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008832:	2001      	movs	r0, #1
 8008834:	f7ff fdae 	bl	8008394 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fd74 	bl	800932e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008858:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800885c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6812      	ldr	r2, [r2, #0]
 800886c:	f043 0302 	orr.w	r3, r3, #2
 8008870:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008874:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800887e:	69d9      	ldr	r1, [r3, #28]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	4b08      	ldr	r3, [pc, #32]	; (80088a8 <HAL_ETH_Start_IT+0x118>)
 8008886:	430b      	orrs	r3, r1
 8008888:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800888c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2223      	movs	r2, #35	; 0x23
 8008892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	e000      	b.n	800889c <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
  }
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	00020060 	.word	0x00020060
 80088a8:	0001a0c1 	.word	0x0001a0c1

080088ac <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ba:	2b23      	cmp	r3, #35	; 0x23
 80088bc:	d16e      	bne.n	800899c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2223      	movs	r2, #35	; 0x23
 80088c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ce:	69d9      	ldr	r1, [r3, #28]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	4b34      	ldr	r3, [pc, #208]	; (80089a8 <HAL_ETH_Stop_IT+0xfc>)
 80088d6:	400b      	ands	r3, r1
 80088d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088dc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	6812      	ldr	r2, [r2, #0]
 80088ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088f4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	6812      	ldr	r2, [r2, #0]
 8008904:	f023 0302 	bic.w	r3, r3, #2
 8008908:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800890c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0204 	bic.w	r2, r2, #4
 800891c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008926:	2001      	movs	r0, #1
 8008928:	f7ff fd34 	bl	8008394 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fcfa 	bl	800932e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 0208 	bic.w	r2, r2, #8
 8008948:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008952:	2001      	movs	r0, #1
 8008954:	f7ff fd1e 	bl	8008394 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8008960:	2300      	movs	r3, #0
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	e00e      	b.n	8008984 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	3212      	adds	r2, #18
 800896c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008970:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	3301      	adds	r3, #1
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2b03      	cmp	r3, #3
 8008988:	d9ed      	bls.n	8008966 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2210      	movs	r2, #16
 8008994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	e000      	b.n	800899e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
  }
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	fffe5f3e 	.word	0xfffe5f3e

080089ac <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d109      	bne.n	80089d0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c2:	f043 0201 	orr.w	r2, r3, #1
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e045      	b.n	8008a5c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089d6:	2b23      	cmp	r3, #35	; 0x23
 80089d8:	d13f      	bne.n	8008a5a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80089e2:	2201      	movs	r2, #1
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 ff70 	bl	80098cc <ETH_Prepare_Tx_Descriptors>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d009      	beq.n	8008a06 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f8:	f043 0202 	orr.w	r2, r3, #2
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e02a      	b.n	8008a5c <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8008a06:	f3bf 8f4f 	dsb	sy
}
 8008a0a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	629a      	str	r2, [r3, #40]	; 0x28
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d904      	bls.n	8008a28 <HAL_ETH_Transmit_IT+0x7c>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a22:	1f1a      	subs	r2, r3, #4
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	f003 0304 	and.w	r3, r3, #4
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00d      	beq.n	8008a56 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a42:	461a      	mov	r2, r3
 8008a44:	2304      	movs	r3, #4
 8008a46:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a50:	461a      	mov	r2, r3
 8008a52:	2300      	movs	r3, #0
 8008a54:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	e000      	b.n	8008a5c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
  }
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d109      	bne.n	8008a90 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a82:	f043 0201 	orr.w	r2, r3, #1
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e0a8      	b.n	8008be2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a96:	2b23      	cmp	r3, #35	; 0x23
 8008a98:	d001      	beq.n	8008a9e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e0a1      	b.n	8008be2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aa2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	3212      	adds	r2, #18
 8008aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aae:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab4:	f1c3 0304 	rsb	r3, r3, #4
 8008ab8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8008aba:	e06a      	b.n	8008b92 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d007      	beq.n	8008ad8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	699a      	ldr	r2, [r3, #24]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	69da      	ldr	r2, [r3, #28]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d103      	bne.n	8008aec <HAL_ETH_ReadData+0x88>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d040      	beq.n	8008b6e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d005      	beq.n	8008b04 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00c      	beq.n	8008b30 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	0c1b      	lsrs	r3, r3, #16
 8008b1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008b20:	3b04      	subs	r3, #4
 8008b22:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8008b48:	461a      	mov	r2, r3
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	f004 fb7d 	bl	800d24c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b56:	1c5a      	adds	r2, r3, #1
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	441a      	add	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	3301      	adds	r3, #1
 8008b72:	61fb      	str	r3, [r7, #28]
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d902      	bls.n	8008b80 <HAL_ETH_ReadData+0x11c>
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	3b04      	subs	r3, #4
 8008b7e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	69fa      	ldr	r2, [r7, #28]
 8008b84:	3212      	adds	r2, #18
 8008b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	db06      	blt.n	8008ba8 <HAL_ETH_ReadData+0x144>
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d202      	bcs.n	8008ba8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d089      	beq.n	8008abc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	441a      	add	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f815 	bl	8008bec <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	69fa      	ldr	r2, [r7, #28]
 8008bc6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d108      	bne.n	8008be0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	e000      	b.n	8008be2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3720      	adds	r7, #32
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
	...

08008bec <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c00:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	69fa      	ldr	r2, [r7, #28]
 8008c06:	3212      	adds	r2, #18
 8008c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c12:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8008c14:	e040      	b.n	8008c98 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d112      	bne.n	8008c44 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8008c1e:	f107 030c 	add.w	r3, r7, #12
 8008c22:	4618      	mov	r0, r3
 8008c24:	f004 fae2 	bl	800d1ec <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d102      	bne.n	8008c34 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	74fb      	strb	r3, [r7, #19]
 8008c32:	e007      	b.n	8008c44 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	461a      	mov	r2, r3
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8008c44:	7cfb      	ldrb	r3, [r7, #19]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d026      	beq.n	8008c98 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d103      	bne.n	8008c5a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	4a1e      	ldr	r2, [pc, #120]	; (8008cd0 <ETH_UpdateDescriptor+0xe4>)
 8008c56:	605a      	str	r2, [r3, #4]
 8008c58:	e003      	b.n	8008c62 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8008c60:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8008c62:	f3bf 8f5f 	dmb	sy
}
 8008c66:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	3301      	adds	r3, #1
 8008c78:	61fb      	str	r3, [r7, #28]
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d902      	bls.n	8008c86 <ETH_UpdateDescriptor+0x9a>
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	3b04      	subs	r3, #4
 8008c84:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69fa      	ldr	r2, [r7, #28]
 8008c8a:	3212      	adds	r2, #18
 8008c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c90:	617b      	str	r3, [r7, #20]
      desccount--;
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <ETH_UpdateDescriptor+0xb8>
 8008c9e:	7cfb      	ldrb	r3, [r7, #19]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1b8      	bne.n	8008c16 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d00c      	beq.n	8008cc8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	2300      	movs	r3, #0
 8008cba:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	69fa      	ldr	r2, [r7, #28]
 8008cc0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8008cc8:	bf00      	nop
 8008cca:	3720      	adds	r7, #32
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	80004600 	.word	0x80004600

08008cd4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3318      	adds	r3, #24
 8008ce0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8008cf2:	e03f      	b.n	8008d74 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	3304      	adds	r3, #4
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d106      	bne.n	8008d1c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	3301      	adds	r3, #1
 8008d12:	f003 0303 	and.w	r3, r3, #3
 8008d16:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d028      	beq.n	8008d74 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68d9      	ldr	r1, [r3, #12]
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	00db      	lsls	r3, r3, #3
 8008d30:	440b      	add	r3, r1
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	db1b      	blt.n	8008d70 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f004 fac3 	bl	800d2d0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	2200      	movs	r2, #0
 8008d56:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d6e:	e001      	b.n	8008d74 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <HAL_ETH_ReleaseTxPacket+0xac>
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1b9      	bne.n	8008cf4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da2:	2b40      	cmp	r3, #64	; 0x40
 8008da4:	d112      	bne.n	8008dcc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db4:	2b40      	cmp	r3, #64	; 0x40
 8008db6:	d109      	bne.n	8008dcc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4b50      	ldr	r3, [pc, #320]	; (8008f04 <HAL_ETH_IRQHandler+0x178>)
 8008dc4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f003 fdd8 	bl	800c97c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d113      	bne.n	8008e06 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d10a      	bne.n	8008e06 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df8:	461a      	mov	r2, r3
 8008dfa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8008dfe:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f003 fdcb 	bl	800c99c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e18:	d14c      	bne.n	8008eb4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e22:	69db      	ldr	r3, [r3, #28]
 8008e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e2c:	d142      	bne.n	8008eb4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e34:	f043 0208 	orr.w	r2, r3, #8
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e50:	d11a      	bne.n	8008e88 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e5a:	695a      	ldr	r2, [r3, #20]
 8008e5c:	4b2a      	ldr	r3, [pc, #168]	; (8008f08 <HAL_ETH_IRQHandler+0x17c>)
 8008e5e:	4013      	ands	r3, r2
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	6812      	ldr	r2, [r2, #0]
 8008e74:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8008e78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e7c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	22e0      	movs	r2, #224	; 0xe0
 8008e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008e86:	e012      	b.n	8008eae <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e90:	695a      	ldr	r2, [r3, #20]
 8008e92:	f248 6380 	movw	r3, #34432	; 0x8680
 8008e96:	4013      	ands	r3, r2
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f248 6380 	movw	r3, #34432	; 0x8680
 8008eac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f003 fd84 	bl	800c9bc <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eba:	f003 0308 	and.w	r3, r3, #8
 8008ebe:	2b08      	cmp	r3, #8
 8008ec0:	d10e      	bne.n	8008ee0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f81c 	bl	8008f10 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8008ee0:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <HAL_ETH_IRQHandler+0x180>)
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d006      	beq.n	8008efa <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8008eec:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <HAL_ETH_IRQHandler+0x180>)
 8008eee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008ef2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f815 	bl	8008f24 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	00010040 	.word	0x00010040
 8008f08:	007e2000 	.word	0x007e2000
 8008f0c:	40013c00 	.word	0x40013c00

08008f10 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f003 031c 	and.w	r3, r3, #28
 8008f54:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	02db      	lsls	r3, r3, #11
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	019b      	lsls	r3, r3, #6
 8008f66:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f023 0302 	bic.w	r3, r3, #2
 8008f76:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	f043 0301 	orr.w	r3, r3, #1
 8008f7e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8008f88:	f7ff f9f8 	bl	800837c <HAL_GetTick>
 8008f8c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008f8e:	e00d      	b.n	8008fac <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8008f90:	f7ff f9f4 	bl	800837c <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f9e:	d301      	bcc.n	8008fa4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e010      	b.n	8008fc6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1ec      	bne.n	8008f90 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b086      	sub	sp, #24
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	60b9      	str	r1, [r7, #8]
 8008fd8:	607a      	str	r2, [r7, #4]
 8008fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f003 031c 	and.w	r3, r3, #28
 8008fea:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	02db      	lsls	r3, r3, #11
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	019b      	lsls	r3, r3, #6
 8008ffc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	4313      	orrs	r3, r2
 8009004:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f043 0302 	orr.w	r3, r3, #2
 800900c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f043 0301 	orr.w	r3, r3, #1
 8009014:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	b29a      	uxth	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009028:	f7ff f9a8 	bl	800837c <HAL_GetTick>
 800902c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800902e:	e00d      	b.n	800904c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8009030:	f7ff f9a4 	bl	800837c <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800903e:	d301      	bcc.n	8009044 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e009      	b.n	8009058 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1ec      	bne.n	8009030 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e0d9      	b.n	8009228 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0310 	and.w	r3, r3, #16
 800907e:	2b00      	cmp	r3, #0
 8009080:	bf14      	ite	ne
 8009082:	2301      	movne	r3, #1
 8009084:	2300      	moveq	r3, #0
 8009086:	b2db      	uxtb	r3, r3
 8009088:	461a      	mov	r2, r3
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	bf0c      	ite	eq
 80090ac:	2301      	moveq	r3, #1
 80090ae:	2300      	movne	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	461a      	mov	r2, r3
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	bf14      	ite	ne
 80090c8:	2301      	movne	r3, #1
 80090ca:	2300      	moveq	r3, #0
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	bf0c      	ite	eq
 80090e2:	2301      	moveq	r3, #1
 80090e4:	2300      	movne	r3, #0
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	461a      	mov	r2, r3
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	bf14      	ite	ne
 80090fc:	2301      	movne	r3, #1
 80090fe:	2300      	moveq	r3, #0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	461a      	mov	r2, r3
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800912e:	2b00      	cmp	r3, #0
 8009130:	bf0c      	ite	eq
 8009132:	2301      	moveq	r3, #1
 8009134:	2300      	movne	r3, #0
 8009136:	b2db      	uxtb	r3, r3
 8009138:	461a      	mov	r2, r3
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009148:	2b00      	cmp	r3, #0
 800914a:	bf0c      	ite	eq
 800914c:	2301      	moveq	r3, #1
 800914e:	2300      	movne	r3, #0
 8009150:	b2db      	uxtb	r3, r3
 8009152:	461a      	mov	r2, r3
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009162:	2b00      	cmp	r3, #0
 8009164:	bf14      	ite	ne
 8009166:	2301      	movne	r3, #1
 8009168:	2300      	moveq	r3, #0
 800916a:	b2db      	uxtb	r3, r3
 800916c:	461a      	mov	r2, r3
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800918a:	2b00      	cmp	r3, #0
 800918c:	bf14      	ite	ne
 800918e:	2301      	movne	r3, #1
 8009190:	2300      	moveq	r3, #0
 8009192:	b2db      	uxtb	r3, r3
 8009194:	461a      	mov	r2, r3
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	bf14      	ite	ne
 80091a8:	2301      	movne	r3, #1
 80091aa:	2300      	moveq	r3, #0
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	461a      	mov	r2, r3
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	bf0c      	ite	eq
 80091c4:	2301      	moveq	r3, #1
 80091c6:	2300      	movne	r3, #0
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	461a      	mov	r2, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	0c1b      	lsrs	r3, r3, #16
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	bf14      	ite	ne
 80091fc:	2301      	movne	r3, #1
 80091fe:	2300      	moveq	r3, #0
 8009200:	b2db      	uxtb	r3, r3
 8009202:	461a      	mov	r2, r3
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8009214:	2b00      	cmp	r3, #0
 8009216:	bf14      	ite	ne
 8009218:	2301      	movne	r3, #1
 800921a:	2300      	moveq	r3, #0
 800921c:	b2db      	uxtb	r3, r3
 800921e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e00b      	b.n	8009260 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800924e:	2b10      	cmp	r3, #16
 8009250:	d105      	bne.n	800925e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f88f 	bl	8009378 <ETH_SetMACConfig>

    return HAL_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	e000      	b.n	8009260 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
  }
}
 8009260:	4618      	mov	r0, r3
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 031c 	bic.w	r3, r3, #28
 800927e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009280:	f001 fdae 	bl	800ade0 <HAL_RCC_GetHCLKFreq>
 8009284:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	4a1d      	ldr	r2, [pc, #116]	; (8009300 <HAL_ETH_SetMDIOClockRange+0x98>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d908      	bls.n	80092a0 <HAL_ETH_SetMDIOClockRange+0x38>
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	4a1c      	ldr	r2, [pc, #112]	; (8009304 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d804      	bhi.n	80092a0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f043 0308 	orr.w	r3, r3, #8
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	e027      	b.n	80092f0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4a18      	ldr	r2, [pc, #96]	; (8009304 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d908      	bls.n	80092ba <HAL_ETH_SetMDIOClockRange+0x52>
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	4a17      	ldr	r2, [pc, #92]	; (8009308 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d204      	bcs.n	80092ba <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f043 030c 	orr.w	r3, r3, #12
 80092b6:	60fb      	str	r3, [r7, #12]
 80092b8:	e01a      	b.n	80092f0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	4a12      	ldr	r2, [pc, #72]	; (8009308 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d303      	bcc.n	80092ca <HAL_ETH_SetMDIOClockRange+0x62>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	4a11      	ldr	r2, [pc, #68]	; (800930c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d911      	bls.n	80092ee <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	4a0f      	ldr	r2, [pc, #60]	; (800930c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d908      	bls.n	80092e4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	4a0e      	ldr	r2, [pc, #56]	; (8009310 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d804      	bhi.n	80092e4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f043 0304 	orr.w	r3, r3, #4
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	e005      	b.n	80092f0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f043 0310 	orr.w	r3, r3, #16
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	e000      	b.n	80092f0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80092ee:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	611a      	str	r2, [r3, #16]
}
 80092f8:	bf00      	nop
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	01312cff 	.word	0x01312cff
 8009304:	02160ebf 	.word	0x02160ebf
 8009308:	03938700 	.word	0x03938700
 800930c:	05f5e0ff 	.word	0x05f5e0ff
 8009310:	08f0d17f 	.word	0x08f0d17f

08009314 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8009322:	4618      	mov	r0, r3
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	6812      	ldr	r2, [r2, #0]
 8009348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800934c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009350:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800935e:	2001      	movs	r0, #1
 8009360:	f7ff f818 	bl	8008394 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800936e:	6193      	str	r3, [r2, #24]
}
 8009370:	bf00      	nop
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	4b51      	ldr	r3, [pc, #324]	; (80094d4 <ETH_SetMACConfig+0x15c>)
 800938e:	4013      	ands	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	7c1b      	ldrb	r3, [r3, #16]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d102      	bne.n	80093a0 <ETH_SetMACConfig+0x28>
 800939a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800939e:	e000      	b.n	80093a2 <ETH_SetMACConfig+0x2a>
 80093a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	7c5b      	ldrb	r3, [r3, #17]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <ETH_SetMACConfig+0x38>
 80093aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80093ae:	e000      	b.n	80093b2 <ETH_SetMACConfig+0x3a>
 80093b0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80093b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80093b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	7fdb      	ldrb	r3, [r3, #31]
 80093be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80093c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80093c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	7f92      	ldrb	r2, [r2, #30]
 80093cc:	2a00      	cmp	r2, #0
 80093ce:	d102      	bne.n	80093d6 <ETH_SetMACConfig+0x5e>
 80093d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80093d4:	e000      	b.n	80093d8 <ETH_SetMACConfig+0x60>
 80093d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80093d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	7f1b      	ldrb	r3, [r3, #28]
 80093de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80093e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80093e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	791b      	ldrb	r3, [r3, #4]
 80093ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80093ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80093f6:	2a00      	cmp	r2, #0
 80093f8:	d102      	bne.n	8009400 <ETH_SetMACConfig+0x88>
 80093fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093fe:	e000      	b.n	8009402 <ETH_SetMACConfig+0x8a>
 8009400:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8009402:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	7bdb      	ldrb	r3, [r3, #15]
 8009408:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800940a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8009410:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009418:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800941a:	4313      	orrs	r3, r2
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4313      	orrs	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009432:	2001      	movs	r0, #1
 8009434:	f7fe ffae 	bl	8008394 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800944e:	4013      	ands	r3, r2
 8009450:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009456:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8009458:	683a      	ldr	r2, [r7, #0]
 800945a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800945e:	2a00      	cmp	r2, #0
 8009460:	d101      	bne.n	8009466 <ETH_SetMACConfig+0xee>
 8009462:	2280      	movs	r2, #128	; 0x80
 8009464:	e000      	b.n	8009468 <ETH_SetMACConfig+0xf0>
 8009466:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8009468:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800946e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8009476:	2a01      	cmp	r2, #1
 8009478:	d101      	bne.n	800947e <ETH_SetMACConfig+0x106>
 800947a:	2208      	movs	r2, #8
 800947c:	e000      	b.n	8009480 <ETH_SetMACConfig+0x108>
 800947e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8009480:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8009488:	2a01      	cmp	r2, #1
 800948a:	d101      	bne.n	8009490 <ETH_SetMACConfig+0x118>
 800948c:	2204      	movs	r2, #4
 800948e:	e000      	b.n	8009492 <ETH_SetMACConfig+0x11a>
 8009490:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8009492:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800949a:	2a01      	cmp	r2, #1
 800949c:	d101      	bne.n	80094a2 <ETH_SetMACConfig+0x12a>
 800949e:	2202      	movs	r2, #2
 80094a0:	e000      	b.n	80094a4 <ETH_SetMACConfig+0x12c>
 80094a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80094a4:	4313      	orrs	r3, r2
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80094bc:	2001      	movs	r0, #1
 80094be:	f7fe ff69 	bl	8008394 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	619a      	str	r2, [r3, #24]
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	ff20810f 	.word	0xff20810f

080094d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	4b3d      	ldr	r3, [pc, #244]	; (80095e8 <ETH_SetDMAConfig+0x110>)
 80094f2:	4013      	ands	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	7b1b      	ldrb	r3, [r3, #12]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <ETH_SetDMAConfig+0x2c>
 80094fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009502:	e000      	b.n	8009506 <ETH_SetDMAConfig+0x2e>
 8009504:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	7b5b      	ldrb	r3, [r3, #13]
 800950a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800950c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	7f52      	ldrb	r2, [r2, #29]
 8009512:	2a00      	cmp	r2, #0
 8009514:	d102      	bne.n	800951c <ETH_SetDMAConfig+0x44>
 8009516:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800951a:	e000      	b.n	800951e <ETH_SetDMAConfig+0x46>
 800951c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800951e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	7b9b      	ldrb	r3, [r3, #14]
 8009524:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8009526:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800952c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	7f1b      	ldrb	r3, [r3, #28]
 8009532:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8009534:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	7f9b      	ldrb	r3, [r3, #30]
 800953a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800953c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8009542:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800954a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800954c:	4313      	orrs	r3, r2
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	4313      	orrs	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800955c:	461a      	mov	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800956e:	2001      	movs	r0, #1
 8009570:	f7fe ff10 	bl	8008394 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957c:	461a      	mov	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	791b      	ldrb	r3, [r3, #4]
 8009586:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800958c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8009592:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8009598:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80095a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80095a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80095aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80095b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	6812      	ldr	r2, [r2, #0]
 80095b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80095be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80095cc:	2001      	movs	r0, #1
 80095ce:	f7fe fee1 	bl	8008394 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095da:	461a      	mov	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6013      	str	r3, [r2, #0]
}
 80095e0:	bf00      	nop
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	f8de3f23 	.word	0xf8de3f23

080095ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b0a6      	sub	sp, #152	; 0x98
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80095fa:	2301      	movs	r3, #1
 80095fc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8009600:	2300      	movs	r3, #0
 8009602:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009604:	2300      	movs	r3, #0
 8009606:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800960a:	2301      	movs	r3, #1
 800960c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8009610:	2300      	movs	r3, #0
 8009612:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8009616:	2301      	movs	r3, #1
 8009618:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800961c:	2300      	movs	r3, #0
 800961e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8009622:	2300      	movs	r3, #0
 8009624:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009628:	2300      	movs	r3, #0
 800962a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800962c:	2300      	movs	r3, #0
 800962e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8009632:	2300      	movs	r3, #0
 8009634:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8009636:	2300      	movs	r3, #0
 8009638:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800963c:	2300      	movs	r3, #0
 800963e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009642:	2300      	movs	r3, #0
 8009644:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8009648:	2300      	movs	r3, #0
 800964a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800964e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009652:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009658:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800965a:	2300      	movs	r3, #0
 800965c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009660:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7ff fe86 	bl	8009378 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800966c:	2301      	movs	r3, #1
 800966e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8009670:	2301      	movs	r3, #1
 8009672:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8009674:	2301      	movs	r3, #1
 8009676:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800967a:	2301      	movs	r3, #1
 800967c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800967e:	2300      	movs	r3, #0
 8009680:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8009682:	2300      	movs	r3, #0
 8009684:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8009688:	2300      	movs	r3, #0
 800968a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800968e:	2300      	movs	r3, #0
 8009690:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8009692:	2301      	movs	r3, #1
 8009694:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8009698:	2301      	movs	r3, #1
 800969a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800969c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096a0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80096a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80096a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80096ae:	2301      	movs	r3, #1
 80096b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80096b8:	2300      	movs	r3, #0
 80096ba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80096bc:	f107 0308 	add.w	r3, r7, #8
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff ff08 	bl	80094d8 <ETH_SetDMAConfig>
}
 80096c8:	bf00      	nop
 80096ca:	3798      	adds	r7, #152	; 0x98
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	3305      	adds	r3, #5
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	021b      	lsls	r3, r3, #8
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	3204      	adds	r2, #4
 80096e8:	7812      	ldrb	r2, [r2, #0]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	4b11      	ldr	r3, [pc, #68]	; (8009738 <ETH_MACAddressConfig+0x68>)
 80096f2:	4413      	add	r3, r2
 80096f4:	461a      	mov	r2, r3
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3303      	adds	r3, #3
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	061a      	lsls	r2, r3, #24
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	3302      	adds	r3, #2
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	041b      	lsls	r3, r3, #16
 800970a:	431a      	orrs	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3301      	adds	r3, #1
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	4313      	orrs	r3, r2
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	7812      	ldrb	r2, [r2, #0]
 800971a:	4313      	orrs	r3, r2
 800971c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	4b06      	ldr	r3, [pc, #24]	; (800973c <ETH_MACAddressConfig+0x6c>)
 8009722:	4413      	add	r3, r2
 8009724:	461a      	mov	r2, r3
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	6013      	str	r3, [r2, #0]
}
 800972a:	bf00      	nop
 800972c:	371c      	adds	r7, #28
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	40028040 	.word	0x40028040
 800973c:	40028044 	.word	0x40028044

08009740 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009748:	2300      	movs	r3, #0
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	e03e      	b.n	80097cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68d9      	ldr	r1, [r3, #12]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4613      	mov	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	00db      	lsls	r3, r3, #3
 800975c:	440b      	add	r3, r1
 800975e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2200      	movs	r2, #0
 8009764:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2200      	movs	r2, #0
 800976a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2200      	movs	r2, #0
 8009770:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	2200      	movs	r2, #0
 8009776:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009778:	68b9      	ldr	r1, [r7, #8]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	3206      	adds	r2, #6
 8009780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b02      	cmp	r3, #2
 8009794:	d80c      	bhi.n	80097b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68d9      	ldr	r1, [r3, #12]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	1c5a      	adds	r2, r3, #1
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	440b      	add	r3, r1
 80097a8:	461a      	mov	r2, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	60da      	str	r2, [r3, #12]
 80097ae:	e004      	b.n	80097ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	461a      	mov	r2, r3
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3301      	adds	r3, #1
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d9bd      	bls.n	800974e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68da      	ldr	r2, [r3, #12]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097e4:	611a      	str	r2, [r3, #16]
}
 80097e6:	bf00      	nop
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b085      	sub	sp, #20
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80097fa:	2300      	movs	r3, #0
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	e046      	b.n	800988e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6919      	ldr	r1, [r3, #16]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	4613      	mov	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	00db      	lsls	r3, r3, #3
 800980e:	440b      	add	r3, r1
 8009810:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2200      	movs	r2, #0
 800981c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2200      	movs	r2, #0
 8009822:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2200      	movs	r2, #0
 8009828:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	2200      	movs	r2, #0
 800982e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2200      	movs	r2, #0
 8009834:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800983c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8009844:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8009852:	68b9      	ldr	r1, [r7, #8]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	3212      	adds	r2, #18
 800985a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b02      	cmp	r3, #2
 8009862:	d80c      	bhi.n	800987e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6919      	ldr	r1, [r3, #16]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	1c5a      	adds	r2, r3, #1
 800986c:	4613      	mov	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	440b      	add	r3, r1
 8009876:	461a      	mov	r2, r3
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	60da      	str	r2, [r3, #12]
 800987c:	e004      	b.n	8009888 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	461a      	mov	r2, r3
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3301      	adds	r3, #1
 800988c:	60fb      	str	r3, [r7, #12]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b03      	cmp	r3, #3
 8009892:	d9b5      	bls.n	8009800 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691a      	ldr	r2, [r3, #16]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098be:	60da      	str	r2, [r3, #12]
}
 80098c0:	bf00      	nop
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b08d      	sub	sp, #52	; 0x34
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3318      	adds	r3, #24
 80098dc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80098ea:	2300      	movs	r3, #0
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800990a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800990e:	d007      	beq.n	8009920 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009914:	3304      	adds	r3, #4
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8009920:	2302      	movs	r3, #2
 8009922:	e0ff      	b.n	8009b24 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	3301      	adds	r3, #1
 8009928:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	4b7d      	ldr	r3, [pc, #500]	; (8009b30 <ETH_Prepare_Tx_Descriptors+0x264>)
 800993a:	4013      	ands	r3, r2
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	6852      	ldr	r2, [r2, #4]
 8009940:	431a      	orrs	r2, r3
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d008      	beq.n	8009964 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	431a      	orrs	r2, r3
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 0320 	and.w	r3, r3, #32
 800996c:	2b00      	cmp	r3, #0
 800996e:	d008      	beq.n	8009982 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	431a      	orrs	r2, r3
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0304 	and.w	r3, r3, #4
 800998a:	2b00      	cmp	r3, #0
 800998c:	d005      	beq.n	800999a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800999a:	6a3b      	ldr	r3, [r7, #32]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80099a6:	f3bf 8f5f 	dmb	sy
}
 80099aa:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80099b8:	e082      	b.n	8009ac0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d006      	beq.n	80099da <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	e005      	b.n	80099e6 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80099e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e8:	3301      	adds	r3, #1
 80099ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d902      	bls.n	80099f8 <ETH_Prepare_Tx_Descriptors+0x12c>
 80099f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f4:	3b04      	subs	r3, #4
 80099f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a00:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a1a:	d007      	beq.n	8009a2c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a20:	3304      	adds	r3, #4
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d029      	beq.n	8009a80 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a38:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a3e:	e019      	b.n	8009a74 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8009a40:	f3bf 8f5f 	dmb	sy
}
 8009a44:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8009a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a54:	3301      	adds	r3, #1
 8009a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d902      	bls.n	8009a64 <ETH_Prepare_Tx_Descriptors+0x198>
 8009a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a60:	3b04      	subs	r3, #4
 8009a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8009a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a70:	3301      	adds	r3, #1
 8009a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d3e1      	bcc.n	8009a40 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e051      	b.n	8009b24 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	3301      	adds	r3, #1
 8009a84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	461a      	mov	r2, r3
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	4b25      	ldr	r3, [pc, #148]	; (8009b30 <ETH_Prepare_Tx_Descriptors+0x264>)
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	69fa      	ldr	r2, [r7, #28]
 8009aa0:	6852      	ldr	r2, [r2, #4]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8009aae:	f3bf 8f5f 	dmb	sy
}
 8009ab2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f47f af78 	bne.w	80099ba <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d006      	beq.n	8009ade <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	601a      	str	r2, [r3, #0]
 8009adc:	e005      	b.n	8009aea <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009afa:	6979      	ldr	r1, [r7, #20]
 8009afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afe:	3304      	adds	r3, #4
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	440b      	add	r3, r1
 8009b04:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b0a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b0c:	b672      	cpsid	i
}
 8009b0e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	4413      	add	r3, r2
 8009b18:	1c5a      	adds	r2, r3, #1
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8009b1e:	b662      	cpsie	i
}
 8009b20:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3734      	adds	r7, #52	; 0x34
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	ffffe000 	.word	0xffffe000

08009b34 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009b46:	4b27      	ldr	r3, [pc, #156]	; (8009be4 <HAL_FLASH_Program+0xb0>)
 8009b48:	7d1b      	ldrb	r3, [r3, #20]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d101      	bne.n	8009b52 <HAL_FLASH_Program+0x1e>
 8009b4e:	2302      	movs	r3, #2
 8009b50:	e043      	b.n	8009bda <HAL_FLASH_Program+0xa6>
 8009b52:	4b24      	ldr	r3, [pc, #144]	; (8009be4 <HAL_FLASH_Program+0xb0>)
 8009b54:	2201      	movs	r2, #1
 8009b56:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009b58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009b5c:	f000 f884 	bl	8009c68 <FLASH_WaitForLastOperation>
 8009b60:	4603      	mov	r3, r0
 8009b62:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d133      	bne.n	8009bd2 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d823      	bhi.n	8009bb8 <HAL_FLASH_Program+0x84>
 8009b70:	a201      	add	r2, pc, #4	; (adr r2, 8009b78 <HAL_FLASH_Program+0x44>)
 8009b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b76:	bf00      	nop
 8009b78:	08009b89 	.word	0x08009b89
 8009b7c:	08009b95 	.word	0x08009b95
 8009b80:	08009ba1 	.word	0x08009ba1
 8009b84:	08009bad 	.word	0x08009bad
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8009b88:	783b      	ldrb	r3, [r7, #0]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	68b8      	ldr	r0, [r7, #8]
 8009b8e:	f000 f92d 	bl	8009dec <FLASH_Program_Byte>
        break;
 8009b92:	e012      	b.n	8009bba <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009b94:	883b      	ldrh	r3, [r7, #0]
 8009b96:	4619      	mov	r1, r3
 8009b98:	68b8      	ldr	r0, [r7, #8]
 8009b9a:	f000 f901 	bl	8009da0 <FLASH_Program_HalfWord>
        break;
 8009b9e:	e00c      	b.n	8009bba <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	68b8      	ldr	r0, [r7, #8]
 8009ba6:	f000 f8d5 	bl	8009d54 <FLASH_Program_Word>
        break;
 8009baa:	e006      	b.n	8009bba <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8009bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bb0:	68b8      	ldr	r0, [r7, #8]
 8009bb2:	f000 f899 	bl	8009ce8 <FLASH_Program_DoubleWord>
        break;
 8009bb6:	e000      	b.n	8009bba <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8009bb8:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009bba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009bbe:	f000 f853 	bl	8009c68 <FLASH_WaitForLastOperation>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8009bc6:	4b08      	ldr	r3, [pc, #32]	; (8009be8 <HAL_FLASH_Program+0xb4>)
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	4a07      	ldr	r2, [pc, #28]	; (8009be8 <HAL_FLASH_Program+0xb4>)
 8009bcc:	f023 0301 	bic.w	r3, r3, #1
 8009bd0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009bd2:	4b04      	ldr	r3, [pc, #16]	; (8009be4 <HAL_FLASH_Program+0xb0>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	751a      	strb	r2, [r3, #20]

  return status;
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	200017c0 	.word	0x200017c0
 8009be8:	40023c00 	.word	0x40023c00

08009bec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009bf6:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <HAL_FLASH_Unlock+0x38>)
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	da0b      	bge.n	8009c16 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009bfe:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <HAL_FLASH_Unlock+0x38>)
 8009c00:	4a09      	ldr	r2, [pc, #36]	; (8009c28 <HAL_FLASH_Unlock+0x3c>)
 8009c02:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009c04:	4b07      	ldr	r3, [pc, #28]	; (8009c24 <HAL_FLASH_Unlock+0x38>)
 8009c06:	4a09      	ldr	r2, [pc, #36]	; (8009c2c <HAL_FLASH_Unlock+0x40>)
 8009c08:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009c0a:	4b06      	ldr	r3, [pc, #24]	; (8009c24 <HAL_FLASH_Unlock+0x38>)
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	da01      	bge.n	8009c16 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009c16:	79fb      	ldrb	r3, [r7, #7]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	40023c00 	.word	0x40023c00
 8009c28:	45670123 	.word	0x45670123
 8009c2c:	cdef89ab 	.word	0xcdef89ab

08009c30 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8009c34:	4b05      	ldr	r3, [pc, #20]	; (8009c4c <HAL_FLASH_Lock+0x1c>)
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	4a04      	ldr	r2, [pc, #16]	; (8009c4c <HAL_FLASH_Lock+0x1c>)
 8009c3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009c3e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	40023c00 	.word	0x40023c00

08009c50 <HAL_FLASH_GetError>:
  *            @arg FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8009c54:	4b03      	ldr	r3, [pc, #12]	; (8009c64 <HAL_FLASH_GetError+0x14>)
 8009c56:	699b      	ldr	r3, [r3, #24]
}  
 8009c58:	4618      	mov	r0, r3
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	200017c0 	.word	0x200017c0

08009c68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009c74:	4b1a      	ldr	r3, [pc, #104]	; (8009ce0 <FLASH_WaitForLastOperation+0x78>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8009c7a:	f7fe fb7f 	bl	800837c <HAL_GetTick>
 8009c7e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009c80:	e010      	b.n	8009ca4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c88:	d00c      	beq.n	8009ca4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d007      	beq.n	8009ca0 <FLASH_WaitForLastOperation+0x38>
 8009c90:	f7fe fb74 	bl	800837c <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d201      	bcs.n	8009ca4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e019      	b.n	8009cd8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009ca4:	4b0f      	ldr	r3, [pc, #60]	; (8009ce4 <FLASH_WaitForLastOperation+0x7c>)
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1e8      	bne.n	8009c82 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8009cb0:	4b0c      	ldr	r3, [pc, #48]	; (8009ce4 <FLASH_WaitForLastOperation+0x7c>)
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009cbc:	f000 f8ba 	bl	8009e34 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e009      	b.n	8009cd8 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009cc4:	4b07      	ldr	r3, [pc, #28]	; (8009ce4 <FLASH_WaitForLastOperation+0x7c>)
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009cd0:	4b04      	ldr	r3, [pc, #16]	; (8009ce4 <FLASH_WaitForLastOperation+0x7c>)
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
  
}  
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	200017c0 	.word	0x200017c0
 8009ce4:	40023c00 	.word	0x40023c00

08009ce8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8009cf4:	4b16      	ldr	r3, [pc, #88]	; (8009d50 <FLASH_Program_DoubleWord+0x68>)
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	4a15      	ldr	r2, [pc, #84]	; (8009d50 <FLASH_Program_DoubleWord+0x68>)
 8009cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009d00:	4b13      	ldr	r3, [pc, #76]	; (8009d50 <FLASH_Program_DoubleWord+0x68>)
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	4a12      	ldr	r2, [pc, #72]	; (8009d50 <FLASH_Program_DoubleWord+0x68>)
 8009d06:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009d0c:	4b10      	ldr	r3, [pc, #64]	; (8009d50 <FLASH_Program_DoubleWord+0x68>)
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	4a0f      	ldr	r2, [pc, #60]	; (8009d50 <FLASH_Program_DoubleWord+0x68>)
 8009d12:	f043 0301 	orr.w	r3, r3, #1
 8009d16:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009d1e:	f3bf 8f6f 	isb	sy
}
 8009d22:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8009d24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d28:	f04f 0200 	mov.w	r2, #0
 8009d2c:	f04f 0300 	mov.w	r3, #0
 8009d30:	000a      	movs	r2, r1
 8009d32:	2300      	movs	r3, #0
 8009d34:	68f9      	ldr	r1, [r7, #12]
 8009d36:	3104      	adds	r1, #4
 8009d38:	4613      	mov	r3, r2
 8009d3a:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8009d3c:	f3bf 8f4f 	dsb	sy
}
 8009d40:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8009d42:	bf00      	nop
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	40023c00 	.word	0x40023c00

08009d54 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8009d5e:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <FLASH_Program_Word+0x48>)
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	4a0e      	ldr	r2, [pc, #56]	; (8009d9c <FLASH_Program_Word+0x48>)
 8009d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8009d6a:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <FLASH_Program_Word+0x48>)
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	4a0b      	ldr	r2, [pc, #44]	; (8009d9c <FLASH_Program_Word+0x48>)
 8009d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009d76:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <FLASH_Program_Word+0x48>)
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	4a08      	ldr	r2, [pc, #32]	; (8009d9c <FLASH_Program_Word+0x48>)
 8009d7c:	f043 0301 	orr.w	r3, r3, #1
 8009d80:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8009d88:	f3bf 8f4f 	dsb	sy
}
 8009d8c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8009d8e:	bf00      	nop
 8009d90:	370c      	adds	r7, #12
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	40023c00 	.word	0x40023c00

08009da0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8009dac:	4b0e      	ldr	r3, [pc, #56]	; (8009de8 <FLASH_Program_HalfWord+0x48>)
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	4a0d      	ldr	r2, [pc, #52]	; (8009de8 <FLASH_Program_HalfWord+0x48>)
 8009db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009db6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8009db8:	4b0b      	ldr	r3, [pc, #44]	; (8009de8 <FLASH_Program_HalfWord+0x48>)
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	4a0a      	ldr	r2, [pc, #40]	; (8009de8 <FLASH_Program_HalfWord+0x48>)
 8009dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009dc4:	4b08      	ldr	r3, [pc, #32]	; (8009de8 <FLASH_Program_HalfWord+0x48>)
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	4a07      	ldr	r2, [pc, #28]	; (8009de8 <FLASH_Program_HalfWord+0x48>)
 8009dca:	f043 0301 	orr.w	r3, r3, #1
 8009dce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	887a      	ldrh	r2, [r7, #2]
 8009dd4:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8009dd6:	f3bf 8f4f 	dsb	sy
}
 8009dda:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	40023c00 	.word	0x40023c00

08009dec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8009df8:	4b0d      	ldr	r3, [pc, #52]	; (8009e30 <FLASH_Program_Byte+0x44>)
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	4a0c      	ldr	r2, [pc, #48]	; (8009e30 <FLASH_Program_Byte+0x44>)
 8009dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009e04:	4b0a      	ldr	r3, [pc, #40]	; (8009e30 <FLASH_Program_Byte+0x44>)
 8009e06:	4a0a      	ldr	r2, [pc, #40]	; (8009e30 <FLASH_Program_Byte+0x44>)
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009e0c:	4b08      	ldr	r3, [pc, #32]	; (8009e30 <FLASH_Program_Byte+0x44>)
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	4a07      	ldr	r2, [pc, #28]	; (8009e30 <FLASH_Program_Byte+0x44>)
 8009e12:	f043 0301 	orr.w	r3, r3, #1
 8009e16:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	78fa      	ldrb	r2, [r7, #3]
 8009e1c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8009e1e:	f3bf 8f4f 	dsb	sy
}
 8009e22:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	40023c00 	.word	0x40023c00

08009e34 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8009e34:	b480      	push	{r7}
 8009e36:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009e38:	4b21      	ldr	r3, [pc, #132]	; (8009ec0 <FLASH_SetErrorCode+0x8c>)
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d005      	beq.n	8009e50 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009e44:	4b1f      	ldr	r3, [pc, #124]	; (8009ec4 <FLASH_SetErrorCode+0x90>)
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	f043 0320 	orr.w	r3, r3, #32
 8009e4c:	4a1d      	ldr	r2, [pc, #116]	; (8009ec4 <FLASH_SetErrorCode+0x90>)
 8009e4e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009e50:	4b1b      	ldr	r3, [pc, #108]	; (8009ec0 <FLASH_SetErrorCode+0x8c>)
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	f003 0310 	and.w	r3, r3, #16
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d005      	beq.n	8009e68 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009e5c:	4b19      	ldr	r3, [pc, #100]	; (8009ec4 <FLASH_SetErrorCode+0x90>)
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	f043 0310 	orr.w	r3, r3, #16
 8009e64:	4a17      	ldr	r2, [pc, #92]	; (8009ec4 <FLASH_SetErrorCode+0x90>)
 8009e66:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009e68:	4b15      	ldr	r3, [pc, #84]	; (8009ec0 <FLASH_SetErrorCode+0x8c>)
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	f003 0320 	and.w	r3, r3, #32
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d005      	beq.n	8009e80 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009e74:	4b13      	ldr	r3, [pc, #76]	; (8009ec4 <FLASH_SetErrorCode+0x90>)
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	f043 0308 	orr.w	r3, r3, #8
 8009e7c:	4a11      	ldr	r2, [pc, #68]	; (8009ec4 <FLASH_SetErrorCode+0x90>)
 8009e7e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009e80:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <FLASH_SetErrorCode+0x8c>)
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d005      	beq.n	8009e98 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <FLASH_SetErrorCode+0x90>)
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	f043 0304 	orr.w	r3, r3, #4
 8009e94:	4a0b      	ldr	r2, [pc, #44]	; (8009ec4 <FLASH_SetErrorCode+0x90>)
 8009e96:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8009e98:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <FLASH_SetErrorCode+0x8c>)
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d005      	beq.n	8009eb0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8009ea4:	4b07      	ldr	r3, [pc, #28]	; (8009ec4 <FLASH_SetErrorCode+0x90>)
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	f043 0302 	orr.w	r3, r3, #2
 8009eac:	4a05      	ldr	r2, [pc, #20]	; (8009ec4 <FLASH_SetErrorCode+0x90>)
 8009eae:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8009eb0:	4b03      	ldr	r3, [pc, #12]	; (8009ec0 <FLASH_SetErrorCode+0x8c>)
 8009eb2:	22f2      	movs	r2, #242	; 0xf2
 8009eb4:	60da      	str	r2, [r3, #12]
}
 8009eb6:	bf00      	nop
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	40023c00 	.word	0x40023c00
 8009ec4:	200017c0 	.word	0x200017c0

08009ec8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009eda:	4b30      	ldr	r3, [pc, #192]	; (8009f9c <HAL_FLASHEx_Erase+0xd4>)
 8009edc:	7d1b      	ldrb	r3, [r3, #20]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d101      	bne.n	8009ee6 <HAL_FLASHEx_Erase+0x1e>
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	e056      	b.n	8009f94 <HAL_FLASHEx_Erase+0xcc>
 8009ee6:	4b2d      	ldr	r3, [pc, #180]	; (8009f9c <HAL_FLASHEx_Erase+0xd4>)
 8009ee8:	2201      	movs	r2, #1
 8009eea:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009eec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009ef0:	f7ff feba 	bl	8009c68 <FLASH_WaitForLastOperation>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d146      	bne.n	8009f8c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	f04f 32ff 	mov.w	r2, #4294967295
 8009f04:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d115      	bne.n	8009f3a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	4610      	mov	r0, r2
 8009f1c:	f000 f844 	bl	8009fa8 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009f24:	f7ff fea0 	bl	8009c68 <FLASH_WaitForLastOperation>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8009f2c:	4b1c      	ldr	r3, [pc, #112]	; (8009fa0 <HAL_FLASHEx_Erase+0xd8>)
 8009f2e:	691a      	ldr	r2, [r3, #16]
 8009f30:	491b      	ldr	r1, [pc, #108]	; (8009fa0 <HAL_FLASHEx_Erase+0xd8>)
 8009f32:	4b1c      	ldr	r3, [pc, #112]	; (8009fa4 <HAL_FLASHEx_Erase+0xdc>)
 8009f34:	4013      	ands	r3, r2
 8009f36:	610b      	str	r3, [r1, #16]
 8009f38:	e028      	b.n	8009f8c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	60bb      	str	r3, [r7, #8]
 8009f40:	e01c      	b.n	8009f7c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	4619      	mov	r1, r3
 8009f4a:	68b8      	ldr	r0, [r7, #8]
 8009f4c:	f000 f868 	bl	800a020 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009f50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009f54:	f7ff fe88 	bl	8009c68 <FLASH_WaitForLastOperation>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8009f5c:	4b10      	ldr	r3, [pc, #64]	; (8009fa0 <HAL_FLASHEx_Erase+0xd8>)
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	4a0f      	ldr	r2, [pc, #60]	; (8009fa0 <HAL_FLASHEx_Erase+0xd8>)
 8009f62:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8009f66:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d003      	beq.n	8009f76 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	601a      	str	r2, [r3, #0]
          break;
 8009f74:	e00a      	b.n	8009f8c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	60bb      	str	r3, [r7, #8]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	4413      	add	r3, r2
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d3da      	bcc.n	8009f42 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009f8c:	4b03      	ldr	r3, [pc, #12]	; (8009f9c <HAL_FLASHEx_Erase+0xd4>)
 8009f8e:	2200      	movs	r2, #0
 8009f90:	751a      	strb	r2, [r3, #20]

  return status;
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	200017c0 	.word	0x200017c0
 8009fa0:	40023c00 	.word	0x40023c00
 8009fa4:	ffff7ffb 	.word	0xffff7ffb

08009fa8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	6039      	str	r1, [r7, #0]
 8009fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8009fb4:	4b19      	ldr	r3, [pc, #100]	; (800a01c <FLASH_MassErase+0x74>)
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	4a18      	ldr	r2, [pc, #96]	; (800a01c <FLASH_MassErase+0x74>)
 8009fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fbe:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d107      	bne.n	8009fd6 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8009fc6:	4b15      	ldr	r3, [pc, #84]	; (800a01c <FLASH_MassErase+0x74>)
 8009fc8:	691a      	ldr	r2, [r3, #16]
 8009fca:	4914      	ldr	r1, [pc, #80]	; (800a01c <FLASH_MassErase+0x74>)
 8009fcc:	f248 0304 	movw	r3, #32772	; 0x8004
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	610b      	str	r3, [r1, #16]
 8009fd4:	e00f      	b.n	8009ff6 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d106      	bne.n	8009fea <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8009fdc:	4b0f      	ldr	r3, [pc, #60]	; (800a01c <FLASH_MassErase+0x74>)
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	4a0e      	ldr	r2, [pc, #56]	; (800a01c <FLASH_MassErase+0x74>)
 8009fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fe6:	6113      	str	r3, [r2, #16]
 8009fe8:	e005      	b.n	8009ff6 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8009fea:	4b0c      	ldr	r3, [pc, #48]	; (800a01c <FLASH_MassErase+0x74>)
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	4a0b      	ldr	r2, [pc, #44]	; (800a01c <FLASH_MassErase+0x74>)
 8009ff0:	f043 0304 	orr.w	r3, r3, #4
 8009ff4:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8009ff6:	4b09      	ldr	r3, [pc, #36]	; (800a01c <FLASH_MassErase+0x74>)
 8009ff8:	691a      	ldr	r2, [r3, #16]
 8009ffa:	79fb      	ldrb	r3, [r7, #7]
 8009ffc:	021b      	lsls	r3, r3, #8
 8009ffe:	4313      	orrs	r3, r2
 800a000:	4a06      	ldr	r2, [pc, #24]	; (800a01c <FLASH_MassErase+0x74>)
 800a002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a006:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800a008:	f3bf 8f4f 	dsb	sy
}
 800a00c:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800a00e:	bf00      	nop
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	40023c00 	.word	0x40023c00

0800a020 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	460b      	mov	r3, r1
 800a02a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 800a02c:	2300      	movs	r3, #0
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a030:	78fb      	ldrb	r3, [r7, #3]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d102      	bne.n	800a03c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800a036:	2300      	movs	r3, #0
 800a038:	60fb      	str	r3, [r7, #12]
 800a03a:	e010      	b.n	800a05e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a03c:	78fb      	ldrb	r3, [r7, #3]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d103      	bne.n	800a04a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a042:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a046:	60fb      	str	r3, [r7, #12]
 800a048:	e009      	b.n	800a05e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a04a:	78fb      	ldrb	r3, [r7, #3]
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d103      	bne.n	800a058 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a050:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	e002      	b.n	800a05e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a058:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a05c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b0b      	cmp	r3, #11
 800a062:	d902      	bls.n	800a06a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3304      	adds	r3, #4
 800a068:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800a06a:	4b15      	ldr	r3, [pc, #84]	; (800a0c0 <FLASH_Erase_Sector+0xa0>)
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	4a14      	ldr	r2, [pc, #80]	; (800a0c0 <FLASH_Erase_Sector+0xa0>)
 800a070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a074:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a076:	4b12      	ldr	r3, [pc, #72]	; (800a0c0 <FLASH_Erase_Sector+0xa0>)
 800a078:	691a      	ldr	r2, [r3, #16]
 800a07a:	4911      	ldr	r1, [pc, #68]	; (800a0c0 <FLASH_Erase_Sector+0xa0>)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4313      	orrs	r3, r2
 800a080:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a082:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <FLASH_Erase_Sector+0xa0>)
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	4a0e      	ldr	r2, [pc, #56]	; (800a0c0 <FLASH_Erase_Sector+0xa0>)
 800a088:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a08c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a08e:	4b0c      	ldr	r3, [pc, #48]	; (800a0c0 <FLASH_Erase_Sector+0xa0>)
 800a090:	691a      	ldr	r2, [r3, #16]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	00db      	lsls	r3, r3, #3
 800a096:	4313      	orrs	r3, r2
 800a098:	4a09      	ldr	r2, [pc, #36]	; (800a0c0 <FLASH_Erase_Sector+0xa0>)
 800a09a:	f043 0302 	orr.w	r3, r3, #2
 800a09e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a0a0:	4b07      	ldr	r3, [pc, #28]	; (800a0c0 <FLASH_Erase_Sector+0xa0>)
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	4a06      	ldr	r2, [pc, #24]	; (800a0c0 <FLASH_Erase_Sector+0xa0>)
 800a0a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0aa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800a0ac:	f3bf 8f4f 	dsb	sy
}
 800a0b0:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800a0b2:	bf00      	nop
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	40023c00 	.word	0x40023c00

0800a0c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b089      	sub	sp, #36	; 0x24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800a0de:	2300      	movs	r3, #0
 800a0e0:	61fb      	str	r3, [r7, #28]
 800a0e2:	e175      	b.n	800a3d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	f040 8164 	bne.w	800a3ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f003 0303 	and.w	r3, r3, #3
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d005      	beq.n	800a11a <HAL_GPIO_Init+0x56>
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f003 0303 	and.w	r3, r3, #3
 800a116:	2b02      	cmp	r3, #2
 800a118:	d130      	bne.n	800a17c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	2203      	movs	r2, #3
 800a126:	fa02 f303 	lsl.w	r3, r2, r3
 800a12a:	43db      	mvns	r3, r3
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	4013      	ands	r3, r2
 800a130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	68da      	ldr	r2, [r3, #12]
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	fa02 f303 	lsl.w	r3, r2, r3
 800a13e:	69ba      	ldr	r2, [r7, #24]
 800a140:	4313      	orrs	r3, r2
 800a142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a150:	2201      	movs	r2, #1
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	fa02 f303 	lsl.w	r3, r2, r3
 800a158:	43db      	mvns	r3, r3
 800a15a:	69ba      	ldr	r2, [r7, #24]
 800a15c:	4013      	ands	r3, r2
 800a15e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	091b      	lsrs	r3, r3, #4
 800a166:	f003 0201 	and.w	r2, r3, #1
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	fa02 f303 	lsl.w	r3, r2, r3
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	4313      	orrs	r3, r2
 800a174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	69ba      	ldr	r2, [r7, #24]
 800a17a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	f003 0303 	and.w	r3, r3, #3
 800a184:	2b03      	cmp	r3, #3
 800a186:	d017      	beq.n	800a1b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	005b      	lsls	r3, r3, #1
 800a192:	2203      	movs	r2, #3
 800a194:	fa02 f303 	lsl.w	r3, r2, r3
 800a198:	43db      	mvns	r3, r3
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	4013      	ands	r3, r2
 800a19e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	689a      	ldr	r2, [r3, #8]
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	69ba      	ldr	r2, [r7, #24]
 800a1b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f003 0303 	and.w	r3, r3, #3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d123      	bne.n	800a20c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	08da      	lsrs	r2, r3, #3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3208      	adds	r2, #8
 800a1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	f003 0307 	and.w	r3, r3, #7
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	220f      	movs	r2, #15
 800a1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e0:	43db      	mvns	r3, r3
 800a1e2:	69ba      	ldr	r2, [r7, #24]
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	691a      	ldr	r2, [r3, #16]
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	08da      	lsrs	r2, r3, #3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	3208      	adds	r2, #8
 800a206:	69b9      	ldr	r1, [r7, #24]
 800a208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	2203      	movs	r2, #3
 800a218:	fa02 f303 	lsl.w	r3, r2, r3
 800a21c:	43db      	mvns	r3, r3
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	4013      	ands	r3, r2
 800a222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f003 0203 	and.w	r2, r3, #3
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	fa02 f303 	lsl.w	r3, r2, r3
 800a234:	69ba      	ldr	r2, [r7, #24]
 800a236:	4313      	orrs	r3, r2
 800a238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69ba      	ldr	r2, [r7, #24]
 800a23e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 80be 	beq.w	800a3ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a24e:	4b66      	ldr	r3, [pc, #408]	; (800a3e8 <HAL_GPIO_Init+0x324>)
 800a250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a252:	4a65      	ldr	r2, [pc, #404]	; (800a3e8 <HAL_GPIO_Init+0x324>)
 800a254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a258:	6453      	str	r3, [r2, #68]	; 0x44
 800a25a:	4b63      	ldr	r3, [pc, #396]	; (800a3e8 <HAL_GPIO_Init+0x324>)
 800a25c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a25e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a262:	60fb      	str	r3, [r7, #12]
 800a264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800a266:	4a61      	ldr	r2, [pc, #388]	; (800a3ec <HAL_GPIO_Init+0x328>)
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	089b      	lsrs	r3, r3, #2
 800a26c:	3302      	adds	r3, #2
 800a26e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a272:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	f003 0303 	and.w	r3, r3, #3
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	220f      	movs	r2, #15
 800a27e:	fa02 f303 	lsl.w	r3, r2, r3
 800a282:	43db      	mvns	r3, r3
 800a284:	69ba      	ldr	r2, [r7, #24]
 800a286:	4013      	ands	r3, r2
 800a288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a58      	ldr	r2, [pc, #352]	; (800a3f0 <HAL_GPIO_Init+0x32c>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d037      	beq.n	800a302 <HAL_GPIO_Init+0x23e>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a57      	ldr	r2, [pc, #348]	; (800a3f4 <HAL_GPIO_Init+0x330>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d031      	beq.n	800a2fe <HAL_GPIO_Init+0x23a>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a56      	ldr	r2, [pc, #344]	; (800a3f8 <HAL_GPIO_Init+0x334>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d02b      	beq.n	800a2fa <HAL_GPIO_Init+0x236>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a55      	ldr	r2, [pc, #340]	; (800a3fc <HAL_GPIO_Init+0x338>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d025      	beq.n	800a2f6 <HAL_GPIO_Init+0x232>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a54      	ldr	r2, [pc, #336]	; (800a400 <HAL_GPIO_Init+0x33c>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d01f      	beq.n	800a2f2 <HAL_GPIO_Init+0x22e>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a53      	ldr	r2, [pc, #332]	; (800a404 <HAL_GPIO_Init+0x340>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d019      	beq.n	800a2ee <HAL_GPIO_Init+0x22a>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a52      	ldr	r2, [pc, #328]	; (800a408 <HAL_GPIO_Init+0x344>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d013      	beq.n	800a2ea <HAL_GPIO_Init+0x226>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a51      	ldr	r2, [pc, #324]	; (800a40c <HAL_GPIO_Init+0x348>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d00d      	beq.n	800a2e6 <HAL_GPIO_Init+0x222>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a50      	ldr	r2, [pc, #320]	; (800a410 <HAL_GPIO_Init+0x34c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d007      	beq.n	800a2e2 <HAL_GPIO_Init+0x21e>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a4f      	ldr	r2, [pc, #316]	; (800a414 <HAL_GPIO_Init+0x350>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d101      	bne.n	800a2de <HAL_GPIO_Init+0x21a>
 800a2da:	2309      	movs	r3, #9
 800a2dc:	e012      	b.n	800a304 <HAL_GPIO_Init+0x240>
 800a2de:	230a      	movs	r3, #10
 800a2e0:	e010      	b.n	800a304 <HAL_GPIO_Init+0x240>
 800a2e2:	2308      	movs	r3, #8
 800a2e4:	e00e      	b.n	800a304 <HAL_GPIO_Init+0x240>
 800a2e6:	2307      	movs	r3, #7
 800a2e8:	e00c      	b.n	800a304 <HAL_GPIO_Init+0x240>
 800a2ea:	2306      	movs	r3, #6
 800a2ec:	e00a      	b.n	800a304 <HAL_GPIO_Init+0x240>
 800a2ee:	2305      	movs	r3, #5
 800a2f0:	e008      	b.n	800a304 <HAL_GPIO_Init+0x240>
 800a2f2:	2304      	movs	r3, #4
 800a2f4:	e006      	b.n	800a304 <HAL_GPIO_Init+0x240>
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e004      	b.n	800a304 <HAL_GPIO_Init+0x240>
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	e002      	b.n	800a304 <HAL_GPIO_Init+0x240>
 800a2fe:	2301      	movs	r3, #1
 800a300:	e000      	b.n	800a304 <HAL_GPIO_Init+0x240>
 800a302:	2300      	movs	r3, #0
 800a304:	69fa      	ldr	r2, [r7, #28]
 800a306:	f002 0203 	and.w	r2, r2, #3
 800a30a:	0092      	lsls	r2, r2, #2
 800a30c:	4093      	lsls	r3, r2
 800a30e:	69ba      	ldr	r2, [r7, #24]
 800a310:	4313      	orrs	r3, r2
 800a312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800a314:	4935      	ldr	r1, [pc, #212]	; (800a3ec <HAL_GPIO_Init+0x328>)
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	089b      	lsrs	r3, r3, #2
 800a31a:	3302      	adds	r3, #2
 800a31c:	69ba      	ldr	r2, [r7, #24]
 800a31e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a322:	4b3d      	ldr	r3, [pc, #244]	; (800a418 <HAL_GPIO_Init+0x354>)
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	43db      	mvns	r3, r3
 800a32c:	69ba      	ldr	r2, [r7, #24]
 800a32e:	4013      	ands	r3, r2
 800a330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a346:	4a34      	ldr	r2, [pc, #208]	; (800a418 <HAL_GPIO_Init+0x354>)
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a34c:	4b32      	ldr	r3, [pc, #200]	; (800a418 <HAL_GPIO_Init+0x354>)
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	43db      	mvns	r3, r3
 800a356:	69ba      	ldr	r2, [r7, #24]
 800a358:	4013      	ands	r3, r2
 800a35a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a368:	69ba      	ldr	r2, [r7, #24]
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a370:	4a29      	ldr	r2, [pc, #164]	; (800a418 <HAL_GPIO_Init+0x354>)
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a376:	4b28      	ldr	r3, [pc, #160]	; (800a418 <HAL_GPIO_Init+0x354>)
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	43db      	mvns	r3, r3
 800a380:	69ba      	ldr	r2, [r7, #24]
 800a382:	4013      	ands	r3, r2
 800a384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	4313      	orrs	r3, r2
 800a398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a39a:	4a1f      	ldr	r2, [pc, #124]	; (800a418 <HAL_GPIO_Init+0x354>)
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a3a0:	4b1d      	ldr	r3, [pc, #116]	; (800a418 <HAL_GPIO_Init+0x354>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	43db      	mvns	r3, r3
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d003      	beq.n	800a3c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a3bc:	69ba      	ldr	r2, [r7, #24]
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a3c4:	4a14      	ldr	r2, [pc, #80]	; (800a418 <HAL_GPIO_Init+0x354>)
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	61fb      	str	r3, [r7, #28]
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	2b0f      	cmp	r3, #15
 800a3d4:	f67f ae86 	bls.w	800a0e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800a3d8:	bf00      	nop
 800a3da:	bf00      	nop
 800a3dc:	3724      	adds	r7, #36	; 0x24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	40023800 	.word	0x40023800
 800a3ec:	40013800 	.word	0x40013800
 800a3f0:	40020000 	.word	0x40020000
 800a3f4:	40020400 	.word	0x40020400
 800a3f8:	40020800 	.word	0x40020800
 800a3fc:	40020c00 	.word	0x40020c00
 800a400:	40021000 	.word	0x40021000
 800a404:	40021400 	.word	0x40021400
 800a408:	40021800 	.word	0x40021800
 800a40c:	40021c00 	.word	0x40021c00
 800a410:	40022000 	.word	0x40022000
 800a414:	40022400 	.word	0x40022400
 800a418:	40013c00 	.word	0x40013c00

0800a41c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	691a      	ldr	r2, [r3, #16]
 800a42c:	887b      	ldrh	r3, [r7, #2]
 800a42e:	4013      	ands	r3, r2
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a434:	2301      	movs	r3, #1
 800a436:	73fb      	strb	r3, [r7, #15]
 800a438:	e001      	b.n	800a43e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a43a:	2300      	movs	r3, #0
 800a43c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3714      	adds	r7, #20
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	807b      	strh	r3, [r7, #2]
 800a458:	4613      	mov	r3, r2
 800a45a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a45c:	787b      	ldrb	r3, [r7, #1]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d003      	beq.n	800a46a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a462:	887a      	ldrh	r2, [r7, #2]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a468:	e003      	b.n	800a472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a46a:	887b      	ldrh	r3, [r7, #2]
 800a46c:	041a      	lsls	r2, r3, #16
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	619a      	str	r2, [r3, #24]
}
 800a472:	bf00      	nop
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
	...

0800a480 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a48a:	4b23      	ldr	r3, [pc, #140]	; (800a518 <HAL_PWREx_EnableOverDrive+0x98>)
 800a48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48e:	4a22      	ldr	r2, [pc, #136]	; (800a518 <HAL_PWREx_EnableOverDrive+0x98>)
 800a490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a494:	6413      	str	r3, [r2, #64]	; 0x40
 800a496:	4b20      	ldr	r3, [pc, #128]	; (800a518 <HAL_PWREx_EnableOverDrive+0x98>)
 800a498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a49e:	603b      	str	r3, [r7, #0]
 800a4a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a4a2:	4b1e      	ldr	r3, [pc, #120]	; (800a51c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a1d      	ldr	r2, [pc, #116]	; (800a51c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a4a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a4ae:	f7fd ff65 	bl	800837c <HAL_GetTick>
 800a4b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a4b4:	e009      	b.n	800a4ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a4b6:	f7fd ff61 	bl	800837c <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4c4:	d901      	bls.n	800a4ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e022      	b.n	800a510 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a4ca:	4b14      	ldr	r3, [pc, #80]	; (800a51c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4d6:	d1ee      	bne.n	800a4b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a4d8:	4b10      	ldr	r3, [pc, #64]	; (800a51c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a0f      	ldr	r2, [pc, #60]	; (800a51c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a4de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a4e4:	f7fd ff4a 	bl	800837c <HAL_GetTick>
 800a4e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a4ea:	e009      	b.n	800a500 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a4ec:	f7fd ff46 	bl	800837c <HAL_GetTick>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4fa:	d901      	bls.n	800a500 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e007      	b.n	800a510 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a500:	4b06      	ldr	r3, [pc, #24]	; (800a51c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a50c:	d1ee      	bne.n	800a4ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	40023800 	.word	0x40023800
 800a51c:	40007000 	.word	0x40007000

0800a520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a528:	2300      	movs	r3, #0
 800a52a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e29b      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 8087 	beq.w	800a652 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a544:	4b96      	ldr	r3, [pc, #600]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f003 030c 	and.w	r3, r3, #12
 800a54c:	2b04      	cmp	r3, #4
 800a54e:	d00c      	beq.n	800a56a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a550:	4b93      	ldr	r3, [pc, #588]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	f003 030c 	and.w	r3, r3, #12
 800a558:	2b08      	cmp	r3, #8
 800a55a:	d112      	bne.n	800a582 <HAL_RCC_OscConfig+0x62>
 800a55c:	4b90      	ldr	r3, [pc, #576]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a568:	d10b      	bne.n	800a582 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a56a:	4b8d      	ldr	r3, [pc, #564]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d06c      	beq.n	800a650 <HAL_RCC_OscConfig+0x130>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d168      	bne.n	800a650 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e275      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a58a:	d106      	bne.n	800a59a <HAL_RCC_OscConfig+0x7a>
 800a58c:	4b84      	ldr	r3, [pc, #528]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a83      	ldr	r2, [pc, #524]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a596:	6013      	str	r3, [r2, #0]
 800a598:	e02e      	b.n	800a5f8 <HAL_RCC_OscConfig+0xd8>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10c      	bne.n	800a5bc <HAL_RCC_OscConfig+0x9c>
 800a5a2:	4b7f      	ldr	r3, [pc, #508]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a7e      	ldr	r2, [pc, #504]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a5a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5ac:	6013      	str	r3, [r2, #0]
 800a5ae:	4b7c      	ldr	r3, [pc, #496]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a7b      	ldr	r2, [pc, #492]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a5b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5b8:	6013      	str	r3, [r2, #0]
 800a5ba:	e01d      	b.n	800a5f8 <HAL_RCC_OscConfig+0xd8>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5c4:	d10c      	bne.n	800a5e0 <HAL_RCC_OscConfig+0xc0>
 800a5c6:	4b76      	ldr	r3, [pc, #472]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a75      	ldr	r2, [pc, #468]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a5cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5d0:	6013      	str	r3, [r2, #0]
 800a5d2:	4b73      	ldr	r3, [pc, #460]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a72      	ldr	r2, [pc, #456]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a5d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5dc:	6013      	str	r3, [r2, #0]
 800a5de:	e00b      	b.n	800a5f8 <HAL_RCC_OscConfig+0xd8>
 800a5e0:	4b6f      	ldr	r3, [pc, #444]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a6e      	ldr	r2, [pc, #440]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a5e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	4b6c      	ldr	r3, [pc, #432]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a6b      	ldr	r2, [pc, #428]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a5f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d013      	beq.n	800a628 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a600:	f7fd febc 	bl	800837c <HAL_GetTick>
 800a604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a606:	e008      	b.n	800a61a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a608:	f7fd feb8 	bl	800837c <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b64      	cmp	r3, #100	; 0x64
 800a614:	d901      	bls.n	800a61a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e229      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a61a:	4b61      	ldr	r3, [pc, #388]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d0f0      	beq.n	800a608 <HAL_RCC_OscConfig+0xe8>
 800a626:	e014      	b.n	800a652 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a628:	f7fd fea8 	bl	800837c <HAL_GetTick>
 800a62c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a62e:	e008      	b.n	800a642 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a630:	f7fd fea4 	bl	800837c <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	2b64      	cmp	r3, #100	; 0x64
 800a63c:	d901      	bls.n	800a642 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e215      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a642:	4b57      	ldr	r3, [pc, #348]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1f0      	bne.n	800a630 <HAL_RCC_OscConfig+0x110>
 800a64e:	e000      	b.n	800a652 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0302 	and.w	r3, r3, #2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d069      	beq.n	800a732 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a65e:	4b50      	ldr	r3, [pc, #320]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	f003 030c 	and.w	r3, r3, #12
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00b      	beq.n	800a682 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a66a:	4b4d      	ldr	r3, [pc, #308]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	f003 030c 	and.w	r3, r3, #12
 800a672:	2b08      	cmp	r3, #8
 800a674:	d11c      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x190>
 800a676:	4b4a      	ldr	r3, [pc, #296]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d116      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a682:	4b47      	ldr	r3, [pc, #284]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0302 	and.w	r3, r3, #2
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d005      	beq.n	800a69a <HAL_RCC_OscConfig+0x17a>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d001      	beq.n	800a69a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e1e9      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a69a:	4b41      	ldr	r3, [pc, #260]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	00db      	lsls	r3, r3, #3
 800a6a8:	493d      	ldr	r1, [pc, #244]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6ae:	e040      	b.n	800a732 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d023      	beq.n	800a700 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a6b8:	4b39      	ldr	r3, [pc, #228]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a38      	ldr	r2, [pc, #224]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a6be:	f043 0301 	orr.w	r3, r3, #1
 800a6c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c4:	f7fd fe5a 	bl	800837c <HAL_GetTick>
 800a6c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6ca:	e008      	b.n	800a6de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6cc:	f7fd fe56 	bl	800837c <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d901      	bls.n	800a6de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e1c7      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6de:	4b30      	ldr	r3, [pc, #192]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 0302 	and.w	r3, r3, #2
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d0f0      	beq.n	800a6cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6ea:	4b2d      	ldr	r3, [pc, #180]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	00db      	lsls	r3, r3, #3
 800a6f8:	4929      	ldr	r1, [pc, #164]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	600b      	str	r3, [r1, #0]
 800a6fe:	e018      	b.n	800a732 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a700:	4b27      	ldr	r3, [pc, #156]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a26      	ldr	r2, [pc, #152]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a706:	f023 0301 	bic.w	r3, r3, #1
 800a70a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a70c:	f7fd fe36 	bl	800837c <HAL_GetTick>
 800a710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a712:	e008      	b.n	800a726 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a714:	f7fd fe32 	bl	800837c <HAL_GetTick>
 800a718:	4602      	mov	r2, r0
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d901      	bls.n	800a726 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a722:	2303      	movs	r3, #3
 800a724:	e1a3      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a726:	4b1e      	ldr	r3, [pc, #120]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0302 	and.w	r3, r3, #2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1f0      	bne.n	800a714 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0308 	and.w	r3, r3, #8
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d038      	beq.n	800a7b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d019      	beq.n	800a77a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a746:	4b16      	ldr	r3, [pc, #88]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a74a:	4a15      	ldr	r2, [pc, #84]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a74c:	f043 0301 	orr.w	r3, r3, #1
 800a750:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a752:	f7fd fe13 	bl	800837c <HAL_GetTick>
 800a756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a758:	e008      	b.n	800a76c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a75a:	f7fd fe0f 	bl	800837c <HAL_GetTick>
 800a75e:	4602      	mov	r2, r0
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	1ad3      	subs	r3, r2, r3
 800a764:	2b02      	cmp	r3, #2
 800a766:	d901      	bls.n	800a76c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a768:	2303      	movs	r3, #3
 800a76a:	e180      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a76c:	4b0c      	ldr	r3, [pc, #48]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a76e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a770:	f003 0302 	and.w	r3, r3, #2
 800a774:	2b00      	cmp	r3, #0
 800a776:	d0f0      	beq.n	800a75a <HAL_RCC_OscConfig+0x23a>
 800a778:	e01a      	b.n	800a7b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a77a:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a77e:	4a08      	ldr	r2, [pc, #32]	; (800a7a0 <HAL_RCC_OscConfig+0x280>)
 800a780:	f023 0301 	bic.w	r3, r3, #1
 800a784:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a786:	f7fd fdf9 	bl	800837c <HAL_GetTick>
 800a78a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a78c:	e00a      	b.n	800a7a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a78e:	f7fd fdf5 	bl	800837c <HAL_GetTick>
 800a792:	4602      	mov	r2, r0
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d903      	bls.n	800a7a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a79c:	2303      	movs	r3, #3
 800a79e:	e166      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
 800a7a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7a4:	4b92      	ldr	r3, [pc, #584]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a7a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7a8:	f003 0302 	and.w	r3, r3, #2
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1ee      	bne.n	800a78e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 0304 	and.w	r3, r3, #4
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 80a4 	beq.w	800a906 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7be:	4b8c      	ldr	r3, [pc, #560]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10d      	bne.n	800a7e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7ca:	4b89      	ldr	r3, [pc, #548]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ce:	4a88      	ldr	r2, [pc, #544]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a7d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7d4:	6413      	str	r3, [r2, #64]	; 0x40
 800a7d6:	4b86      	ldr	r3, [pc, #536]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7de:	60bb      	str	r3, [r7, #8]
 800a7e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a7e6:	4b83      	ldr	r3, [pc, #524]	; (800a9f4 <HAL_RCC_OscConfig+0x4d4>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d118      	bne.n	800a824 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a7f2:	4b80      	ldr	r3, [pc, #512]	; (800a9f4 <HAL_RCC_OscConfig+0x4d4>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a7f      	ldr	r2, [pc, #508]	; (800a9f4 <HAL_RCC_OscConfig+0x4d4>)
 800a7f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7fe:	f7fd fdbd 	bl	800837c <HAL_GetTick>
 800a802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a804:	e008      	b.n	800a818 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a806:	f7fd fdb9 	bl	800837c <HAL_GetTick>
 800a80a:	4602      	mov	r2, r0
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	2b64      	cmp	r3, #100	; 0x64
 800a812:	d901      	bls.n	800a818 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a814:	2303      	movs	r3, #3
 800a816:	e12a      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a818:	4b76      	ldr	r3, [pc, #472]	; (800a9f4 <HAL_RCC_OscConfig+0x4d4>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a820:	2b00      	cmp	r3, #0
 800a822:	d0f0      	beq.n	800a806 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d106      	bne.n	800a83a <HAL_RCC_OscConfig+0x31a>
 800a82c:	4b70      	ldr	r3, [pc, #448]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a830:	4a6f      	ldr	r2, [pc, #444]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a832:	f043 0301 	orr.w	r3, r3, #1
 800a836:	6713      	str	r3, [r2, #112]	; 0x70
 800a838:	e02d      	b.n	800a896 <HAL_RCC_OscConfig+0x376>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10c      	bne.n	800a85c <HAL_RCC_OscConfig+0x33c>
 800a842:	4b6b      	ldr	r3, [pc, #428]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a846:	4a6a      	ldr	r2, [pc, #424]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a848:	f023 0301 	bic.w	r3, r3, #1
 800a84c:	6713      	str	r3, [r2, #112]	; 0x70
 800a84e:	4b68      	ldr	r3, [pc, #416]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a852:	4a67      	ldr	r2, [pc, #412]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a854:	f023 0304 	bic.w	r3, r3, #4
 800a858:	6713      	str	r3, [r2, #112]	; 0x70
 800a85a:	e01c      	b.n	800a896 <HAL_RCC_OscConfig+0x376>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	2b05      	cmp	r3, #5
 800a862:	d10c      	bne.n	800a87e <HAL_RCC_OscConfig+0x35e>
 800a864:	4b62      	ldr	r3, [pc, #392]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a868:	4a61      	ldr	r2, [pc, #388]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a86a:	f043 0304 	orr.w	r3, r3, #4
 800a86e:	6713      	str	r3, [r2, #112]	; 0x70
 800a870:	4b5f      	ldr	r3, [pc, #380]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a874:	4a5e      	ldr	r2, [pc, #376]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a876:	f043 0301 	orr.w	r3, r3, #1
 800a87a:	6713      	str	r3, [r2, #112]	; 0x70
 800a87c:	e00b      	b.n	800a896 <HAL_RCC_OscConfig+0x376>
 800a87e:	4b5c      	ldr	r3, [pc, #368]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a882:	4a5b      	ldr	r2, [pc, #364]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a884:	f023 0301 	bic.w	r3, r3, #1
 800a888:	6713      	str	r3, [r2, #112]	; 0x70
 800a88a:	4b59      	ldr	r3, [pc, #356]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a88c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a88e:	4a58      	ldr	r2, [pc, #352]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a890:	f023 0304 	bic.w	r3, r3, #4
 800a894:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d015      	beq.n	800a8ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a89e:	f7fd fd6d 	bl	800837c <HAL_GetTick>
 800a8a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8a4:	e00a      	b.n	800a8bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8a6:	f7fd fd69 	bl	800837c <HAL_GetTick>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d901      	bls.n	800a8bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e0d8      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8bc:	4b4c      	ldr	r3, [pc, #304]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c0:	f003 0302 	and.w	r3, r3, #2
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d0ee      	beq.n	800a8a6 <HAL_RCC_OscConfig+0x386>
 800a8c8:	e014      	b.n	800a8f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8ca:	f7fd fd57 	bl	800837c <HAL_GetTick>
 800a8ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8d0:	e00a      	b.n	800a8e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8d2:	f7fd fd53 	bl	800837c <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d901      	bls.n	800a8e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e0c2      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8e8:	4b41      	ldr	r3, [pc, #260]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a8ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ec:	f003 0302 	and.w	r3, r3, #2
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1ee      	bne.n	800a8d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a8f4:	7dfb      	ldrb	r3, [r7, #23]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d105      	bne.n	800a906 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8fa:	4b3d      	ldr	r3, [pc, #244]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fe:	4a3c      	ldr	r2, [pc, #240]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a904:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 80ae 	beq.w	800aa6c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a910:	4b37      	ldr	r3, [pc, #220]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	f003 030c 	and.w	r3, r3, #12
 800a918:	2b08      	cmp	r3, #8
 800a91a:	d06d      	beq.n	800a9f8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	2b02      	cmp	r3, #2
 800a922:	d14b      	bne.n	800a9bc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a924:	4b32      	ldr	r3, [pc, #200]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a31      	ldr	r2, [pc, #196]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a92a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a92e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a930:	f7fd fd24 	bl	800837c <HAL_GetTick>
 800a934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a936:	e008      	b.n	800a94a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a938:	f7fd fd20 	bl	800837c <HAL_GetTick>
 800a93c:	4602      	mov	r2, r0
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	2b02      	cmp	r3, #2
 800a944:	d901      	bls.n	800a94a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	e091      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a94a:	4b29      	ldr	r3, [pc, #164]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1f0      	bne.n	800a938 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	69da      	ldr	r2, [r3, #28]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a1b      	ldr	r3, [r3, #32]
 800a95e:	431a      	orrs	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	019b      	lsls	r3, r3, #6
 800a966:	431a      	orrs	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96c:	085b      	lsrs	r3, r3, #1
 800a96e:	3b01      	subs	r3, #1
 800a970:	041b      	lsls	r3, r3, #16
 800a972:	431a      	orrs	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	061b      	lsls	r3, r3, #24
 800a97a:	431a      	orrs	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a980:	071b      	lsls	r3, r3, #28
 800a982:	491b      	ldr	r1, [pc, #108]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a984:	4313      	orrs	r3, r2
 800a986:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a988:	4b19      	ldr	r3, [pc, #100]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a18      	ldr	r2, [pc, #96]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a98e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a994:	f7fd fcf2 	bl	800837c <HAL_GetTick>
 800a998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a99a:	e008      	b.n	800a9ae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a99c:	f7fd fcee 	bl	800837c <HAL_GetTick>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d901      	bls.n	800a9ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e05f      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9ae:	4b10      	ldr	r3, [pc, #64]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d0f0      	beq.n	800a99c <HAL_RCC_OscConfig+0x47c>
 800a9ba:	e057      	b.n	800aa6c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9bc:	4b0c      	ldr	r3, [pc, #48]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a0b      	ldr	r2, [pc, #44]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a9c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c8:	f7fd fcd8 	bl	800837c <HAL_GetTick>
 800a9cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9ce:	e008      	b.n	800a9e2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9d0:	f7fd fcd4 	bl	800837c <HAL_GetTick>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d901      	bls.n	800a9e2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	e045      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9e2:	4b03      	ldr	r3, [pc, #12]	; (800a9f0 <HAL_RCC_OscConfig+0x4d0>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1f0      	bne.n	800a9d0 <HAL_RCC_OscConfig+0x4b0>
 800a9ee:	e03d      	b.n	800aa6c <HAL_RCC_OscConfig+0x54c>
 800a9f0:	40023800 	.word	0x40023800
 800a9f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a9f8:	4b1f      	ldr	r3, [pc, #124]	; (800aa78 <HAL_RCC_OscConfig+0x558>)
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d030      	beq.n	800aa68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d129      	bne.n	800aa68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d122      	bne.n	800aa68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800aa28:	4013      	ands	r3, r2
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d119      	bne.n	800aa68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3e:	085b      	lsrs	r3, r3, #1
 800aa40:	3b01      	subs	r3, #1
 800aa42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d10f      	bne.n	800aa68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d107      	bne.n	800aa68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa62:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d001      	beq.n	800aa6c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e000      	b.n	800aa6e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	40023800 	.word	0x40023800

0800aa7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800aa86:	2300      	movs	r3, #0
 800aa88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e0d0      	b.n	800ac36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa94:	4b6a      	ldr	r3, [pc, #424]	; (800ac40 <HAL_RCC_ClockConfig+0x1c4>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 030f 	and.w	r3, r3, #15
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d910      	bls.n	800aac4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaa2:	4b67      	ldr	r3, [pc, #412]	; (800ac40 <HAL_RCC_ClockConfig+0x1c4>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f023 020f 	bic.w	r2, r3, #15
 800aaaa:	4965      	ldr	r1, [pc, #404]	; (800ac40 <HAL_RCC_ClockConfig+0x1c4>)
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aab2:	4b63      	ldr	r3, [pc, #396]	; (800ac40 <HAL_RCC_ClockConfig+0x1c4>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 030f 	and.w	r3, r3, #15
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d001      	beq.n	800aac4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e0b8      	b.n	800ac36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d020      	beq.n	800ab12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d005      	beq.n	800aae8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aadc:	4b59      	ldr	r3, [pc, #356]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	4a58      	ldr	r2, [pc, #352]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800aae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800aae6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 0308 	and.w	r3, r3, #8
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d005      	beq.n	800ab00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aaf4:	4b53      	ldr	r3, [pc, #332]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	4a52      	ldr	r2, [pc, #328]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800aafa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800aafe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab00:	4b50      	ldr	r3, [pc, #320]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	494d      	ldr	r1, [pc, #308]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0301 	and.w	r3, r3, #1
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d040      	beq.n	800aba0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d107      	bne.n	800ab36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab26:	4b47      	ldr	r3, [pc, #284]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d115      	bne.n	800ab5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e07f      	b.n	800ac36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d107      	bne.n	800ab4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab3e:	4b41      	ldr	r3, [pc, #260]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d109      	bne.n	800ab5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e073      	b.n	800ac36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab4e:	4b3d      	ldr	r3, [pc, #244]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 0302 	and.w	r3, r3, #2
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d101      	bne.n	800ab5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e06b      	b.n	800ac36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab5e:	4b39      	ldr	r3, [pc, #228]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	f023 0203 	bic.w	r2, r3, #3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	4936      	ldr	r1, [pc, #216]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab70:	f7fd fc04 	bl	800837c <HAL_GetTick>
 800ab74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab76:	e00a      	b.n	800ab8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab78:	f7fd fc00 	bl	800837c <HAL_GetTick>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d901      	bls.n	800ab8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e053      	b.n	800ac36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab8e:	4b2d      	ldr	r3, [pc, #180]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	f003 020c 	and.w	r2, r3, #12
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d1eb      	bne.n	800ab78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aba0:	4b27      	ldr	r3, [pc, #156]	; (800ac40 <HAL_RCC_ClockConfig+0x1c4>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 030f 	and.w	r3, r3, #15
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d210      	bcs.n	800abd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abae:	4b24      	ldr	r3, [pc, #144]	; (800ac40 <HAL_RCC_ClockConfig+0x1c4>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f023 020f 	bic.w	r2, r3, #15
 800abb6:	4922      	ldr	r1, [pc, #136]	; (800ac40 <HAL_RCC_ClockConfig+0x1c4>)
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	4313      	orrs	r3, r2
 800abbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abbe:	4b20      	ldr	r3, [pc, #128]	; (800ac40 <HAL_RCC_ClockConfig+0x1c4>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 030f 	and.w	r3, r3, #15
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d001      	beq.n	800abd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	e032      	b.n	800ac36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0304 	and.w	r3, r3, #4
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d008      	beq.n	800abee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800abdc:	4b19      	ldr	r3, [pc, #100]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	4916      	ldr	r1, [pc, #88]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800abea:	4313      	orrs	r3, r2
 800abec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0308 	and.w	r3, r3, #8
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d009      	beq.n	800ac0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800abfa:	4b12      	ldr	r3, [pc, #72]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	00db      	lsls	r3, r3, #3
 800ac08:	490e      	ldr	r1, [pc, #56]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ac0e:	f000 f821 	bl	800ac54 <HAL_RCC_GetSysClockFreq>
 800ac12:	4602      	mov	r2, r0
 800ac14:	4b0b      	ldr	r3, [pc, #44]	; (800ac44 <HAL_RCC_ClockConfig+0x1c8>)
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	091b      	lsrs	r3, r3, #4
 800ac1a:	f003 030f 	and.w	r3, r3, #15
 800ac1e:	490a      	ldr	r1, [pc, #40]	; (800ac48 <HAL_RCC_ClockConfig+0x1cc>)
 800ac20:	5ccb      	ldrb	r3, [r1, r3]
 800ac22:	fa22 f303 	lsr.w	r3, r2, r3
 800ac26:	4a09      	ldr	r2, [pc, #36]	; (800ac4c <HAL_RCC_ClockConfig+0x1d0>)
 800ac28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ac2a:	4b09      	ldr	r3, [pc, #36]	; (800ac50 <HAL_RCC_ClockConfig+0x1d4>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fd f88a 	bl	8007d48 <HAL_InitTick>

  return HAL_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	40023c00 	.word	0x40023c00
 800ac44:	40023800 	.word	0x40023800
 800ac48:	080233a4 	.word	0x080233a4
 800ac4c:	20000000 	.word	0x20000000
 800ac50:	20000004 	.word	0x20000004

0800ac54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac58:	b090      	sub	sp, #64	; 0x40
 800ac5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac60:	2300      	movs	r3, #0
 800ac62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac64:	2300      	movs	r3, #0
 800ac66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac6c:	4b59      	ldr	r3, [pc, #356]	; (800add4 <HAL_RCC_GetSysClockFreq+0x180>)
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	f003 030c 	and.w	r3, r3, #12
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	d00d      	beq.n	800ac94 <HAL_RCC_GetSysClockFreq+0x40>
 800ac78:	2b08      	cmp	r3, #8
 800ac7a:	f200 80a1 	bhi.w	800adc0 <HAL_RCC_GetSysClockFreq+0x16c>
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d002      	beq.n	800ac88 <HAL_RCC_GetSysClockFreq+0x34>
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	d003      	beq.n	800ac8e <HAL_RCC_GetSysClockFreq+0x3a>
 800ac86:	e09b      	b.n	800adc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ac88:	4b53      	ldr	r3, [pc, #332]	; (800add8 <HAL_RCC_GetSysClockFreq+0x184>)
 800ac8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ac8c:	e09b      	b.n	800adc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ac8e:	4b53      	ldr	r3, [pc, #332]	; (800addc <HAL_RCC_GetSysClockFreq+0x188>)
 800ac90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800ac92:	e098      	b.n	800adc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ac94:	4b4f      	ldr	r3, [pc, #316]	; (800add4 <HAL_RCC_GetSysClockFreq+0x180>)
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac9c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ac9e:	4b4d      	ldr	r3, [pc, #308]	; (800add4 <HAL_RCC_GetSysClockFreq+0x180>)
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d028      	beq.n	800acfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800acaa:	4b4a      	ldr	r3, [pc, #296]	; (800add4 <HAL_RCC_GetSysClockFreq+0x180>)
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	099b      	lsrs	r3, r3, #6
 800acb0:	2200      	movs	r2, #0
 800acb2:	623b      	str	r3, [r7, #32]
 800acb4:	627a      	str	r2, [r7, #36]	; 0x24
 800acb6:	6a3b      	ldr	r3, [r7, #32]
 800acb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800acbc:	2100      	movs	r1, #0
 800acbe:	4b47      	ldr	r3, [pc, #284]	; (800addc <HAL_RCC_GetSysClockFreq+0x188>)
 800acc0:	fb03 f201 	mul.w	r2, r3, r1
 800acc4:	2300      	movs	r3, #0
 800acc6:	fb00 f303 	mul.w	r3, r0, r3
 800acca:	4413      	add	r3, r2
 800accc:	4a43      	ldr	r2, [pc, #268]	; (800addc <HAL_RCC_GetSysClockFreq+0x188>)
 800acce:	fba0 1202 	umull	r1, r2, r0, r2
 800acd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800acd4:	460a      	mov	r2, r1
 800acd6:	62ba      	str	r2, [r7, #40]	; 0x28
 800acd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acda:	4413      	add	r3, r2
 800acdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace0:	2200      	movs	r2, #0
 800ace2:	61bb      	str	r3, [r7, #24]
 800ace4:	61fa      	str	r2, [r7, #28]
 800ace6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800acea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800acee:	f7f5 faff 	bl	80002f0 <__aeabi_uldivmod>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	4613      	mov	r3, r2
 800acf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acfa:	e053      	b.n	800ada4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800acfc:	4b35      	ldr	r3, [pc, #212]	; (800add4 <HAL_RCC_GetSysClockFreq+0x180>)
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	099b      	lsrs	r3, r3, #6
 800ad02:	2200      	movs	r2, #0
 800ad04:	613b      	str	r3, [r7, #16]
 800ad06:	617a      	str	r2, [r7, #20]
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ad0e:	f04f 0b00 	mov.w	fp, #0
 800ad12:	4652      	mov	r2, sl
 800ad14:	465b      	mov	r3, fp
 800ad16:	f04f 0000 	mov.w	r0, #0
 800ad1a:	f04f 0100 	mov.w	r1, #0
 800ad1e:	0159      	lsls	r1, r3, #5
 800ad20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ad24:	0150      	lsls	r0, r2, #5
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	ebb2 080a 	subs.w	r8, r2, sl
 800ad2e:	eb63 090b 	sbc.w	r9, r3, fp
 800ad32:	f04f 0200 	mov.w	r2, #0
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ad3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ad42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ad46:	ebb2 0408 	subs.w	r4, r2, r8
 800ad4a:	eb63 0509 	sbc.w	r5, r3, r9
 800ad4e:	f04f 0200 	mov.w	r2, #0
 800ad52:	f04f 0300 	mov.w	r3, #0
 800ad56:	00eb      	lsls	r3, r5, #3
 800ad58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad5c:	00e2      	lsls	r2, r4, #3
 800ad5e:	4614      	mov	r4, r2
 800ad60:	461d      	mov	r5, r3
 800ad62:	eb14 030a 	adds.w	r3, r4, sl
 800ad66:	603b      	str	r3, [r7, #0]
 800ad68:	eb45 030b 	adc.w	r3, r5, fp
 800ad6c:	607b      	str	r3, [r7, #4]
 800ad6e:	f04f 0200 	mov.w	r2, #0
 800ad72:	f04f 0300 	mov.w	r3, #0
 800ad76:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	028b      	lsls	r3, r1, #10
 800ad7e:	4621      	mov	r1, r4
 800ad80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ad84:	4621      	mov	r1, r4
 800ad86:	028a      	lsls	r2, r1, #10
 800ad88:	4610      	mov	r0, r2
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8e:	2200      	movs	r2, #0
 800ad90:	60bb      	str	r3, [r7, #8]
 800ad92:	60fa      	str	r2, [r7, #12]
 800ad94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad98:	f7f5 faaa 	bl	80002f0 <__aeabi_uldivmod>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	4613      	mov	r3, r2
 800ada2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ada4:	4b0b      	ldr	r3, [pc, #44]	; (800add4 <HAL_RCC_GetSysClockFreq+0x180>)
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	0c1b      	lsrs	r3, r3, #16
 800adaa:	f003 0303 	and.w	r3, r3, #3
 800adae:	3301      	adds	r3, #1
 800adb0:	005b      	lsls	r3, r3, #1
 800adb2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800adb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800adbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800adbe:	e002      	b.n	800adc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800adc0:	4b05      	ldr	r3, [pc, #20]	; (800add8 <HAL_RCC_GetSysClockFreq+0x184>)
 800adc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800adc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800adc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3740      	adds	r7, #64	; 0x40
 800adcc:	46bd      	mov	sp, r7
 800adce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800add2:	bf00      	nop
 800add4:	40023800 	.word	0x40023800
 800add8:	00f42400 	.word	0x00f42400
 800addc:	017d7840 	.word	0x017d7840

0800ade0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ade0:	b480      	push	{r7}
 800ade2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ade4:	4b03      	ldr	r3, [pc, #12]	; (800adf4 <HAL_RCC_GetHCLKFreq+0x14>)
 800ade6:	681b      	ldr	r3, [r3, #0]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	20000000 	.word	0x20000000

0800adf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800adfc:	f7ff fff0 	bl	800ade0 <HAL_RCC_GetHCLKFreq>
 800ae00:	4602      	mov	r2, r0
 800ae02:	4b05      	ldr	r3, [pc, #20]	; (800ae18 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	0b5b      	lsrs	r3, r3, #13
 800ae08:	f003 0307 	and.w	r3, r3, #7
 800ae0c:	4903      	ldr	r1, [pc, #12]	; (800ae1c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae0e:	5ccb      	ldrb	r3, [r1, r3]
 800ae10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	40023800 	.word	0x40023800
 800ae1c:	080233b4 	.word	0x080233b4

0800ae20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	220f      	movs	r2, #15
 800ae2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ae30:	4b12      	ldr	r3, [pc, #72]	; (800ae7c <HAL_RCC_GetClockConfig+0x5c>)
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	f003 0203 	and.w	r2, r3, #3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ae3c:	4b0f      	ldr	r3, [pc, #60]	; (800ae7c <HAL_RCC_GetClockConfig+0x5c>)
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ae48:	4b0c      	ldr	r3, [pc, #48]	; (800ae7c <HAL_RCC_GetClockConfig+0x5c>)
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ae54:	4b09      	ldr	r3, [pc, #36]	; (800ae7c <HAL_RCC_GetClockConfig+0x5c>)
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	08db      	lsrs	r3, r3, #3
 800ae5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ae62:	4b07      	ldr	r3, [pc, #28]	; (800ae80 <HAL_RCC_GetClockConfig+0x60>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 020f 	and.w	r2, r3, #15
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	601a      	str	r2, [r3, #0]
}
 800ae6e:	bf00      	nop
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	40023800 	.word	0x40023800
 800ae80:	40023c00 	.word	0x40023c00

0800ae84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d012      	beq.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aeac:	4b69      	ldr	r3, [pc, #420]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	4a68      	ldr	r2, [pc, #416]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aeb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aeb6:	6093      	str	r3, [r2, #8]
 800aeb8:	4b66      	ldr	r3, [pc, #408]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aeba:	689a      	ldr	r2, [r3, #8]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec0:	4964      	ldr	r1, [pc, #400]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800aece:	2301      	movs	r3, #1
 800aed0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d017      	beq.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aede:	4b5d      	ldr	r3, [pc, #372]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aee4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeec:	4959      	ldr	r1, [pc, #356]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aefc:	d101      	bne.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800aefe:	2301      	movs	r3, #1
 800af00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af06:	2b00      	cmp	r3, #0
 800af08:	d101      	bne.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800af0a:	2301      	movs	r3, #1
 800af0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af16:	2b00      	cmp	r3, #0
 800af18:	d017      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800af1a:	4b4e      	ldr	r3, [pc, #312]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af28:	494a      	ldr	r1, [pc, #296]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af38:	d101      	bne.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800af3a:	2301      	movs	r3, #1
 800af3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800af46:	2301      	movs	r3, #1
 800af48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800af56:	2301      	movs	r3, #1
 800af58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0320 	and.w	r3, r3, #32
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 808b 	beq.w	800b07e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800af68:	4b3a      	ldr	r3, [pc, #232]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6c:	4a39      	ldr	r2, [pc, #228]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af72:	6413      	str	r3, [r2, #64]	; 0x40
 800af74:	4b37      	ldr	r3, [pc, #220]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af7c:	60bb      	str	r3, [r7, #8]
 800af7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800af80:	4b35      	ldr	r3, [pc, #212]	; (800b058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a34      	ldr	r2, [pc, #208]	; (800b058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800af86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af8c:	f7fd f9f6 	bl	800837c <HAL_GetTick>
 800af90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800af92:	e008      	b.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af94:	f7fd f9f2 	bl	800837c <HAL_GetTick>
 800af98:	4602      	mov	r2, r0
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	2b64      	cmp	r3, #100	; 0x64
 800afa0:	d901      	bls.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800afa2:	2303      	movs	r3, #3
 800afa4:	e38f      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800afa6:	4b2c      	ldr	r3, [pc, #176]	; (800b058 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d0f0      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800afb2:	4b28      	ldr	r3, [pc, #160]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d035      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afca:	693a      	ldr	r2, [r7, #16]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d02e      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afd0:	4b20      	ldr	r3, [pc, #128]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afd8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800afda:	4b1e      	ldr	r3, [pc, #120]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afde:	4a1d      	ldr	r2, [pc, #116]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afe4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800afe6:	4b1b      	ldr	r3, [pc, #108]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afea:	4a1a      	ldr	r2, [pc, #104]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aff0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800aff2:	4a18      	ldr	r2, [pc, #96]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800aff8:	4b16      	ldr	r3, [pc, #88]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800affa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800affc:	f003 0301 	and.w	r3, r3, #1
 800b000:	2b01      	cmp	r3, #1
 800b002:	d114      	bne.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b004:	f7fd f9ba 	bl	800837c <HAL_GetTick>
 800b008:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b00a:	e00a      	b.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b00c:	f7fd f9b6 	bl	800837c <HAL_GetTick>
 800b010:	4602      	mov	r2, r0
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	f241 3288 	movw	r2, #5000	; 0x1388
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d901      	bls.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b01e:	2303      	movs	r3, #3
 800b020:	e351      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b022:	4b0c      	ldr	r3, [pc, #48]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b026:	f003 0302 	and.w	r3, r3, #2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0ee      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b03a:	d111      	bne.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b03c:	4b05      	ldr	r3, [pc, #20]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b048:	4b04      	ldr	r3, [pc, #16]	; (800b05c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b04a:	400b      	ands	r3, r1
 800b04c:	4901      	ldr	r1, [pc, #4]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b04e:	4313      	orrs	r3, r2
 800b050:	608b      	str	r3, [r1, #8]
 800b052:	e00b      	b.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b054:	40023800 	.word	0x40023800
 800b058:	40007000 	.word	0x40007000
 800b05c:	0ffffcff 	.word	0x0ffffcff
 800b060:	4bac      	ldr	r3, [pc, #688]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	4aab      	ldr	r2, [pc, #684]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b066:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b06a:	6093      	str	r3, [r2, #8]
 800b06c:	4ba9      	ldr	r3, [pc, #676]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b06e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b078:	49a6      	ldr	r1, [pc, #664]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b07a:	4313      	orrs	r3, r2
 800b07c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 0310 	and.w	r3, r3, #16
 800b086:	2b00      	cmp	r3, #0
 800b088:	d010      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b08a:	4ba2      	ldr	r3, [pc, #648]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b090:	4aa0      	ldr	r2, [pc, #640]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b096:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800b09a:	4b9e      	ldr	r3, [pc, #632]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b09c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a4:	499b      	ldr	r1, [pc, #620]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00a      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b0b8:	4b96      	ldr	r3, [pc, #600]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0c6:	4993      	ldr	r1, [pc, #588]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00a      	beq.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b0da:	4b8e      	ldr	r3, [pc, #568]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0e8:	498a      	ldr	r1, [pc, #552]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00a      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b0fc:	4b85      	ldr	r3, [pc, #532]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b102:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b10a:	4982      	ldr	r1, [pc, #520]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b10c:	4313      	orrs	r3, r2
 800b10e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00a      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b11e:	4b7d      	ldr	r3, [pc, #500]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b124:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b12c:	4979      	ldr	r1, [pc, #484]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b12e:	4313      	orrs	r3, r2
 800b130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00a      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b140:	4b74      	ldr	r3, [pc, #464]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b146:	f023 0203 	bic.w	r2, r3, #3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b14e:	4971      	ldr	r1, [pc, #452]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b150:	4313      	orrs	r3, r2
 800b152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00a      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b162:	4b6c      	ldr	r3, [pc, #432]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b168:	f023 020c 	bic.w	r2, r3, #12
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b170:	4968      	ldr	r1, [pc, #416]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b172:	4313      	orrs	r3, r2
 800b174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00a      	beq.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b184:	4b63      	ldr	r3, [pc, #396]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b18a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b192:	4960      	ldr	r1, [pc, #384]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b194:	4313      	orrs	r3, r2
 800b196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00a      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b1a6:	4b5b      	ldr	r3, [pc, #364]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b4:	4957      	ldr	r1, [pc, #348]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00a      	beq.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b1c8:	4b52      	ldr	r3, [pc, #328]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1d6:	494f      	ldr	r1, [pc, #316]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00a      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b1ea:	4b4a      	ldr	r3, [pc, #296]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1f8:	4946      	ldr	r1, [pc, #280]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00a      	beq.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b20c:	4b41      	ldr	r3, [pc, #260]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b20e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b212:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b21a:	493e      	ldr	r1, [pc, #248]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b21c:	4313      	orrs	r3, r2
 800b21e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00a      	beq.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b22e:	4b39      	ldr	r3, [pc, #228]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b234:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b23c:	4935      	ldr	r1, [pc, #212]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b23e:	4313      	orrs	r3, r2
 800b240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00a      	beq.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b250:	4b30      	ldr	r3, [pc, #192]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b256:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b25e:	492d      	ldr	r1, [pc, #180]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b260:	4313      	orrs	r3, r2
 800b262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d011      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b272:	4b28      	ldr	r3, [pc, #160]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b278:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b280:	4924      	ldr	r1, [pc, #144]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b282:	4313      	orrs	r3, r2
 800b284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b28c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b290:	d101      	bne.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b292:	2301      	movs	r3, #1
 800b294:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f003 0308 	and.w	r3, r3, #8
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00a      	beq.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2b2:	4b18      	ldr	r3, [pc, #96]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2c0:	4914      	ldr	r1, [pc, #80]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00b      	beq.n	800b2ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b2d4:	4b0f      	ldr	r3, [pc, #60]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2e4:	490b      	ldr	r1, [pc, #44]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00f      	beq.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800b2f8:	4b06      	ldr	r3, [pc, #24]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b2fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b308:	4902      	ldr	r1, [pc, #8]	; (800b314 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b30a:	4313      	orrs	r3, r2
 800b30c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b310:	e002      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800b312:	bf00      	nop
 800b314:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00b      	beq.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b324:	4b8a      	ldr	r3, [pc, #552]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b32a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b334:	4986      	ldr	r1, [pc, #536]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b336:	4313      	orrs	r3, r2
 800b338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00b      	beq.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b348:	4b81      	ldr	r3, [pc, #516]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b34a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b34e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b358:	497d      	ldr	r1, [pc, #500]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b35a:	4313      	orrs	r3, r2
 800b35c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d006      	beq.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f000 80d6 	beq.w	800b520 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b374:	4b76      	ldr	r3, [pc, #472]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a75      	ldr	r2, [pc, #468]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b37a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b37e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b380:	f7fc fffc 	bl	800837c <HAL_GetTick>
 800b384:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b386:	e008      	b.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b388:	f7fc fff8 	bl	800837c <HAL_GetTick>
 800b38c:	4602      	mov	r2, r0
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	2b64      	cmp	r3, #100	; 0x64
 800b394:	d901      	bls.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b396:	2303      	movs	r3, #3
 800b398:	e195      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b39a:	4b6d      	ldr	r3, [pc, #436]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1f0      	bne.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d021      	beq.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d11d      	bne.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b3ba:	4b65      	ldr	r3, [pc, #404]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3c0:	0c1b      	lsrs	r3, r3, #16
 800b3c2:	f003 0303 	and.w	r3, r3, #3
 800b3c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b3c8:	4b61      	ldr	r3, [pc, #388]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b3ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3ce:	0e1b      	lsrs	r3, r3, #24
 800b3d0:	f003 030f 	and.w	r3, r3, #15
 800b3d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	019a      	lsls	r2, r3, #6
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	041b      	lsls	r3, r3, #16
 800b3e0:	431a      	orrs	r2, r3
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	061b      	lsls	r3, r3, #24
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	071b      	lsls	r3, r3, #28
 800b3ee:	4958      	ldr	r1, [pc, #352]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d004      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x588>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b40a:	d00a      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b414:	2b00      	cmp	r3, #0
 800b416:	d02e      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b420:	d129      	bne.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b422:	4b4b      	ldr	r3, [pc, #300]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b428:	0c1b      	lsrs	r3, r3, #16
 800b42a:	f003 0303 	and.w	r3, r3, #3
 800b42e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b430:	4b47      	ldr	r3, [pc, #284]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b436:	0f1b      	lsrs	r3, r3, #28
 800b438:	f003 0307 	and.w	r3, r3, #7
 800b43c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	019a      	lsls	r2, r3, #6
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	041b      	lsls	r3, r3, #16
 800b448:	431a      	orrs	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	061b      	lsls	r3, r3, #24
 800b450:	431a      	orrs	r2, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	071b      	lsls	r3, r3, #28
 800b456:	493e      	ldr	r1, [pc, #248]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b458:	4313      	orrs	r3, r2
 800b45a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b45e:	4b3c      	ldr	r3, [pc, #240]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b464:	f023 021f 	bic.w	r2, r3, #31
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46c:	3b01      	subs	r3, #1
 800b46e:	4938      	ldr	r1, [pc, #224]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b470:	4313      	orrs	r3, r2
 800b472:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d01d      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b482:	4b33      	ldr	r3, [pc, #204]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b488:	0e1b      	lsrs	r3, r3, #24
 800b48a:	f003 030f 	and.w	r3, r3, #15
 800b48e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b490:	4b2f      	ldr	r3, [pc, #188]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b496:	0f1b      	lsrs	r3, r3, #28
 800b498:	f003 0307 	and.w	r3, r3, #7
 800b49c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	019a      	lsls	r2, r3, #6
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	041b      	lsls	r3, r3, #16
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	061b      	lsls	r3, r3, #24
 800b4b0:	431a      	orrs	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	071b      	lsls	r3, r3, #28
 800b4b6:	4926      	ldr	r1, [pc, #152]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d011      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	019a      	lsls	r2, r3, #6
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	041b      	lsls	r3, r3, #16
 800b4d6:	431a      	orrs	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	061b      	lsls	r3, r3, #24
 800b4de:	431a      	orrs	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	071b      	lsls	r3, r3, #28
 800b4e6:	491a      	ldr	r1, [pc, #104]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b4ee:	4b18      	ldr	r3, [pc, #96]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a17      	ldr	r2, [pc, #92]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b4f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4fa:	f7fc ff3f 	bl	800837c <HAL_GetTick>
 800b4fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b500:	e008      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b502:	f7fc ff3b 	bl	800837c <HAL_GetTick>
 800b506:	4602      	mov	r2, r0
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	2b64      	cmp	r3, #100	; 0x64
 800b50e:	d901      	bls.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b510:	2303      	movs	r3, #3
 800b512:	e0d8      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b514:	4b0e      	ldr	r3, [pc, #56]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d0f0      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	2b01      	cmp	r3, #1
 800b524:	f040 80ce 	bne.w	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b528:	4b09      	ldr	r3, [pc, #36]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a08      	ldr	r2, [pc, #32]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800b52e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b534:	f7fc ff22 	bl	800837c <HAL_GetTick>
 800b538:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b53a:	e00b      	b.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b53c:	f7fc ff1e 	bl	800837c <HAL_GetTick>
 800b540:	4602      	mov	r2, r0
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	2b64      	cmp	r3, #100	; 0x64
 800b548:	d904      	bls.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b54a:	2303      	movs	r3, #3
 800b54c:	e0bb      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800b54e:	bf00      	nop
 800b550:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b554:	4b5e      	ldr	r3, [pc, #376]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b55c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b560:	d0ec      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b572:	2b00      	cmp	r3, #0
 800b574:	d009      	beq.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d02e      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b586:	2b00      	cmp	r3, #0
 800b588:	d12a      	bne.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b58a:	4b51      	ldr	r3, [pc, #324]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b58c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b590:	0c1b      	lsrs	r3, r3, #16
 800b592:	f003 0303 	and.w	r3, r3, #3
 800b596:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b598:	4b4d      	ldr	r3, [pc, #308]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b59a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b59e:	0f1b      	lsrs	r3, r3, #28
 800b5a0:	f003 0307 	and.w	r3, r3, #7
 800b5a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	695b      	ldr	r3, [r3, #20]
 800b5aa:	019a      	lsls	r2, r3, #6
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	041b      	lsls	r3, r3, #16
 800b5b0:	431a      	orrs	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	061b      	lsls	r3, r3, #24
 800b5b8:	431a      	orrs	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	071b      	lsls	r3, r3, #28
 800b5be:	4944      	ldr	r1, [pc, #272]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b5c6:	4b42      	ldr	r3, [pc, #264]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b5c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	021b      	lsls	r3, r3, #8
 800b5d8:	493d      	ldr	r1, [pc, #244]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d022      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5f4:	d11d      	bne.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b5f6:	4b36      	ldr	r3, [pc, #216]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b5f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5fc:	0e1b      	lsrs	r3, r3, #24
 800b5fe:	f003 030f 	and.w	r3, r3, #15
 800b602:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b604:	4b32      	ldr	r3, [pc, #200]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b60a:	0f1b      	lsrs	r3, r3, #28
 800b60c:	f003 0307 	and.w	r3, r3, #7
 800b610:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	695b      	ldr	r3, [r3, #20]
 800b616:	019a      	lsls	r2, r3, #6
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a1b      	ldr	r3, [r3, #32]
 800b61c:	041b      	lsls	r3, r3, #16
 800b61e:	431a      	orrs	r2, r3
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	061b      	lsls	r3, r3, #24
 800b624:	431a      	orrs	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	071b      	lsls	r3, r3, #28
 800b62a:	4929      	ldr	r1, [pc, #164]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b62c:	4313      	orrs	r3, r2
 800b62e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 0308 	and.w	r3, r3, #8
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d028      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b63e:	4b24      	ldr	r3, [pc, #144]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b644:	0e1b      	lsrs	r3, r3, #24
 800b646:	f003 030f 	and.w	r3, r3, #15
 800b64a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b64c:	4b20      	ldr	r3, [pc, #128]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b652:	0c1b      	lsrs	r3, r3, #16
 800b654:	f003 0303 	and.w	r3, r3, #3
 800b658:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	695b      	ldr	r3, [r3, #20]
 800b65e:	019a      	lsls	r2, r3, #6
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	041b      	lsls	r3, r3, #16
 800b664:	431a      	orrs	r2, r3
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	061b      	lsls	r3, r3, #24
 800b66a:	431a      	orrs	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	69db      	ldr	r3, [r3, #28]
 800b670:	071b      	lsls	r3, r3, #28
 800b672:	4917      	ldr	r1, [pc, #92]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b674:	4313      	orrs	r3, r2
 800b676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b67a:	4b15      	ldr	r3, [pc, #84]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b67c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b680:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b688:	4911      	ldr	r1, [pc, #68]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b68a:	4313      	orrs	r3, r2
 800b68c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b690:	4b0f      	ldr	r3, [pc, #60]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a0e      	ldr	r2, [pc, #56]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b69a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b69c:	f7fc fe6e 	bl	800837c <HAL_GetTick>
 800b6a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b6a2:	e008      	b.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b6a4:	f7fc fe6a 	bl	800837c <HAL_GetTick>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	1ad3      	subs	r3, r2, r3
 800b6ae:	2b64      	cmp	r3, #100	; 0x64
 800b6b0:	d901      	bls.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	e007      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b6b6:	4b06      	ldr	r3, [pc, #24]	; (800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6c2:	d1ef      	bne.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3720      	adds	r7, #32
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	40023800 	.word	0x40023800

0800b6d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e071      	b.n	800b7ce <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	7f5b      	ldrb	r3, [r3, #29]
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d105      	bne.n	800b700 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7fc fad2 	bl	8007ca4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2202      	movs	r2, #2
 800b704:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	f003 0310 	and.w	r3, r3, #16
 800b710:	2b10      	cmp	r3, #16
 800b712:	d053      	beq.n	800b7bc <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	22ca      	movs	r2, #202	; 0xca
 800b71a:	625a      	str	r2, [r3, #36]	; 0x24
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2253      	movs	r2, #83	; 0x53
 800b722:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fa4d 	bl	800bbc4 <RTC_EnterInitMode>
 800b72a:	4603      	mov	r3, r0
 800b72c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d12a      	bne.n	800b78a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	6899      	ldr	r1, [r3, #8]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	4b26      	ldr	r3, [pc, #152]	; (800b7d8 <HAL_RTC_Init+0x104>)
 800b740:	400b      	ands	r3, r1
 800b742:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6899      	ldr	r1, [r3, #8]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	431a      	orrs	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	431a      	orrs	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	430a      	orrs	r2, r1
 800b760:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	68d2      	ldr	r2, [r2, #12]
 800b76a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6919      	ldr	r1, [r3, #16]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	041a      	lsls	r2, r3, #16
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	430a      	orrs	r2, r1
 800b77e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 fa56 	bl	800bc32 <RTC_ExitInitMode>
 800b786:	4603      	mov	r3, r0
 800b788:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b78a:	7bfb      	ldrb	r3, [r7, #15]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d110      	bne.n	800b7b2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f022 0208 	bic.w	r2, r2, #8
 800b79e:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	699a      	ldr	r2, [r3, #24]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	22ff      	movs	r2, #255	; 0xff
 800b7b8:	625a      	str	r2, [r3, #36]	; 0x24
 800b7ba:	e001      	b.n	800b7c0 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b7c0:	7bfb      	ldrb	r3, [r7, #15]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d102      	bne.n	800b7cc <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	ff8fffbf 	.word	0xff8fffbf

0800b7dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b7dc:	b590      	push	{r4, r7, lr}
 800b7de:	b087      	sub	sp, #28
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	7f1b      	ldrb	r3, [r3, #28]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d101      	bne.n	800b7f8 <HAL_RTC_SetTime+0x1c>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	e085      	b.n	800b904 <HAL_RTC_SetTime+0x128>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2202      	movs	r2, #2
 800b802:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d126      	bne.n	800b858 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b814:	2b00      	cmp	r3, #0
 800b816:	d102      	bne.n	800b81e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	2200      	movs	r2, #0
 800b81c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	4618      	mov	r0, r3
 800b824:	f000 fa2a 	bl	800bc7c <RTC_ByteToBcd2>
 800b828:	4603      	mov	r3, r0
 800b82a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	785b      	ldrb	r3, [r3, #1]
 800b830:	4618      	mov	r0, r3
 800b832:	f000 fa23 	bl	800bc7c <RTC_ByteToBcd2>
 800b836:	4603      	mov	r3, r0
 800b838:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b83a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	789b      	ldrb	r3, [r3, #2]
 800b840:	4618      	mov	r0, r3
 800b842:	f000 fa1b 	bl	800bc7c <RTC_ByteToBcd2>
 800b846:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b848:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	78db      	ldrb	r3, [r3, #3]
 800b850:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b852:	4313      	orrs	r3, r2
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	e018      	b.n	800b88a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b862:	2b00      	cmp	r3, #0
 800b864:	d102      	bne.n	800b86c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	2200      	movs	r2, #0
 800b86a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	785b      	ldrb	r3, [r3, #1]
 800b876:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b878:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b87e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	78db      	ldrb	r3, [r3, #3]
 800b884:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b886:	4313      	orrs	r3, r2
 800b888:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	22ca      	movs	r2, #202	; 0xca
 800b890:	625a      	str	r2, [r3, #36]	; 0x24
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2253      	movs	r2, #83	; 0x53
 800b898:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f000 f992 	bl	800bbc4 <RTC_EnterInitMode>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b8a4:	7cfb      	ldrb	r3, [r7, #19]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d11e      	bne.n	800b8e8 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	6979      	ldr	r1, [r7, #20]
 800b8b0:	4b16      	ldr	r3, [pc, #88]	; (800b90c <HAL_RTC_SetTime+0x130>)
 800b8b2:	400b      	ands	r3, r1
 800b8b4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	689a      	ldr	r2, [r3, #8]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b8c4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	6899      	ldr	r1, [r3, #8]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	68da      	ldr	r2, [r3, #12]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	431a      	orrs	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	430a      	orrs	r2, r1
 800b8dc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f000 f9a7 	bl	800bc32 <RTC_ExitInitMode>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b8e8:	7cfb      	ldrb	r3, [r7, #19]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d102      	bne.n	800b8f4 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	22ff      	movs	r2, #255	; 0xff
 800b8fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2200      	movs	r2, #0
 800b900:	771a      	strb	r2, [r3, #28]

  return status;
 800b902:	7cfb      	ldrb	r3, [r7, #19]
}
 800b904:	4618      	mov	r0, r3
 800b906:	371c      	adds	r7, #28
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd90      	pop	{r4, r7, pc}
 800b90c:	007f7f7f 	.word	0x007f7f7f

0800b910 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b91c:	2300      	movs	r3, #0
 800b91e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	4b22      	ldr	r3, [pc, #136]	; (800b9c8 <HAL_RTC_GetTime+0xb8>)
 800b940:	4013      	ands	r3, r2
 800b942:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	0c1b      	lsrs	r3, r3, #16
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b94e:	b2da      	uxtb	r2, r3
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	0a1b      	lsrs	r3, r3, #8
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	b2db      	uxtb	r3, r3
 800b968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b96c:	b2da      	uxtb	r2, r3
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	0d9b      	lsrs	r3, r3, #22
 800b976:	b2db      	uxtb	r3, r3
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d11a      	bne.n	800b9be <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 f993 	bl	800bcb8 <RTC_Bcd2ToByte>
 800b992:	4603      	mov	r3, r0
 800b994:	461a      	mov	r2, r3
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	785b      	ldrb	r3, [r3, #1]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 f98a 	bl	800bcb8 <RTC_Bcd2ToByte>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	789b      	ldrb	r3, [r3, #2]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 f981 	bl	800bcb8 <RTC_Bcd2ToByte>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	007f7f7f 	.word	0x007f7f7f

0800b9cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b9cc:	b590      	push	{r4, r7, lr}
 800b9ce:	b087      	sub	sp, #28
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	7f1b      	ldrb	r3, [r3, #28]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d101      	bne.n	800b9e8 <HAL_RTC_SetDate+0x1c>
 800b9e4:	2302      	movs	r3, #2
 800b9e6:	e06f      	b.n	800bac8 <HAL_RTC_SetDate+0xfc>
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2202      	movs	r2, #2
 800b9f2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10e      	bne.n	800ba18 <HAL_RTC_SetDate+0x4c>
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	785b      	ldrb	r3, [r3, #1]
 800b9fe:	f003 0310 	and.w	r3, r3, #16
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d008      	beq.n	800ba18 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	785b      	ldrb	r3, [r3, #1]
 800ba0a:	f023 0310 	bic.w	r3, r3, #16
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	330a      	adds	r3, #10
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d11c      	bne.n	800ba58 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	78db      	ldrb	r3, [r3, #3]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f000 f92a 	bl	800bc7c <RTC_ByteToBcd2>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	785b      	ldrb	r3, [r3, #1]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f000 f923 	bl	800bc7c <RTC_ByteToBcd2>
 800ba36:	4603      	mov	r3, r0
 800ba38:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ba3a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	789b      	ldrb	r3, [r3, #2]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 f91b 	bl	800bc7c <RTC_ByteToBcd2>
 800ba46:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ba48:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ba52:	4313      	orrs	r3, r2
 800ba54:	617b      	str	r3, [r7, #20]
 800ba56:	e00e      	b.n	800ba76 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	78db      	ldrb	r3, [r3, #3]
 800ba5c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	785b      	ldrb	r3, [r3, #1]
 800ba62:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ba64:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ba6a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ba72:	4313      	orrs	r3, r2
 800ba74:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	22ca      	movs	r2, #202	; 0xca
 800ba7c:	625a      	str	r2, [r3, #36]	; 0x24
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2253      	movs	r2, #83	; 0x53
 800ba84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f000 f89c 	bl	800bbc4 <RTC_EnterInitMode>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ba90:	7cfb      	ldrb	r3, [r7, #19]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10a      	bne.n	800baac <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	6979      	ldr	r1, [r7, #20]
 800ba9c:	4b0c      	ldr	r3, [pc, #48]	; (800bad0 <HAL_RTC_SetDate+0x104>)
 800ba9e:	400b      	ands	r3, r1
 800baa0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f000 f8c5 	bl	800bc32 <RTC_ExitInitMode>
 800baa8:	4603      	mov	r3, r0
 800baaa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800baac:	7cfb      	ldrb	r3, [r7, #19]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d102      	bne.n	800bab8 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2201      	movs	r2, #1
 800bab6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	22ff      	movs	r2, #255	; 0xff
 800babe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	771a      	strb	r2, [r3, #28]

  return status;
 800bac6:	7cfb      	ldrb	r3, [r7, #19]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	371c      	adds	r7, #28
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd90      	pop	{r4, r7, pc}
 800bad0:	00ffff3f 	.word	0x00ffff3f

0800bad4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bae0:	2300      	movs	r3, #0
 800bae2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	685a      	ldr	r2, [r3, #4]
 800baea:	4b21      	ldr	r3, [pc, #132]	; (800bb70 <HAL_RTC_GetDate+0x9c>)
 800baec:	4013      	ands	r3, r2
 800baee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	0c1b      	lsrs	r3, r3, #16
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	0a1b      	lsrs	r3, r3, #8
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	f003 031f 	and.w	r3, r3, #31
 800bb04:	b2da      	uxtb	r2, r3
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	0b5b      	lsrs	r3, r3, #13
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	f003 0307 	and.w	r3, r3, #7
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d11a      	bne.n	800bb64 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	78db      	ldrb	r3, [r3, #3]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f8c0 	bl	800bcb8 <RTC_Bcd2ToByte>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	785b      	ldrb	r3, [r3, #1]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f000 f8b7 	bl	800bcb8 <RTC_Bcd2ToByte>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	789b      	ldrb	r3, [r3, #2]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 f8ae 	bl	800bcb8 <RTC_Bcd2ToByte>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	461a      	mov	r2, r3
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	00ffff3f 	.word	0x00ffff3f

0800bb74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68da      	ldr	r2, [r3, #12]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bb8e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bb90:	f7fc fbf4 	bl	800837c <HAL_GetTick>
 800bb94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bb96:	e009      	b.n	800bbac <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bb98:	f7fc fbf0 	bl	800837c <HAL_GetTick>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bba6:	d901      	bls.n	800bbac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e007      	b.n	800bbbc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	f003 0320 	and.w	r3, r3, #32
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d0ee      	beq.n	800bb98 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d122      	bne.n	800bc28 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68da      	ldr	r2, [r3, #12]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bbf0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bbf2:	f7fc fbc3 	bl	800837c <HAL_GetTick>
 800bbf6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bbf8:	e00c      	b.n	800bc14 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bbfa:	f7fc fbbf 	bl	800837c <HAL_GetTick>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc08:	d904      	bls.n	800bc14 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2204      	movs	r2, #4
 800bc0e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800bc10:	2301      	movs	r3, #1
 800bc12:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d102      	bne.n	800bc28 <RTC_EnterInitMode+0x64>
 800bc22:	7bfb      	ldrb	r3, [r7, #15]
 800bc24:	2b01      	cmp	r3, #1
 800bc26:	d1e8      	bne.n	800bbfa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b084      	sub	sp, #16
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68da      	ldr	r2, [r3, #12]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc4c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	f003 0320 	and.w	r3, r3, #32
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7ff ff89 	bl	800bb74 <HAL_RTC_WaitForSynchro>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d004      	beq.n	800bc72 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2204      	movs	r2, #4
 800bc6c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	4603      	mov	r3, r0
 800bc84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800bc8a:	e005      	b.n	800bc98 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800bc92:	79fb      	ldrb	r3, [r7, #7]
 800bc94:	3b0a      	subs	r3, #10
 800bc96:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bc98:	79fb      	ldrb	r3, [r7, #7]
 800bc9a:	2b09      	cmp	r3, #9
 800bc9c:	d8f6      	bhi.n	800bc8c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	011b      	lsls	r3, r3, #4
 800bca4:	b2da      	uxtb	r2, r3
 800bca6:	79fb      	ldrb	r3, [r7, #7]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	b2db      	uxtb	r3, r3
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800bcc6:	79fb      	ldrb	r3, [r7, #7]
 800bcc8:	091b      	lsrs	r3, r3, #4
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	461a      	mov	r2, r3
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	79fb      	ldrb	r3, [r7, #7]
 800bcde:	f003 030f 	and.w	r3, r3, #15
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	4413      	add	r3, r2
 800bce6:	b2db      	uxtb	r3, r3
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3714      	adds	r7, #20
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d101      	bne.n	800bd06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	e049      	b.n	800bd9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d106      	bne.n	800bd20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7fb fff0 	bl	8007d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2202      	movs	r2, #2
 800bd24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	3304      	adds	r3, #4
 800bd30:	4619      	mov	r1, r3
 800bd32:	4610      	mov	r0, r2
 800bd34:	f000 fac0 	bl	800c2b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
	...

0800bda4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d001      	beq.n	800bdbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e054      	b.n	800be66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	68da      	ldr	r2, [r3, #12]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f042 0201 	orr.w	r2, r2, #1
 800bdd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a26      	ldr	r2, [pc, #152]	; (800be74 <HAL_TIM_Base_Start_IT+0xd0>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d022      	beq.n	800be24 <HAL_TIM_Base_Start_IT+0x80>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bde6:	d01d      	beq.n	800be24 <HAL_TIM_Base_Start_IT+0x80>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a22      	ldr	r2, [pc, #136]	; (800be78 <HAL_TIM_Base_Start_IT+0xd4>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d018      	beq.n	800be24 <HAL_TIM_Base_Start_IT+0x80>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a21      	ldr	r2, [pc, #132]	; (800be7c <HAL_TIM_Base_Start_IT+0xd8>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d013      	beq.n	800be24 <HAL_TIM_Base_Start_IT+0x80>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a1f      	ldr	r2, [pc, #124]	; (800be80 <HAL_TIM_Base_Start_IT+0xdc>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d00e      	beq.n	800be24 <HAL_TIM_Base_Start_IT+0x80>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a1e      	ldr	r2, [pc, #120]	; (800be84 <HAL_TIM_Base_Start_IT+0xe0>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d009      	beq.n	800be24 <HAL_TIM_Base_Start_IT+0x80>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a1c      	ldr	r2, [pc, #112]	; (800be88 <HAL_TIM_Base_Start_IT+0xe4>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d004      	beq.n	800be24 <HAL_TIM_Base_Start_IT+0x80>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a1b      	ldr	r2, [pc, #108]	; (800be8c <HAL_TIM_Base_Start_IT+0xe8>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d115      	bne.n	800be50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	689a      	ldr	r2, [r3, #8]
 800be2a:	4b19      	ldr	r3, [pc, #100]	; (800be90 <HAL_TIM_Base_Start_IT+0xec>)
 800be2c:	4013      	ands	r3, r2
 800be2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2b06      	cmp	r3, #6
 800be34:	d015      	beq.n	800be62 <HAL_TIM_Base_Start_IT+0xbe>
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be3c:	d011      	beq.n	800be62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f042 0201 	orr.w	r2, r2, #1
 800be4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be4e:	e008      	b.n	800be62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f042 0201 	orr.w	r2, r2, #1
 800be5e:	601a      	str	r2, [r3, #0]
 800be60:	e000      	b.n	800be64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	40010000 	.word	0x40010000
 800be78:	40000400 	.word	0x40000400
 800be7c:	40000800 	.word	0x40000800
 800be80:	40000c00 	.word	0x40000c00
 800be84:	40010400 	.word	0x40010400
 800be88:	40014000 	.word	0x40014000
 800be8c:	40001800 	.word	0x40001800
 800be90:	00010007 	.word	0x00010007

0800be94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	691b      	ldr	r3, [r3, #16]
 800bea2:	f003 0302 	and.w	r3, r3, #2
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	d122      	bne.n	800bef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f003 0302 	and.w	r3, r3, #2
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d11b      	bne.n	800bef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f06f 0202 	mvn.w	r2, #2
 800bec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2201      	movs	r2, #1
 800bec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	699b      	ldr	r3, [r3, #24]
 800bece:	f003 0303 	and.w	r3, r3, #3
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d003      	beq.n	800bede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f9d0 	bl	800c27c <HAL_TIM_IC_CaptureCallback>
 800bedc:	e005      	b.n	800beea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f9c2 	bl	800c268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f9d3 	bl	800c290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	f003 0304 	and.w	r3, r3, #4
 800befa:	2b04      	cmp	r3, #4
 800befc:	d122      	bne.n	800bf44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	f003 0304 	and.w	r3, r3, #4
 800bf08:	2b04      	cmp	r3, #4
 800bf0a:	d11b      	bne.n	800bf44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f06f 0204 	mvn.w	r2, #4
 800bf14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	699b      	ldr	r3, [r3, #24]
 800bf22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d003      	beq.n	800bf32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 f9a6 	bl	800c27c <HAL_TIM_IC_CaptureCallback>
 800bf30:	e005      	b.n	800bf3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 f998 	bl	800c268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 f9a9 	bl	800c290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	f003 0308 	and.w	r3, r3, #8
 800bf4e:	2b08      	cmp	r3, #8
 800bf50:	d122      	bne.n	800bf98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	f003 0308 	and.w	r3, r3, #8
 800bf5c:	2b08      	cmp	r3, #8
 800bf5e:	d11b      	bne.n	800bf98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f06f 0208 	mvn.w	r2, #8
 800bf68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2204      	movs	r2, #4
 800bf6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	69db      	ldr	r3, [r3, #28]
 800bf76:	f003 0303 	and.w	r3, r3, #3
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d003      	beq.n	800bf86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f97c 	bl	800c27c <HAL_TIM_IC_CaptureCallback>
 800bf84:	e005      	b.n	800bf92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 f96e 	bl	800c268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 f97f 	bl	800c290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	f003 0310 	and.w	r3, r3, #16
 800bfa2:	2b10      	cmp	r3, #16
 800bfa4:	d122      	bne.n	800bfec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f003 0310 	and.w	r3, r3, #16
 800bfb0:	2b10      	cmp	r3, #16
 800bfb2:	d11b      	bne.n	800bfec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f06f 0210 	mvn.w	r2, #16
 800bfbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2208      	movs	r2, #8
 800bfc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	69db      	ldr	r3, [r3, #28]
 800bfca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d003      	beq.n	800bfda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f952 	bl	800c27c <HAL_TIM_IC_CaptureCallback>
 800bfd8:	e005      	b.n	800bfe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f944 	bl	800c268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 f955 	bl	800c290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	f003 0301 	and.w	r3, r3, #1
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d10e      	bne.n	800c018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	f003 0301 	and.w	r3, r3, #1
 800c004:	2b01      	cmp	r3, #1
 800c006:	d107      	bne.n	800c018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f06f 0201 	mvn.w	r2, #1
 800c010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7fb fdd8 	bl	8007bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c022:	2b80      	cmp	r3, #128	; 0x80
 800c024:	d10e      	bne.n	800c044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c030:	2b80      	cmp	r3, #128	; 0x80
 800c032:	d107      	bne.n	800c044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c03c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fb0c 	bl	800c65c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c04e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c052:	d10e      	bne.n	800c072 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c05e:	2b80      	cmp	r3, #128	; 0x80
 800c060:	d107      	bne.n	800c072 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c06a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 faff 	bl	800c670 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c07c:	2b40      	cmp	r3, #64	; 0x40
 800c07e:	d10e      	bne.n	800c09e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c08a:	2b40      	cmp	r3, #64	; 0x40
 800c08c:	d107      	bne.n	800c09e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f903 	bl	800c2a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	f003 0320 	and.w	r3, r3, #32
 800c0a8:	2b20      	cmp	r3, #32
 800c0aa:	d10e      	bne.n	800c0ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	f003 0320 	and.w	r3, r3, #32
 800c0b6:	2b20      	cmp	r3, #32
 800c0b8:	d107      	bne.n	800c0ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f06f 0220 	mvn.w	r2, #32
 800c0c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fabf 	bl	800c648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c0ca:	bf00      	nop
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
	...

0800c0d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d101      	bne.n	800c0f0 <HAL_TIM_ConfigClockSource+0x1c>
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	e0b4      	b.n	800c25a <HAL_TIM_ConfigClockSource+0x186>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c108:	68ba      	ldr	r2, [r7, #8]
 800c10a:	4b56      	ldr	r3, [pc, #344]	; (800c264 <HAL_TIM_ConfigClockSource+0x190>)
 800c10c:	4013      	ands	r3, r2
 800c10e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c116:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c128:	d03e      	beq.n	800c1a8 <HAL_TIM_ConfigClockSource+0xd4>
 800c12a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c12e:	f200 8087 	bhi.w	800c240 <HAL_TIM_ConfigClockSource+0x16c>
 800c132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c136:	f000 8086 	beq.w	800c246 <HAL_TIM_ConfigClockSource+0x172>
 800c13a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c13e:	d87f      	bhi.n	800c240 <HAL_TIM_ConfigClockSource+0x16c>
 800c140:	2b70      	cmp	r3, #112	; 0x70
 800c142:	d01a      	beq.n	800c17a <HAL_TIM_ConfigClockSource+0xa6>
 800c144:	2b70      	cmp	r3, #112	; 0x70
 800c146:	d87b      	bhi.n	800c240 <HAL_TIM_ConfigClockSource+0x16c>
 800c148:	2b60      	cmp	r3, #96	; 0x60
 800c14a:	d050      	beq.n	800c1ee <HAL_TIM_ConfigClockSource+0x11a>
 800c14c:	2b60      	cmp	r3, #96	; 0x60
 800c14e:	d877      	bhi.n	800c240 <HAL_TIM_ConfigClockSource+0x16c>
 800c150:	2b50      	cmp	r3, #80	; 0x50
 800c152:	d03c      	beq.n	800c1ce <HAL_TIM_ConfigClockSource+0xfa>
 800c154:	2b50      	cmp	r3, #80	; 0x50
 800c156:	d873      	bhi.n	800c240 <HAL_TIM_ConfigClockSource+0x16c>
 800c158:	2b40      	cmp	r3, #64	; 0x40
 800c15a:	d058      	beq.n	800c20e <HAL_TIM_ConfigClockSource+0x13a>
 800c15c:	2b40      	cmp	r3, #64	; 0x40
 800c15e:	d86f      	bhi.n	800c240 <HAL_TIM_ConfigClockSource+0x16c>
 800c160:	2b30      	cmp	r3, #48	; 0x30
 800c162:	d064      	beq.n	800c22e <HAL_TIM_ConfigClockSource+0x15a>
 800c164:	2b30      	cmp	r3, #48	; 0x30
 800c166:	d86b      	bhi.n	800c240 <HAL_TIM_ConfigClockSource+0x16c>
 800c168:	2b20      	cmp	r3, #32
 800c16a:	d060      	beq.n	800c22e <HAL_TIM_ConfigClockSource+0x15a>
 800c16c:	2b20      	cmp	r3, #32
 800c16e:	d867      	bhi.n	800c240 <HAL_TIM_ConfigClockSource+0x16c>
 800c170:	2b00      	cmp	r3, #0
 800c172:	d05c      	beq.n	800c22e <HAL_TIM_ConfigClockSource+0x15a>
 800c174:	2b10      	cmp	r3, #16
 800c176:	d05a      	beq.n	800c22e <HAL_TIM_ConfigClockSource+0x15a>
 800c178:	e062      	b.n	800c240 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6818      	ldr	r0, [r3, #0]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	6899      	ldr	r1, [r3, #8]
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	f000 f9af 	bl	800c4ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c19c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	609a      	str	r2, [r3, #8]
      break;
 800c1a6:	e04f      	b.n	800c248 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6818      	ldr	r0, [r3, #0]
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	6899      	ldr	r1, [r3, #8]
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	685a      	ldr	r2, [r3, #4]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	f000 f998 	bl	800c4ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	689a      	ldr	r2, [r3, #8]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1ca:	609a      	str	r2, [r3, #8]
      break;
 800c1cc:	e03c      	b.n	800c248 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6818      	ldr	r0, [r3, #0]
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	6859      	ldr	r1, [r3, #4]
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	f000 f90c 	bl	800c3f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2150      	movs	r1, #80	; 0x50
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 f965 	bl	800c4b6 <TIM_ITRx_SetConfig>
      break;
 800c1ec:	e02c      	b.n	800c248 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6818      	ldr	r0, [r3, #0]
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	6859      	ldr	r1, [r3, #4]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f000 f92b 	bl	800c456 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2160      	movs	r1, #96	; 0x60
 800c206:	4618      	mov	r0, r3
 800c208:	f000 f955 	bl	800c4b6 <TIM_ITRx_SetConfig>
      break;
 800c20c:	e01c      	b.n	800c248 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6818      	ldr	r0, [r3, #0]
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	6859      	ldr	r1, [r3, #4]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	461a      	mov	r2, r3
 800c21c:	f000 f8ec 	bl	800c3f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2140      	movs	r1, #64	; 0x40
 800c226:	4618      	mov	r0, r3
 800c228:	f000 f945 	bl	800c4b6 <TIM_ITRx_SetConfig>
      break;
 800c22c:	e00c      	b.n	800c248 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4619      	mov	r1, r3
 800c238:	4610      	mov	r0, r2
 800c23a:	f000 f93c 	bl	800c4b6 <TIM_ITRx_SetConfig>
      break;
 800c23e:	e003      	b.n	800c248 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	73fb      	strb	r3, [r7, #15]
      break;
 800c244:	e000      	b.n	800c248 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c246:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2201      	movs	r2, #1
 800c24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c258:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	fffeff88 	.word	0xfffeff88

0800c268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c298:	bf00      	nop
 800c29a:	370c      	adds	r7, #12
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr

0800c2a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c2ac:	bf00      	nop
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a40      	ldr	r2, [pc, #256]	; (800c3cc <TIM_Base_SetConfig+0x114>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d013      	beq.n	800c2f8 <TIM_Base_SetConfig+0x40>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2d6:	d00f      	beq.n	800c2f8 <TIM_Base_SetConfig+0x40>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a3d      	ldr	r2, [pc, #244]	; (800c3d0 <TIM_Base_SetConfig+0x118>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d00b      	beq.n	800c2f8 <TIM_Base_SetConfig+0x40>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a3c      	ldr	r2, [pc, #240]	; (800c3d4 <TIM_Base_SetConfig+0x11c>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d007      	beq.n	800c2f8 <TIM_Base_SetConfig+0x40>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	4a3b      	ldr	r2, [pc, #236]	; (800c3d8 <TIM_Base_SetConfig+0x120>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d003      	beq.n	800c2f8 <TIM_Base_SetConfig+0x40>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a3a      	ldr	r2, [pc, #232]	; (800c3dc <TIM_Base_SetConfig+0x124>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d108      	bne.n	800c30a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	4313      	orrs	r3, r2
 800c308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a2f      	ldr	r2, [pc, #188]	; (800c3cc <TIM_Base_SetConfig+0x114>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d02b      	beq.n	800c36a <TIM_Base_SetConfig+0xb2>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c318:	d027      	beq.n	800c36a <TIM_Base_SetConfig+0xb2>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4a2c      	ldr	r2, [pc, #176]	; (800c3d0 <TIM_Base_SetConfig+0x118>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d023      	beq.n	800c36a <TIM_Base_SetConfig+0xb2>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a2b      	ldr	r2, [pc, #172]	; (800c3d4 <TIM_Base_SetConfig+0x11c>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d01f      	beq.n	800c36a <TIM_Base_SetConfig+0xb2>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a2a      	ldr	r2, [pc, #168]	; (800c3d8 <TIM_Base_SetConfig+0x120>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d01b      	beq.n	800c36a <TIM_Base_SetConfig+0xb2>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4a29      	ldr	r2, [pc, #164]	; (800c3dc <TIM_Base_SetConfig+0x124>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d017      	beq.n	800c36a <TIM_Base_SetConfig+0xb2>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a28      	ldr	r2, [pc, #160]	; (800c3e0 <TIM_Base_SetConfig+0x128>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d013      	beq.n	800c36a <TIM_Base_SetConfig+0xb2>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a27      	ldr	r2, [pc, #156]	; (800c3e4 <TIM_Base_SetConfig+0x12c>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d00f      	beq.n	800c36a <TIM_Base_SetConfig+0xb2>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4a26      	ldr	r2, [pc, #152]	; (800c3e8 <TIM_Base_SetConfig+0x130>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d00b      	beq.n	800c36a <TIM_Base_SetConfig+0xb2>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4a25      	ldr	r2, [pc, #148]	; (800c3ec <TIM_Base_SetConfig+0x134>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d007      	beq.n	800c36a <TIM_Base_SetConfig+0xb2>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4a24      	ldr	r2, [pc, #144]	; (800c3f0 <TIM_Base_SetConfig+0x138>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d003      	beq.n	800c36a <TIM_Base_SetConfig+0xb2>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4a23      	ldr	r2, [pc, #140]	; (800c3f4 <TIM_Base_SetConfig+0x13c>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d108      	bne.n	800c37c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	4313      	orrs	r3, r2
 800c37a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	695b      	ldr	r3, [r3, #20]
 800c386:	4313      	orrs	r3, r2
 800c388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	689a      	ldr	r2, [r3, #8]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a0a      	ldr	r2, [pc, #40]	; (800c3cc <TIM_Base_SetConfig+0x114>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d003      	beq.n	800c3b0 <TIM_Base_SetConfig+0xf8>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a0c      	ldr	r2, [pc, #48]	; (800c3dc <TIM_Base_SetConfig+0x124>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d103      	bne.n	800c3b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	691a      	ldr	r2, [r3, #16]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	615a      	str	r2, [r3, #20]
}
 800c3be:	bf00      	nop
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	40010000 	.word	0x40010000
 800c3d0:	40000400 	.word	0x40000400
 800c3d4:	40000800 	.word	0x40000800
 800c3d8:	40000c00 	.word	0x40000c00
 800c3dc:	40010400 	.word	0x40010400
 800c3e0:	40014000 	.word	0x40014000
 800c3e4:	40014400 	.word	0x40014400
 800c3e8:	40014800 	.word	0x40014800
 800c3ec:	40001800 	.word	0x40001800
 800c3f0:	40001c00 	.word	0x40001c00
 800c3f4:	40002000 	.word	0x40002000

0800c3f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b087      	sub	sp, #28
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6a1b      	ldr	r3, [r3, #32]
 800c408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6a1b      	ldr	r3, [r3, #32]
 800c40e:	f023 0201 	bic.w	r2, r3, #1
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	011b      	lsls	r3, r3, #4
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f023 030a 	bic.w	r3, r3, #10
 800c434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	693a      	ldr	r2, [r7, #16]
 800c442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	697a      	ldr	r2, [r7, #20]
 800c448:	621a      	str	r2, [r3, #32]
}
 800c44a:	bf00      	nop
 800c44c:	371c      	adds	r7, #28
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr

0800c456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c456:	b480      	push	{r7}
 800c458:	b087      	sub	sp, #28
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	60f8      	str	r0, [r7, #12]
 800c45e:	60b9      	str	r1, [r7, #8]
 800c460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6a1b      	ldr	r3, [r3, #32]
 800c466:	f023 0210 	bic.w	r2, r3, #16
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6a1b      	ldr	r3, [r3, #32]
 800c478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	031b      	lsls	r3, r3, #12
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	4313      	orrs	r3, r2
 800c48a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c492:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	011b      	lsls	r3, r3, #4
 800c498:	693a      	ldr	r2, [r7, #16]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	693a      	ldr	r2, [r7, #16]
 800c4a8:	621a      	str	r2, [r3, #32]
}
 800c4aa:	bf00      	nop
 800c4ac:	371c      	adds	r7, #28
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b085      	sub	sp, #20
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	f043 0307 	orr.w	r3, r3, #7
 800c4d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	609a      	str	r2, [r3, #8]
}
 800c4e0:	bf00      	nop
 800c4e2:	3714      	adds	r7, #20
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b087      	sub	sp, #28
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
 800c4f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	021a      	lsls	r2, r3, #8
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	431a      	orrs	r2, r3
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	4313      	orrs	r3, r2
 800c514:	697a      	ldr	r2, [r7, #20]
 800c516:	4313      	orrs	r3, r2
 800c518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	697a      	ldr	r2, [r7, #20]
 800c51e:	609a      	str	r2, [r3, #8]
}
 800c520:	bf00      	nop
 800c522:	371c      	adds	r7, #28
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d101      	bne.n	800c544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c540:	2302      	movs	r3, #2
 800c542:	e06d      	b.n	800c620 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2202      	movs	r2, #2
 800c550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a30      	ldr	r2, [pc, #192]	; (800c62c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d004      	beq.n	800c578 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a2f      	ldr	r2, [pc, #188]	; (800c630 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d108      	bne.n	800c58a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c57e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	4313      	orrs	r3, r2
 800c588:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c590:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68fa      	ldr	r2, [r7, #12]
 800c598:	4313      	orrs	r3, r2
 800c59a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a20      	ldr	r2, [pc, #128]	; (800c62c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d022      	beq.n	800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5b6:	d01d      	beq.n	800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a1d      	ldr	r2, [pc, #116]	; (800c634 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d018      	beq.n	800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a1c      	ldr	r2, [pc, #112]	; (800c638 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d013      	beq.n	800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a1a      	ldr	r2, [pc, #104]	; (800c63c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d00e      	beq.n	800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a15      	ldr	r2, [pc, #84]	; (800c630 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d009      	beq.n	800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a16      	ldr	r2, [pc, #88]	; (800c640 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d004      	beq.n	800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a15      	ldr	r2, [pc, #84]	; (800c644 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d10c      	bne.n	800c60e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	4313      	orrs	r3, r2
 800c604:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2201      	movs	r2, #1
 800c612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3714      	adds	r7, #20
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	40010000 	.word	0x40010000
 800c630:	40010400 	.word	0x40010400
 800c634:	40000400 	.word	0x40000400
 800c638:	40000800 	.word	0x40000800
 800c63c:	40000c00 	.word	0x40000c00
 800c640:	40014000 	.word	0x40014000
 800c644:	40001800 	.word	0x40001800

0800c648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c678:	bf00      	nop
 800c67a:	370c      	adds	r7, #12
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c684:	b5b0      	push	{r4, r5, r7, lr}
 800c686:	b08c      	sub	sp, #48	; 0x30
 800c688:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800c68a:	4b96      	ldr	r3, [pc, #600]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c68c:	22c0      	movs	r2, #192	; 0xc0
 800c68e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800c690:	4b94      	ldr	r3, [pc, #592]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c692:	22a8      	movs	r2, #168	; 0xa8
 800c694:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800c696:	4b93      	ldr	r3, [pc, #588]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c698:	2201      	movs	r2, #1
 800c69a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 28;
 800c69c:	4b91      	ldr	r3, [pc, #580]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c69e:	221c      	movs	r2, #28
 800c6a0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800c6a2:	4b91      	ldr	r3, [pc, #580]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c6a4:	22ff      	movs	r2, #255	; 0xff
 800c6a6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800c6a8:	4b8f      	ldr	r3, [pc, #572]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c6aa:	22ff      	movs	r2, #255	; 0xff
 800c6ac:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800c6ae:	4b8e      	ldr	r3, [pc, #568]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c6b0:	22ff      	movs	r2, #255	; 0xff
 800c6b2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800c6b4:	4b8c      	ldr	r3, [pc, #560]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800c6ba:	4b8c      	ldr	r3, [pc, #560]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c6bc:	22c0      	movs	r2, #192	; 0xc0
 800c6be:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800c6c0:	4b8a      	ldr	r3, [pc, #552]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c6c2:	22a8      	movs	r2, #168	; 0xa8
 800c6c4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800c6c6:	4b89      	ldr	r3, [pc, #548]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800c6cc:	4b87      	ldr	r3, [pc, #540]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	f006 f8f3 	bl	80128c0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c6da:	4b82      	ldr	r3, [pc, #520]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	061a      	lsls	r2, r3, #24
 800c6e0:	4b80      	ldr	r3, [pc, #512]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c6e2:	785b      	ldrb	r3, [r3, #1]
 800c6e4:	041b      	lsls	r3, r3, #16
 800c6e6:	431a      	orrs	r2, r3
 800c6e8:	4b7e      	ldr	r3, [pc, #504]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c6ea:	789b      	ldrb	r3, [r3, #2]
 800c6ec:	021b      	lsls	r3, r3, #8
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	4a7c      	ldr	r2, [pc, #496]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c6f2:	78d2      	ldrb	r2, [r2, #3]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	061a      	lsls	r2, r3, #24
 800c6f8:	4b7a      	ldr	r3, [pc, #488]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	0619      	lsls	r1, r3, #24
 800c6fe:	4b79      	ldr	r3, [pc, #484]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c700:	785b      	ldrb	r3, [r3, #1]
 800c702:	041b      	lsls	r3, r3, #16
 800c704:	4319      	orrs	r1, r3
 800c706:	4b77      	ldr	r3, [pc, #476]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c708:	789b      	ldrb	r3, [r3, #2]
 800c70a:	021b      	lsls	r3, r3, #8
 800c70c:	430b      	orrs	r3, r1
 800c70e:	4975      	ldr	r1, [pc, #468]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c710:	78c9      	ldrb	r1, [r1, #3]
 800c712:	430b      	orrs	r3, r1
 800c714:	021b      	lsls	r3, r3, #8
 800c716:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c71a:	431a      	orrs	r2, r3
 800c71c:	4b71      	ldr	r3, [pc, #452]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	0619      	lsls	r1, r3, #24
 800c722:	4b70      	ldr	r3, [pc, #448]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c724:	785b      	ldrb	r3, [r3, #1]
 800c726:	041b      	lsls	r3, r3, #16
 800c728:	4319      	orrs	r1, r3
 800c72a:	4b6e      	ldr	r3, [pc, #440]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c72c:	789b      	ldrb	r3, [r3, #2]
 800c72e:	021b      	lsls	r3, r3, #8
 800c730:	430b      	orrs	r3, r1
 800c732:	496c      	ldr	r1, [pc, #432]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c734:	78c9      	ldrb	r1, [r1, #3]
 800c736:	430b      	orrs	r3, r1
 800c738:	0a1b      	lsrs	r3, r3, #8
 800c73a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c73e:	431a      	orrs	r2, r3
 800c740:	4b68      	ldr	r3, [pc, #416]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	0619      	lsls	r1, r3, #24
 800c746:	4b67      	ldr	r3, [pc, #412]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c748:	785b      	ldrb	r3, [r3, #1]
 800c74a:	041b      	lsls	r3, r3, #16
 800c74c:	4319      	orrs	r1, r3
 800c74e:	4b65      	ldr	r3, [pc, #404]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c750:	789b      	ldrb	r3, [r3, #2]
 800c752:	021b      	lsls	r3, r3, #8
 800c754:	430b      	orrs	r3, r1
 800c756:	4963      	ldr	r1, [pc, #396]	; (800c8e4 <MX_LWIP_Init+0x260>)
 800c758:	78c9      	ldrb	r1, [r1, #3]
 800c75a:	430b      	orrs	r3, r1
 800c75c:	0e1b      	lsrs	r3, r3, #24
 800c75e:	4313      	orrs	r3, r2
 800c760:	4a63      	ldr	r2, [pc, #396]	; (800c8f0 <MX_LWIP_Init+0x26c>)
 800c762:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c764:	4b60      	ldr	r3, [pc, #384]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	061a      	lsls	r2, r3, #24
 800c76a:	4b5f      	ldr	r3, [pc, #380]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c76c:	785b      	ldrb	r3, [r3, #1]
 800c76e:	041b      	lsls	r3, r3, #16
 800c770:	431a      	orrs	r2, r3
 800c772:	4b5d      	ldr	r3, [pc, #372]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c774:	789b      	ldrb	r3, [r3, #2]
 800c776:	021b      	lsls	r3, r3, #8
 800c778:	4313      	orrs	r3, r2
 800c77a:	4a5b      	ldr	r2, [pc, #364]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c77c:	78d2      	ldrb	r2, [r2, #3]
 800c77e:	4313      	orrs	r3, r2
 800c780:	061a      	lsls	r2, r3, #24
 800c782:	4b59      	ldr	r3, [pc, #356]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	0619      	lsls	r1, r3, #24
 800c788:	4b57      	ldr	r3, [pc, #348]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c78a:	785b      	ldrb	r3, [r3, #1]
 800c78c:	041b      	lsls	r3, r3, #16
 800c78e:	4319      	orrs	r1, r3
 800c790:	4b55      	ldr	r3, [pc, #340]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c792:	789b      	ldrb	r3, [r3, #2]
 800c794:	021b      	lsls	r3, r3, #8
 800c796:	430b      	orrs	r3, r1
 800c798:	4953      	ldr	r1, [pc, #332]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c79a:	78c9      	ldrb	r1, [r1, #3]
 800c79c:	430b      	orrs	r3, r1
 800c79e:	021b      	lsls	r3, r3, #8
 800c7a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c7a4:	431a      	orrs	r2, r3
 800c7a6:	4b50      	ldr	r3, [pc, #320]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	0619      	lsls	r1, r3, #24
 800c7ac:	4b4e      	ldr	r3, [pc, #312]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c7ae:	785b      	ldrb	r3, [r3, #1]
 800c7b0:	041b      	lsls	r3, r3, #16
 800c7b2:	4319      	orrs	r1, r3
 800c7b4:	4b4c      	ldr	r3, [pc, #304]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c7b6:	789b      	ldrb	r3, [r3, #2]
 800c7b8:	021b      	lsls	r3, r3, #8
 800c7ba:	430b      	orrs	r3, r1
 800c7bc:	494a      	ldr	r1, [pc, #296]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c7be:	78c9      	ldrb	r1, [r1, #3]
 800c7c0:	430b      	orrs	r3, r1
 800c7c2:	0a1b      	lsrs	r3, r3, #8
 800c7c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c7c8:	431a      	orrs	r2, r3
 800c7ca:	4b47      	ldr	r3, [pc, #284]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	0619      	lsls	r1, r3, #24
 800c7d0:	4b45      	ldr	r3, [pc, #276]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c7d2:	785b      	ldrb	r3, [r3, #1]
 800c7d4:	041b      	lsls	r3, r3, #16
 800c7d6:	4319      	orrs	r1, r3
 800c7d8:	4b43      	ldr	r3, [pc, #268]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c7da:	789b      	ldrb	r3, [r3, #2]
 800c7dc:	021b      	lsls	r3, r3, #8
 800c7de:	430b      	orrs	r3, r1
 800c7e0:	4941      	ldr	r1, [pc, #260]	; (800c8e8 <MX_LWIP_Init+0x264>)
 800c7e2:	78c9      	ldrb	r1, [r1, #3]
 800c7e4:	430b      	orrs	r3, r1
 800c7e6:	0e1b      	lsrs	r3, r3, #24
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	4a42      	ldr	r2, [pc, #264]	; (800c8f4 <MX_LWIP_Init+0x270>)
 800c7ec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c7ee:	4b3f      	ldr	r3, [pc, #252]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	061a      	lsls	r2, r3, #24
 800c7f4:	4b3d      	ldr	r3, [pc, #244]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c7f6:	785b      	ldrb	r3, [r3, #1]
 800c7f8:	041b      	lsls	r3, r3, #16
 800c7fa:	431a      	orrs	r2, r3
 800c7fc:	4b3b      	ldr	r3, [pc, #236]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c7fe:	789b      	ldrb	r3, [r3, #2]
 800c800:	021b      	lsls	r3, r3, #8
 800c802:	4313      	orrs	r3, r2
 800c804:	4a39      	ldr	r2, [pc, #228]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c806:	78d2      	ldrb	r2, [r2, #3]
 800c808:	4313      	orrs	r3, r2
 800c80a:	061a      	lsls	r2, r3, #24
 800c80c:	4b37      	ldr	r3, [pc, #220]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	0619      	lsls	r1, r3, #24
 800c812:	4b36      	ldr	r3, [pc, #216]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c814:	785b      	ldrb	r3, [r3, #1]
 800c816:	041b      	lsls	r3, r3, #16
 800c818:	4319      	orrs	r1, r3
 800c81a:	4b34      	ldr	r3, [pc, #208]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c81c:	789b      	ldrb	r3, [r3, #2]
 800c81e:	021b      	lsls	r3, r3, #8
 800c820:	430b      	orrs	r3, r1
 800c822:	4932      	ldr	r1, [pc, #200]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c824:	78c9      	ldrb	r1, [r1, #3]
 800c826:	430b      	orrs	r3, r1
 800c828:	021b      	lsls	r3, r3, #8
 800c82a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c82e:	431a      	orrs	r2, r3
 800c830:	4b2e      	ldr	r3, [pc, #184]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	0619      	lsls	r1, r3, #24
 800c836:	4b2d      	ldr	r3, [pc, #180]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c838:	785b      	ldrb	r3, [r3, #1]
 800c83a:	041b      	lsls	r3, r3, #16
 800c83c:	4319      	orrs	r1, r3
 800c83e:	4b2b      	ldr	r3, [pc, #172]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c840:	789b      	ldrb	r3, [r3, #2]
 800c842:	021b      	lsls	r3, r3, #8
 800c844:	430b      	orrs	r3, r1
 800c846:	4929      	ldr	r1, [pc, #164]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c848:	78c9      	ldrb	r1, [r1, #3]
 800c84a:	430b      	orrs	r3, r1
 800c84c:	0a1b      	lsrs	r3, r3, #8
 800c84e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c852:	431a      	orrs	r2, r3
 800c854:	4b25      	ldr	r3, [pc, #148]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	0619      	lsls	r1, r3, #24
 800c85a:	4b24      	ldr	r3, [pc, #144]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c85c:	785b      	ldrb	r3, [r3, #1]
 800c85e:	041b      	lsls	r3, r3, #16
 800c860:	4319      	orrs	r1, r3
 800c862:	4b22      	ldr	r3, [pc, #136]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c864:	789b      	ldrb	r3, [r3, #2]
 800c866:	021b      	lsls	r3, r3, #8
 800c868:	430b      	orrs	r3, r1
 800c86a:	4920      	ldr	r1, [pc, #128]	; (800c8ec <MX_LWIP_Init+0x268>)
 800c86c:	78c9      	ldrb	r1, [r1, #3]
 800c86e:	430b      	orrs	r3, r1
 800c870:	0e1b      	lsrs	r3, r3, #24
 800c872:	4313      	orrs	r3, r2
 800c874:	4a20      	ldr	r2, [pc, #128]	; (800c8f8 <MX_LWIP_Init+0x274>)
 800c876:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c878:	4b20      	ldr	r3, [pc, #128]	; (800c8fc <MX_LWIP_Init+0x278>)
 800c87a:	9302      	str	r3, [sp, #8]
 800c87c:	4b20      	ldr	r3, [pc, #128]	; (800c900 <MX_LWIP_Init+0x27c>)
 800c87e:	9301      	str	r3, [sp, #4]
 800c880:	2300      	movs	r3, #0
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	4b1c      	ldr	r3, [pc, #112]	; (800c8f8 <MX_LWIP_Init+0x274>)
 800c886:	4a1b      	ldr	r2, [pc, #108]	; (800c8f4 <MX_LWIP_Init+0x270>)
 800c888:	4919      	ldr	r1, [pc, #100]	; (800c8f0 <MX_LWIP_Init+0x26c>)
 800c88a:	481e      	ldr	r0, [pc, #120]	; (800c904 <MX_LWIP_Init+0x280>)
 800c88c:	f006 fe2a 	bl	80134e4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c890:	481c      	ldr	r0, [pc, #112]	; (800c904 <MX_LWIP_Init+0x280>)
 800c892:	f006 ffeb 	bl	801386c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c896:	4b1b      	ldr	r3, [pc, #108]	; (800c904 <MX_LWIP_Init+0x280>)
 800c898:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c89c:	089b      	lsrs	r3, r3, #2
 800c89e:	f003 0301 	and.w	r3, r3, #1
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d003      	beq.n	800c8b0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800c8a8:	4816      	ldr	r0, [pc, #88]	; (800c904 <MX_LWIP_Init+0x280>)
 800c8aa:	f006 ffef 	bl	801388c <netif_set_up>
 800c8ae:	e002      	b.n	800c8b6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800c8b0:	4814      	ldr	r0, [pc, #80]	; (800c904 <MX_LWIP_Init+0x280>)
 800c8b2:	f007 f85f 	bl	8013974 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c8b6:	4914      	ldr	r1, [pc, #80]	; (800c908 <MX_LWIP_Init+0x284>)
 800c8b8:	4812      	ldr	r0, [pc, #72]	; (800c904 <MX_LWIP_Init+0x280>)
 800c8ba:	f007 f8f9 	bl	8013ab0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800c8be:	4b13      	ldr	r3, [pc, #76]	; (800c90c <MX_LWIP_Init+0x288>)
 800c8c0:	1d3c      	adds	r4, r7, #4
 800c8c2:	461d      	mov	r5, r3
 800c8c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c8cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800c8d0:	1d3b      	adds	r3, r7, #4
 800c8d2:	490c      	ldr	r1, [pc, #48]	; (800c904 <MX_LWIP_Init+0x280>)
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f000 fd47 	bl	800d368 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c8da:	bf00      	nop
 800c8dc:	3720      	adds	r7, #32
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bdb0      	pop	{r4, r5, r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	20001828 	.word	0x20001828
 800c8e8:	2000182c 	.word	0x2000182c
 800c8ec:	20001830 	.word	0x20001830
 800c8f0:	2000181c 	.word	0x2000181c
 800c8f4:	20001820 	.word	0x20001820
 800c8f8:	20001824 	.word	0x20001824
 800c8fc:	080127d1 	.word	0x080127d1
 800c900:	0800ce09 	.word	0x0800ce09
 800c904:	200017dc 	.word	0x200017dc
 800c908:	0800c911 	.word	0x0800c911
 800c90c:	0801fc64 	.word	0x0801fc64

0800c910 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c918:	bf00      	nop
 800c91a:	370c      	adds	r7, #12
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <SCB_InvalidateDCache_by_Addr>:
{
 800c924:	b480      	push	{r7}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800c936:	2320      	movs	r3, #32
 800c938:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c93a:	f3bf 8f4f 	dsb	sy
}
 800c93e:	bf00      	nop
    while (op_size > 0) {
 800c940:	e00b      	b.n	800c95a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800c942:	4a0d      	ldr	r2, [pc, #52]	; (800c978 <SCB_InvalidateDCache_by_Addr+0x54>)
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	693a      	ldr	r2, [r7, #16]
 800c94e:	4413      	add	r3, r2
 800c950:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	dcf0      	bgt.n	800c942 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c960:	f3bf 8f4f 	dsb	sy
}
 800c964:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c966:	f3bf 8f6f 	isb	sy
}
 800c96a:	bf00      	nop
}
 800c96c:	bf00      	nop
 800c96e:	371c      	adds	r7, #28
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr
 800c978:	e000ed00 	.word	0xe000ed00

0800c97c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c984:	4b04      	ldr	r3, [pc, #16]	; (800c998 <HAL_ETH_RxCpltCallback+0x1c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4618      	mov	r0, r3
 800c98a:	f000 fe69 	bl	800d660 <osSemaphoreRelease>
}
 800c98e:	bf00      	nop
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	200061c0 	.word	0x200061c0

0800c99c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c9a4:	4b04      	ldr	r3, [pc, #16]	; (800c9b8 <HAL_ETH_TxCpltCallback+0x1c>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f000 fe59 	bl	800d660 <osSemaphoreRelease>
}
 800c9ae:	bf00      	nop
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	200061c4 	.word	0x200061c4

0800c9bc <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7fc fca5 	bl	8009314 <HAL_ETH_GetDMAError>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9d0:	2b80      	cmp	r3, #128	; 0x80
 800c9d2:	d104      	bne.n	800c9de <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c9d4:	4b04      	ldr	r3, [pc, #16]	; (800c9e8 <HAL_ETH_ErrorCallback+0x2c>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f000 fe41 	bl	800d660 <osSemaphoreRelease>
  }
}
 800c9de:	bf00      	nop
 800c9e0:	3708      	adds	r7, #8
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	200061c0 	.word	0x200061c0

0800c9ec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c9ec:	b5b0      	push	{r4, r5, r7, lr}
 800c9ee:	b0a8      	sub	sp, #160	; 0xa0
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800ca00:	2300      	movs	r3, #0
 800ca02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800ca06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ca0a:	2264      	movs	r2, #100	; 0x64
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f011 fbc8 	bl	801e1a4 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ca14:	4b85      	ldr	r3, [pc, #532]	; (800cc2c <low_level_init+0x240>)
 800ca16:	4a86      	ldr	r2, [pc, #536]	; (800cc30 <low_level_init+0x244>)
 800ca18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800ca20:	2380      	movs	r3, #128	; 0x80
 800ca22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800ca26:	23e1      	movs	r3, #225	; 0xe1
 800ca28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800ca32:	2300      	movs	r3, #0
 800ca34:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800ca3e:	4a7b      	ldr	r2, [pc, #492]	; (800cc2c <low_level_init+0x240>)
 800ca40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca44:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ca46:	4b79      	ldr	r3, [pc, #484]	; (800cc2c <low_level_init+0x240>)
 800ca48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ca4c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ca4e:	4b77      	ldr	r3, [pc, #476]	; (800cc2c <low_level_init+0x240>)
 800ca50:	4a78      	ldr	r2, [pc, #480]	; (800cc34 <low_level_init+0x248>)
 800ca52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ca54:	4b75      	ldr	r3, [pc, #468]	; (800cc2c <low_level_init+0x240>)
 800ca56:	4a78      	ldr	r2, [pc, #480]	; (800cc38 <low_level_init+0x24c>)
 800ca58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800ca5a:	4b74      	ldr	r3, [pc, #464]	; (800cc2c <low_level_init+0x240>)
 800ca5c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ca60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ca62:	4872      	ldr	r0, [pc, #456]	; (800cc2c <low_level_init+0x240>)
 800ca64:	f7fb fe18 	bl	8008698 <HAL_ETH_Init>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ca6e:	2238      	movs	r2, #56	; 0x38
 800ca70:	2100      	movs	r1, #0
 800ca72:	4872      	ldr	r0, [pc, #456]	; (800cc3c <low_level_init+0x250>)
 800ca74:	f011 fb96 	bl	801e1a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ca78:	4b70      	ldr	r3, [pc, #448]	; (800cc3c <low_level_init+0x250>)
 800ca7a:	2221      	movs	r2, #33	; 0x21
 800ca7c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ca7e:	4b6f      	ldr	r3, [pc, #444]	; (800cc3c <low_level_init+0x250>)
 800ca80:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800ca84:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800ca86:	4b6d      	ldr	r3, [pc, #436]	; (800cc3c <low_level_init+0x250>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800ca8c:	486c      	ldr	r0, [pc, #432]	; (800cc40 <low_level_init+0x254>)
 800ca8e:	f006 fb9b 	bl	80131c8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2206      	movs	r2, #6
 800ca96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ca9a:	4b64      	ldr	r3, [pc, #400]	; (800cc2c <low_level_init+0x240>)
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	781a      	ldrb	r2, [r3, #0]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800caa6:	4b61      	ldr	r3, [pc, #388]	; (800cc2c <low_level_init+0x240>)
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	785a      	ldrb	r2, [r3, #1]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800cab2:	4b5e      	ldr	r3, [pc, #376]	; (800cc2c <low_level_init+0x240>)
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	789a      	ldrb	r2, [r3, #2]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800cabe:	4b5b      	ldr	r3, [pc, #364]	; (800cc2c <low_level_init+0x240>)
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	78da      	ldrb	r2, [r3, #3]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800caca:	4b58      	ldr	r3, [pc, #352]	; (800cc2c <low_level_init+0x240>)
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	791a      	ldrb	r2, [r3, #4]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800cad6:	4b55      	ldr	r3, [pc, #340]	; (800cc2c <low_level_init+0x240>)
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	795a      	ldrb	r2, [r3, #5]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cae8:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800caf0:	f043 030a 	orr.w	r3, r3, #10
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800cafc:	2203      	movs	r2, #3
 800cafe:	2100      	movs	r1, #0
 800cb00:	2001      	movs	r0, #1
 800cb02:	f001 f89d 	bl	800dc40 <xQueueGenericCreate>
 800cb06:	4603      	mov	r3, r0
 800cb08:	4a4e      	ldr	r2, [pc, #312]	; (800cc44 <low_level_init+0x258>)
 800cb0a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800cb0c:	2203      	movs	r2, #3
 800cb0e:	2100      	movs	r1, #0
 800cb10:	2001      	movs	r0, #1
 800cb12:	f001 f895 	bl	800dc40 <xQueueGenericCreate>
 800cb16:	4603      	mov	r3, r0
 800cb18:	4a4b      	ldr	r2, [pc, #300]	; (800cc48 <low_level_init+0x25c>)
 800cb1a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800cb1c:	4b4b      	ldr	r3, [pc, #300]	; (800cc4c <low_level_init+0x260>)
 800cb1e:	f107 0408 	add.w	r4, r7, #8
 800cb22:	461d      	mov	r5, r3
 800cb24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cb2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800cb30:	f107 0308 	add.w	r3, r7, #8
 800cb34:	6879      	ldr	r1, [r7, #4]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f000 fc16 	bl	800d368 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800cb3c:	4944      	ldr	r1, [pc, #272]	; (800cc50 <low_level_init+0x264>)
 800cb3e:	4845      	ldr	r0, [pc, #276]	; (800cc54 <low_level_init+0x268>)
 800cb40:	f7fb fa91 	bl	8008066 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800cb44:	4843      	ldr	r0, [pc, #268]	; (800cc54 <low_level_init+0x268>)
 800cb46:	f7fb fac0 	bl	80080ca <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800cb4a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d165      	bne.n	800cc1e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800cb52:	4840      	ldr	r0, [pc, #256]	; (800cc54 <low_level_init+0x268>)
 800cb54:	f7fb fb61 	bl	800821a <LAN8742_GetLinkState>
 800cb58:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800cb5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	dc06      	bgt.n	800cb72 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f006 ff73 	bl	8013a50 <netif_set_link_down>
      netif_set_down(netif);
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f006 ff02 	bl	8013974 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800cb70:	e057      	b.n	800cc22 <low_level_init+0x236>
      switch (PHYLinkState)
 800cb72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb76:	3b02      	subs	r3, #2
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	d82b      	bhi.n	800cbd4 <low_level_init+0x1e8>
 800cb7c:	a201      	add	r2, pc, #4	; (adr r2, 800cb84 <low_level_init+0x198>)
 800cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb82:	bf00      	nop
 800cb84:	0800cb95 	.word	0x0800cb95
 800cb88:	0800cba7 	.word	0x0800cba7
 800cb8c:	0800cbb7 	.word	0x0800cbb7
 800cb90:	0800cbc7 	.word	0x0800cbc7
        duplex = ETH_FULLDUPLEX_MODE;
 800cb94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800cb9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800cba4:	e01f      	b.n	800cbe6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800cba6:	2300      	movs	r3, #0
 800cba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800cbac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cbb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800cbb4:	e017      	b.n	800cbe6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800cbb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800cbc4:	e00f      	b.n	800cbe6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800cbd2:	e008      	b.n	800cbe6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800cbd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800cbdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cbe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800cbe4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800cbe6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cbea:	4619      	mov	r1, r3
 800cbec:	480f      	ldr	r0, [pc, #60]	; (800cc2c <low_level_init+0x240>)
 800cbee:	f7fc fa37 	bl	8009060 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800cbf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cbf6:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 800cbf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cbfc:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800cbfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cc02:	4619      	mov	r1, r3
 800cc04:	4809      	ldr	r0, [pc, #36]	; (800cc2c <low_level_init+0x240>)
 800cc06:	f7fc fb15 	bl	8009234 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800cc0a:	4808      	ldr	r0, [pc, #32]	; (800cc2c <low_level_init+0x240>)
 800cc0c:	f7fb fdc0 	bl	8008790 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f006 fe3b 	bl	801388c <netif_set_up>
    netif_set_link_up(netif);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f006 fee6 	bl	80139e8 <netif_set_link_up>
}
 800cc1c:	e001      	b.n	800cc22 <low_level_init+0x236>
    Error_Handler();
 800cc1e:	f7fb f813 	bl	8007c48 <Error_Handler>
}
 800cc22:	bf00      	nop
 800cc24:	37a0      	adds	r7, #160	; 0xa0
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bdb0      	pop	{r4, r5, r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	200061c8 	.word	0x200061c8
 800cc30:	40028000 	.word	0x40028000
 800cc34:	20000134 	.word	0x20000134
 800cc38:	20000094 	.word	0x20000094
 800cc3c:	20006278 	.word	0x20006278
 800cc40:	080233bc 	.word	0x080233bc
 800cc44:	200061c0 	.word	0x200061c0
 800cc48:	200061c4 	.word	0x200061c4
 800cc4c:	0801fc88 	.word	0x0801fc88
 800cc50:	2000000c 	.word	0x2000000c
 800cc54:	200062b0 	.word	0x200062b0

0800cc58 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b092      	sub	sp, #72	; 0x48
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800cc62:	2300      	movs	r3, #0
 800cc64:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800cc66:	2300      	movs	r3, #0
 800cc68:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800cc70:	f107 030c 	add.w	r3, r7, #12
 800cc74:	2230      	movs	r2, #48	; 0x30
 800cc76:	2100      	movs	r1, #0
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f011 fa93 	bl	801e1a4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800cc7e:	f107 030c 	add.w	r3, r7, #12
 800cc82:	2230      	movs	r2, #48	; 0x30
 800cc84:	2100      	movs	r1, #0
 800cc86:	4618      	mov	r0, r3
 800cc88:	f011 fa8c 	bl	801e1a4 <memset>

  for(q = p; q != NULL; q = q->next)
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	643b      	str	r3, [r7, #64]	; 0x40
 800cc90:	e045      	b.n	800cd1e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800cc92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc94:	2b03      	cmp	r3, #3
 800cc96:	d902      	bls.n	800cc9e <low_level_output+0x46>
      return ERR_IF;
 800cc98:	f06f 030b 	mvn.w	r3, #11
 800cc9c:	e065      	b.n	800cd6a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800cc9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cca0:	6859      	ldr	r1, [r3, #4]
 800cca2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cca4:	4613      	mov	r3, r2
 800cca6:	005b      	lsls	r3, r3, #1
 800cca8:	4413      	add	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	3348      	adds	r3, #72	; 0x48
 800ccae:	443b      	add	r3, r7
 800ccb0:	3b3c      	subs	r3, #60	; 0x3c
 800ccb2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ccb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccb6:	895b      	ldrh	r3, [r3, #10]
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	005b      	lsls	r3, r3, #1
 800ccc0:	4413      	add	r3, r2
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	3348      	adds	r3, #72	; 0x48
 800ccc6:	443b      	add	r3, r7
 800ccc8:	3b38      	subs	r3, #56	; 0x38
 800ccca:	6019      	str	r1, [r3, #0]

    if(i>0)
 800cccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d011      	beq.n	800ccf6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ccd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccd4:	1e5a      	subs	r2, r3, #1
 800ccd6:	f107 000c 	add.w	r0, r7, #12
 800ccda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ccdc:	460b      	mov	r3, r1
 800ccde:	005b      	lsls	r3, r3, #1
 800cce0:	440b      	add	r3, r1
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	18c1      	adds	r1, r0, r3
 800cce6:	4613      	mov	r3, r2
 800cce8:	005b      	lsls	r3, r3, #1
 800ccea:	4413      	add	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	3348      	adds	r3, #72	; 0x48
 800ccf0:	443b      	add	r3, r7
 800ccf2:	3b34      	subs	r3, #52	; 0x34
 800ccf4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ccf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d109      	bne.n	800cd12 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ccfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd00:	4613      	mov	r3, r2
 800cd02:	005b      	lsls	r3, r3, #1
 800cd04:	4413      	add	r3, r2
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	3348      	adds	r3, #72	; 0x48
 800cd0a:	443b      	add	r3, r7
 800cd0c:	3b34      	subs	r3, #52	; 0x34
 800cd0e:	2200      	movs	r2, #0
 800cd10:	601a      	str	r2, [r3, #0]
    }

    i++;
 800cd12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd14:	3301      	adds	r3, #1
 800cd16:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800cd18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	643b      	str	r3, [r7, #64]	; 0x40
 800cd1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d1b6      	bne.n	800cc92 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	891b      	ldrh	r3, [r3, #8]
 800cd28:	461a      	mov	r2, r3
 800cd2a:	4b12      	ldr	r3, [pc, #72]	; (800cd74 <low_level_output+0x11c>)
 800cd2c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800cd2e:	4a11      	ldr	r2, [pc, #68]	; (800cd74 <low_level_output+0x11c>)
 800cd30:	f107 030c 	add.w	r3, r7, #12
 800cd34:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800cd36:	4a0f      	ldr	r2, [pc, #60]	; (800cd74 <low_level_output+0x11c>)
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800cd3c:	6838      	ldr	r0, [r7, #0]
 800cd3e:	f007 fc15 	bl	801456c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800cd42:	490c      	ldr	r1, [pc, #48]	; (800cd74 <low_level_output+0x11c>)
 800cd44:	480c      	ldr	r0, [pc, #48]	; (800cd78 <low_level_output+0x120>)
 800cd46:	f7fb fe31 	bl	80089ac <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800cd4a:	bf00      	nop
 800cd4c:	4b0b      	ldr	r3, [pc, #44]	; (800cd7c <low_level_output+0x124>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f04f 31ff 	mov.w	r1, #4294967295
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 fc35 	bl	800d5c4 <osSemaphoreWait>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d1f5      	bne.n	800cd4c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800cd60:	4805      	ldr	r0, [pc, #20]	; (800cd78 <low_level_output+0x120>)
 800cd62:	f7fb ffb7 	bl	8008cd4 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800cd66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3748      	adds	r7, #72	; 0x48
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	20006278 	.word	0x20006278
 800cd78:	200061c8 	.word	0x200061c8
 800cd7c:	200061c4 	.word	0x200061c4

0800cd80 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800cd8c:	4b07      	ldr	r3, [pc, #28]	; (800cdac <low_level_input+0x2c>)
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d105      	bne.n	800cda0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800cd94:	f107 030c 	add.w	r3, r7, #12
 800cd98:	4619      	mov	r1, r3
 800cd9a:	4805      	ldr	r0, [pc, #20]	; (800cdb0 <low_level_input+0x30>)
 800cd9c:	f7fb fe62 	bl	8008a64 <HAL_ETH_ReadData>
  }

  return p;
 800cda0:	68fb      	ldr	r3, [r7, #12]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	200061bc 	.word	0x200061bc
 800cdb0:	200061c8 	.word	0x200061c8

0800cdb4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800cdc4:	4b0f      	ldr	r3, [pc, #60]	; (800ce04 <ethernetif_input+0x50>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f04f 31ff 	mov.w	r1, #4294967295
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 fbf9 	bl	800d5c4 <osSemaphoreWait>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d1f5      	bne.n	800cdc4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800cdd8:	68b8      	ldr	r0, [r7, #8]
 800cdda:	f7ff ffd1 	bl	800cd80 <low_level_input>
 800cdde:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00a      	beq.n	800cdfc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	68b9      	ldr	r1, [r7, #8]
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	4798      	blx	r3
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d002      	beq.n	800cdfc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f007 fb12 	bl	8014420 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1ea      	bne.n	800cdd8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ce02:	e7df      	b.n	800cdc4 <ethernetif_input+0x10>
 800ce04:	200061c0 	.word	0x200061c0

0800ce08 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d106      	bne.n	800ce24 <ethernetif_init+0x1c>
 800ce16:	4b0e      	ldr	r3, [pc, #56]	; (800ce50 <ethernetif_init+0x48>)
 800ce18:	f240 12ef 	movw	r2, #495	; 0x1ef
 800ce1c:	490d      	ldr	r1, [pc, #52]	; (800ce54 <ethernetif_init+0x4c>)
 800ce1e:	480e      	ldr	r0, [pc, #56]	; (800ce58 <ethernetif_init+0x50>)
 800ce20:	f011 faa8 	bl	801e374 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2273      	movs	r2, #115	; 0x73
 800ce28:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2274      	movs	r2, #116	; 0x74
 800ce30:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	4a09      	ldr	r2, [pc, #36]	; (800ce5c <ethernetif_init+0x54>)
 800ce38:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	4a08      	ldr	r2, [pc, #32]	; (800ce60 <ethernetif_init+0x58>)
 800ce3e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7ff fdd3 	bl	800c9ec <low_level_init>

  return ERR_OK;
 800ce46:	2300      	movs	r3, #0
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	0801fca4 	.word	0x0801fca4
 800ce54:	0801fcc0 	.word	0x0801fcc0
 800ce58:	0801fcd0 	.word	0x0801fcd0
 800ce5c:	0801bbed 	.word	0x0801bbed
 800ce60:	0800cc59 	.word	0x0800cc59

0800ce64 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ce70:	68f9      	ldr	r1, [r7, #12]
 800ce72:	4809      	ldr	r0, [pc, #36]	; (800ce98 <pbuf_free_custom+0x34>)
 800ce74:	f006 fa98 	bl	80133a8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800ce78:	4b08      	ldr	r3, [pc, #32]	; (800ce9c <pbuf_free_custom+0x38>)
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d107      	bne.n	800ce90 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800ce80:	4b06      	ldr	r3, [pc, #24]	; (800ce9c <pbuf_free_custom+0x38>)
 800ce82:	2200      	movs	r2, #0
 800ce84:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800ce86:	4b06      	ldr	r3, [pc, #24]	; (800cea0 <pbuf_free_custom+0x3c>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f000 fbe8 	bl	800d660 <osSemaphoreRelease>
  }
}
 800ce90:	bf00      	nop
 800ce92:	3710      	adds	r7, #16
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	080233bc 	.word	0x080233bc
 800ce9c:	200061bc 	.word	0x200061bc
 800cea0:	200061c0 	.word	0x200061c0

0800cea4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800cea8:	f7fb fa68 	bl	800837c <HAL_GetTick>
 800ceac:	4603      	mov	r3, r0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	bd80      	pop	{r7, pc}
	...

0800ceb4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b08e      	sub	sp, #56	; 0x38
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cec0:	2200      	movs	r2, #0
 800cec2:	601a      	str	r2, [r3, #0]
 800cec4:	605a      	str	r2, [r3, #4]
 800cec6:	609a      	str	r2, [r3, #8]
 800cec8:	60da      	str	r2, [r3, #12]
 800ceca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a52      	ldr	r2, [pc, #328]	; (800d01c <HAL_ETH_MspInit+0x168>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	f040 809e 	bne.w	800d014 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800ced8:	4b51      	ldr	r3, [pc, #324]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800ceda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cedc:	4a50      	ldr	r2, [pc, #320]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cee2:	6313      	str	r3, [r2, #48]	; 0x30
 800cee4:	4b4e      	ldr	r3, [pc, #312]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ceec:	623b      	str	r3, [r7, #32]
 800ceee:	6a3b      	ldr	r3, [r7, #32]
 800cef0:	4b4b      	ldr	r3, [pc, #300]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef4:	4a4a      	ldr	r2, [pc, #296]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cef6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cefa:	6313      	str	r3, [r2, #48]	; 0x30
 800cefc:	4b48      	ldr	r3, [pc, #288]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cefe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf04:	61fb      	str	r3, [r7, #28]
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	4b45      	ldr	r3, [pc, #276]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf0c:	4a44      	ldr	r2, [pc, #272]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cf12:	6313      	str	r3, [r2, #48]	; 0x30
 800cf14:	4b42      	ldr	r3, [pc, #264]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf1c:	61bb      	str	r3, [r7, #24]
 800cf1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf20:	4b3f      	ldr	r3, [pc, #252]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf24:	4a3e      	ldr	r2, [pc, #248]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf26:	f043 0304 	orr.w	r3, r3, #4
 800cf2a:	6313      	str	r3, [r2, #48]	; 0x30
 800cf2c:	4b3c      	ldr	r3, [pc, #240]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf30:	f003 0304 	and.w	r3, r3, #4
 800cf34:	617b      	str	r3, [r7, #20]
 800cf36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf38:	4b39      	ldr	r3, [pc, #228]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf3c:	4a38      	ldr	r2, [pc, #224]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf3e:	f043 0301 	orr.w	r3, r3, #1
 800cf42:	6313      	str	r3, [r2, #48]	; 0x30
 800cf44:	4b36      	ldr	r3, [pc, #216]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf48:	f003 0301 	and.w	r3, r3, #1
 800cf4c:	613b      	str	r3, [r7, #16]
 800cf4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf50:	4b33      	ldr	r3, [pc, #204]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf54:	4a32      	ldr	r2, [pc, #200]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf56:	f043 0302 	orr.w	r3, r3, #2
 800cf5a:	6313      	str	r3, [r2, #48]	; 0x30
 800cf5c:	4b30      	ldr	r3, [pc, #192]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf60:	f003 0302 	and.w	r3, r3, #2
 800cf64:	60fb      	str	r3, [r7, #12]
 800cf66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800cf68:	4b2d      	ldr	r3, [pc, #180]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf6c:	4a2c      	ldr	r2, [pc, #176]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf72:	6313      	str	r3, [r2, #48]	; 0x30
 800cf74:	4b2a      	ldr	r3, [pc, #168]	; (800d020 <HAL_ETH_MspInit+0x16c>)
 800cf76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf7c:	60bb      	str	r3, [r7, #8]
 800cf7e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800cf80:	2332      	movs	r3, #50	; 0x32
 800cf82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf84:	2302      	movs	r3, #2
 800cf86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cf90:	230b      	movs	r3, #11
 800cf92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf98:	4619      	mov	r1, r3
 800cf9a:	4822      	ldr	r0, [pc, #136]	; (800d024 <HAL_ETH_MspInit+0x170>)
 800cf9c:	f7fd f892 	bl	800a0c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800cfa0:	2386      	movs	r3, #134	; 0x86
 800cfa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfac:	2303      	movs	r3, #3
 800cfae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cfb0:	230b      	movs	r3, #11
 800cfb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfb8:	4619      	mov	r1, r3
 800cfba:	481b      	ldr	r0, [pc, #108]	; (800d028 <HAL_ETH_MspInit+0x174>)
 800cfbc:	f7fd f882 	bl	800a0c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800cfc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfc6:	2302      	movs	r3, #2
 800cfc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfce:	2303      	movs	r3, #3
 800cfd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cfd2:	230b      	movs	r3, #11
 800cfd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cfd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cfda:	4619      	mov	r1, r3
 800cfdc:	4813      	ldr	r0, [pc, #76]	; (800d02c <HAL_ETH_MspInit+0x178>)
 800cfde:	f7fd f871 	bl	800a0c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800cfe2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cfe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfe8:	2302      	movs	r3, #2
 800cfea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfec:	2300      	movs	r3, #0
 800cfee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cff0:	2303      	movs	r3, #3
 800cff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cff4:	230b      	movs	r3, #11
 800cff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cffc:	4619      	mov	r1, r3
 800cffe:	480c      	ldr	r0, [pc, #48]	; (800d030 <HAL_ETH_MspInit+0x17c>)
 800d000:	f7fd f860 	bl	800a0c4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800d004:	2200      	movs	r2, #0
 800d006:	2105      	movs	r1, #5
 800d008:	203d      	movs	r0, #61	; 0x3d
 800d00a:	f7fb fa9f 	bl	800854c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800d00e:	203d      	movs	r0, #61	; 0x3d
 800d010:	f7fb fab8 	bl	8008584 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800d014:	bf00      	nop
 800d016:	3738      	adds	r7, #56	; 0x38
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	40028000 	.word	0x40028000
 800d020:	40023800 	.word	0x40023800
 800d024:	40020800 	.word	0x40020800
 800d028:	40020000 	.word	0x40020000
 800d02c:	40020400 	.word	0x40020400
 800d030:	40021800 	.word	0x40021800

0800d034 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800d038:	4802      	ldr	r0, [pc, #8]	; (800d044 <ETH_PHY_IO_Init+0x10>)
 800d03a:	f7fc f915 	bl	8009268 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	bd80      	pop	{r7, pc}
 800d044:	200061c8 	.word	0x200061c8

0800d048 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800d048:	b480      	push	{r7}
 800d04a:	af00      	add	r7, sp, #0
  return 0;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	68ba      	ldr	r2, [r7, #8]
 800d068:	68f9      	ldr	r1, [r7, #12]
 800d06a:	4807      	ldr	r0, [pc, #28]	; (800d088 <ETH_PHY_IO_ReadReg+0x30>)
 800d06c:	f7fb ff64 	bl	8008f38 <HAL_ETH_ReadPHYRegister>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d002      	beq.n	800d07c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800d076:	f04f 33ff 	mov.w	r3, #4294967295
 800d07a:	e000      	b.n	800d07e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	200061c8 	.word	0x200061c8

0800d08c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	68f9      	ldr	r1, [r7, #12]
 800d09e:	4807      	ldr	r0, [pc, #28]	; (800d0bc <ETH_PHY_IO_WriteReg+0x30>)
 800d0a0:	f7fb ff95 	bl	8008fce <HAL_ETH_WritePHYRegister>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800d0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ae:	e000      	b.n	800d0b2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800d0b0:	2300      	movs	r3, #0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	200061c8 	.word	0x200061c8

0800d0c0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d0c4:	f7fb f95a 	bl	800837c <HAL_GetTick>
 800d0c8:	4603      	mov	r3, r0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	bd80      	pop	{r7, pc}
	...

0800d0d0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b0a0      	sub	sp, #128	; 0x80
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800d0d8:	f107 0308 	add.w	r3, r7, #8
 800d0dc:	2264      	movs	r2, #100	; 0x64
 800d0de:	2100      	movs	r1, #0
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f011 f85f 	bl	801e1a4 <memset>
  int32_t PHYLinkState = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800d0fa:	483a      	ldr	r0, [pc, #232]	; (800d1e4 <ethernet_link_thread+0x114>)
 800d0fc:	f7fb f88d 	bl	800821a <LAN8742_GetLinkState>
 800d100:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800d102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d104:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d108:	089b      	lsrs	r3, r3, #2
 800d10a:	f003 0301 	and.w	r3, r3, #1
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	2b00      	cmp	r3, #0
 800d112:	d00c      	beq.n	800d12e <ethernet_link_thread+0x5e>
 800d114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d116:	2b01      	cmp	r3, #1
 800d118:	dc09      	bgt.n	800d12e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800d11a:	4833      	ldr	r0, [pc, #204]	; (800d1e8 <ethernet_link_thread+0x118>)
 800d11c:	f7fb fbc6 	bl	80088ac <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800d120:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d122:	f006 fc27 	bl	8013974 <netif_set_down>
    netif_set_link_down(netif);
 800d126:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d128:	f006 fc92 	bl	8013a50 <netif_set_link_down>
 800d12c:	e055      	b.n	800d1da <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800d12e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d130:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d134:	f003 0304 	and.w	r3, r3, #4
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d14e      	bne.n	800d1da <ethernet_link_thread+0x10a>
 800d13c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d13e:	2b01      	cmp	r3, #1
 800d140:	dd4b      	ble.n	800d1da <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800d142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d144:	3b02      	subs	r3, #2
 800d146:	2b03      	cmp	r3, #3
 800d148:	d82a      	bhi.n	800d1a0 <ethernet_link_thread+0xd0>
 800d14a:	a201      	add	r2, pc, #4	; (adr r2, 800d150 <ethernet_link_thread+0x80>)
 800d14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d150:	0800d161 	.word	0x0800d161
 800d154:	0800d173 	.word	0x0800d173
 800d158:	0800d183 	.word	0x0800d183
 800d15c:	0800d193 	.word	0x0800d193
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800d160:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d164:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800d166:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d16a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800d16c:	2301      	movs	r3, #1
 800d16e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800d170:	e017      	b.n	800d1a2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800d172:	2300      	movs	r3, #0
 800d174:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800d176:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d17a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800d17c:	2301      	movs	r3, #1
 800d17e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800d180:	e00f      	b.n	800d1a2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800d182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d186:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800d188:	2300      	movs	r3, #0
 800d18a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800d18c:	2301      	movs	r3, #1
 800d18e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800d190:	e007      	b.n	800d1a2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800d192:	2300      	movs	r3, #0
 800d194:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800d196:	2300      	movs	r3, #0
 800d198:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800d19a:	2301      	movs	r3, #1
 800d19c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800d19e:	e000      	b.n	800d1a2 <ethernet_link_thread+0xd2>
    default:
      break;
 800d1a0:	bf00      	nop
    }

    if(linkchanged)
 800d1a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d018      	beq.n	800d1da <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800d1a8:	f107 0308 	add.w	r3, r7, #8
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	480e      	ldr	r0, [pc, #56]	; (800d1e8 <ethernet_link_thread+0x118>)
 800d1b0:	f7fb ff56 	bl	8009060 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800d1b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1b6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800d1b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1ba:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800d1bc:	f107 0308 	add.w	r3, r7, #8
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	4809      	ldr	r0, [pc, #36]	; (800d1e8 <ethernet_link_thread+0x118>)
 800d1c4:	f7fc f836 	bl	8009234 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800d1c8:	4807      	ldr	r0, [pc, #28]	; (800d1e8 <ethernet_link_thread+0x118>)
 800d1ca:	f7fb fae1 	bl	8008790 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800d1ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d1d0:	f006 fb5c 	bl	801388c <netif_set_up>
      netif_set_link_up(netif);
 800d1d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d1d6:	f006 fc07 	bl	80139e8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800d1da:	2064      	movs	r0, #100	; 0x64
 800d1dc:	f000 f910 	bl	800d400 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800d1e0:	e78b      	b.n	800d0fa <ethernet_link_thread+0x2a>
 800d1e2:	bf00      	nop
 800d1e4:	200062b0 	.word	0x200062b0
 800d1e8:	200061c8 	.word	0x200061c8

0800d1ec <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af02      	add	r7, sp, #8
 800d1f2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800d1f4:	4812      	ldr	r0, [pc, #72]	; (800d240 <HAL_ETH_RxAllocateCallback+0x54>)
 800d1f6:	f006 f863 	bl	80132c0 <memp_malloc_pool>
 800d1fa:	60f8      	str	r0, [r7, #12]
  if (p)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d014      	beq.n	800d22c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f103 0220 	add.w	r2, r3, #32
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	4a0d      	ldr	r2, [pc, #52]	; (800d244 <HAL_ETH_RxAllocateCallback+0x58>)
 800d210:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d21a:	9201      	str	r2, [sp, #4]
 800d21c:	9300      	str	r3, [sp, #0]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2241      	movs	r2, #65	; 0x41
 800d222:	2100      	movs	r1, #0
 800d224:	2000      	movs	r0, #0
 800d226:	f006 ff41 	bl	80140ac <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800d22a:	e005      	b.n	800d238 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800d22c:	4b06      	ldr	r3, [pc, #24]	; (800d248 <HAL_ETH_RxAllocateCallback+0x5c>)
 800d22e:	2201      	movs	r2, #1
 800d230:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	601a      	str	r2, [r3, #0]
}
 800d238:	bf00      	nop
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	080233bc 	.word	0x080233bc
 800d244:	0800ce65 	.word	0x0800ce65
 800d248:	200061bc 	.word	0x200061bc

0800d24c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b088      	sub	sp, #32
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
 800d258:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d262:	2300      	movs	r3, #0
 800d264:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	3b20      	subs	r3, #32
 800d26a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	2200      	movs	r2, #0
 800d270:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	2200      	movs	r2, #0
 800d276:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	887a      	ldrh	r2, [r7, #2]
 800d27c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d103      	bne.n	800d28e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	69fa      	ldr	r2, [r7, #28]
 800d28a:	601a      	str	r2, [r3, #0]
 800d28c:	e003      	b.n	800d296 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	69fa      	ldr	r2, [r7, #28]
 800d294:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	69fa      	ldr	r2, [r7, #28]
 800d29a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	61fb      	str	r3, [r7, #28]
 800d2a2:	e009      	b.n	800d2b8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	891a      	ldrh	r2, [r3, #8]
 800d2a8:	887b      	ldrh	r3, [r7, #2]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	61fb      	str	r3, [r7, #28]
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1f2      	bne.n	800d2a4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800d2be:	887b      	ldrh	r3, [r7, #2]
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7ff fb2e 	bl	800c924 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800d2c8:	bf00      	nop
 800d2ca:	3720      	adds	r7, #32
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f007 f8a1 	bl	8014420 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800d2de:	bf00      	nop
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d2e6:	b480      	push	{r7}
 800d2e8:	b085      	sub	sp, #20
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d2f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2f8:	2b84      	cmp	r3, #132	; 0x84
 800d2fa:	d005      	beq.n	800d308 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d2fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	4413      	add	r3, r2
 800d304:	3303      	adds	r3, #3
 800d306:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d308:	68fb      	ldr	r3, [r7, #12]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3714      	adds	r7, #20
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr

0800d316 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d316:	b480      	push	{r7}
 800d318:	b083      	sub	sp, #12
 800d31a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d31c:	f3ef 8305 	mrs	r3, IPSR
 800d320:	607b      	str	r3, [r7, #4]
  return(result);
 800d322:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d324:	2b00      	cmp	r3, #0
 800d326:	bf14      	ite	ne
 800d328:	2301      	movne	r3, #1
 800d32a:	2300      	moveq	r3, #0
 800d32c:	b2db      	uxtb	r3, r3
}
 800d32e:	4618      	mov	r0, r3
 800d330:	370c      	adds	r7, #12
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr

0800d33a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d33e:	f001 fd89 	bl	800ee54 <vTaskStartScheduler>
  
  return osOK;
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	bd80      	pop	{r7, pc}

0800d348 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d34c:	f7ff ffe3 	bl	800d316 <inHandlerMode>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d356:	f001 fea7 	bl	800f0a8 <xTaskGetTickCountFromISR>
 800d35a:	4603      	mov	r3, r0
 800d35c:	e002      	b.n	800d364 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d35e:	f001 fe93 	bl	800f088 <xTaskGetTickCount>
 800d362:	4603      	mov	r3, r0
  }
}
 800d364:	4618      	mov	r0, r3
 800d366:	bd80      	pop	{r7, pc}

0800d368 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d36a:	b089      	sub	sp, #36	; 0x24
 800d36c:	af04      	add	r7, sp, #16
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	695b      	ldr	r3, [r3, #20]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d020      	beq.n	800d3bc <osThreadCreate+0x54>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	699b      	ldr	r3, [r3, #24]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d01c      	beq.n	800d3bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	685c      	ldr	r4, [r3, #4]
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681d      	ldr	r5, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	691e      	ldr	r6, [r3, #16]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d394:	4618      	mov	r0, r3
 800d396:	f7ff ffa6 	bl	800d2e6 <makeFreeRtosPriority>
 800d39a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	695b      	ldr	r3, [r3, #20]
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3a4:	9202      	str	r2, [sp, #8]
 800d3a6:	9301      	str	r3, [sp, #4]
 800d3a8:	9100      	str	r1, [sp, #0]
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	4632      	mov	r2, r6
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f001 fb67 	bl	800ea84 <xTaskCreateStatic>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	60fb      	str	r3, [r7, #12]
 800d3ba:	e01c      	b.n	800d3f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	685c      	ldr	r4, [r3, #4]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3c8:	b29e      	uxth	r6, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7ff ff88 	bl	800d2e6 <makeFreeRtosPriority>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	f107 030c 	add.w	r3, r7, #12
 800d3dc:	9301      	str	r3, [sp, #4]
 800d3de:	9200      	str	r2, [sp, #0]
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	4632      	mov	r2, r6
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f001 fbaf 	bl	800eb4a <xTaskCreate>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d001      	beq.n	800d3f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	e000      	b.n	800d3f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3714      	adds	r7, #20
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d400 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <osDelay+0x16>
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	e000      	b.n	800d418 <osDelay+0x18>
 800d416:	2301      	movs	r3, #1
 800d418:	4618      	mov	r0, r3
 800d41a:	f001 fce5 	bl	800ede8 <vTaskDelay>
  
  return osOK;
 800d41e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d420:	4618      	mov	r0, r3
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d007      	beq.n	800d448 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	4619      	mov	r1, r3
 800d43e:	2001      	movs	r0, #1
 800d440:	f000 fc91 	bl	800dd66 <xQueueCreateMutexStatic>
 800d444:	4603      	mov	r3, r0
 800d446:	e003      	b.n	800d450 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800d448:	2001      	movs	r0, #1
 800d44a:	f000 fc74 	bl	800dd36 <xQueueCreateMutex>
 800d44e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800d450:	4618      	mov	r0, r3
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d462:	2300      	movs	r3, #0
 800d464:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d101      	bne.n	800d470 <osMutexWait+0x18>
    return osErrorParameter;
 800d46c:	2380      	movs	r3, #128	; 0x80
 800d46e:	e03a      	b.n	800d4e6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800d470:	2300      	movs	r3, #0
 800d472:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d47a:	d103      	bne.n	800d484 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800d47c:	f04f 33ff 	mov.w	r3, #4294967295
 800d480:	60fb      	str	r3, [r7, #12]
 800d482:	e009      	b.n	800d498 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d006      	beq.n	800d498 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d101      	bne.n	800d498 <osMutexWait+0x40>
      ticks = 1;
 800d494:	2301      	movs	r3, #1
 800d496:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d498:	f7ff ff3d 	bl	800d316 <inHandlerMode>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d017      	beq.n	800d4d2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d4a2:	f107 0308 	add.w	r3, r7, #8
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f001 f8ac 	bl	800e608 <xQueueReceiveFromISR>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d001      	beq.n	800d4ba <osMutexWait+0x62>
      return osErrorOS;
 800d4b6:	23ff      	movs	r3, #255	; 0xff
 800d4b8:	e015      	b.n	800d4e6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d011      	beq.n	800d4e4 <osMutexWait+0x8c>
 800d4c0:	4b0b      	ldr	r3, [pc, #44]	; (800d4f0 <osMutexWait+0x98>)
 800d4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4c6:	601a      	str	r2, [r3, #0]
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	e008      	b.n	800d4e4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800d4d2:	68f9      	ldr	r1, [r7, #12]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 ff83 	bl	800e3e0 <xQueueSemaphoreTake>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d001      	beq.n	800d4e4 <osMutexWait+0x8c>
    return osErrorOS;
 800d4e0:	23ff      	movs	r3, #255	; 0xff
 800d4e2:	e000      	b.n	800d4e6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3710      	adds	r7, #16
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	e000ed04 	.word	0xe000ed04

0800d4f4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d500:	2300      	movs	r3, #0
 800d502:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800d504:	f7ff ff07 	bl	800d316 <inHandlerMode>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d016      	beq.n	800d53c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800d50e:	f107 0308 	add.w	r3, r7, #8
 800d512:	4619      	mov	r1, r3
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fde7 	bl	800e0e8 <xQueueGiveFromISR>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d001      	beq.n	800d524 <osMutexRelease+0x30>
      return osErrorOS;
 800d520:	23ff      	movs	r3, #255	; 0xff
 800d522:	e017      	b.n	800d554 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d013      	beq.n	800d552 <osMutexRelease+0x5e>
 800d52a:	4b0c      	ldr	r3, [pc, #48]	; (800d55c <osMutexRelease+0x68>)
 800d52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	f3bf 8f6f 	isb	sy
 800d53a:	e00a      	b.n	800d552 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800d53c:	2300      	movs	r3, #0
 800d53e:	2200      	movs	r2, #0
 800d540:	2100      	movs	r1, #0
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fc2a 	bl	800dd9c <xQueueGenericSend>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d001      	beq.n	800d552 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800d54e:	23ff      	movs	r3, #255	; 0xff
 800d550:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800d552:	68fb      	ldr	r3, [r7, #12]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	e000ed04 	.word	0xe000ed04

0800d560 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800d560:	b580      	push	{r7, lr}
 800d562:	b086      	sub	sp, #24
 800d564:	af02      	add	r7, sp, #8
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00f      	beq.n	800d592 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d10a      	bne.n	800d58e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	2203      	movs	r2, #3
 800d57e:	9200      	str	r2, [sp, #0]
 800d580:	2200      	movs	r2, #0
 800d582:	2100      	movs	r1, #0
 800d584:	2001      	movs	r0, #1
 800d586:	f000 fad9 	bl	800db3c <xQueueGenericCreateStatic>
 800d58a:	4603      	mov	r3, r0
 800d58c:	e016      	b.n	800d5bc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800d58e:	2300      	movs	r3, #0
 800d590:	e014      	b.n	800d5bc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	2b01      	cmp	r3, #1
 800d596:	d110      	bne.n	800d5ba <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800d598:	2203      	movs	r2, #3
 800d59a:	2100      	movs	r1, #0
 800d59c:	2001      	movs	r0, #1
 800d59e:	f000 fb4f 	bl	800dc40 <xQueueGenericCreate>
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d005      	beq.n	800d5b6 <osSemaphoreCreate+0x56>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f000 fbf3 	bl	800dd9c <xQueueGenericSend>
      return sema;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	e000      	b.n	800d5bc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800d5ba:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d101      	bne.n	800d5dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d5d8:	2380      	movs	r3, #128	; 0x80
 800d5da:	e03a      	b.n	800d652 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5e6:	d103      	bne.n	800d5f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ec:	60fb      	str	r3, [r7, #12]
 800d5ee:	e009      	b.n	800d604 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d006      	beq.n	800d604 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d101      	bne.n	800d604 <osSemaphoreWait+0x40>
      ticks = 1;
 800d600:	2301      	movs	r3, #1
 800d602:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d604:	f7ff fe87 	bl	800d316 <inHandlerMode>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d017      	beq.n	800d63e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d60e:	f107 0308 	add.w	r3, r7, #8
 800d612:	461a      	mov	r2, r3
 800d614:	2100      	movs	r1, #0
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 fff6 	bl	800e608 <xQueueReceiveFromISR>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d001      	beq.n	800d626 <osSemaphoreWait+0x62>
      return osErrorOS;
 800d622:	23ff      	movs	r3, #255	; 0xff
 800d624:	e015      	b.n	800d652 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d011      	beq.n	800d650 <osSemaphoreWait+0x8c>
 800d62c:	4b0b      	ldr	r3, [pc, #44]	; (800d65c <osSemaphoreWait+0x98>)
 800d62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	e008      	b.n	800d650 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d63e:	68f9      	ldr	r1, [r7, #12]
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 fecd 	bl	800e3e0 <xQueueSemaphoreTake>
 800d646:	4603      	mov	r3, r0
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d001      	beq.n	800d650 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800d64c:	23ff      	movs	r3, #255	; 0xff
 800d64e:	e000      	b.n	800d652 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800d650:	2300      	movs	r3, #0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	e000ed04 	.word	0xe000ed04

0800d660 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d668:	2300      	movs	r3, #0
 800d66a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d66c:	2300      	movs	r3, #0
 800d66e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800d670:	f7ff fe51 	bl	800d316 <inHandlerMode>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d016      	beq.n	800d6a8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d67a:	f107 0308 	add.w	r3, r7, #8
 800d67e:	4619      	mov	r1, r3
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 fd31 	bl	800e0e8 <xQueueGiveFromISR>
 800d686:	4603      	mov	r3, r0
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d001      	beq.n	800d690 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800d68c:	23ff      	movs	r3, #255	; 0xff
 800d68e:	e017      	b.n	800d6c0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d013      	beq.n	800d6be <osSemaphoreRelease+0x5e>
 800d696:	4b0c      	ldr	r3, [pc, #48]	; (800d6c8 <osSemaphoreRelease+0x68>)
 800d698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	f3bf 8f6f 	isb	sy
 800d6a6:	e00a      	b.n	800d6be <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 fb74 	bl	800dd9c <xQueueGenericSend>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d001      	beq.n	800d6be <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800d6ba:	23ff      	movs	r3, #255	; 0xff
 800d6bc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800d6be:	68fb      	ldr	r3, [r7, #12]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	e000ed04 	.word	0xe000ed04

0800d6cc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800d6d4:	f7ff fe1f 	bl	800d316 <inHandlerMode>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d001      	beq.n	800d6e2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800d6de:	2382      	movs	r3, #130	; 0x82
 800d6e0:	e003      	b.n	800d6ea <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f001 f856 	bl	800e794 <vQueueDelete>

  return osOK; 
 800d6e8:	2300      	movs	r3, #0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d6f2:	b590      	push	{r4, r7, lr}
 800d6f4:	b085      	sub	sp, #20
 800d6f6:	af02      	add	r7, sp, #8
 800d6f8:	6078      	str	r0, [r7, #4]
 800d6fa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d011      	beq.n	800d728 <osMessageCreate+0x36>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00d      	beq.n	800d728 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6818      	ldr	r0, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6859      	ldr	r1, [r3, #4]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	689a      	ldr	r2, [r3, #8]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	2400      	movs	r4, #0
 800d71e:	9400      	str	r4, [sp, #0]
 800d720:	f000 fa0c 	bl	800db3c <xQueueGenericCreateStatic>
 800d724:	4603      	mov	r3, r0
 800d726:	e008      	b.n	800d73a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6818      	ldr	r0, [r3, #0]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	4619      	mov	r1, r3
 800d734:	f000 fa84 	bl	800dc40 <xQueueGenericCreate>
 800d738:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	370c      	adds	r7, #12
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd90      	pop	{r4, r7, pc}
	...

0800d744 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d750:	2300      	movs	r3, #0
 800d752:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d101      	bne.n	800d762 <osMessagePut+0x1e>
    ticks = 1;
 800d75e:	2301      	movs	r3, #1
 800d760:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d762:	f7ff fdd8 	bl	800d316 <inHandlerMode>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d018      	beq.n	800d79e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d76c:	f107 0210 	add.w	r2, r7, #16
 800d770:	f107 0108 	add.w	r1, r7, #8
 800d774:	2300      	movs	r3, #0
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f000 fc16 	bl	800dfa8 <xQueueGenericSendFromISR>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d001      	beq.n	800d786 <osMessagePut+0x42>
      return osErrorOS;
 800d782:	23ff      	movs	r3, #255	; 0xff
 800d784:	e018      	b.n	800d7b8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d014      	beq.n	800d7b6 <osMessagePut+0x72>
 800d78c:	4b0c      	ldr	r3, [pc, #48]	; (800d7c0 <osMessagePut+0x7c>)
 800d78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	f3bf 8f6f 	isb	sy
 800d79c:	e00b      	b.n	800d7b6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d79e:	f107 0108 	add.w	r1, r7, #8
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	697a      	ldr	r2, [r7, #20]
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f000 faf8 	bl	800dd9c <xQueueGenericSend>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d001      	beq.n	800d7b6 <osMessagePut+0x72>
      return osErrorOS;
 800d7b2:	23ff      	movs	r3, #255	; 0xff
 800d7b4:	e000      	b.n	800d7b8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3718      	adds	r7, #24
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	e000ed04 	.word	0xe000ed04

0800d7c4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d7c4:	b590      	push	{r4, r7, lr}
 800d7c6:	b08b      	sub	sp, #44	; 0x2c
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10a      	bne.n	800d7f4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d7de:	2380      	movs	r3, #128	; 0x80
 800d7e0:	617b      	str	r3, [r7, #20]
    return event;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	461c      	mov	r4, r3
 800d7e6:	f107 0314 	add.w	r3, r7, #20
 800d7ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d7ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d7f2:	e054      	b.n	800d89e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d802:	d103      	bne.n	800d80c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d804:	f04f 33ff 	mov.w	r3, #4294967295
 800d808:	627b      	str	r3, [r7, #36]	; 0x24
 800d80a:	e009      	b.n	800d820 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d006      	beq.n	800d820 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800d816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d101      	bne.n	800d820 <osMessageGet+0x5c>
      ticks = 1;
 800d81c:	2301      	movs	r3, #1
 800d81e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d820:	f7ff fd79 	bl	800d316 <inHandlerMode>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d01c      	beq.n	800d864 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d82a:	f107 0220 	add.w	r2, r7, #32
 800d82e:	f107 0314 	add.w	r3, r7, #20
 800d832:	3304      	adds	r3, #4
 800d834:	4619      	mov	r1, r3
 800d836:	68b8      	ldr	r0, [r7, #8]
 800d838:	f000 fee6 	bl	800e608 <xQueueReceiveFromISR>
 800d83c:	4603      	mov	r3, r0
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d102      	bne.n	800d848 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d842:	2310      	movs	r3, #16
 800d844:	617b      	str	r3, [r7, #20]
 800d846:	e001      	b.n	800d84c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d848:	2300      	movs	r3, #0
 800d84a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d84c:	6a3b      	ldr	r3, [r7, #32]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d01d      	beq.n	800d88e <osMessageGet+0xca>
 800d852:	4b15      	ldr	r3, [pc, #84]	; (800d8a8 <osMessageGet+0xe4>)
 800d854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d858:	601a      	str	r2, [r3, #0]
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	e014      	b.n	800d88e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d864:	f107 0314 	add.w	r3, r7, #20
 800d868:	3304      	adds	r3, #4
 800d86a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d86c:	4619      	mov	r1, r3
 800d86e:	68b8      	ldr	r0, [r7, #8]
 800d870:	f000 fcd0 	bl	800e214 <xQueueReceive>
 800d874:	4603      	mov	r3, r0
 800d876:	2b01      	cmp	r3, #1
 800d878:	d102      	bne.n	800d880 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d87a:	2310      	movs	r3, #16
 800d87c:	617b      	str	r3, [r7, #20]
 800d87e:	e006      	b.n	800d88e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	2b00      	cmp	r3, #0
 800d884:	d101      	bne.n	800d88a <osMessageGet+0xc6>
 800d886:	2300      	movs	r3, #0
 800d888:	e000      	b.n	800d88c <osMessageGet+0xc8>
 800d88a:	2340      	movs	r3, #64	; 0x40
 800d88c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	461c      	mov	r4, r3
 800d892:	f107 0314 	add.w	r3, r7, #20
 800d896:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d89a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	372c      	adds	r7, #44	; 0x2c
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd90      	pop	{r4, r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	e000ed04 	.word	0xe000ed04

0800d8ac <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800d8b4:	f7ff fd2f 	bl	800d316 <inHandlerMode>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d004      	beq.n	800d8c8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 ff48 	bl	800e754 <uxQueueMessagesWaitingFromISR>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	e003      	b.n	800d8d0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f000 ff23 	bl	800e714 <uxQueueMessagesWaiting>
 800d8ce:	4603      	mov	r3, r0
  }
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800d8e0:	f7ff fd19 	bl	800d316 <inHandlerMode>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d001      	beq.n	800d8ee <osMessageDelete+0x16>
    return osErrorISR;
 800d8ea:	2382      	movs	r3, #130	; 0x82
 800d8ec:	e003      	b.n	800d8f6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 ff50 	bl	800e794 <vQueueDelete>

  return osOK; 
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3708      	adds	r7, #8
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d8fe:	b480      	push	{r7}
 800d900:	b083      	sub	sp, #12
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f103 0208 	add.w	r2, r3, #8
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f04f 32ff 	mov.w	r2, #4294967295
 800d916:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f103 0208 	add.w	r2, r3, #8
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f103 0208 	add.w	r2, r3, #8
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d932:	bf00      	nop
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr

0800d93e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d93e:	b480      	push	{r7}
 800d940:	b083      	sub	sp, #12
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d94c:	bf00      	nop
 800d94e:	370c      	adds	r7, #12
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	689a      	ldr	r2, [r3, #8]
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	683a      	ldr	r2, [r7, #0]
 800d982:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	1c5a      	adds	r2, r3, #1
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	601a      	str	r2, [r3, #0]
}
 800d994:	bf00      	nop
 800d996:	3714      	adds	r7, #20
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b6:	d103      	bne.n	800d9c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	691b      	ldr	r3, [r3, #16]
 800d9bc:	60fb      	str	r3, [r7, #12]
 800d9be:	e00c      	b.n	800d9da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	3308      	adds	r3, #8
 800d9c4:	60fb      	str	r3, [r7, #12]
 800d9c6:	e002      	b.n	800d9ce <vListInsert+0x2e>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	60fb      	str	r3, [r7, #12]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d2f6      	bcs.n	800d9c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	685a      	ldr	r2, [r3, #4]
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	683a      	ldr	r2, [r7, #0]
 800d9f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	1c5a      	adds	r2, r3, #1
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	601a      	str	r2, [r3, #0]
}
 800da06:	bf00      	nop
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800da12:	b480      	push	{r7}
 800da14:	b085      	sub	sp, #20
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	687a      	ldr	r2, [r7, #4]
 800da26:	6892      	ldr	r2, [r2, #8]
 800da28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	6852      	ldr	r2, [r2, #4]
 800da32:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d103      	bne.n	800da46 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	689a      	ldr	r2, [r3, #8]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	1e5a      	subs	r2, r3, #1
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3714      	adds	r7, #20
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr
	...

0800da68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10c      	bne.n	800da96 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800da7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da80:	b672      	cpsid	i
 800da82:	f383 8811 	msr	BASEPRI, r3
 800da86:	f3bf 8f6f 	isb	sy
 800da8a:	f3bf 8f4f 	dsb	sy
 800da8e:	b662      	cpsie	i
 800da90:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800da92:	bf00      	nop
 800da94:	e7fe      	b.n	800da94 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800da96:	f002 f971 	bl	800fd7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daa2:	68f9      	ldr	r1, [r7, #12]
 800daa4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800daa6:	fb01 f303 	mul.w	r3, r1, r3
 800daaa:	441a      	add	r2, r3
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2200      	movs	r2, #0
 800dab4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac6:	3b01      	subs	r3, #1
 800dac8:	68f9      	ldr	r1, [r7, #12]
 800daca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dacc:	fb01 f303 	mul.w	r3, r1, r3
 800dad0:	441a      	add	r2, r3
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	22ff      	movs	r2, #255	; 0xff
 800dada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	22ff      	movs	r2, #255	; 0xff
 800dae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d114      	bne.n	800db16 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	691b      	ldr	r3, [r3, #16]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d01a      	beq.n	800db2a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	3310      	adds	r3, #16
 800daf8:	4618      	mov	r0, r3
 800dafa:	f001 fc2b 	bl	800f354 <xTaskRemoveFromEventList>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d012      	beq.n	800db2a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800db04:	4b0c      	ldr	r3, [pc, #48]	; (800db38 <xQueueGenericReset+0xd0>)
 800db06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db0a:	601a      	str	r2, [r3, #0]
 800db0c:	f3bf 8f4f 	dsb	sy
 800db10:	f3bf 8f6f 	isb	sy
 800db14:	e009      	b.n	800db2a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3310      	adds	r3, #16
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7ff feef 	bl	800d8fe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	3324      	adds	r3, #36	; 0x24
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff feea 	bl	800d8fe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800db2a:	f002 f95b 	bl	800fde4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800db2e:	2301      	movs	r3, #1
}
 800db30:	4618      	mov	r0, r3
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	e000ed04 	.word	0xe000ed04

0800db3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b08e      	sub	sp, #56	; 0x38
 800db40:	af02      	add	r7, sp, #8
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
 800db48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d10c      	bne.n	800db6a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800db50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db54:	b672      	cpsid	i
 800db56:	f383 8811 	msr	BASEPRI, r3
 800db5a:	f3bf 8f6f 	isb	sy
 800db5e:	f3bf 8f4f 	dsb	sy
 800db62:	b662      	cpsie	i
 800db64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db66:	bf00      	nop
 800db68:	e7fe      	b.n	800db68 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d10c      	bne.n	800db8a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800db70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db74:	b672      	cpsid	i
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	b662      	cpsie	i
 800db84:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db86:	bf00      	nop
 800db88:	e7fe      	b.n	800db88 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d002      	beq.n	800db96 <xQueueGenericCreateStatic+0x5a>
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d001      	beq.n	800db9a <xQueueGenericCreateStatic+0x5e>
 800db96:	2301      	movs	r3, #1
 800db98:	e000      	b.n	800db9c <xQueueGenericCreateStatic+0x60>
 800db9a:	2300      	movs	r3, #0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d10c      	bne.n	800dbba <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800dba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba4:	b672      	cpsid	i
 800dba6:	f383 8811 	msr	BASEPRI, r3
 800dbaa:	f3bf 8f6f 	isb	sy
 800dbae:	f3bf 8f4f 	dsb	sy
 800dbb2:	b662      	cpsie	i
 800dbb4:	623b      	str	r3, [r7, #32]
}
 800dbb6:	bf00      	nop
 800dbb8:	e7fe      	b.n	800dbb8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d102      	bne.n	800dbc6 <xQueueGenericCreateStatic+0x8a>
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d101      	bne.n	800dbca <xQueueGenericCreateStatic+0x8e>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e000      	b.n	800dbcc <xQueueGenericCreateStatic+0x90>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d10c      	bne.n	800dbea <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800dbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd4:	b672      	cpsid	i
 800dbd6:	f383 8811 	msr	BASEPRI, r3
 800dbda:	f3bf 8f6f 	isb	sy
 800dbde:	f3bf 8f4f 	dsb	sy
 800dbe2:	b662      	cpsie	i
 800dbe4:	61fb      	str	r3, [r7, #28]
}
 800dbe6:	bf00      	nop
 800dbe8:	e7fe      	b.n	800dbe8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dbea:	2348      	movs	r3, #72	; 0x48
 800dbec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	2b48      	cmp	r3, #72	; 0x48
 800dbf2:	d00c      	beq.n	800dc0e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800dbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf8:	b672      	cpsid	i
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	b662      	cpsie	i
 800dc08:	61bb      	str	r3, [r7, #24]
}
 800dc0a:	bf00      	nop
 800dc0c:	e7fe      	b.n	800dc0c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dc0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00d      	beq.n	800dc36 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dc22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	68b9      	ldr	r1, [r7, #8]
 800dc30:	68f8      	ldr	r0, [r7, #12]
 800dc32:	f000 f847 	bl	800dcc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3730      	adds	r7, #48	; 0x30
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b08a      	sub	sp, #40	; 0x28
 800dc44:	af02      	add	r7, sp, #8
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10c      	bne.n	800dc6e <xQueueGenericCreate+0x2e>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc58:	b672      	cpsid	i
 800dc5a:	f383 8811 	msr	BASEPRI, r3
 800dc5e:	f3bf 8f6f 	isb	sy
 800dc62:	f3bf 8f4f 	dsb	sy
 800dc66:	b662      	cpsie	i
 800dc68:	613b      	str	r3, [r7, #16]
}
 800dc6a:	bf00      	nop
 800dc6c:	e7fe      	b.n	800dc6c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d102      	bne.n	800dc7a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800dc74:	2300      	movs	r3, #0
 800dc76:	61fb      	str	r3, [r7, #28]
 800dc78:	e004      	b.n	800dc84 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	68ba      	ldr	r2, [r7, #8]
 800dc7e:	fb02 f303 	mul.w	r3, r2, r3
 800dc82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	3348      	adds	r3, #72	; 0x48
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f002 f9a3 	bl	800ffd4 <pvPortMalloc>
 800dc8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d011      	beq.n	800dcba <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	3348      	adds	r3, #72	; 0x48
 800dc9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	2200      	movs	r2, #0
 800dca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dca8:	79fa      	ldrb	r2, [r7, #7]
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	9300      	str	r3, [sp, #0]
 800dcae:	4613      	mov	r3, r2
 800dcb0:	697a      	ldr	r2, [r7, #20]
 800dcb2:	68b9      	ldr	r1, [r7, #8]
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f000 f805 	bl	800dcc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dcba:	69bb      	ldr	r3, [r7, #24]
	}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3720      	adds	r7, #32
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	607a      	str	r2, [r7, #4]
 800dcd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d103      	bne.n	800dce0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	69ba      	ldr	r2, [r7, #24]
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	e002      	b.n	800dce6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dcf2:	2101      	movs	r1, #1
 800dcf4:	69b8      	ldr	r0, [r7, #24]
 800dcf6:	f7ff feb7 	bl	800da68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dcfa:	bf00      	nop
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00e      	beq.n	800dd2e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2200      	movs	r2, #0
 800dd14:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dd22:	2300      	movs	r3, #0
 800dd24:	2200      	movs	r2, #0
 800dd26:	2100      	movs	r1, #0
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f000 f837 	bl	800dd9c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dd2e:	bf00      	nop
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b086      	sub	sp, #24
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dd40:	2301      	movs	r3, #1
 800dd42:	617b      	str	r3, [r7, #20]
 800dd44:	2300      	movs	r3, #0
 800dd46:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dd48:	79fb      	ldrb	r3, [r7, #7]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	6939      	ldr	r1, [r7, #16]
 800dd4e:	6978      	ldr	r0, [r7, #20]
 800dd50:	f7ff ff76 	bl	800dc40 <xQueueGenericCreate>
 800dd54:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dd56:	68f8      	ldr	r0, [r7, #12]
 800dd58:	f7ff ffd3 	bl	800dd02 <prvInitialiseMutex>

		return xNewQueue;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
	}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3718      	adds	r7, #24
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}

0800dd66 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b088      	sub	sp, #32
 800dd6a:	af02      	add	r7, sp, #8
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	6039      	str	r1, [r7, #0]
 800dd70:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dd72:	2301      	movs	r3, #1
 800dd74:	617b      	str	r3, [r7, #20]
 800dd76:	2300      	movs	r3, #0
 800dd78:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dd7a:	79fb      	ldrb	r3, [r7, #7]
 800dd7c:	9300      	str	r3, [sp, #0]
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2200      	movs	r2, #0
 800dd82:	6939      	ldr	r1, [r7, #16]
 800dd84:	6978      	ldr	r0, [r7, #20]
 800dd86:	f7ff fed9 	bl	800db3c <xQueueGenericCreateStatic>
 800dd8a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dd8c:	68f8      	ldr	r0, [r7, #12]
 800dd8e:	f7ff ffb8 	bl	800dd02 <prvInitialiseMutex>

		return xNewQueue;
 800dd92:	68fb      	ldr	r3, [r7, #12]
	}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b08e      	sub	sp, #56	; 0x38
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
 800dda8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10c      	bne.n	800ddd2 <xQueueGenericSend+0x36>
	__asm volatile
 800ddb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbc:	b672      	cpsid	i
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	b662      	cpsie	i
 800ddcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ddce:	bf00      	nop
 800ddd0:	e7fe      	b.n	800ddd0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d103      	bne.n	800dde0 <xQueueGenericSend+0x44>
 800ddd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d101      	bne.n	800dde4 <xQueueGenericSend+0x48>
 800dde0:	2301      	movs	r3, #1
 800dde2:	e000      	b.n	800dde6 <xQueueGenericSend+0x4a>
 800dde4:	2300      	movs	r3, #0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d10c      	bne.n	800de04 <xQueueGenericSend+0x68>
	__asm volatile
 800ddea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddee:	b672      	cpsid	i
 800ddf0:	f383 8811 	msr	BASEPRI, r3
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	b662      	cpsie	i
 800ddfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800de00:	bf00      	nop
 800de02:	e7fe      	b.n	800de02 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	2b02      	cmp	r3, #2
 800de08:	d103      	bne.n	800de12 <xQueueGenericSend+0x76>
 800de0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d101      	bne.n	800de16 <xQueueGenericSend+0x7a>
 800de12:	2301      	movs	r3, #1
 800de14:	e000      	b.n	800de18 <xQueueGenericSend+0x7c>
 800de16:	2300      	movs	r3, #0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d10c      	bne.n	800de36 <xQueueGenericSend+0x9a>
	__asm volatile
 800de1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de20:	b672      	cpsid	i
 800de22:	f383 8811 	msr	BASEPRI, r3
 800de26:	f3bf 8f6f 	isb	sy
 800de2a:	f3bf 8f4f 	dsb	sy
 800de2e:	b662      	cpsie	i
 800de30:	623b      	str	r3, [r7, #32]
}
 800de32:	bf00      	nop
 800de34:	e7fe      	b.n	800de34 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de36:	f001 fc55 	bl	800f6e4 <xTaskGetSchedulerState>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d102      	bne.n	800de46 <xQueueGenericSend+0xaa>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d101      	bne.n	800de4a <xQueueGenericSend+0xae>
 800de46:	2301      	movs	r3, #1
 800de48:	e000      	b.n	800de4c <xQueueGenericSend+0xb0>
 800de4a:	2300      	movs	r3, #0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d10c      	bne.n	800de6a <xQueueGenericSend+0xce>
	__asm volatile
 800de50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de54:	b672      	cpsid	i
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	b662      	cpsie	i
 800de64:	61fb      	str	r3, [r7, #28]
}
 800de66:	bf00      	nop
 800de68:	e7fe      	b.n	800de68 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de6a:	f001 ff87 	bl	800fd7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de76:	429a      	cmp	r2, r3
 800de78:	d302      	bcc.n	800de80 <xQueueGenericSend+0xe4>
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	2b02      	cmp	r3, #2
 800de7e:	d129      	bne.n	800ded4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800de80:	683a      	ldr	r2, [r7, #0]
 800de82:	68b9      	ldr	r1, [r7, #8]
 800de84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de86:	f000 fcc2 	bl	800e80e <prvCopyDataToQueue>
 800de8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de90:	2b00      	cmp	r3, #0
 800de92:	d010      	beq.n	800deb6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de96:	3324      	adds	r3, #36	; 0x24
 800de98:	4618      	mov	r0, r3
 800de9a:	f001 fa5b 	bl	800f354 <xTaskRemoveFromEventList>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d013      	beq.n	800decc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dea4:	4b3f      	ldr	r3, [pc, #252]	; (800dfa4 <xQueueGenericSend+0x208>)
 800dea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deaa:	601a      	str	r2, [r3, #0]
 800deac:	f3bf 8f4f 	dsb	sy
 800deb0:	f3bf 8f6f 	isb	sy
 800deb4:	e00a      	b.n	800decc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800deb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d007      	beq.n	800decc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800debc:	4b39      	ldr	r3, [pc, #228]	; (800dfa4 <xQueueGenericSend+0x208>)
 800debe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dec2:	601a      	str	r2, [r3, #0]
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800decc:	f001 ff8a 	bl	800fde4 <vPortExitCritical>
				return pdPASS;
 800ded0:	2301      	movs	r3, #1
 800ded2:	e063      	b.n	800df9c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d103      	bne.n	800dee2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800deda:	f001 ff83 	bl	800fde4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dede:	2300      	movs	r3, #0
 800dee0:	e05c      	b.n	800df9c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d106      	bne.n	800def6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dee8:	f107 0314 	add.w	r3, r7, #20
 800deec:	4618      	mov	r0, r3
 800deee:	f001 fa95 	bl	800f41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800def2:	2301      	movs	r3, #1
 800def4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800def6:	f001 ff75 	bl	800fde4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800defa:	f001 f819 	bl	800ef30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800defe:	f001 ff3d 	bl	800fd7c <vPortEnterCritical>
 800df02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df08:	b25b      	sxtb	r3, r3
 800df0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0e:	d103      	bne.n	800df18 <xQueueGenericSend+0x17c>
 800df10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df12:	2200      	movs	r2, #0
 800df14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df1e:	b25b      	sxtb	r3, r3
 800df20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df24:	d103      	bne.n	800df2e <xQueueGenericSend+0x192>
 800df26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df28:	2200      	movs	r2, #0
 800df2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df2e:	f001 ff59 	bl	800fde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df32:	1d3a      	adds	r2, r7, #4
 800df34:	f107 0314 	add.w	r3, r7, #20
 800df38:	4611      	mov	r1, r2
 800df3a:	4618      	mov	r0, r3
 800df3c:	f001 fa84 	bl	800f448 <xTaskCheckForTimeOut>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d124      	bne.n	800df90 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800df46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df48:	f000 fd59 	bl	800e9fe <prvIsQueueFull>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d018      	beq.n	800df84 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800df52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df54:	3310      	adds	r3, #16
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	4611      	mov	r1, r2
 800df5a:	4618      	mov	r0, r3
 800df5c:	f001 f9d4 	bl	800f308 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800df60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df62:	f000 fce4 	bl	800e92e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800df66:	f000 fff1 	bl	800ef4c <xTaskResumeAll>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f47f af7c 	bne.w	800de6a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800df72:	4b0c      	ldr	r3, [pc, #48]	; (800dfa4 <xQueueGenericSend+0x208>)
 800df74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df78:	601a      	str	r2, [r3, #0]
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	f3bf 8f6f 	isb	sy
 800df82:	e772      	b.n	800de6a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800df84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df86:	f000 fcd2 	bl	800e92e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df8a:	f000 ffdf 	bl	800ef4c <xTaskResumeAll>
 800df8e:	e76c      	b.n	800de6a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800df90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df92:	f000 fccc 	bl	800e92e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df96:	f000 ffd9 	bl	800ef4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800df9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3738      	adds	r7, #56	; 0x38
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	e000ed04 	.word	0xe000ed04

0800dfa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b08e      	sub	sp, #56	; 0x38
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	607a      	str	r2, [r7, #4]
 800dfb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10c      	bne.n	800dfda <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800dfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc4:	b672      	cpsid	i
 800dfc6:	f383 8811 	msr	BASEPRI, r3
 800dfca:	f3bf 8f6f 	isb	sy
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	b662      	cpsie	i
 800dfd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dfd6:	bf00      	nop
 800dfd8:	e7fe      	b.n	800dfd8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d103      	bne.n	800dfe8 <xQueueGenericSendFromISR+0x40>
 800dfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d101      	bne.n	800dfec <xQueueGenericSendFromISR+0x44>
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e000      	b.n	800dfee <xQueueGenericSendFromISR+0x46>
 800dfec:	2300      	movs	r3, #0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d10c      	bne.n	800e00c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800dff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff6:	b672      	cpsid	i
 800dff8:	f383 8811 	msr	BASEPRI, r3
 800dffc:	f3bf 8f6f 	isb	sy
 800e000:	f3bf 8f4f 	dsb	sy
 800e004:	b662      	cpsie	i
 800e006:	623b      	str	r3, [r7, #32]
}
 800e008:	bf00      	nop
 800e00a:	e7fe      	b.n	800e00a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	2b02      	cmp	r3, #2
 800e010:	d103      	bne.n	800e01a <xQueueGenericSendFromISR+0x72>
 800e012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e016:	2b01      	cmp	r3, #1
 800e018:	d101      	bne.n	800e01e <xQueueGenericSendFromISR+0x76>
 800e01a:	2301      	movs	r3, #1
 800e01c:	e000      	b.n	800e020 <xQueueGenericSendFromISR+0x78>
 800e01e:	2300      	movs	r3, #0
 800e020:	2b00      	cmp	r3, #0
 800e022:	d10c      	bne.n	800e03e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e028:	b672      	cpsid	i
 800e02a:	f383 8811 	msr	BASEPRI, r3
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f3bf 8f4f 	dsb	sy
 800e036:	b662      	cpsie	i
 800e038:	61fb      	str	r3, [r7, #28]
}
 800e03a:	bf00      	nop
 800e03c:	e7fe      	b.n	800e03c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e03e:	f001 ff85 	bl	800ff4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e042:	f3ef 8211 	mrs	r2, BASEPRI
 800e046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04a:	b672      	cpsid	i
 800e04c:	f383 8811 	msr	BASEPRI, r3
 800e050:	f3bf 8f6f 	isb	sy
 800e054:	f3bf 8f4f 	dsb	sy
 800e058:	b662      	cpsie	i
 800e05a:	61ba      	str	r2, [r7, #24]
 800e05c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e05e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e060:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d302      	bcc.n	800e074 <xQueueGenericSendFromISR+0xcc>
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	2b02      	cmp	r3, #2
 800e072:	d12c      	bne.n	800e0ce <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e07a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e07e:	683a      	ldr	r2, [r7, #0]
 800e080:	68b9      	ldr	r1, [r7, #8]
 800e082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e084:	f000 fbc3 	bl	800e80e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e088:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e090:	d112      	bne.n	800e0b8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e096:	2b00      	cmp	r3, #0
 800e098:	d016      	beq.n	800e0c8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09c:	3324      	adds	r3, #36	; 0x24
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f001 f958 	bl	800f354 <xTaskRemoveFromEventList>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00e      	beq.n	800e0c8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d00b      	beq.n	800e0c8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	601a      	str	r2, [r3, #0]
 800e0b6:	e007      	b.n	800e0c8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e0b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e0bc:	3301      	adds	r3, #1
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	b25a      	sxtb	r2, r3
 800e0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e0cc:	e001      	b.n	800e0d2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	637b      	str	r3, [r7, #52]	; 0x34
 800e0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e0dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3738      	adds	r7, #56	; 0x38
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b08e      	sub	sp, #56	; 0x38
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d10c      	bne.n	800e116 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800e0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e100:	b672      	cpsid	i
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	b662      	cpsie	i
 800e110:	623b      	str	r3, [r7, #32]
}
 800e112:	bf00      	nop
 800e114:	e7fe      	b.n	800e114 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d00c      	beq.n	800e138 <xQueueGiveFromISR+0x50>
	__asm volatile
 800e11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e122:	b672      	cpsid	i
 800e124:	f383 8811 	msr	BASEPRI, r3
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	f3bf 8f4f 	dsb	sy
 800e130:	b662      	cpsie	i
 800e132:	61fb      	str	r3, [r7, #28]
}
 800e134:	bf00      	nop
 800e136:	e7fe      	b.n	800e136 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d103      	bne.n	800e148 <xQueueGiveFromISR+0x60>
 800e140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <xQueueGiveFromISR+0x64>
 800e148:	2301      	movs	r3, #1
 800e14a:	e000      	b.n	800e14e <xQueueGiveFromISR+0x66>
 800e14c:	2300      	movs	r3, #0
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d10c      	bne.n	800e16c <xQueueGiveFromISR+0x84>
	__asm volatile
 800e152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e156:	b672      	cpsid	i
 800e158:	f383 8811 	msr	BASEPRI, r3
 800e15c:	f3bf 8f6f 	isb	sy
 800e160:	f3bf 8f4f 	dsb	sy
 800e164:	b662      	cpsie	i
 800e166:	61bb      	str	r3, [r7, #24]
}
 800e168:	bf00      	nop
 800e16a:	e7fe      	b.n	800e16a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e16c:	f001 feee 	bl	800ff4c <vPortValidateInterruptPriority>
	__asm volatile
 800e170:	f3ef 8211 	mrs	r2, BASEPRI
 800e174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e178:	b672      	cpsid	i
 800e17a:	f383 8811 	msr	BASEPRI, r3
 800e17e:	f3bf 8f6f 	isb	sy
 800e182:	f3bf 8f4f 	dsb	sy
 800e186:	b662      	cpsie	i
 800e188:	617a      	str	r2, [r7, #20]
 800e18a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e18c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e18e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e194:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e19a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d22b      	bcs.n	800e1f8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e1a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ac:	1c5a      	adds	r2, r3, #1
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e1b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ba:	d112      	bne.n	800e1e2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d016      	beq.n	800e1f2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c6:	3324      	adds	r3, #36	; 0x24
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f001 f8c3 	bl	800f354 <xTaskRemoveFromEventList>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d00e      	beq.n	800e1f2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00b      	beq.n	800e1f2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	2201      	movs	r2, #1
 800e1de:	601a      	str	r2, [r3, #0]
 800e1e0:	e007      	b.n	800e1f2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e1e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	b25a      	sxtb	r2, r3
 800e1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	637b      	str	r3, [r7, #52]	; 0x34
 800e1f6:	e001      	b.n	800e1fc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	637b      	str	r3, [r7, #52]	; 0x34
 800e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fe:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f383 8811 	msr	BASEPRI, r3
}
 800e206:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3738      	adds	r7, #56	; 0x38
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
	...

0800e214 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b08c      	sub	sp, #48	; 0x30
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e220:	2300      	movs	r3, #0
 800e222:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d10c      	bne.n	800e248 <xQueueReceive+0x34>
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e232:	b672      	cpsid	i
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	b662      	cpsie	i
 800e242:	623b      	str	r3, [r7, #32]
}
 800e244:	bf00      	nop
 800e246:	e7fe      	b.n	800e246 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d103      	bne.n	800e256 <xQueueReceive+0x42>
 800e24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e252:	2b00      	cmp	r3, #0
 800e254:	d101      	bne.n	800e25a <xQueueReceive+0x46>
 800e256:	2301      	movs	r3, #1
 800e258:	e000      	b.n	800e25c <xQueueReceive+0x48>
 800e25a:	2300      	movs	r3, #0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d10c      	bne.n	800e27a <xQueueReceive+0x66>
	__asm volatile
 800e260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e264:	b672      	cpsid	i
 800e266:	f383 8811 	msr	BASEPRI, r3
 800e26a:	f3bf 8f6f 	isb	sy
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	b662      	cpsie	i
 800e274:	61fb      	str	r3, [r7, #28]
}
 800e276:	bf00      	nop
 800e278:	e7fe      	b.n	800e278 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e27a:	f001 fa33 	bl	800f6e4 <xTaskGetSchedulerState>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d102      	bne.n	800e28a <xQueueReceive+0x76>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d101      	bne.n	800e28e <xQueueReceive+0x7a>
 800e28a:	2301      	movs	r3, #1
 800e28c:	e000      	b.n	800e290 <xQueueReceive+0x7c>
 800e28e:	2300      	movs	r3, #0
 800e290:	2b00      	cmp	r3, #0
 800e292:	d10c      	bne.n	800e2ae <xQueueReceive+0x9a>
	__asm volatile
 800e294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e298:	b672      	cpsid	i
 800e29a:	f383 8811 	msr	BASEPRI, r3
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	b662      	cpsie	i
 800e2a8:	61bb      	str	r3, [r7, #24]
}
 800e2aa:	bf00      	nop
 800e2ac:	e7fe      	b.n	800e2ac <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2ae:	f001 fd65 	bl	800fd7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d01f      	beq.n	800e2fe <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e2be:	68b9      	ldr	r1, [r7, #8]
 800e2c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2c2:	f000 fb0e 	bl	800e8e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c8:	1e5a      	subs	r2, r3, #1
 800e2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d0:	691b      	ldr	r3, [r3, #16]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00f      	beq.n	800e2f6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d8:	3310      	adds	r3, #16
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f001 f83a 	bl	800f354 <xTaskRemoveFromEventList>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d007      	beq.n	800e2f6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e2e6:	4b3d      	ldr	r3, [pc, #244]	; (800e3dc <xQueueReceive+0x1c8>)
 800e2e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2ec:	601a      	str	r2, [r3, #0]
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e2f6:	f001 fd75 	bl	800fde4 <vPortExitCritical>
				return pdPASS;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e069      	b.n	800e3d2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d103      	bne.n	800e30c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e304:	f001 fd6e 	bl	800fde4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e308:	2300      	movs	r3, #0
 800e30a:	e062      	b.n	800e3d2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d106      	bne.n	800e320 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e312:	f107 0310 	add.w	r3, r7, #16
 800e316:	4618      	mov	r0, r3
 800e318:	f001 f880 	bl	800f41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e31c:	2301      	movs	r3, #1
 800e31e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e320:	f001 fd60 	bl	800fde4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e324:	f000 fe04 	bl	800ef30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e328:	f001 fd28 	bl	800fd7c <vPortEnterCritical>
 800e32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e332:	b25b      	sxtb	r3, r3
 800e334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e338:	d103      	bne.n	800e342 <xQueueReceive+0x12e>
 800e33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e348:	b25b      	sxtb	r3, r3
 800e34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34e:	d103      	bne.n	800e358 <xQueueReceive+0x144>
 800e350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e352:	2200      	movs	r2, #0
 800e354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e358:	f001 fd44 	bl	800fde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e35c:	1d3a      	adds	r2, r7, #4
 800e35e:	f107 0310 	add.w	r3, r7, #16
 800e362:	4611      	mov	r1, r2
 800e364:	4618      	mov	r0, r3
 800e366:	f001 f86f 	bl	800f448 <xTaskCheckForTimeOut>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d123      	bne.n	800e3b8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e372:	f000 fb2e 	bl	800e9d2 <prvIsQueueEmpty>
 800e376:	4603      	mov	r3, r0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d017      	beq.n	800e3ac <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37e:	3324      	adds	r3, #36	; 0x24
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	4611      	mov	r1, r2
 800e384:	4618      	mov	r0, r3
 800e386:	f000 ffbf 	bl	800f308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e38a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e38c:	f000 facf 	bl	800e92e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e390:	f000 fddc 	bl	800ef4c <xTaskResumeAll>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d189      	bne.n	800e2ae <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800e39a:	4b10      	ldr	r3, [pc, #64]	; (800e3dc <xQueueReceive+0x1c8>)
 800e39c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3a0:	601a      	str	r2, [r3, #0]
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	e780      	b.n	800e2ae <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3ae:	f000 fabe 	bl	800e92e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3b2:	f000 fdcb 	bl	800ef4c <xTaskResumeAll>
 800e3b6:	e77a      	b.n	800e2ae <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3ba:	f000 fab8 	bl	800e92e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e3be:	f000 fdc5 	bl	800ef4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e3c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3c4:	f000 fb05 	bl	800e9d2 <prvIsQueueEmpty>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f43f af6f 	beq.w	800e2ae <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e3d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3730      	adds	r7, #48	; 0x30
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	e000ed04 	.word	0xe000ed04

0800e3e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b08e      	sub	sp, #56	; 0x38
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d10c      	bne.n	800e416 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800e3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e400:	b672      	cpsid	i
 800e402:	f383 8811 	msr	BASEPRI, r3
 800e406:	f3bf 8f6f 	isb	sy
 800e40a:	f3bf 8f4f 	dsb	sy
 800e40e:	b662      	cpsie	i
 800e410:	623b      	str	r3, [r7, #32]
}
 800e412:	bf00      	nop
 800e414:	e7fe      	b.n	800e414 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d00c      	beq.n	800e438 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e422:	b672      	cpsid	i
 800e424:	f383 8811 	msr	BASEPRI, r3
 800e428:	f3bf 8f6f 	isb	sy
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	b662      	cpsie	i
 800e432:	61fb      	str	r3, [r7, #28]
}
 800e434:	bf00      	nop
 800e436:	e7fe      	b.n	800e436 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e438:	f001 f954 	bl	800f6e4 <xTaskGetSchedulerState>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d102      	bne.n	800e448 <xQueueSemaphoreTake+0x68>
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d101      	bne.n	800e44c <xQueueSemaphoreTake+0x6c>
 800e448:	2301      	movs	r3, #1
 800e44a:	e000      	b.n	800e44e <xQueueSemaphoreTake+0x6e>
 800e44c:	2300      	movs	r3, #0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10c      	bne.n	800e46c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800e452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e456:	b672      	cpsid	i
 800e458:	f383 8811 	msr	BASEPRI, r3
 800e45c:	f3bf 8f6f 	isb	sy
 800e460:	f3bf 8f4f 	dsb	sy
 800e464:	b662      	cpsie	i
 800e466:	61bb      	str	r3, [r7, #24]
}
 800e468:	bf00      	nop
 800e46a:	e7fe      	b.n	800e46a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e46c:	f001 fc86 	bl	800fd7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e474:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d024      	beq.n	800e4c6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47e:	1e5a      	subs	r2, r3, #1
 800e480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e482:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d104      	bne.n	800e496 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e48c:	f001 faf0 	bl	800fa70 <pvTaskIncrementMutexHeldCount>
 800e490:	4602      	mov	r2, r0
 800e492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e494:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e498:	691b      	ldr	r3, [r3, #16]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00f      	beq.n	800e4be <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a0:	3310      	adds	r3, #16
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f000 ff56 	bl	800f354 <xTaskRemoveFromEventList>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d007      	beq.n	800e4be <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e4ae:	4b55      	ldr	r3, [pc, #340]	; (800e604 <xQueueSemaphoreTake+0x224>)
 800e4b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4b4:	601a      	str	r2, [r3, #0]
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e4be:	f001 fc91 	bl	800fde4 <vPortExitCritical>
				return pdPASS;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e099      	b.n	800e5fa <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d113      	bne.n	800e4f4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d00c      	beq.n	800e4ec <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800e4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d6:	b672      	cpsid	i
 800e4d8:	f383 8811 	msr	BASEPRI, r3
 800e4dc:	f3bf 8f6f 	isb	sy
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	b662      	cpsie	i
 800e4e6:	617b      	str	r3, [r7, #20]
}
 800e4e8:	bf00      	nop
 800e4ea:	e7fe      	b.n	800e4ea <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e4ec:	f001 fc7a 	bl	800fde4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	e082      	b.n	800e5fa <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d106      	bne.n	800e508 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4fa:	f107 030c 	add.w	r3, r7, #12
 800e4fe:	4618      	mov	r0, r3
 800e500:	f000 ff8c 	bl	800f41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e504:	2301      	movs	r3, #1
 800e506:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e508:	f001 fc6c 	bl	800fde4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e50c:	f000 fd10 	bl	800ef30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e510:	f001 fc34 	bl	800fd7c <vPortEnterCritical>
 800e514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e516:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e51a:	b25b      	sxtb	r3, r3
 800e51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e520:	d103      	bne.n	800e52a <xQueueSemaphoreTake+0x14a>
 800e522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e524:	2200      	movs	r2, #0
 800e526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e530:	b25b      	sxtb	r3, r3
 800e532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e536:	d103      	bne.n	800e540 <xQueueSemaphoreTake+0x160>
 800e538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53a:	2200      	movs	r2, #0
 800e53c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e540:	f001 fc50 	bl	800fde4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e544:	463a      	mov	r2, r7
 800e546:	f107 030c 	add.w	r3, r7, #12
 800e54a:	4611      	mov	r1, r2
 800e54c:	4618      	mov	r0, r3
 800e54e:	f000 ff7b 	bl	800f448 <xTaskCheckForTimeOut>
 800e552:	4603      	mov	r3, r0
 800e554:	2b00      	cmp	r3, #0
 800e556:	d132      	bne.n	800e5be <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e55a:	f000 fa3a 	bl	800e9d2 <prvIsQueueEmpty>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d026      	beq.n	800e5b2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d109      	bne.n	800e580 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800e56c:	f001 fc06 	bl	800fd7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	4618      	mov	r0, r3
 800e576:	f001 f8d3 	bl	800f720 <xTaskPriorityInherit>
 800e57a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e57c:	f001 fc32 	bl	800fde4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e582:	3324      	adds	r3, #36	; 0x24
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	4611      	mov	r1, r2
 800e588:	4618      	mov	r0, r3
 800e58a:	f000 febd 	bl	800f308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e58e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e590:	f000 f9cd 	bl	800e92e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e594:	f000 fcda 	bl	800ef4c <xTaskResumeAll>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f47f af66 	bne.w	800e46c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800e5a0:	4b18      	ldr	r3, [pc, #96]	; (800e604 <xQueueSemaphoreTake+0x224>)
 800e5a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5a6:	601a      	str	r2, [r3, #0]
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	e75c      	b.n	800e46c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e5b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5b4:	f000 f9bb 	bl	800e92e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5b8:	f000 fcc8 	bl	800ef4c <xTaskResumeAll>
 800e5bc:	e756      	b.n	800e46c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e5be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5c0:	f000 f9b5 	bl	800e92e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5c4:	f000 fcc2 	bl	800ef4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5ca:	f000 fa02 	bl	800e9d2 <prvIsQueueEmpty>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f43f af4b 	beq.w	800e46c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00d      	beq.n	800e5f8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800e5dc:	f001 fbce 	bl	800fd7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e5e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5e2:	f000 f8fc 	bl	800e7de <prvGetDisinheritPriorityAfterTimeout>
 800e5e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f001 f9a0 	bl	800f934 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e5f4:	f001 fbf6 	bl	800fde4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e5f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3738      	adds	r7, #56	; 0x38
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	e000ed04 	.word	0xe000ed04

0800e608 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b08e      	sub	sp, #56	; 0x38
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d10c      	bne.n	800e638 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800e61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e622:	b672      	cpsid	i
 800e624:	f383 8811 	msr	BASEPRI, r3
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	b662      	cpsie	i
 800e632:	623b      	str	r3, [r7, #32]
}
 800e634:	bf00      	nop
 800e636:	e7fe      	b.n	800e636 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d103      	bne.n	800e646 <xQueueReceiveFromISR+0x3e>
 800e63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <xQueueReceiveFromISR+0x42>
 800e646:	2301      	movs	r3, #1
 800e648:	e000      	b.n	800e64c <xQueueReceiveFromISR+0x44>
 800e64a:	2300      	movs	r3, #0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d10c      	bne.n	800e66a <xQueueReceiveFromISR+0x62>
	__asm volatile
 800e650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e654:	b672      	cpsid	i
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	b662      	cpsie	i
 800e664:	61fb      	str	r3, [r7, #28]
}
 800e666:	bf00      	nop
 800e668:	e7fe      	b.n	800e668 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e66a:	f001 fc6f 	bl	800ff4c <vPortValidateInterruptPriority>
	__asm volatile
 800e66e:	f3ef 8211 	mrs	r2, BASEPRI
 800e672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e676:	b672      	cpsid	i
 800e678:	f383 8811 	msr	BASEPRI, r3
 800e67c:	f3bf 8f6f 	isb	sy
 800e680:	f3bf 8f4f 	dsb	sy
 800e684:	b662      	cpsie	i
 800e686:	61ba      	str	r2, [r7, #24]
 800e688:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e68a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e68c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e692:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e696:	2b00      	cmp	r3, #0
 800e698:	d02f      	beq.n	800e6fa <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e6a4:	68b9      	ldr	r1, [r7, #8]
 800e6a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6a8:	f000 f91b 	bl	800e8e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ae:	1e5a      	subs	r2, r3, #1
 800e6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e6b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6bc:	d112      	bne.n	800e6e4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c0:	691b      	ldr	r3, [r3, #16]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d016      	beq.n	800e6f4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	3310      	adds	r3, #16
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f000 fe42 	bl	800f354 <xTaskRemoveFromEventList>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d00e      	beq.n	800e6f4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00b      	beq.n	800e6f4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	601a      	str	r2, [r3, #0]
 800e6e2:	e007      	b.n	800e6f4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	b25a      	sxtb	r2, r3
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	637b      	str	r3, [r7, #52]	; 0x34
 800e6f8:	e001      	b.n	800e6fe <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	637b      	str	r3, [r7, #52]	; 0x34
 800e6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e700:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	f383 8811 	msr	BASEPRI, r3
}
 800e708:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3738      	adds	r7, #56	; 0x38
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d10c      	bne.n	800e73c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800e722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e726:	b672      	cpsid	i
 800e728:	f383 8811 	msr	BASEPRI, r3
 800e72c:	f3bf 8f6f 	isb	sy
 800e730:	f3bf 8f4f 	dsb	sy
 800e734:	b662      	cpsie	i
 800e736:	60bb      	str	r3, [r7, #8]
}
 800e738:	bf00      	nop
 800e73a:	e7fe      	b.n	800e73a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800e73c:	f001 fb1e 	bl	800fd7c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e744:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e746:	f001 fb4d 	bl	800fde4 <vPortExitCritical>

	return uxReturn;
 800e74a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e74c:	4618      	mov	r0, r3
 800e74e:	3710      	adds	r7, #16
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e754:	b480      	push	{r7}
 800e756:	b087      	sub	sp, #28
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d10c      	bne.n	800e780 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800e766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76a:	b672      	cpsid	i
 800e76c:	f383 8811 	msr	BASEPRI, r3
 800e770:	f3bf 8f6f 	isb	sy
 800e774:	f3bf 8f4f 	dsb	sy
 800e778:	b662      	cpsie	i
 800e77a:	60fb      	str	r3, [r7, #12]
}
 800e77c:	bf00      	nop
 800e77e:	e7fe      	b.n	800e77e <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e784:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800e786:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e788:	4618      	mov	r0, r3
 800e78a:	371c      	adds	r7, #28
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b084      	sub	sp, #16
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d10c      	bne.n	800e7c0 <vQueueDelete+0x2c>
	__asm volatile
 800e7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7aa:	b672      	cpsid	i
 800e7ac:	f383 8811 	msr	BASEPRI, r3
 800e7b0:	f3bf 8f6f 	isb	sy
 800e7b4:	f3bf 8f4f 	dsb	sy
 800e7b8:	b662      	cpsie	i
 800e7ba:	60bb      	str	r3, [r7, #8]
}
 800e7bc:	bf00      	nop
 800e7be:	e7fe      	b.n	800e7be <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f000 f935 	bl	800ea30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d102      	bne.n	800e7d6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f001 fcc9 	bl	8010168 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e7d6:	bf00      	nop
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e7de:	b480      	push	{r7}
 800e7e0:	b085      	sub	sp, #20
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d006      	beq.n	800e7fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f1c3 0307 	rsb	r3, r3, #7
 800e7f8:	60fb      	str	r3, [r7, #12]
 800e7fa:	e001      	b.n	800e800 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e800:	68fb      	ldr	r3, [r7, #12]
	}
 800e802:	4618      	mov	r0, r3
 800e804:	3714      	adds	r7, #20
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr

0800e80e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b086      	sub	sp, #24
 800e812:	af00      	add	r7, sp, #0
 800e814:	60f8      	str	r0, [r7, #12]
 800e816:	60b9      	str	r1, [r7, #8]
 800e818:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e81a:	2300      	movs	r3, #0
 800e81c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e822:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d10d      	bne.n	800e848 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d14d      	bne.n	800e8d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	4618      	mov	r0, r3
 800e83a:	f000 fff1 	bl	800f820 <xTaskPriorityDisinherit>
 800e83e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2200      	movs	r2, #0
 800e844:	609a      	str	r2, [r3, #8]
 800e846:	e043      	b.n	800e8d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d119      	bne.n	800e882 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	6858      	ldr	r0, [r3, #4]
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e856:	461a      	mov	r2, r3
 800e858:	68b9      	ldr	r1, [r7, #8]
 800e85a:	f00f fc7b 	bl	801e154 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	685a      	ldr	r2, [r3, #4]
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e866:	441a      	add	r2, r3
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	685a      	ldr	r2, [r3, #4]
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	429a      	cmp	r2, r3
 800e876:	d32b      	bcc.n	800e8d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	605a      	str	r2, [r3, #4]
 800e880:	e026      	b.n	800e8d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	68d8      	ldr	r0, [r3, #12]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e88a:	461a      	mov	r2, r3
 800e88c:	68b9      	ldr	r1, [r7, #8]
 800e88e:	f00f fc61 	bl	801e154 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	68da      	ldr	r2, [r3, #12]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89a:	425b      	negs	r3, r3
 800e89c:	441a      	add	r2, r3
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	68da      	ldr	r2, [r3, #12]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d207      	bcs.n	800e8be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	689a      	ldr	r2, [r3, #8]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b6:	425b      	negs	r3, r3
 800e8b8:	441a      	add	r2, r3
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	d105      	bne.n	800e8d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d002      	beq.n	800e8d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	1c5a      	adds	r2, r3, #1
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e8d8:	697b      	ldr	r3, [r7, #20]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3718      	adds	r7, #24
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b082      	sub	sp, #8
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d018      	beq.n	800e926 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	68da      	ldr	r2, [r3, #12]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8fc:	441a      	add	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	68da      	ldr	r2, [r3, #12]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d303      	bcc.n	800e916 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	68d9      	ldr	r1, [r3, #12]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e91e:	461a      	mov	r2, r3
 800e920:	6838      	ldr	r0, [r7, #0]
 800e922:	f00f fc17 	bl	801e154 <memcpy>
	}
}
 800e926:	bf00      	nop
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}

0800e92e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e92e:	b580      	push	{r7, lr}
 800e930:	b084      	sub	sp, #16
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e936:	f001 fa21 	bl	800fd7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e940:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e942:	e011      	b.n	800e968 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d012      	beq.n	800e972 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	3324      	adds	r3, #36	; 0x24
 800e950:	4618      	mov	r0, r3
 800e952:	f000 fcff 	bl	800f354 <xTaskRemoveFromEventList>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d001      	beq.n	800e960 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e95c:	f000 fdda 	bl	800f514 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e960:	7bfb      	ldrb	r3, [r7, #15]
 800e962:	3b01      	subs	r3, #1
 800e964:	b2db      	uxtb	r3, r3
 800e966:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	dce9      	bgt.n	800e944 <prvUnlockQueue+0x16>
 800e970:	e000      	b.n	800e974 <prvUnlockQueue+0x46>
					break;
 800e972:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	22ff      	movs	r2, #255	; 0xff
 800e978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e97c:	f001 fa32 	bl	800fde4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e980:	f001 f9fc 	bl	800fd7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e98a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e98c:	e011      	b.n	800e9b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	691b      	ldr	r3, [r3, #16]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d012      	beq.n	800e9bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	3310      	adds	r3, #16
 800e99a:	4618      	mov	r0, r3
 800e99c:	f000 fcda 	bl	800f354 <xTaskRemoveFromEventList>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d001      	beq.n	800e9aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e9a6:	f000 fdb5 	bl	800f514 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e9aa:	7bbb      	ldrb	r3, [r7, #14]
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	b2db      	uxtb	r3, r3
 800e9b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e9b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	dce9      	bgt.n	800e98e <prvUnlockQueue+0x60>
 800e9ba:	e000      	b.n	800e9be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e9bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	22ff      	movs	r2, #255	; 0xff
 800e9c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e9c6:	f001 fa0d 	bl	800fde4 <vPortExitCritical>
}
 800e9ca:	bf00      	nop
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}

0800e9d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e9d2:	b580      	push	{r7, lr}
 800e9d4:	b084      	sub	sp, #16
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e9da:	f001 f9cf 	bl	800fd7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d102      	bne.n	800e9ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	60fb      	str	r3, [r7, #12]
 800e9ea:	e001      	b.n	800e9f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e9f0:	f001 f9f8 	bl	800fde4 <vPortExitCritical>

	return xReturn;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3710      	adds	r7, #16
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}

0800e9fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e9fe:	b580      	push	{r7, lr}
 800ea00:	b084      	sub	sp, #16
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea06:	f001 f9b9 	bl	800fd7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d102      	bne.n	800ea1c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ea16:	2301      	movs	r3, #1
 800ea18:	60fb      	str	r3, [r7, #12]
 800ea1a:	e001      	b.n	800ea20 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea20:	f001 f9e0 	bl	800fde4 <vPortExitCritical>

	return xReturn;
 800ea24:	68fb      	ldr	r3, [r7, #12]
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3710      	adds	r7, #16
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
	...

0800ea30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ea30:	b480      	push	{r7}
 800ea32:	b085      	sub	sp, #20
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea38:	2300      	movs	r3, #0
 800ea3a:	60fb      	str	r3, [r7, #12]
 800ea3c:	e016      	b.n	800ea6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ea3e:	4a10      	ldr	r2, [pc, #64]	; (800ea80 <vQueueUnregisterQueue+0x50>)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	00db      	lsls	r3, r3, #3
 800ea44:	4413      	add	r3, r2
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d10b      	bne.n	800ea66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ea4e:	4a0c      	ldr	r2, [pc, #48]	; (800ea80 <vQueueUnregisterQueue+0x50>)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2100      	movs	r1, #0
 800ea54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ea58:	4a09      	ldr	r2, [pc, #36]	; (800ea80 <vQueueUnregisterQueue+0x50>)
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	00db      	lsls	r3, r3, #3
 800ea5e:	4413      	add	r3, r2
 800ea60:	2200      	movs	r2, #0
 800ea62:	605a      	str	r2, [r3, #4]
				break;
 800ea64:	e006      	b.n	800ea74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	60fb      	str	r3, [r7, #12]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2b07      	cmp	r3, #7
 800ea70:	d9e5      	bls.n	800ea3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ea72:	bf00      	nop
 800ea74:	bf00      	nop
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr
 800ea80:	200062d0 	.word	0x200062d0

0800ea84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b08e      	sub	sp, #56	; 0x38
 800ea88:	af04      	add	r7, sp, #16
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	607a      	str	r2, [r7, #4]
 800ea90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ea92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d10c      	bne.n	800eab2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ea98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9c:	b672      	cpsid	i
 800ea9e:	f383 8811 	msr	BASEPRI, r3
 800eaa2:	f3bf 8f6f 	isb	sy
 800eaa6:	f3bf 8f4f 	dsb	sy
 800eaaa:	b662      	cpsie	i
 800eaac:	623b      	str	r3, [r7, #32]
}
 800eaae:	bf00      	nop
 800eab0:	e7fe      	b.n	800eab0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800eab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d10c      	bne.n	800ead2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800eab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eabc:	b672      	cpsid	i
 800eabe:	f383 8811 	msr	BASEPRI, r3
 800eac2:	f3bf 8f6f 	isb	sy
 800eac6:	f3bf 8f4f 	dsb	sy
 800eaca:	b662      	cpsie	i
 800eacc:	61fb      	str	r3, [r7, #28]
}
 800eace:	bf00      	nop
 800ead0:	e7fe      	b.n	800ead0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ead2:	23b4      	movs	r3, #180	; 0xb4
 800ead4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	2bb4      	cmp	r3, #180	; 0xb4
 800eada:	d00c      	beq.n	800eaf6 <xTaskCreateStatic+0x72>
	__asm volatile
 800eadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae0:	b672      	cpsid	i
 800eae2:	f383 8811 	msr	BASEPRI, r3
 800eae6:	f3bf 8f6f 	isb	sy
 800eaea:	f3bf 8f4f 	dsb	sy
 800eaee:	b662      	cpsie	i
 800eaf0:	61bb      	str	r3, [r7, #24]
}
 800eaf2:	bf00      	nop
 800eaf4:	e7fe      	b.n	800eaf4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800eaf6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800eaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d01e      	beq.n	800eb3c <xTaskCreateStatic+0xb8>
 800eafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d01b      	beq.n	800eb3c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb10:	2202      	movs	r2, #2
 800eb12:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eb16:	2300      	movs	r3, #0
 800eb18:	9303      	str	r3, [sp, #12]
 800eb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1c:	9302      	str	r3, [sp, #8]
 800eb1e:	f107 0314 	add.w	r3, r7, #20
 800eb22:	9301      	str	r3, [sp, #4]
 800eb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb26:	9300      	str	r3, [sp, #0]
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	68b9      	ldr	r1, [r7, #8]
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	f000 f850 	bl	800ebd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb36:	f000 f8ed 	bl	800ed14 <prvAddNewTaskToReadyList>
 800eb3a:	e001      	b.n	800eb40 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eb40:	697b      	ldr	r3, [r7, #20]
	}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3728      	adds	r7, #40	; 0x28
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b08c      	sub	sp, #48	; 0x30
 800eb4e:	af04      	add	r7, sp, #16
 800eb50:	60f8      	str	r0, [r7, #12]
 800eb52:	60b9      	str	r1, [r7, #8]
 800eb54:	603b      	str	r3, [r7, #0]
 800eb56:	4613      	mov	r3, r2
 800eb58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eb5a:	88fb      	ldrh	r3, [r7, #6]
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f001 fa38 	bl	800ffd4 <pvPortMalloc>
 800eb64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00e      	beq.n	800eb8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eb6c:	20b4      	movs	r0, #180	; 0xb4
 800eb6e:	f001 fa31 	bl	800ffd4 <pvPortMalloc>
 800eb72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d003      	beq.n	800eb82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	697a      	ldr	r2, [r7, #20]
 800eb7e:	631a      	str	r2, [r3, #48]	; 0x30
 800eb80:	e005      	b.n	800eb8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eb82:	6978      	ldr	r0, [r7, #20]
 800eb84:	f001 faf0 	bl	8010168 <vPortFree>
 800eb88:	e001      	b.n	800eb8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d017      	beq.n	800ebc4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eb9c:	88fa      	ldrh	r2, [r7, #6]
 800eb9e:	2300      	movs	r3, #0
 800eba0:	9303      	str	r3, [sp, #12]
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	9302      	str	r3, [sp, #8]
 800eba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba8:	9301      	str	r3, [sp, #4]
 800ebaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	68b9      	ldr	r1, [r7, #8]
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f000 f80e 	bl	800ebd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ebb8:	69f8      	ldr	r0, [r7, #28]
 800ebba:	f000 f8ab 	bl	800ed14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	61bb      	str	r3, [r7, #24]
 800ebc2:	e002      	b.n	800ebca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ebc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ebca:	69bb      	ldr	r3, [r7, #24]
	}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3720      	adds	r7, #32
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b088      	sub	sp, #32
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	60b9      	str	r1, [r7, #8]
 800ebde:	607a      	str	r2, [r7, #4]
 800ebe0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ebe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebe6:	6879      	ldr	r1, [r7, #4]
 800ebe8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ebec:	440b      	add	r3, r1
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	4413      	add	r3, r2
 800ebf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	f023 0307 	bic.w	r3, r3, #7
 800ebfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	f003 0307 	and.w	r3, r3, #7
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00c      	beq.n	800ec20 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800ec06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0a:	b672      	cpsid	i
 800ec0c:	f383 8811 	msr	BASEPRI, r3
 800ec10:	f3bf 8f6f 	isb	sy
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	b662      	cpsie	i
 800ec1a:	617b      	str	r3, [r7, #20]
}
 800ec1c:	bf00      	nop
 800ec1e:	e7fe      	b.n	800ec1e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d01f      	beq.n	800ec66 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec26:	2300      	movs	r3, #0
 800ec28:	61fb      	str	r3, [r7, #28]
 800ec2a:	e012      	b.n	800ec52 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ec2c:	68ba      	ldr	r2, [r7, #8]
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	4413      	add	r3, r2
 800ec32:	7819      	ldrb	r1, [r3, #0]
 800ec34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec36:	69fb      	ldr	r3, [r7, #28]
 800ec38:	4413      	add	r3, r2
 800ec3a:	3334      	adds	r3, #52	; 0x34
 800ec3c:	460a      	mov	r2, r1
 800ec3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ec40:	68ba      	ldr	r2, [r7, #8]
 800ec42:	69fb      	ldr	r3, [r7, #28]
 800ec44:	4413      	add	r3, r2
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d006      	beq.n	800ec5a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	61fb      	str	r3, [r7, #28]
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	2b0f      	cmp	r3, #15
 800ec56:	d9e9      	bls.n	800ec2c <prvInitialiseNewTask+0x58>
 800ec58:	e000      	b.n	800ec5c <prvInitialiseNewTask+0x88>
			{
				break;
 800ec5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	2200      	movs	r2, #0
 800ec60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ec64:	e003      	b.n	800ec6e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ec66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ec6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec70:	2b06      	cmp	r3, #6
 800ec72:	d901      	bls.n	800ec78 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ec74:	2306      	movs	r3, #6
 800ec76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ec78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ec7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec82:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ec84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec86:	2200      	movs	r2, #0
 800ec88:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	3304      	adds	r3, #4
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fe fe55 	bl	800d93e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec96:	3318      	adds	r3, #24
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7fe fe50 	bl	800d93e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eca2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca6:	f1c3 0207 	rsb	r2, r3, #7
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ecae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ecb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ecc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc6:	334c      	adds	r3, #76	; 0x4c
 800ecc8:	2260      	movs	r2, #96	; 0x60
 800ecca:	2100      	movs	r1, #0
 800eccc:	4618      	mov	r0, r3
 800ecce:	f00f fa69 	bl	801e1a4 <memset>
 800ecd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd4:	4a0c      	ldr	r2, [pc, #48]	; (800ed08 <prvInitialiseNewTask+0x134>)
 800ecd6:	651a      	str	r2, [r3, #80]	; 0x50
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecda:	4a0c      	ldr	r2, [pc, #48]	; (800ed0c <prvInitialiseNewTask+0x138>)
 800ecdc:	655a      	str	r2, [r3, #84]	; 0x54
 800ecde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece0:	4a0b      	ldr	r2, [pc, #44]	; (800ed10 <prvInitialiseNewTask+0x13c>)
 800ece2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ece4:	683a      	ldr	r2, [r7, #0]
 800ece6:	68f9      	ldr	r1, [r7, #12]
 800ece8:	69b8      	ldr	r0, [r7, #24]
 800ecea:	f000 ff3b 	bl	800fb64 <pxPortInitialiseStack>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ecf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d002      	beq.n	800ed00 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ecfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecfe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed00:	bf00      	nop
 800ed02:	3720      	adds	r7, #32
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	08023690 	.word	0x08023690
 800ed0c:	080236b0 	.word	0x080236b0
 800ed10:	08023670 	.word	0x08023670

0800ed14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ed1c:	f001 f82e 	bl	800fd7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ed20:	4b2a      	ldr	r3, [pc, #168]	; (800edcc <prvAddNewTaskToReadyList+0xb8>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	3301      	adds	r3, #1
 800ed26:	4a29      	ldr	r2, [pc, #164]	; (800edcc <prvAddNewTaskToReadyList+0xb8>)
 800ed28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ed2a:	4b29      	ldr	r3, [pc, #164]	; (800edd0 <prvAddNewTaskToReadyList+0xbc>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d109      	bne.n	800ed46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ed32:	4a27      	ldr	r2, [pc, #156]	; (800edd0 <prvAddNewTaskToReadyList+0xbc>)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ed38:	4b24      	ldr	r3, [pc, #144]	; (800edcc <prvAddNewTaskToReadyList+0xb8>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d110      	bne.n	800ed62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ed40:	f000 fc0c 	bl	800f55c <prvInitialiseTaskLists>
 800ed44:	e00d      	b.n	800ed62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ed46:	4b23      	ldr	r3, [pc, #140]	; (800edd4 <prvAddNewTaskToReadyList+0xc0>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d109      	bne.n	800ed62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ed4e:	4b20      	ldr	r3, [pc, #128]	; (800edd0 <prvAddNewTaskToReadyList+0xbc>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d802      	bhi.n	800ed62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ed5c:	4a1c      	ldr	r2, [pc, #112]	; (800edd0 <prvAddNewTaskToReadyList+0xbc>)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ed62:	4b1d      	ldr	r3, [pc, #116]	; (800edd8 <prvAddNewTaskToReadyList+0xc4>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	3301      	adds	r3, #1
 800ed68:	4a1b      	ldr	r2, [pc, #108]	; (800edd8 <prvAddNewTaskToReadyList+0xc4>)
 800ed6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed70:	2201      	movs	r2, #1
 800ed72:	409a      	lsls	r2, r3
 800ed74:	4b19      	ldr	r3, [pc, #100]	; (800eddc <prvAddNewTaskToReadyList+0xc8>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	4a18      	ldr	r2, [pc, #96]	; (800eddc <prvAddNewTaskToReadyList+0xc8>)
 800ed7c:	6013      	str	r3, [r2, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed82:	4613      	mov	r3, r2
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	4413      	add	r3, r2
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4a15      	ldr	r2, [pc, #84]	; (800ede0 <prvAddNewTaskToReadyList+0xcc>)
 800ed8c:	441a      	add	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	3304      	adds	r3, #4
 800ed92:	4619      	mov	r1, r3
 800ed94:	4610      	mov	r0, r2
 800ed96:	f7fe fddf 	bl	800d958 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ed9a:	f001 f823 	bl	800fde4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ed9e:	4b0d      	ldr	r3, [pc, #52]	; (800edd4 <prvAddNewTaskToReadyList+0xc0>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d00e      	beq.n	800edc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eda6:	4b0a      	ldr	r3, [pc, #40]	; (800edd0 <prvAddNewTaskToReadyList+0xbc>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d207      	bcs.n	800edc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800edb4:	4b0b      	ldr	r3, [pc, #44]	; (800ede4 <prvAddNewTaskToReadyList+0xd0>)
 800edb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edba:	601a      	str	r2, [r3, #0]
 800edbc:	f3bf 8f4f 	dsb	sy
 800edc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800edc4:	bf00      	nop
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	20006410 	.word	0x20006410
 800edd0:	20006310 	.word	0x20006310
 800edd4:	2000641c 	.word	0x2000641c
 800edd8:	2000642c 	.word	0x2000642c
 800eddc:	20006418 	.word	0x20006418
 800ede0:	20006314 	.word	0x20006314
 800ede4:	e000ed04 	.word	0xe000ed04

0800ede8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800edf0:	2300      	movs	r3, #0
 800edf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d019      	beq.n	800ee2e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800edfa:	4b14      	ldr	r3, [pc, #80]	; (800ee4c <vTaskDelay+0x64>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d00c      	beq.n	800ee1c <vTaskDelay+0x34>
	__asm volatile
 800ee02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee06:	b672      	cpsid	i
 800ee08:	f383 8811 	msr	BASEPRI, r3
 800ee0c:	f3bf 8f6f 	isb	sy
 800ee10:	f3bf 8f4f 	dsb	sy
 800ee14:	b662      	cpsie	i
 800ee16:	60bb      	str	r3, [r7, #8]
}
 800ee18:	bf00      	nop
 800ee1a:	e7fe      	b.n	800ee1a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ee1c:	f000 f888 	bl	800ef30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ee20:	2100      	movs	r1, #0
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f000 fe38 	bl	800fa98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ee28:	f000 f890 	bl	800ef4c <xTaskResumeAll>
 800ee2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d107      	bne.n	800ee44 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800ee34:	4b06      	ldr	r3, [pc, #24]	; (800ee50 <vTaskDelay+0x68>)
 800ee36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee3a:	601a      	str	r2, [r3, #0]
 800ee3c:	f3bf 8f4f 	dsb	sy
 800ee40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee44:	bf00      	nop
 800ee46:	3710      	adds	r7, #16
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	20006438 	.word	0x20006438
 800ee50:	e000ed04 	.word	0xe000ed04

0800ee54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b08a      	sub	sp, #40	; 0x28
 800ee58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ee62:	463a      	mov	r2, r7
 800ee64:	1d39      	adds	r1, r7, #4
 800ee66:	f107 0308 	add.w	r3, r7, #8
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7f8 fa2a 	bl	80072c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ee70:	6839      	ldr	r1, [r7, #0]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	68ba      	ldr	r2, [r7, #8]
 800ee76:	9202      	str	r2, [sp, #8]
 800ee78:	9301      	str	r3, [sp, #4]
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	2300      	movs	r3, #0
 800ee80:	460a      	mov	r2, r1
 800ee82:	4923      	ldr	r1, [pc, #140]	; (800ef10 <vTaskStartScheduler+0xbc>)
 800ee84:	4823      	ldr	r0, [pc, #140]	; (800ef14 <vTaskStartScheduler+0xc0>)
 800ee86:	f7ff fdfd 	bl	800ea84 <xTaskCreateStatic>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	4a22      	ldr	r2, [pc, #136]	; (800ef18 <vTaskStartScheduler+0xc4>)
 800ee8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ee90:	4b21      	ldr	r3, [pc, #132]	; (800ef18 <vTaskStartScheduler+0xc4>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d002      	beq.n	800ee9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	617b      	str	r3, [r7, #20]
 800ee9c:	e001      	b.n	800eea2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d11d      	bne.n	800eee4 <vTaskStartScheduler+0x90>
	__asm volatile
 800eea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeac:	b672      	cpsid	i
 800eeae:	f383 8811 	msr	BASEPRI, r3
 800eeb2:	f3bf 8f6f 	isb	sy
 800eeb6:	f3bf 8f4f 	dsb	sy
 800eeba:	b662      	cpsie	i
 800eebc:	613b      	str	r3, [r7, #16]
}
 800eebe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800eec0:	4b16      	ldr	r3, [pc, #88]	; (800ef1c <vTaskStartScheduler+0xc8>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	334c      	adds	r3, #76	; 0x4c
 800eec6:	4a16      	ldr	r2, [pc, #88]	; (800ef20 <vTaskStartScheduler+0xcc>)
 800eec8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800eeca:	4b16      	ldr	r3, [pc, #88]	; (800ef24 <vTaskStartScheduler+0xd0>)
 800eecc:	f04f 32ff 	mov.w	r2, #4294967295
 800eed0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800eed2:	4b15      	ldr	r3, [pc, #84]	; (800ef28 <vTaskStartScheduler+0xd4>)
 800eed4:	2201      	movs	r2, #1
 800eed6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800eed8:	4b14      	ldr	r3, [pc, #80]	; (800ef2c <vTaskStartScheduler+0xd8>)
 800eeda:	2200      	movs	r2, #0
 800eedc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800eede:	f000 fecf 	bl	800fc80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800eee2:	e010      	b.n	800ef06 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeea:	d10c      	bne.n	800ef06 <vTaskStartScheduler+0xb2>
	__asm volatile
 800eeec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef0:	b672      	cpsid	i
 800eef2:	f383 8811 	msr	BASEPRI, r3
 800eef6:	f3bf 8f6f 	isb	sy
 800eefa:	f3bf 8f4f 	dsb	sy
 800eefe:	b662      	cpsie	i
 800ef00:	60fb      	str	r3, [r7, #12]
}
 800ef02:	bf00      	nop
 800ef04:	e7fe      	b.n	800ef04 <vTaskStartScheduler+0xb0>
}
 800ef06:	bf00      	nop
 800ef08:	3718      	adds	r7, #24
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	0801fcf8 	.word	0x0801fcf8
 800ef14:	0800f52d 	.word	0x0800f52d
 800ef18:	20006434 	.word	0x20006434
 800ef1c:	20006310 	.word	0x20006310
 800ef20:	20000030 	.word	0x20000030
 800ef24:	20006430 	.word	0x20006430
 800ef28:	2000641c 	.word	0x2000641c
 800ef2c:	20006414 	.word	0x20006414

0800ef30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ef30:	b480      	push	{r7}
 800ef32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ef34:	4b04      	ldr	r3, [pc, #16]	; (800ef48 <vTaskSuspendAll+0x18>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	4a03      	ldr	r2, [pc, #12]	; (800ef48 <vTaskSuspendAll+0x18>)
 800ef3c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ef3e:	bf00      	nop
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr
 800ef48:	20006438 	.word	0x20006438

0800ef4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ef52:	2300      	movs	r3, #0
 800ef54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ef56:	2300      	movs	r3, #0
 800ef58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ef5a:	4b42      	ldr	r3, [pc, #264]	; (800f064 <xTaskResumeAll+0x118>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d10c      	bne.n	800ef7c <xTaskResumeAll+0x30>
	__asm volatile
 800ef62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef66:	b672      	cpsid	i
 800ef68:	f383 8811 	msr	BASEPRI, r3
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	f3bf 8f4f 	dsb	sy
 800ef74:	b662      	cpsie	i
 800ef76:	603b      	str	r3, [r7, #0]
}
 800ef78:	bf00      	nop
 800ef7a:	e7fe      	b.n	800ef7a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ef7c:	f000 fefe 	bl	800fd7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ef80:	4b38      	ldr	r3, [pc, #224]	; (800f064 <xTaskResumeAll+0x118>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	3b01      	subs	r3, #1
 800ef86:	4a37      	ldr	r2, [pc, #220]	; (800f064 <xTaskResumeAll+0x118>)
 800ef88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef8a:	4b36      	ldr	r3, [pc, #216]	; (800f064 <xTaskResumeAll+0x118>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d161      	bne.n	800f056 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ef92:	4b35      	ldr	r3, [pc, #212]	; (800f068 <xTaskResumeAll+0x11c>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d05d      	beq.n	800f056 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef9a:	e02e      	b.n	800effa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef9c:	4b33      	ldr	r3, [pc, #204]	; (800f06c <xTaskResumeAll+0x120>)
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	3318      	adds	r3, #24
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fe fd32 	bl	800da12 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	3304      	adds	r3, #4
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fe fd2d 	bl	800da12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efbc:	2201      	movs	r2, #1
 800efbe:	409a      	lsls	r2, r3
 800efc0:	4b2b      	ldr	r3, [pc, #172]	; (800f070 <xTaskResumeAll+0x124>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	4313      	orrs	r3, r2
 800efc6:	4a2a      	ldr	r2, [pc, #168]	; (800f070 <xTaskResumeAll+0x124>)
 800efc8:	6013      	str	r3, [r2, #0]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efce:	4613      	mov	r3, r2
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	4413      	add	r3, r2
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	4a27      	ldr	r2, [pc, #156]	; (800f074 <xTaskResumeAll+0x128>)
 800efd8:	441a      	add	r2, r3
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	3304      	adds	r3, #4
 800efde:	4619      	mov	r1, r3
 800efe0:	4610      	mov	r0, r2
 800efe2:	f7fe fcb9 	bl	800d958 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efea:	4b23      	ldr	r3, [pc, #140]	; (800f078 <xTaskResumeAll+0x12c>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d302      	bcc.n	800effa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800eff4:	4b21      	ldr	r3, [pc, #132]	; (800f07c <xTaskResumeAll+0x130>)
 800eff6:	2201      	movs	r2, #1
 800eff8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800effa:	4b1c      	ldr	r3, [pc, #112]	; (800f06c <xTaskResumeAll+0x120>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d1cc      	bne.n	800ef9c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d001      	beq.n	800f00c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f008:	f000 fb4c 	bl	800f6a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f00c:	4b1c      	ldr	r3, [pc, #112]	; (800f080 <xTaskResumeAll+0x134>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d010      	beq.n	800f03a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f018:	f000 f858 	bl	800f0cc <xTaskIncrementTick>
 800f01c:	4603      	mov	r3, r0
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d002      	beq.n	800f028 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f022:	4b16      	ldr	r3, [pc, #88]	; (800f07c <xTaskResumeAll+0x130>)
 800f024:	2201      	movs	r2, #1
 800f026:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	3b01      	subs	r3, #1
 800f02c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d1f1      	bne.n	800f018 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800f034:	4b12      	ldr	r3, [pc, #72]	; (800f080 <xTaskResumeAll+0x134>)
 800f036:	2200      	movs	r2, #0
 800f038:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f03a:	4b10      	ldr	r3, [pc, #64]	; (800f07c <xTaskResumeAll+0x130>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d009      	beq.n	800f056 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f042:	2301      	movs	r3, #1
 800f044:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f046:	4b0f      	ldr	r3, [pc, #60]	; (800f084 <xTaskResumeAll+0x138>)
 800f048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f04c:	601a      	str	r2, [r3, #0]
 800f04e:	f3bf 8f4f 	dsb	sy
 800f052:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f056:	f000 fec5 	bl	800fde4 <vPortExitCritical>

	return xAlreadyYielded;
 800f05a:	68bb      	ldr	r3, [r7, #8]
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3710      	adds	r7, #16
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}
 800f064:	20006438 	.word	0x20006438
 800f068:	20006410 	.word	0x20006410
 800f06c:	200063d0 	.word	0x200063d0
 800f070:	20006418 	.word	0x20006418
 800f074:	20006314 	.word	0x20006314
 800f078:	20006310 	.word	0x20006310
 800f07c:	20006424 	.word	0x20006424
 800f080:	20006420 	.word	0x20006420
 800f084:	e000ed04 	.word	0xe000ed04

0800f088 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f088:	b480      	push	{r7}
 800f08a:	b083      	sub	sp, #12
 800f08c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f08e:	4b05      	ldr	r3, [pc, #20]	; (800f0a4 <xTaskGetTickCount+0x1c>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f094:	687b      	ldr	r3, [r7, #4]
}
 800f096:	4618      	mov	r0, r3
 800f098:	370c      	adds	r7, #12
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop
 800f0a4:	20006414 	.word	0x20006414

0800f0a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0ae:	f000 ff4d 	bl	800ff4c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f0b6:	4b04      	ldr	r3, [pc, #16]	; (800f0c8 <xTaskGetTickCountFromISR+0x20>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f0bc:	683b      	ldr	r3, [r7, #0]
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3708      	adds	r7, #8
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	20006414 	.word	0x20006414

0800f0cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b086      	sub	sp, #24
 800f0d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0d6:	4b4f      	ldr	r3, [pc, #316]	; (800f214 <xTaskIncrementTick+0x148>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	f040 808a 	bne.w	800f1f4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f0e0:	4b4d      	ldr	r3, [pc, #308]	; (800f218 <xTaskIncrementTick+0x14c>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	3301      	adds	r3, #1
 800f0e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f0e8:	4a4b      	ldr	r2, [pc, #300]	; (800f218 <xTaskIncrementTick+0x14c>)
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d122      	bne.n	800f13a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f0f4:	4b49      	ldr	r3, [pc, #292]	; (800f21c <xTaskIncrementTick+0x150>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00c      	beq.n	800f118 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f102:	b672      	cpsid	i
 800f104:	f383 8811 	msr	BASEPRI, r3
 800f108:	f3bf 8f6f 	isb	sy
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	b662      	cpsie	i
 800f112:	603b      	str	r3, [r7, #0]
}
 800f114:	bf00      	nop
 800f116:	e7fe      	b.n	800f116 <xTaskIncrementTick+0x4a>
 800f118:	4b40      	ldr	r3, [pc, #256]	; (800f21c <xTaskIncrementTick+0x150>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	60fb      	str	r3, [r7, #12]
 800f11e:	4b40      	ldr	r3, [pc, #256]	; (800f220 <xTaskIncrementTick+0x154>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	4a3e      	ldr	r2, [pc, #248]	; (800f21c <xTaskIncrementTick+0x150>)
 800f124:	6013      	str	r3, [r2, #0]
 800f126:	4a3e      	ldr	r2, [pc, #248]	; (800f220 <xTaskIncrementTick+0x154>)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6013      	str	r3, [r2, #0]
 800f12c:	4b3d      	ldr	r3, [pc, #244]	; (800f224 <xTaskIncrementTick+0x158>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	3301      	adds	r3, #1
 800f132:	4a3c      	ldr	r2, [pc, #240]	; (800f224 <xTaskIncrementTick+0x158>)
 800f134:	6013      	str	r3, [r2, #0]
 800f136:	f000 fab5 	bl	800f6a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f13a:	4b3b      	ldr	r3, [pc, #236]	; (800f228 <xTaskIncrementTick+0x15c>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	693a      	ldr	r2, [r7, #16]
 800f140:	429a      	cmp	r2, r3
 800f142:	d348      	bcc.n	800f1d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f144:	4b35      	ldr	r3, [pc, #212]	; (800f21c <xTaskIncrementTick+0x150>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d104      	bne.n	800f158 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f14e:	4b36      	ldr	r3, [pc, #216]	; (800f228 <xTaskIncrementTick+0x15c>)
 800f150:	f04f 32ff 	mov.w	r2, #4294967295
 800f154:	601a      	str	r2, [r3, #0]
					break;
 800f156:	e03e      	b.n	800f1d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f158:	4b30      	ldr	r3, [pc, #192]	; (800f21c <xTaskIncrementTick+0x150>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	68db      	ldr	r3, [r3, #12]
 800f160:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f168:	693a      	ldr	r2, [r7, #16]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d203      	bcs.n	800f178 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f170:	4a2d      	ldr	r2, [pc, #180]	; (800f228 <xTaskIncrementTick+0x15c>)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f176:	e02e      	b.n	800f1d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	3304      	adds	r3, #4
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7fe fc48 	bl	800da12 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f186:	2b00      	cmp	r3, #0
 800f188:	d004      	beq.n	800f194 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	3318      	adds	r3, #24
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fe fc3f 	bl	800da12 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f198:	2201      	movs	r2, #1
 800f19a:	409a      	lsls	r2, r3
 800f19c:	4b23      	ldr	r3, [pc, #140]	; (800f22c <xTaskIncrementTick+0x160>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	4a22      	ldr	r2, [pc, #136]	; (800f22c <xTaskIncrementTick+0x160>)
 800f1a4:	6013      	str	r3, [r2, #0]
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1aa:	4613      	mov	r3, r2
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	4413      	add	r3, r2
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	4a1f      	ldr	r2, [pc, #124]	; (800f230 <xTaskIncrementTick+0x164>)
 800f1b4:	441a      	add	r2, r3
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	3304      	adds	r3, #4
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	4610      	mov	r0, r2
 800f1be:	f7fe fbcb 	bl	800d958 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1c6:	4b1b      	ldr	r3, [pc, #108]	; (800f234 <xTaskIncrementTick+0x168>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d3b9      	bcc.n	800f144 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1d4:	e7b6      	b.n	800f144 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f1d6:	4b17      	ldr	r3, [pc, #92]	; (800f234 <xTaskIncrementTick+0x168>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1dc:	4914      	ldr	r1, [pc, #80]	; (800f230 <xTaskIncrementTick+0x164>)
 800f1de:	4613      	mov	r3, r2
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	440b      	add	r3, r1
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d907      	bls.n	800f1fe <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	617b      	str	r3, [r7, #20]
 800f1f2:	e004      	b.n	800f1fe <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f1f4:	4b10      	ldr	r3, [pc, #64]	; (800f238 <xTaskIncrementTick+0x16c>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	4a0f      	ldr	r2, [pc, #60]	; (800f238 <xTaskIncrementTick+0x16c>)
 800f1fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f1fe:	4b0f      	ldr	r3, [pc, #60]	; (800f23c <xTaskIncrementTick+0x170>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d001      	beq.n	800f20a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800f206:	2301      	movs	r3, #1
 800f208:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f20a:	697b      	ldr	r3, [r7, #20]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	20006438 	.word	0x20006438
 800f218:	20006414 	.word	0x20006414
 800f21c:	200063c8 	.word	0x200063c8
 800f220:	200063cc 	.word	0x200063cc
 800f224:	20006428 	.word	0x20006428
 800f228:	20006430 	.word	0x20006430
 800f22c:	20006418 	.word	0x20006418
 800f230:	20006314 	.word	0x20006314
 800f234:	20006310 	.word	0x20006310
 800f238:	20006420 	.word	0x20006420
 800f23c:	20006424 	.word	0x20006424

0800f240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f240:	b480      	push	{r7}
 800f242:	b087      	sub	sp, #28
 800f244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f246:	4b2a      	ldr	r3, [pc, #168]	; (800f2f0 <vTaskSwitchContext+0xb0>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d003      	beq.n	800f256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f24e:	4b29      	ldr	r3, [pc, #164]	; (800f2f4 <vTaskSwitchContext+0xb4>)
 800f250:	2201      	movs	r2, #1
 800f252:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f254:	e046      	b.n	800f2e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f256:	4b27      	ldr	r3, [pc, #156]	; (800f2f4 <vTaskSwitchContext+0xb4>)
 800f258:	2200      	movs	r2, #0
 800f25a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f25c:	4b26      	ldr	r3, [pc, #152]	; (800f2f8 <vTaskSwitchContext+0xb8>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	fab3 f383 	clz	r3, r3
 800f268:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f26a:	7afb      	ldrb	r3, [r7, #11]
 800f26c:	f1c3 031f 	rsb	r3, r3, #31
 800f270:	617b      	str	r3, [r7, #20]
 800f272:	4922      	ldr	r1, [pc, #136]	; (800f2fc <vTaskSwitchContext+0xbc>)
 800f274:	697a      	ldr	r2, [r7, #20]
 800f276:	4613      	mov	r3, r2
 800f278:	009b      	lsls	r3, r3, #2
 800f27a:	4413      	add	r3, r2
 800f27c:	009b      	lsls	r3, r3, #2
 800f27e:	440b      	add	r3, r1
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d10c      	bne.n	800f2a0 <vTaskSwitchContext+0x60>
	__asm volatile
 800f286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28a:	b672      	cpsid	i
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	b662      	cpsie	i
 800f29a:	607b      	str	r3, [r7, #4]
}
 800f29c:	bf00      	nop
 800f29e:	e7fe      	b.n	800f29e <vTaskSwitchContext+0x5e>
 800f2a0:	697a      	ldr	r2, [r7, #20]
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	4413      	add	r3, r2
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	4a14      	ldr	r2, [pc, #80]	; (800f2fc <vTaskSwitchContext+0xbc>)
 800f2ac:	4413      	add	r3, r2
 800f2ae:	613b      	str	r3, [r7, #16]
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	685a      	ldr	r2, [r3, #4]
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	605a      	str	r2, [r3, #4]
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	685a      	ldr	r2, [r3, #4]
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	3308      	adds	r3, #8
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d104      	bne.n	800f2d0 <vTaskSwitchContext+0x90>
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	685a      	ldr	r2, [r3, #4]
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	605a      	str	r2, [r3, #4]
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	68db      	ldr	r3, [r3, #12]
 800f2d6:	4a0a      	ldr	r2, [pc, #40]	; (800f300 <vTaskSwitchContext+0xc0>)
 800f2d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f2da:	4b09      	ldr	r3, [pc, #36]	; (800f300 <vTaskSwitchContext+0xc0>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	334c      	adds	r3, #76	; 0x4c
 800f2e0:	4a08      	ldr	r2, [pc, #32]	; (800f304 <vTaskSwitchContext+0xc4>)
 800f2e2:	6013      	str	r3, [r2, #0]
}
 800f2e4:	bf00      	nop
 800f2e6:	371c      	adds	r7, #28
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr
 800f2f0:	20006438 	.word	0x20006438
 800f2f4:	20006424 	.word	0x20006424
 800f2f8:	20006418 	.word	0x20006418
 800f2fc:	20006314 	.word	0x20006314
 800f300:	20006310 	.word	0x20006310
 800f304:	20000030 	.word	0x20000030

0800f308 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d10c      	bne.n	800f332 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800f318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f31c:	b672      	cpsid	i
 800f31e:	f383 8811 	msr	BASEPRI, r3
 800f322:	f3bf 8f6f 	isb	sy
 800f326:	f3bf 8f4f 	dsb	sy
 800f32a:	b662      	cpsie	i
 800f32c:	60fb      	str	r3, [r7, #12]
}
 800f32e:	bf00      	nop
 800f330:	e7fe      	b.n	800f330 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f332:	4b07      	ldr	r3, [pc, #28]	; (800f350 <vTaskPlaceOnEventList+0x48>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	3318      	adds	r3, #24
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7fe fb30 	bl	800d9a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f340:	2101      	movs	r1, #1
 800f342:	6838      	ldr	r0, [r7, #0]
 800f344:	f000 fba8 	bl	800fa98 <prvAddCurrentTaskToDelayedList>
}
 800f348:	bf00      	nop
 800f34a:	3710      	adds	r7, #16
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}
 800f350:	20006310 	.word	0x20006310

0800f354 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d10c      	bne.n	800f384 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800f36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36e:	b672      	cpsid	i
 800f370:	f383 8811 	msr	BASEPRI, r3
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	f3bf 8f4f 	dsb	sy
 800f37c:	b662      	cpsie	i
 800f37e:	60fb      	str	r3, [r7, #12]
}
 800f380:	bf00      	nop
 800f382:	e7fe      	b.n	800f382 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	3318      	adds	r3, #24
 800f388:	4618      	mov	r0, r3
 800f38a:	f7fe fb42 	bl	800da12 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f38e:	4b1d      	ldr	r3, [pc, #116]	; (800f404 <xTaskRemoveFromEventList+0xb0>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d11c      	bne.n	800f3d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	3304      	adds	r3, #4
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fe fb39 	bl	800da12 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	409a      	lsls	r2, r3
 800f3a8:	4b17      	ldr	r3, [pc, #92]	; (800f408 <xTaskRemoveFromEventList+0xb4>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	4a16      	ldr	r2, [pc, #88]	; (800f408 <xTaskRemoveFromEventList+0xb4>)
 800f3b0:	6013      	str	r3, [r2, #0]
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3b6:	4613      	mov	r3, r2
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	4413      	add	r3, r2
 800f3bc:	009b      	lsls	r3, r3, #2
 800f3be:	4a13      	ldr	r2, [pc, #76]	; (800f40c <xTaskRemoveFromEventList+0xb8>)
 800f3c0:	441a      	add	r2, r3
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	3304      	adds	r3, #4
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	4610      	mov	r0, r2
 800f3ca:	f7fe fac5 	bl	800d958 <vListInsertEnd>
 800f3ce:	e005      	b.n	800f3dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	3318      	adds	r3, #24
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	480e      	ldr	r0, [pc, #56]	; (800f410 <xTaskRemoveFromEventList+0xbc>)
 800f3d8:	f7fe fabe 	bl	800d958 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3e0:	4b0c      	ldr	r3, [pc, #48]	; (800f414 <xTaskRemoveFromEventList+0xc0>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d905      	bls.n	800f3f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f3ee:	4b0a      	ldr	r3, [pc, #40]	; (800f418 <xTaskRemoveFromEventList+0xc4>)
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	601a      	str	r2, [r3, #0]
 800f3f4:	e001      	b.n	800f3fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f3fa:	697b      	ldr	r3, [r7, #20]
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3718      	adds	r7, #24
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	20006438 	.word	0x20006438
 800f408:	20006418 	.word	0x20006418
 800f40c:	20006314 	.word	0x20006314
 800f410:	200063d0 	.word	0x200063d0
 800f414:	20006310 	.word	0x20006310
 800f418:	20006424 	.word	0x20006424

0800f41c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f424:	4b06      	ldr	r3, [pc, #24]	; (800f440 <vTaskInternalSetTimeOutState+0x24>)
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f42c:	4b05      	ldr	r3, [pc, #20]	; (800f444 <vTaskInternalSetTimeOutState+0x28>)
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	605a      	str	r2, [r3, #4]
}
 800f434:	bf00      	nop
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr
 800f440:	20006428 	.word	0x20006428
 800f444:	20006414 	.word	0x20006414

0800f448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b088      	sub	sp, #32
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d10c      	bne.n	800f472 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800f458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f45c:	b672      	cpsid	i
 800f45e:	f383 8811 	msr	BASEPRI, r3
 800f462:	f3bf 8f6f 	isb	sy
 800f466:	f3bf 8f4f 	dsb	sy
 800f46a:	b662      	cpsie	i
 800f46c:	613b      	str	r3, [r7, #16]
}
 800f46e:	bf00      	nop
 800f470:	e7fe      	b.n	800f470 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d10c      	bne.n	800f492 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800f478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f47c:	b672      	cpsid	i
 800f47e:	f383 8811 	msr	BASEPRI, r3
 800f482:	f3bf 8f6f 	isb	sy
 800f486:	f3bf 8f4f 	dsb	sy
 800f48a:	b662      	cpsie	i
 800f48c:	60fb      	str	r3, [r7, #12]
}
 800f48e:	bf00      	nop
 800f490:	e7fe      	b.n	800f490 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800f492:	f000 fc73 	bl	800fd7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f496:	4b1d      	ldr	r3, [pc, #116]	; (800f50c <xTaskCheckForTimeOut+0xc4>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	69ba      	ldr	r2, [r7, #24]
 800f4a2:	1ad3      	subs	r3, r2, r3
 800f4a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ae:	d102      	bne.n	800f4b6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	61fb      	str	r3, [r7, #28]
 800f4b4:	e023      	b.n	800f4fe <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	4b15      	ldr	r3, [pc, #84]	; (800f510 <xTaskCheckForTimeOut+0xc8>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d007      	beq.n	800f4d2 <xTaskCheckForTimeOut+0x8a>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	69ba      	ldr	r2, [r7, #24]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d302      	bcc.n	800f4d2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	61fb      	str	r3, [r7, #28]
 800f4d0:	e015      	b.n	800f4fe <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	697a      	ldr	r2, [r7, #20]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d20b      	bcs.n	800f4f4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	1ad2      	subs	r2, r2, r3
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f7ff ff97 	bl	800f41c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	61fb      	str	r3, [r7, #28]
 800f4f2:	e004      	b.n	800f4fe <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f4fe:	f000 fc71 	bl	800fde4 <vPortExitCritical>

	return xReturn;
 800f502:	69fb      	ldr	r3, [r7, #28]
}
 800f504:	4618      	mov	r0, r3
 800f506:	3720      	adds	r7, #32
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	20006414 	.word	0x20006414
 800f510:	20006428 	.word	0x20006428

0800f514 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f514:	b480      	push	{r7}
 800f516:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f518:	4b03      	ldr	r3, [pc, #12]	; (800f528 <vTaskMissedYield+0x14>)
 800f51a:	2201      	movs	r2, #1
 800f51c:	601a      	str	r2, [r3, #0]
}
 800f51e:	bf00      	nop
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr
 800f528:	20006424 	.word	0x20006424

0800f52c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f534:	f000 f852 	bl	800f5dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f538:	4b06      	ldr	r3, [pc, #24]	; (800f554 <prvIdleTask+0x28>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	d9f9      	bls.n	800f534 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f540:	4b05      	ldr	r3, [pc, #20]	; (800f558 <prvIdleTask+0x2c>)
 800f542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f546:	601a      	str	r2, [r3, #0]
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f550:	e7f0      	b.n	800f534 <prvIdleTask+0x8>
 800f552:	bf00      	nop
 800f554:	20006314 	.word	0x20006314
 800f558:	e000ed04 	.word	0xe000ed04

0800f55c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f562:	2300      	movs	r3, #0
 800f564:	607b      	str	r3, [r7, #4]
 800f566:	e00c      	b.n	800f582 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f568:	687a      	ldr	r2, [r7, #4]
 800f56a:	4613      	mov	r3, r2
 800f56c:	009b      	lsls	r3, r3, #2
 800f56e:	4413      	add	r3, r2
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	4a12      	ldr	r2, [pc, #72]	; (800f5bc <prvInitialiseTaskLists+0x60>)
 800f574:	4413      	add	r3, r2
 800f576:	4618      	mov	r0, r3
 800f578:	f7fe f9c1 	bl	800d8fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	3301      	adds	r3, #1
 800f580:	607b      	str	r3, [r7, #4]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2b06      	cmp	r3, #6
 800f586:	d9ef      	bls.n	800f568 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f588:	480d      	ldr	r0, [pc, #52]	; (800f5c0 <prvInitialiseTaskLists+0x64>)
 800f58a:	f7fe f9b8 	bl	800d8fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f58e:	480d      	ldr	r0, [pc, #52]	; (800f5c4 <prvInitialiseTaskLists+0x68>)
 800f590:	f7fe f9b5 	bl	800d8fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f594:	480c      	ldr	r0, [pc, #48]	; (800f5c8 <prvInitialiseTaskLists+0x6c>)
 800f596:	f7fe f9b2 	bl	800d8fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f59a:	480c      	ldr	r0, [pc, #48]	; (800f5cc <prvInitialiseTaskLists+0x70>)
 800f59c:	f7fe f9af 	bl	800d8fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f5a0:	480b      	ldr	r0, [pc, #44]	; (800f5d0 <prvInitialiseTaskLists+0x74>)
 800f5a2:	f7fe f9ac 	bl	800d8fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f5a6:	4b0b      	ldr	r3, [pc, #44]	; (800f5d4 <prvInitialiseTaskLists+0x78>)
 800f5a8:	4a05      	ldr	r2, [pc, #20]	; (800f5c0 <prvInitialiseTaskLists+0x64>)
 800f5aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f5ac:	4b0a      	ldr	r3, [pc, #40]	; (800f5d8 <prvInitialiseTaskLists+0x7c>)
 800f5ae:	4a05      	ldr	r2, [pc, #20]	; (800f5c4 <prvInitialiseTaskLists+0x68>)
 800f5b0:	601a      	str	r2, [r3, #0]
}
 800f5b2:	bf00      	nop
 800f5b4:	3708      	adds	r7, #8
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	20006314 	.word	0x20006314
 800f5c0:	200063a0 	.word	0x200063a0
 800f5c4:	200063b4 	.word	0x200063b4
 800f5c8:	200063d0 	.word	0x200063d0
 800f5cc:	200063e4 	.word	0x200063e4
 800f5d0:	200063fc 	.word	0x200063fc
 800f5d4:	200063c8 	.word	0x200063c8
 800f5d8:	200063cc 	.word	0x200063cc

0800f5dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b082      	sub	sp, #8
 800f5e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5e2:	e019      	b.n	800f618 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f5e4:	f000 fbca 	bl	800fd7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5e8:	4b10      	ldr	r3, [pc, #64]	; (800f62c <prvCheckTasksWaitingTermination+0x50>)
 800f5ea:	68db      	ldr	r3, [r3, #12]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	3304      	adds	r3, #4
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7fe fa0c 	bl	800da12 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f5fa:	4b0d      	ldr	r3, [pc, #52]	; (800f630 <prvCheckTasksWaitingTermination+0x54>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3b01      	subs	r3, #1
 800f600:	4a0b      	ldr	r2, [pc, #44]	; (800f630 <prvCheckTasksWaitingTermination+0x54>)
 800f602:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f604:	4b0b      	ldr	r3, [pc, #44]	; (800f634 <prvCheckTasksWaitingTermination+0x58>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	3b01      	subs	r3, #1
 800f60a:	4a0a      	ldr	r2, [pc, #40]	; (800f634 <prvCheckTasksWaitingTermination+0x58>)
 800f60c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f60e:	f000 fbe9 	bl	800fde4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 f810 	bl	800f638 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f618:	4b06      	ldr	r3, [pc, #24]	; (800f634 <prvCheckTasksWaitingTermination+0x58>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d1e1      	bne.n	800f5e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f620:	bf00      	nop
 800f622:	bf00      	nop
 800f624:	3708      	adds	r7, #8
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	200063e4 	.word	0x200063e4
 800f630:	20006410 	.word	0x20006410
 800f634:	200063f8 	.word	0x200063f8

0800f638 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	334c      	adds	r3, #76	; 0x4c
 800f644:	4618      	mov	r0, r3
 800f646:	f00e ff37 	bl	801e4b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800f650:	2b00      	cmp	r3, #0
 800f652:	d108      	bne.n	800f666 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f658:	4618      	mov	r0, r3
 800f65a:	f000 fd85 	bl	8010168 <vPortFree>
				vPortFree( pxTCB );
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 fd82 	bl	8010168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f664:	e01a      	b.n	800f69c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d103      	bne.n	800f678 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 fd79 	bl	8010168 <vPortFree>
	}
 800f676:	e011      	b.n	800f69c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800f67e:	2b02      	cmp	r3, #2
 800f680:	d00c      	beq.n	800f69c <prvDeleteTCB+0x64>
	__asm volatile
 800f682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f686:	b672      	cpsid	i
 800f688:	f383 8811 	msr	BASEPRI, r3
 800f68c:	f3bf 8f6f 	isb	sy
 800f690:	f3bf 8f4f 	dsb	sy
 800f694:	b662      	cpsie	i
 800f696:	60fb      	str	r3, [r7, #12]
}
 800f698:	bf00      	nop
 800f69a:	e7fe      	b.n	800f69a <prvDeleteTCB+0x62>
	}
 800f69c:	bf00      	nop
 800f69e:	3710      	adds	r7, #16
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6aa:	4b0c      	ldr	r3, [pc, #48]	; (800f6dc <prvResetNextTaskUnblockTime+0x38>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d104      	bne.n	800f6be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f6b4:	4b0a      	ldr	r3, [pc, #40]	; (800f6e0 <prvResetNextTaskUnblockTime+0x3c>)
 800f6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f6bc:	e008      	b.n	800f6d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6be:	4b07      	ldr	r3, [pc, #28]	; (800f6dc <prvResetNextTaskUnblockTime+0x38>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	68db      	ldr	r3, [r3, #12]
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	4a04      	ldr	r2, [pc, #16]	; (800f6e0 <prvResetNextTaskUnblockTime+0x3c>)
 800f6ce:	6013      	str	r3, [r2, #0]
}
 800f6d0:	bf00      	nop
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr
 800f6dc:	200063c8 	.word	0x200063c8
 800f6e0:	20006430 	.word	0x20006430

0800f6e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f6ea:	4b0b      	ldr	r3, [pc, #44]	; (800f718 <xTaskGetSchedulerState+0x34>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d102      	bne.n	800f6f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	607b      	str	r3, [r7, #4]
 800f6f6:	e008      	b.n	800f70a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6f8:	4b08      	ldr	r3, [pc, #32]	; (800f71c <xTaskGetSchedulerState+0x38>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d102      	bne.n	800f706 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f700:	2302      	movs	r3, #2
 800f702:	607b      	str	r3, [r7, #4]
 800f704:	e001      	b.n	800f70a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f706:	2300      	movs	r3, #0
 800f708:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f70a:	687b      	ldr	r3, [r7, #4]
	}
 800f70c:	4618      	mov	r0, r3
 800f70e:	370c      	adds	r7, #12
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr
 800f718:	2000641c 	.word	0x2000641c
 800f71c:	20006438 	.word	0x20006438

0800f720 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f72c:	2300      	movs	r3, #0
 800f72e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d069      	beq.n	800f80a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f73a:	4b36      	ldr	r3, [pc, #216]	; (800f814 <xTaskPriorityInherit+0xf4>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f740:	429a      	cmp	r2, r3
 800f742:	d259      	bcs.n	800f7f8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	699b      	ldr	r3, [r3, #24]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	db06      	blt.n	800f75a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f74c:	4b31      	ldr	r3, [pc, #196]	; (800f814 <xTaskPriorityInherit+0xf4>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f752:	f1c3 0207 	rsb	r2, r3, #7
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	6959      	ldr	r1, [r3, #20]
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f762:	4613      	mov	r3, r2
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	4413      	add	r3, r2
 800f768:	009b      	lsls	r3, r3, #2
 800f76a:	4a2b      	ldr	r2, [pc, #172]	; (800f818 <xTaskPriorityInherit+0xf8>)
 800f76c:	4413      	add	r3, r2
 800f76e:	4299      	cmp	r1, r3
 800f770:	d13a      	bne.n	800f7e8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	3304      	adds	r3, #4
 800f776:	4618      	mov	r0, r3
 800f778:	f7fe f94b 	bl	800da12 <uxListRemove>
 800f77c:	4603      	mov	r3, r0
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d115      	bne.n	800f7ae <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f786:	4924      	ldr	r1, [pc, #144]	; (800f818 <xTaskPriorityInherit+0xf8>)
 800f788:	4613      	mov	r3, r2
 800f78a:	009b      	lsls	r3, r3, #2
 800f78c:	4413      	add	r3, r2
 800f78e:	009b      	lsls	r3, r3, #2
 800f790:	440b      	add	r3, r1
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d10a      	bne.n	800f7ae <xTaskPriorityInherit+0x8e>
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f79c:	2201      	movs	r2, #1
 800f79e:	fa02 f303 	lsl.w	r3, r2, r3
 800f7a2:	43da      	mvns	r2, r3
 800f7a4:	4b1d      	ldr	r3, [pc, #116]	; (800f81c <xTaskPriorityInherit+0xfc>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4013      	ands	r3, r2
 800f7aa:	4a1c      	ldr	r2, [pc, #112]	; (800f81c <xTaskPriorityInherit+0xfc>)
 800f7ac:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f7ae:	4b19      	ldr	r3, [pc, #100]	; (800f814 <xTaskPriorityInherit+0xf4>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7bc:	2201      	movs	r2, #1
 800f7be:	409a      	lsls	r2, r3
 800f7c0:	4b16      	ldr	r3, [pc, #88]	; (800f81c <xTaskPriorityInherit+0xfc>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	4a15      	ldr	r2, [pc, #84]	; (800f81c <xTaskPriorityInherit+0xfc>)
 800f7c8:	6013      	str	r3, [r2, #0]
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7ce:	4613      	mov	r3, r2
 800f7d0:	009b      	lsls	r3, r3, #2
 800f7d2:	4413      	add	r3, r2
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	4a10      	ldr	r2, [pc, #64]	; (800f818 <xTaskPriorityInherit+0xf8>)
 800f7d8:	441a      	add	r2, r3
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	3304      	adds	r3, #4
 800f7de:	4619      	mov	r1, r3
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	f7fe f8b9 	bl	800d958 <vListInsertEnd>
 800f7e6:	e004      	b.n	800f7f2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f7e8:	4b0a      	ldr	r3, [pc, #40]	; (800f814 <xTaskPriorityInherit+0xf4>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	60fb      	str	r3, [r7, #12]
 800f7f6:	e008      	b.n	800f80a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7fc:	4b05      	ldr	r3, [pc, #20]	; (800f814 <xTaskPriorityInherit+0xf4>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f802:	429a      	cmp	r2, r3
 800f804:	d201      	bcs.n	800f80a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f806:	2301      	movs	r3, #1
 800f808:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f80a:	68fb      	ldr	r3, [r7, #12]
	}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3710      	adds	r7, #16
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}
 800f814:	20006310 	.word	0x20006310
 800f818:	20006314 	.word	0x20006314
 800f81c:	20006418 	.word	0x20006418

0800f820 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f820:	b580      	push	{r7, lr}
 800f822:	b086      	sub	sp, #24
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f82c:	2300      	movs	r3, #0
 800f82e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d072      	beq.n	800f91c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f836:	4b3c      	ldr	r3, [pc, #240]	; (800f928 <xTaskPriorityDisinherit+0x108>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	693a      	ldr	r2, [r7, #16]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d00c      	beq.n	800f85a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800f840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f844:	b672      	cpsid	i
 800f846:	f383 8811 	msr	BASEPRI, r3
 800f84a:	f3bf 8f6f 	isb	sy
 800f84e:	f3bf 8f4f 	dsb	sy
 800f852:	b662      	cpsie	i
 800f854:	60fb      	str	r3, [r7, #12]
}
 800f856:	bf00      	nop
 800f858:	e7fe      	b.n	800f858 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d10c      	bne.n	800f87c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800f862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f866:	b672      	cpsid	i
 800f868:	f383 8811 	msr	BASEPRI, r3
 800f86c:	f3bf 8f6f 	isb	sy
 800f870:	f3bf 8f4f 	dsb	sy
 800f874:	b662      	cpsie	i
 800f876:	60bb      	str	r3, [r7, #8]
}
 800f878:	bf00      	nop
 800f87a:	e7fe      	b.n	800f87a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f880:	1e5a      	subs	r2, r3, #1
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f88e:	429a      	cmp	r2, r3
 800f890:	d044      	beq.n	800f91c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f896:	2b00      	cmp	r3, #0
 800f898:	d140      	bne.n	800f91c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	3304      	adds	r3, #4
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fe f8b7 	bl	800da12 <uxListRemove>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d115      	bne.n	800f8d6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ae:	491f      	ldr	r1, [pc, #124]	; (800f92c <xTaskPriorityDisinherit+0x10c>)
 800f8b0:	4613      	mov	r3, r2
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	4413      	add	r3, r2
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	440b      	add	r3, r1
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d10a      	bne.n	800f8d6 <xTaskPriorityDisinherit+0xb6>
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800f8ca:	43da      	mvns	r2, r3
 800f8cc:	4b18      	ldr	r3, [pc, #96]	; (800f930 <xTaskPriorityDisinherit+0x110>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4013      	ands	r3, r2
 800f8d2:	4a17      	ldr	r2, [pc, #92]	; (800f930 <xTaskPriorityDisinherit+0x110>)
 800f8d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e2:	f1c3 0207 	rsb	r2, r3, #7
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	409a      	lsls	r2, r3
 800f8f2:	4b0f      	ldr	r3, [pc, #60]	; (800f930 <xTaskPriorityDisinherit+0x110>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	4a0d      	ldr	r2, [pc, #52]	; (800f930 <xTaskPriorityDisinherit+0x110>)
 800f8fa:	6013      	str	r3, [r2, #0]
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f900:	4613      	mov	r3, r2
 800f902:	009b      	lsls	r3, r3, #2
 800f904:	4413      	add	r3, r2
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	4a08      	ldr	r2, [pc, #32]	; (800f92c <xTaskPriorityDisinherit+0x10c>)
 800f90a:	441a      	add	r2, r3
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	3304      	adds	r3, #4
 800f910:	4619      	mov	r1, r3
 800f912:	4610      	mov	r0, r2
 800f914:	f7fe f820 	bl	800d958 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f918:	2301      	movs	r3, #1
 800f91a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f91c:	697b      	ldr	r3, [r7, #20]
	}
 800f91e:	4618      	mov	r0, r3
 800f920:	3718      	adds	r7, #24
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	20006310 	.word	0x20006310
 800f92c:	20006314 	.word	0x20006314
 800f930:	20006418 	.word	0x20006418

0800f934 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f934:	b580      	push	{r7, lr}
 800f936:	b088      	sub	sp, #32
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f942:	2301      	movs	r3, #1
 800f944:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f000 8087 	beq.w	800fa5c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f952:	2b00      	cmp	r3, #0
 800f954:	d10c      	bne.n	800f970 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800f956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95a:	b672      	cpsid	i
 800f95c:	f383 8811 	msr	BASEPRI, r3
 800f960:	f3bf 8f6f 	isb	sy
 800f964:	f3bf 8f4f 	dsb	sy
 800f968:	b662      	cpsie	i
 800f96a:	60fb      	str	r3, [r7, #12]
}
 800f96c:	bf00      	nop
 800f96e:	e7fe      	b.n	800f96e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f970:	69bb      	ldr	r3, [r7, #24]
 800f972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f974:	683a      	ldr	r2, [r7, #0]
 800f976:	429a      	cmp	r2, r3
 800f978:	d902      	bls.n	800f980 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	61fb      	str	r3, [r7, #28]
 800f97e:	e002      	b.n	800f986 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f980:	69bb      	ldr	r3, [r7, #24]
 800f982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f984:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98a:	69fa      	ldr	r2, [r7, #28]
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d065      	beq.n	800fa5c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f990:	69bb      	ldr	r3, [r7, #24]
 800f992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f994:	697a      	ldr	r2, [r7, #20]
 800f996:	429a      	cmp	r2, r3
 800f998:	d160      	bne.n	800fa5c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f99a:	4b32      	ldr	r3, [pc, #200]	; (800fa64 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	69ba      	ldr	r2, [r7, #24]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d10c      	bne.n	800f9be <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800f9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a8:	b672      	cpsid	i
 800f9aa:	f383 8811 	msr	BASEPRI, r3
 800f9ae:	f3bf 8f6f 	isb	sy
 800f9b2:	f3bf 8f4f 	dsb	sy
 800f9b6:	b662      	cpsie	i
 800f9b8:	60bb      	str	r3, [r7, #8]
}
 800f9ba:	bf00      	nop
 800f9bc:	e7fe      	b.n	800f9bc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f9be:	69bb      	ldr	r3, [r7, #24]
 800f9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9c2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f9c4:	69bb      	ldr	r3, [r7, #24]
 800f9c6:	69fa      	ldr	r2, [r7, #28]
 800f9c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f9ca:	69bb      	ldr	r3, [r7, #24]
 800f9cc:	699b      	ldr	r3, [r3, #24]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	db04      	blt.n	800f9dc <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9d2:	69fb      	ldr	r3, [r7, #28]
 800f9d4:	f1c3 0207 	rsb	r2, r3, #7
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f9dc:	69bb      	ldr	r3, [r7, #24]
 800f9de:	6959      	ldr	r1, [r3, #20]
 800f9e0:	693a      	ldr	r2, [r7, #16]
 800f9e2:	4613      	mov	r3, r2
 800f9e4:	009b      	lsls	r3, r3, #2
 800f9e6:	4413      	add	r3, r2
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	4a1f      	ldr	r2, [pc, #124]	; (800fa68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f9ec:	4413      	add	r3, r2
 800f9ee:	4299      	cmp	r1, r3
 800f9f0:	d134      	bne.n	800fa5c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	3304      	adds	r3, #4
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fe f80b 	bl	800da12 <uxListRemove>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d115      	bne.n	800fa2e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800fa02:	69bb      	ldr	r3, [r7, #24]
 800fa04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa06:	4918      	ldr	r1, [pc, #96]	; (800fa68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800fa08:	4613      	mov	r3, r2
 800fa0a:	009b      	lsls	r3, r3, #2
 800fa0c:	4413      	add	r3, r2
 800fa0e:	009b      	lsls	r3, r3, #2
 800fa10:	440b      	add	r3, r1
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d10a      	bne.n	800fa2e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	fa02 f303 	lsl.w	r3, r2, r3
 800fa22:	43da      	mvns	r2, r3
 800fa24:	4b11      	ldr	r3, [pc, #68]	; (800fa6c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	4013      	ands	r3, r2
 800fa2a:	4a10      	ldr	r2, [pc, #64]	; (800fa6c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fa2c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa32:	2201      	movs	r2, #1
 800fa34:	409a      	lsls	r2, r3
 800fa36:	4b0d      	ldr	r3, [pc, #52]	; (800fa6c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	4a0b      	ldr	r2, [pc, #44]	; (800fa6c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800fa3e:	6013      	str	r3, [r2, #0]
 800fa40:	69bb      	ldr	r3, [r7, #24]
 800fa42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa44:	4613      	mov	r3, r2
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4413      	add	r3, r2
 800fa4a:	009b      	lsls	r3, r3, #2
 800fa4c:	4a06      	ldr	r2, [pc, #24]	; (800fa68 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800fa4e:	441a      	add	r2, r3
 800fa50:	69bb      	ldr	r3, [r7, #24]
 800fa52:	3304      	adds	r3, #4
 800fa54:	4619      	mov	r1, r3
 800fa56:	4610      	mov	r0, r2
 800fa58:	f7fd ff7e 	bl	800d958 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa5c:	bf00      	nop
 800fa5e:	3720      	adds	r7, #32
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	20006310 	.word	0x20006310
 800fa68:	20006314 	.word	0x20006314
 800fa6c:	20006418 	.word	0x20006418

0800fa70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fa70:	b480      	push	{r7}
 800fa72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fa74:	4b07      	ldr	r3, [pc, #28]	; (800fa94 <pvTaskIncrementMutexHeldCount+0x24>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d004      	beq.n	800fa86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fa7c:	4b05      	ldr	r3, [pc, #20]	; (800fa94 <pvTaskIncrementMutexHeldCount+0x24>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fa82:	3201      	adds	r2, #1
 800fa84:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800fa86:	4b03      	ldr	r3, [pc, #12]	; (800fa94 <pvTaskIncrementMutexHeldCount+0x24>)
 800fa88:	681b      	ldr	r3, [r3, #0]
	}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr
 800fa94:	20006310 	.word	0x20006310

0800fa98 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800faa2:	4b29      	ldr	r3, [pc, #164]	; (800fb48 <prvAddCurrentTaskToDelayedList+0xb0>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800faa8:	4b28      	ldr	r3, [pc, #160]	; (800fb4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	3304      	adds	r3, #4
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fd ffaf 	bl	800da12 <uxListRemove>
 800fab4:	4603      	mov	r3, r0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d10b      	bne.n	800fad2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800faba:	4b24      	ldr	r3, [pc, #144]	; (800fb4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac0:	2201      	movs	r2, #1
 800fac2:	fa02 f303 	lsl.w	r3, r2, r3
 800fac6:	43da      	mvns	r2, r3
 800fac8:	4b21      	ldr	r3, [pc, #132]	; (800fb50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4013      	ands	r3, r2
 800face:	4a20      	ldr	r2, [pc, #128]	; (800fb50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fad0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad8:	d10a      	bne.n	800faf0 <prvAddCurrentTaskToDelayedList+0x58>
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d007      	beq.n	800faf0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fae0:	4b1a      	ldr	r3, [pc, #104]	; (800fb4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	3304      	adds	r3, #4
 800fae6:	4619      	mov	r1, r3
 800fae8:	481a      	ldr	r0, [pc, #104]	; (800fb54 <prvAddCurrentTaskToDelayedList+0xbc>)
 800faea:	f7fd ff35 	bl	800d958 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800faee:	e026      	b.n	800fb3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800faf0:	68fa      	ldr	r2, [r7, #12]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4413      	add	r3, r2
 800faf6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800faf8:	4b14      	ldr	r3, [pc, #80]	; (800fb4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	68ba      	ldr	r2, [r7, #8]
 800fafe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fb00:	68ba      	ldr	r2, [r7, #8]
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d209      	bcs.n	800fb1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb08:	4b13      	ldr	r3, [pc, #76]	; (800fb58 <prvAddCurrentTaskToDelayedList+0xc0>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	4b0f      	ldr	r3, [pc, #60]	; (800fb4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	3304      	adds	r3, #4
 800fb12:	4619      	mov	r1, r3
 800fb14:	4610      	mov	r0, r2
 800fb16:	f7fd ff43 	bl	800d9a0 <vListInsert>
}
 800fb1a:	e010      	b.n	800fb3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb1c:	4b0f      	ldr	r3, [pc, #60]	; (800fb5c <prvAddCurrentTaskToDelayedList+0xc4>)
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	4b0a      	ldr	r3, [pc, #40]	; (800fb4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	3304      	adds	r3, #4
 800fb26:	4619      	mov	r1, r3
 800fb28:	4610      	mov	r0, r2
 800fb2a:	f7fd ff39 	bl	800d9a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fb2e:	4b0c      	ldr	r3, [pc, #48]	; (800fb60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	68ba      	ldr	r2, [r7, #8]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d202      	bcs.n	800fb3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fb38:	4a09      	ldr	r2, [pc, #36]	; (800fb60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	6013      	str	r3, [r2, #0]
}
 800fb3e:	bf00      	nop
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	20006414 	.word	0x20006414
 800fb4c:	20006310 	.word	0x20006310
 800fb50:	20006418 	.word	0x20006418
 800fb54:	200063fc 	.word	0x200063fc
 800fb58:	200063cc 	.word	0x200063cc
 800fb5c:	200063c8 	.word	0x200063c8
 800fb60:	20006430 	.word	0x20006430

0800fb64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fb64:	b480      	push	{r7}
 800fb66:	b085      	sub	sp, #20
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	60b9      	str	r1, [r7, #8]
 800fb6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	3b04      	subs	r3, #4
 800fb74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fb7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	3b04      	subs	r3, #4
 800fb82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	f023 0201 	bic.w	r2, r3, #1
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	3b04      	subs	r3, #4
 800fb92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb94:	4a0c      	ldr	r2, [pc, #48]	; (800fbc8 <pxPortInitialiseStack+0x64>)
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	3b14      	subs	r3, #20
 800fb9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	3b04      	subs	r3, #4
 800fbaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f06f 0202 	mvn.w	r2, #2
 800fbb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	3b20      	subs	r3, #32
 800fbb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fbba:	68fb      	ldr	r3, [r7, #12]
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3714      	adds	r7, #20
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr
 800fbc8:	0800fbcd 	.word	0x0800fbcd

0800fbcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b085      	sub	sp, #20
 800fbd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fbd6:	4b14      	ldr	r3, [pc, #80]	; (800fc28 <prvTaskExitError+0x5c>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbde:	d00c      	beq.n	800fbfa <prvTaskExitError+0x2e>
	__asm volatile
 800fbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe4:	b672      	cpsid	i
 800fbe6:	f383 8811 	msr	BASEPRI, r3
 800fbea:	f3bf 8f6f 	isb	sy
 800fbee:	f3bf 8f4f 	dsb	sy
 800fbf2:	b662      	cpsie	i
 800fbf4:	60fb      	str	r3, [r7, #12]
}
 800fbf6:	bf00      	nop
 800fbf8:	e7fe      	b.n	800fbf8 <prvTaskExitError+0x2c>
	__asm volatile
 800fbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbfe:	b672      	cpsid	i
 800fc00:	f383 8811 	msr	BASEPRI, r3
 800fc04:	f3bf 8f6f 	isb	sy
 800fc08:	f3bf 8f4f 	dsb	sy
 800fc0c:	b662      	cpsie	i
 800fc0e:	60bb      	str	r3, [r7, #8]
}
 800fc10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fc12:	bf00      	nop
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d0fc      	beq.n	800fc14 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fc1a:	bf00      	nop
 800fc1c:	bf00      	nop
 800fc1e:	3714      	adds	r7, #20
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr
 800fc28:	20000020 	.word	0x20000020
 800fc2c:	00000000 	.word	0x00000000

0800fc30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fc30:	4b07      	ldr	r3, [pc, #28]	; (800fc50 <pxCurrentTCBConst2>)
 800fc32:	6819      	ldr	r1, [r3, #0]
 800fc34:	6808      	ldr	r0, [r1, #0]
 800fc36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc3a:	f380 8809 	msr	PSP, r0
 800fc3e:	f3bf 8f6f 	isb	sy
 800fc42:	f04f 0000 	mov.w	r0, #0
 800fc46:	f380 8811 	msr	BASEPRI, r0
 800fc4a:	4770      	bx	lr
 800fc4c:	f3af 8000 	nop.w

0800fc50 <pxCurrentTCBConst2>:
 800fc50:	20006310 	.word	0x20006310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fc54:	bf00      	nop
 800fc56:	bf00      	nop

0800fc58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fc58:	4808      	ldr	r0, [pc, #32]	; (800fc7c <prvPortStartFirstTask+0x24>)
 800fc5a:	6800      	ldr	r0, [r0, #0]
 800fc5c:	6800      	ldr	r0, [r0, #0]
 800fc5e:	f380 8808 	msr	MSP, r0
 800fc62:	f04f 0000 	mov.w	r0, #0
 800fc66:	f380 8814 	msr	CONTROL, r0
 800fc6a:	b662      	cpsie	i
 800fc6c:	b661      	cpsie	f
 800fc6e:	f3bf 8f4f 	dsb	sy
 800fc72:	f3bf 8f6f 	isb	sy
 800fc76:	df00      	svc	0
 800fc78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fc7a:	bf00      	nop
 800fc7c:	e000ed08 	.word	0xe000ed08

0800fc80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc86:	4b37      	ldr	r3, [pc, #220]	; (800fd64 <xPortStartScheduler+0xe4>)
 800fc88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	22ff      	movs	r2, #255	; 0xff
 800fc96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fca0:	78fb      	ldrb	r3, [r7, #3]
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fca8:	b2da      	uxtb	r2, r3
 800fcaa:	4b2f      	ldr	r3, [pc, #188]	; (800fd68 <xPortStartScheduler+0xe8>)
 800fcac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fcae:	4b2f      	ldr	r3, [pc, #188]	; (800fd6c <xPortStartScheduler+0xec>)
 800fcb0:	2207      	movs	r2, #7
 800fcb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fcb4:	e009      	b.n	800fcca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800fcb6:	4b2d      	ldr	r3, [pc, #180]	; (800fd6c <xPortStartScheduler+0xec>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	3b01      	subs	r3, #1
 800fcbc:	4a2b      	ldr	r2, [pc, #172]	; (800fd6c <xPortStartScheduler+0xec>)
 800fcbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fcc0:	78fb      	ldrb	r3, [r7, #3]
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	005b      	lsls	r3, r3, #1
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fcca:	78fb      	ldrb	r3, [r7, #3]
 800fccc:	b2db      	uxtb	r3, r3
 800fcce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcd2:	2b80      	cmp	r3, #128	; 0x80
 800fcd4:	d0ef      	beq.n	800fcb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fcd6:	4b25      	ldr	r3, [pc, #148]	; (800fd6c <xPortStartScheduler+0xec>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	f1c3 0307 	rsb	r3, r3, #7
 800fcde:	2b04      	cmp	r3, #4
 800fce0:	d00c      	beq.n	800fcfc <xPortStartScheduler+0x7c>
	__asm volatile
 800fce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce6:	b672      	cpsid	i
 800fce8:	f383 8811 	msr	BASEPRI, r3
 800fcec:	f3bf 8f6f 	isb	sy
 800fcf0:	f3bf 8f4f 	dsb	sy
 800fcf4:	b662      	cpsie	i
 800fcf6:	60bb      	str	r3, [r7, #8]
}
 800fcf8:	bf00      	nop
 800fcfa:	e7fe      	b.n	800fcfa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fcfc:	4b1b      	ldr	r3, [pc, #108]	; (800fd6c <xPortStartScheduler+0xec>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	021b      	lsls	r3, r3, #8
 800fd02:	4a1a      	ldr	r2, [pc, #104]	; (800fd6c <xPortStartScheduler+0xec>)
 800fd04:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fd06:	4b19      	ldr	r3, [pc, #100]	; (800fd6c <xPortStartScheduler+0xec>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fd0e:	4a17      	ldr	r2, [pc, #92]	; (800fd6c <xPortStartScheduler+0xec>)
 800fd10:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	b2da      	uxtb	r2, r3
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fd1a:	4b15      	ldr	r3, [pc, #84]	; (800fd70 <xPortStartScheduler+0xf0>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4a14      	ldr	r2, [pc, #80]	; (800fd70 <xPortStartScheduler+0xf0>)
 800fd20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fd24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fd26:	4b12      	ldr	r3, [pc, #72]	; (800fd70 <xPortStartScheduler+0xf0>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	4a11      	ldr	r2, [pc, #68]	; (800fd70 <xPortStartScheduler+0xf0>)
 800fd2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fd30:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fd32:	f000 f8dd 	bl	800fef0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fd36:	4b0f      	ldr	r3, [pc, #60]	; (800fd74 <xPortStartScheduler+0xf4>)
 800fd38:	2200      	movs	r2, #0
 800fd3a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fd3c:	f000 f8fc 	bl	800ff38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fd40:	4b0d      	ldr	r3, [pc, #52]	; (800fd78 <xPortStartScheduler+0xf8>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	4a0c      	ldr	r2, [pc, #48]	; (800fd78 <xPortStartScheduler+0xf8>)
 800fd46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fd4a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fd4c:	f7ff ff84 	bl	800fc58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fd50:	f7ff fa76 	bl	800f240 <vTaskSwitchContext>
	prvTaskExitError();
 800fd54:	f7ff ff3a 	bl	800fbcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fd58:	2300      	movs	r3, #0
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3710      	adds	r7, #16
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}
 800fd62:	bf00      	nop
 800fd64:	e000e400 	.word	0xe000e400
 800fd68:	2000643c 	.word	0x2000643c
 800fd6c:	20006440 	.word	0x20006440
 800fd70:	e000ed20 	.word	0xe000ed20
 800fd74:	20000020 	.word	0x20000020
 800fd78:	e000ef34 	.word	0xe000ef34

0800fd7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
	__asm volatile
 800fd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd86:	b672      	cpsid	i
 800fd88:	f383 8811 	msr	BASEPRI, r3
 800fd8c:	f3bf 8f6f 	isb	sy
 800fd90:	f3bf 8f4f 	dsb	sy
 800fd94:	b662      	cpsie	i
 800fd96:	607b      	str	r3, [r7, #4]
}
 800fd98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd9a:	4b10      	ldr	r3, [pc, #64]	; (800fddc <vPortEnterCritical+0x60>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	3301      	adds	r3, #1
 800fda0:	4a0e      	ldr	r2, [pc, #56]	; (800fddc <vPortEnterCritical+0x60>)
 800fda2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fda4:	4b0d      	ldr	r3, [pc, #52]	; (800fddc <vPortEnterCritical+0x60>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d111      	bne.n	800fdd0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fdac:	4b0c      	ldr	r3, [pc, #48]	; (800fde0 <vPortEnterCritical+0x64>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d00c      	beq.n	800fdd0 <vPortEnterCritical+0x54>
	__asm volatile
 800fdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdba:	b672      	cpsid	i
 800fdbc:	f383 8811 	msr	BASEPRI, r3
 800fdc0:	f3bf 8f6f 	isb	sy
 800fdc4:	f3bf 8f4f 	dsb	sy
 800fdc8:	b662      	cpsie	i
 800fdca:	603b      	str	r3, [r7, #0]
}
 800fdcc:	bf00      	nop
 800fdce:	e7fe      	b.n	800fdce <vPortEnterCritical+0x52>
	}
}
 800fdd0:	bf00      	nop
 800fdd2:	370c      	adds	r7, #12
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr
 800fddc:	20000020 	.word	0x20000020
 800fde0:	e000ed04 	.word	0xe000ed04

0800fde4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fde4:	b480      	push	{r7}
 800fde6:	b083      	sub	sp, #12
 800fde8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fdea:	4b13      	ldr	r3, [pc, #76]	; (800fe38 <vPortExitCritical+0x54>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d10c      	bne.n	800fe0c <vPortExitCritical+0x28>
	__asm volatile
 800fdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf6:	b672      	cpsid	i
 800fdf8:	f383 8811 	msr	BASEPRI, r3
 800fdfc:	f3bf 8f6f 	isb	sy
 800fe00:	f3bf 8f4f 	dsb	sy
 800fe04:	b662      	cpsie	i
 800fe06:	607b      	str	r3, [r7, #4]
}
 800fe08:	bf00      	nop
 800fe0a:	e7fe      	b.n	800fe0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800fe0c:	4b0a      	ldr	r3, [pc, #40]	; (800fe38 <vPortExitCritical+0x54>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	3b01      	subs	r3, #1
 800fe12:	4a09      	ldr	r2, [pc, #36]	; (800fe38 <vPortExitCritical+0x54>)
 800fe14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fe16:	4b08      	ldr	r3, [pc, #32]	; (800fe38 <vPortExitCritical+0x54>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d105      	bne.n	800fe2a <vPortExitCritical+0x46>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	f383 8811 	msr	BASEPRI, r3
}
 800fe28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fe2a:	bf00      	nop
 800fe2c:	370c      	adds	r7, #12
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop
 800fe38:	20000020 	.word	0x20000020
 800fe3c:	00000000 	.word	0x00000000

0800fe40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fe40:	f3ef 8009 	mrs	r0, PSP
 800fe44:	f3bf 8f6f 	isb	sy
 800fe48:	4b15      	ldr	r3, [pc, #84]	; (800fea0 <pxCurrentTCBConst>)
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	f01e 0f10 	tst.w	lr, #16
 800fe50:	bf08      	it	eq
 800fe52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fe56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe5a:	6010      	str	r0, [r2, #0]
 800fe5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fe64:	b672      	cpsid	i
 800fe66:	f380 8811 	msr	BASEPRI, r0
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	f3bf 8f6f 	isb	sy
 800fe72:	b662      	cpsie	i
 800fe74:	f7ff f9e4 	bl	800f240 <vTaskSwitchContext>
 800fe78:	f04f 0000 	mov.w	r0, #0
 800fe7c:	f380 8811 	msr	BASEPRI, r0
 800fe80:	bc09      	pop	{r0, r3}
 800fe82:	6819      	ldr	r1, [r3, #0]
 800fe84:	6808      	ldr	r0, [r1, #0]
 800fe86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe8a:	f01e 0f10 	tst.w	lr, #16
 800fe8e:	bf08      	it	eq
 800fe90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe94:	f380 8809 	msr	PSP, r0
 800fe98:	f3bf 8f6f 	isb	sy
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop

0800fea0 <pxCurrentTCBConst>:
 800fea0:	20006310 	.word	0x20006310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fea4:	bf00      	nop
 800fea6:	bf00      	nop

0800fea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb2:	b672      	cpsid	i
 800feb4:	f383 8811 	msr	BASEPRI, r3
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	b662      	cpsie	i
 800fec2:	607b      	str	r3, [r7, #4]
}
 800fec4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fec6:	f7ff f901 	bl	800f0cc <xTaskIncrementTick>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d003      	beq.n	800fed8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fed0:	4b06      	ldr	r3, [pc, #24]	; (800feec <SysTick_Handler+0x44>)
 800fed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fed6:	601a      	str	r2, [r3, #0]
 800fed8:	2300      	movs	r3, #0
 800feda:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	f383 8811 	msr	BASEPRI, r3
}
 800fee2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fee4:	bf00      	nop
 800fee6:	3708      	adds	r7, #8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	e000ed04 	.word	0xe000ed04

0800fef0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fef0:	b480      	push	{r7}
 800fef2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fef4:	4b0b      	ldr	r3, [pc, #44]	; (800ff24 <vPortSetupTimerInterrupt+0x34>)
 800fef6:	2200      	movs	r2, #0
 800fef8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fefa:	4b0b      	ldr	r3, [pc, #44]	; (800ff28 <vPortSetupTimerInterrupt+0x38>)
 800fefc:	2200      	movs	r2, #0
 800fefe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ff00:	4b0a      	ldr	r3, [pc, #40]	; (800ff2c <vPortSetupTimerInterrupt+0x3c>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	4a0a      	ldr	r2, [pc, #40]	; (800ff30 <vPortSetupTimerInterrupt+0x40>)
 800ff06:	fba2 2303 	umull	r2, r3, r2, r3
 800ff0a:	099b      	lsrs	r3, r3, #6
 800ff0c:	4a09      	ldr	r2, [pc, #36]	; (800ff34 <vPortSetupTimerInterrupt+0x44>)
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ff12:	4b04      	ldr	r3, [pc, #16]	; (800ff24 <vPortSetupTimerInterrupt+0x34>)
 800ff14:	2207      	movs	r2, #7
 800ff16:	601a      	str	r2, [r3, #0]
}
 800ff18:	bf00      	nop
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	e000e010 	.word	0xe000e010
 800ff28:	e000e018 	.word	0xe000e018
 800ff2c:	20000000 	.word	0x20000000
 800ff30:	10624dd3 	.word	0x10624dd3
 800ff34:	e000e014 	.word	0xe000e014

0800ff38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ff38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ff48 <vPortEnableVFP+0x10>
 800ff3c:	6801      	ldr	r1, [r0, #0]
 800ff3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ff42:	6001      	str	r1, [r0, #0]
 800ff44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ff46:	bf00      	nop
 800ff48:	e000ed88 	.word	0xe000ed88

0800ff4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ff52:	f3ef 8305 	mrs	r3, IPSR
 800ff56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2b0f      	cmp	r3, #15
 800ff5c:	d916      	bls.n	800ff8c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ff5e:	4a19      	ldr	r2, [pc, #100]	; (800ffc4 <vPortValidateInterruptPriority+0x78>)
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	4413      	add	r3, r2
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ff68:	4b17      	ldr	r3, [pc, #92]	; (800ffc8 <vPortValidateInterruptPriority+0x7c>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	7afa      	ldrb	r2, [r7, #11]
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d20c      	bcs.n	800ff8c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ff72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff76:	b672      	cpsid	i
 800ff78:	f383 8811 	msr	BASEPRI, r3
 800ff7c:	f3bf 8f6f 	isb	sy
 800ff80:	f3bf 8f4f 	dsb	sy
 800ff84:	b662      	cpsie	i
 800ff86:	607b      	str	r3, [r7, #4]
}
 800ff88:	bf00      	nop
 800ff8a:	e7fe      	b.n	800ff8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff8c:	4b0f      	ldr	r3, [pc, #60]	; (800ffcc <vPortValidateInterruptPriority+0x80>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ff94:	4b0e      	ldr	r3, [pc, #56]	; (800ffd0 <vPortValidateInterruptPriority+0x84>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d90c      	bls.n	800ffb6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ff9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa0:	b672      	cpsid	i
 800ffa2:	f383 8811 	msr	BASEPRI, r3
 800ffa6:	f3bf 8f6f 	isb	sy
 800ffaa:	f3bf 8f4f 	dsb	sy
 800ffae:	b662      	cpsie	i
 800ffb0:	603b      	str	r3, [r7, #0]
}
 800ffb2:	bf00      	nop
 800ffb4:	e7fe      	b.n	800ffb4 <vPortValidateInterruptPriority+0x68>
	}
 800ffb6:	bf00      	nop
 800ffb8:	3714      	adds	r7, #20
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop
 800ffc4:	e000e3f0 	.word	0xe000e3f0
 800ffc8:	2000643c 	.word	0x2000643c
 800ffcc:	e000ed0c 	.word	0xe000ed0c
 800ffd0:	20006440 	.word	0x20006440

0800ffd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b08a      	sub	sp, #40	; 0x28
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ffe0:	f7fe ffa6 	bl	800ef30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ffe4:	4b5b      	ldr	r3, [pc, #364]	; (8010154 <pvPortMalloc+0x180>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d101      	bne.n	800fff0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ffec:	f000 f91a 	bl	8010224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fff0:	4b59      	ldr	r3, [pc, #356]	; (8010158 <pvPortMalloc+0x184>)
 800fff2:	681a      	ldr	r2, [r3, #0]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	4013      	ands	r3, r2
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	f040 8092 	bne.w	8010122 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d01f      	beq.n	8010044 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010004:	2208      	movs	r2, #8
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	4413      	add	r3, r2
 801000a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f003 0307 	and.w	r3, r3, #7
 8010012:	2b00      	cmp	r3, #0
 8010014:	d016      	beq.n	8010044 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f023 0307 	bic.w	r3, r3, #7
 801001c:	3308      	adds	r3, #8
 801001e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f003 0307 	and.w	r3, r3, #7
 8010026:	2b00      	cmp	r3, #0
 8010028:	d00c      	beq.n	8010044 <pvPortMalloc+0x70>
	__asm volatile
 801002a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002e:	b672      	cpsid	i
 8010030:	f383 8811 	msr	BASEPRI, r3
 8010034:	f3bf 8f6f 	isb	sy
 8010038:	f3bf 8f4f 	dsb	sy
 801003c:	b662      	cpsie	i
 801003e:	617b      	str	r3, [r7, #20]
}
 8010040:	bf00      	nop
 8010042:	e7fe      	b.n	8010042 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d06b      	beq.n	8010122 <pvPortMalloc+0x14e>
 801004a:	4b44      	ldr	r3, [pc, #272]	; (801015c <pvPortMalloc+0x188>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	429a      	cmp	r2, r3
 8010052:	d866      	bhi.n	8010122 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010054:	4b42      	ldr	r3, [pc, #264]	; (8010160 <pvPortMalloc+0x18c>)
 8010056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010058:	4b41      	ldr	r3, [pc, #260]	; (8010160 <pvPortMalloc+0x18c>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801005e:	e004      	b.n	801006a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801006a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	429a      	cmp	r2, r3
 8010072:	d903      	bls.n	801007c <pvPortMalloc+0xa8>
 8010074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d1f1      	bne.n	8010060 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801007c:	4b35      	ldr	r3, [pc, #212]	; (8010154 <pvPortMalloc+0x180>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010082:	429a      	cmp	r2, r3
 8010084:	d04d      	beq.n	8010122 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010086:	6a3b      	ldr	r3, [r7, #32]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	2208      	movs	r2, #8
 801008c:	4413      	add	r3, r2
 801008e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010092:	681a      	ldr	r2, [r3, #0]
 8010094:	6a3b      	ldr	r3, [r7, #32]
 8010096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009a:	685a      	ldr	r2, [r3, #4]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	1ad2      	subs	r2, r2, r3
 80100a0:	2308      	movs	r3, #8
 80100a2:	005b      	lsls	r3, r3, #1
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d921      	bls.n	80100ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80100a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4413      	add	r3, r2
 80100ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	f003 0307 	and.w	r3, r3, #7
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d00c      	beq.n	80100d4 <pvPortMalloc+0x100>
	__asm volatile
 80100ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100be:	b672      	cpsid	i
 80100c0:	f383 8811 	msr	BASEPRI, r3
 80100c4:	f3bf 8f6f 	isb	sy
 80100c8:	f3bf 8f4f 	dsb	sy
 80100cc:	b662      	cpsie	i
 80100ce:	613b      	str	r3, [r7, #16]
}
 80100d0:	bf00      	nop
 80100d2:	e7fe      	b.n	80100d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80100d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d6:	685a      	ldr	r2, [r3, #4]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	1ad2      	subs	r2, r2, r3
 80100dc:	69bb      	ldr	r3, [r7, #24]
 80100de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80100e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e2:	687a      	ldr	r2, [r7, #4]
 80100e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80100e6:	69b8      	ldr	r0, [r7, #24]
 80100e8:	f000 f8fe 	bl	80102e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80100ec:	4b1b      	ldr	r3, [pc, #108]	; (801015c <pvPortMalloc+0x188>)
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	1ad3      	subs	r3, r2, r3
 80100f6:	4a19      	ldr	r2, [pc, #100]	; (801015c <pvPortMalloc+0x188>)
 80100f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80100fa:	4b18      	ldr	r3, [pc, #96]	; (801015c <pvPortMalloc+0x188>)
 80100fc:	681a      	ldr	r2, [r3, #0]
 80100fe:	4b19      	ldr	r3, [pc, #100]	; (8010164 <pvPortMalloc+0x190>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	429a      	cmp	r2, r3
 8010104:	d203      	bcs.n	801010e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010106:	4b15      	ldr	r3, [pc, #84]	; (801015c <pvPortMalloc+0x188>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4a16      	ldr	r2, [pc, #88]	; (8010164 <pvPortMalloc+0x190>)
 801010c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801010e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010110:	685a      	ldr	r2, [r3, #4]
 8010112:	4b11      	ldr	r3, [pc, #68]	; (8010158 <pvPortMalloc+0x184>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	431a      	orrs	r2, r3
 8010118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801011a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801011c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801011e:	2200      	movs	r2, #0
 8010120:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010122:	f7fe ff13 	bl	800ef4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	f003 0307 	and.w	r3, r3, #7
 801012c:	2b00      	cmp	r3, #0
 801012e:	d00c      	beq.n	801014a <pvPortMalloc+0x176>
	__asm volatile
 8010130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010134:	b672      	cpsid	i
 8010136:	f383 8811 	msr	BASEPRI, r3
 801013a:	f3bf 8f6f 	isb	sy
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	b662      	cpsie	i
 8010144:	60fb      	str	r3, [r7, #12]
}
 8010146:	bf00      	nop
 8010148:	e7fe      	b.n	8010148 <pvPortMalloc+0x174>
	return pvReturn;
 801014a:	69fb      	ldr	r3, [r7, #28]
}
 801014c:	4618      	mov	r0, r3
 801014e:	3728      	adds	r7, #40	; 0x28
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	2000a04c 	.word	0x2000a04c
 8010158:	2000a058 	.word	0x2000a058
 801015c:	2000a050 	.word	0x2000a050
 8010160:	2000a044 	.word	0x2000a044
 8010164:	2000a054 	.word	0x2000a054

08010168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b086      	sub	sp, #24
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d04c      	beq.n	8010214 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801017a:	2308      	movs	r3, #8
 801017c:	425b      	negs	r3, r3
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	4413      	add	r3, r2
 8010182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	685a      	ldr	r2, [r3, #4]
 801018c:	4b23      	ldr	r3, [pc, #140]	; (801021c <vPortFree+0xb4>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4013      	ands	r3, r2
 8010192:	2b00      	cmp	r3, #0
 8010194:	d10c      	bne.n	80101b0 <vPortFree+0x48>
	__asm volatile
 8010196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801019a:	b672      	cpsid	i
 801019c:	f383 8811 	msr	BASEPRI, r3
 80101a0:	f3bf 8f6f 	isb	sy
 80101a4:	f3bf 8f4f 	dsb	sy
 80101a8:	b662      	cpsie	i
 80101aa:	60fb      	str	r3, [r7, #12]
}
 80101ac:	bf00      	nop
 80101ae:	e7fe      	b.n	80101ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d00c      	beq.n	80101d2 <vPortFree+0x6a>
	__asm volatile
 80101b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101bc:	b672      	cpsid	i
 80101be:	f383 8811 	msr	BASEPRI, r3
 80101c2:	f3bf 8f6f 	isb	sy
 80101c6:	f3bf 8f4f 	dsb	sy
 80101ca:	b662      	cpsie	i
 80101cc:	60bb      	str	r3, [r7, #8]
}
 80101ce:	bf00      	nop
 80101d0:	e7fe      	b.n	80101d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	685a      	ldr	r2, [r3, #4]
 80101d6:	4b11      	ldr	r3, [pc, #68]	; (801021c <vPortFree+0xb4>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	4013      	ands	r3, r2
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d019      	beq.n	8010214 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d115      	bne.n	8010214 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	685a      	ldr	r2, [r3, #4]
 80101ec:	4b0b      	ldr	r3, [pc, #44]	; (801021c <vPortFree+0xb4>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	43db      	mvns	r3, r3
 80101f2:	401a      	ands	r2, r3
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80101f8:	f7fe fe9a 	bl	800ef30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	685a      	ldr	r2, [r3, #4]
 8010200:	4b07      	ldr	r3, [pc, #28]	; (8010220 <vPortFree+0xb8>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4413      	add	r3, r2
 8010206:	4a06      	ldr	r2, [pc, #24]	; (8010220 <vPortFree+0xb8>)
 8010208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801020a:	6938      	ldr	r0, [r7, #16]
 801020c:	f000 f86c 	bl	80102e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010210:	f7fe fe9c 	bl	800ef4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010214:	bf00      	nop
 8010216:	3718      	adds	r7, #24
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	2000a058 	.word	0x2000a058
 8010220:	2000a050 	.word	0x2000a050

08010224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010224:	b480      	push	{r7}
 8010226:	b085      	sub	sp, #20
 8010228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801022a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801022e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010230:	4b27      	ldr	r3, [pc, #156]	; (80102d0 <prvHeapInit+0xac>)
 8010232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f003 0307 	and.w	r3, r3, #7
 801023a:	2b00      	cmp	r3, #0
 801023c:	d00c      	beq.n	8010258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	3307      	adds	r3, #7
 8010242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	f023 0307 	bic.w	r3, r3, #7
 801024a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801024c:	68ba      	ldr	r2, [r7, #8]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	1ad3      	subs	r3, r2, r3
 8010252:	4a1f      	ldr	r2, [pc, #124]	; (80102d0 <prvHeapInit+0xac>)
 8010254:	4413      	add	r3, r2
 8010256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801025c:	4a1d      	ldr	r2, [pc, #116]	; (80102d4 <prvHeapInit+0xb0>)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010262:	4b1c      	ldr	r3, [pc, #112]	; (80102d4 <prvHeapInit+0xb0>)
 8010264:	2200      	movs	r2, #0
 8010266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	68ba      	ldr	r2, [r7, #8]
 801026c:	4413      	add	r3, r2
 801026e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010270:	2208      	movs	r2, #8
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	1a9b      	subs	r3, r3, r2
 8010276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f023 0307 	bic.w	r3, r3, #7
 801027e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	4a15      	ldr	r2, [pc, #84]	; (80102d8 <prvHeapInit+0xb4>)
 8010284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010286:	4b14      	ldr	r3, [pc, #80]	; (80102d8 <prvHeapInit+0xb4>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	2200      	movs	r2, #0
 801028c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801028e:	4b12      	ldr	r3, [pc, #72]	; (80102d8 <prvHeapInit+0xb4>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	2200      	movs	r2, #0
 8010294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	68fa      	ldr	r2, [r7, #12]
 801029e:	1ad2      	subs	r2, r2, r3
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80102a4:	4b0c      	ldr	r3, [pc, #48]	; (80102d8 <prvHeapInit+0xb4>)
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	4a0a      	ldr	r2, [pc, #40]	; (80102dc <prvHeapInit+0xb8>)
 80102b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	4a09      	ldr	r2, [pc, #36]	; (80102e0 <prvHeapInit+0xbc>)
 80102ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80102bc:	4b09      	ldr	r3, [pc, #36]	; (80102e4 <prvHeapInit+0xc0>)
 80102be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80102c2:	601a      	str	r2, [r3, #0]
}
 80102c4:	bf00      	nop
 80102c6:	3714      	adds	r7, #20
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr
 80102d0:	20006444 	.word	0x20006444
 80102d4:	2000a044 	.word	0x2000a044
 80102d8:	2000a04c 	.word	0x2000a04c
 80102dc:	2000a054 	.word	0x2000a054
 80102e0:	2000a050 	.word	0x2000a050
 80102e4:	2000a058 	.word	0x2000a058

080102e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80102e8:	b480      	push	{r7}
 80102ea:	b085      	sub	sp, #20
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80102f0:	4b28      	ldr	r3, [pc, #160]	; (8010394 <prvInsertBlockIntoFreeList+0xac>)
 80102f2:	60fb      	str	r3, [r7, #12]
 80102f4:	e002      	b.n	80102fc <prvInsertBlockIntoFreeList+0x14>
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	60fb      	str	r3, [r7, #12]
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	429a      	cmp	r2, r3
 8010304:	d8f7      	bhi.n	80102f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	4413      	add	r3, r2
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	429a      	cmp	r2, r3
 8010316:	d108      	bne.n	801032a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	441a      	add	r2, r3
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	68ba      	ldr	r2, [r7, #8]
 8010334:	441a      	add	r2, r3
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	429a      	cmp	r2, r3
 801033c:	d118      	bne.n	8010370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	4b15      	ldr	r3, [pc, #84]	; (8010398 <prvInsertBlockIntoFreeList+0xb0>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	429a      	cmp	r2, r3
 8010348:	d00d      	beq.n	8010366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	685a      	ldr	r2, [r3, #4]
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	685b      	ldr	r3, [r3, #4]
 8010354:	441a      	add	r2, r3
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	681a      	ldr	r2, [r3, #0]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	601a      	str	r2, [r3, #0]
 8010364:	e008      	b.n	8010378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010366:	4b0c      	ldr	r3, [pc, #48]	; (8010398 <prvInsertBlockIntoFreeList+0xb0>)
 8010368:	681a      	ldr	r2, [r3, #0]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	601a      	str	r2, [r3, #0]
 801036e:	e003      	b.n	8010378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	681a      	ldr	r2, [r3, #0]
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010378:	68fa      	ldr	r2, [r7, #12]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	429a      	cmp	r2, r3
 801037e:	d002      	beq.n	8010386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010386:	bf00      	nop
 8010388:	3714      	adds	r7, #20
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop
 8010394:	2000a044 	.word	0x2000a044
 8010398:	2000a04c 	.word	0x2000a04c

0801039c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	330c      	adds	r3, #12
 80103ac:	461a      	mov	r2, r3
 80103ae:	6839      	ldr	r1, [r7, #0]
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f002 fa6f 	bl	8012894 <tcpip_send_msg_wait_sem>
 80103b6:	4603      	mov	r3, r0
 80103b8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80103ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d103      	bne.n	80103ca <netconn_apimsg+0x2e>
    return apimsg->err;
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80103c8:	e001      	b.n	80103ce <netconn_apimsg+0x32>
  }
  return err;
 80103ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
	...

080103d8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b08c      	sub	sp, #48	; 0x30
 80103dc:	af00      	add	r7, sp, #0
 80103de:	4603      	mov	r3, r0
 80103e0:	603a      	str	r2, [r7, #0]
 80103e2:	71fb      	strb	r3, [r7, #7]
 80103e4:	460b      	mov	r3, r1
 80103e6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80103e8:	79fb      	ldrb	r3, [r7, #7]
 80103ea:	6839      	ldr	r1, [r7, #0]
 80103ec:	4618      	mov	r0, r3
 80103ee:	f001 f923 	bl	8011638 <netconn_alloc>
 80103f2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80103f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d054      	beq.n	80104a4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80103fa:	79bb      	ldrb	r3, [r7, #6]
 80103fc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80103fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010400:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8010402:	f107 0308 	add.w	r3, r7, #8
 8010406:	4619      	mov	r1, r3
 8010408:	4829      	ldr	r0, [pc, #164]	; (80104b0 <netconn_new_with_proto_and_callback+0xd8>)
 801040a:	f7ff ffc7 	bl	801039c <netconn_apimsg>
 801040e:	4603      	mov	r3, r0
 8010410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8010414:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010418:	2b00      	cmp	r3, #0
 801041a:	d043      	beq.n	80104a4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 801041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d005      	beq.n	8010430 <netconn_new_with_proto_and_callback+0x58>
 8010424:	4b23      	ldr	r3, [pc, #140]	; (80104b4 <netconn_new_with_proto_and_callback+0xdc>)
 8010426:	22a3      	movs	r2, #163	; 0xa3
 8010428:	4923      	ldr	r1, [pc, #140]	; (80104b8 <netconn_new_with_proto_and_callback+0xe0>)
 801042a:	4824      	ldr	r0, [pc, #144]	; (80104bc <netconn_new_with_proto_and_callback+0xe4>)
 801042c:	f00d ffa2 	bl	801e374 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010432:	3310      	adds	r3, #16
 8010434:	4618      	mov	r0, r3
 8010436:	f00d fb0a 	bl	801da4e <sys_mbox_valid>
 801043a:	4603      	mov	r3, r0
 801043c:	2b00      	cmp	r3, #0
 801043e:	d105      	bne.n	801044c <netconn_new_with_proto_and_callback+0x74>
 8010440:	4b1c      	ldr	r3, [pc, #112]	; (80104b4 <netconn_new_with_proto_and_callback+0xdc>)
 8010442:	22a4      	movs	r2, #164	; 0xa4
 8010444:	491e      	ldr	r1, [pc, #120]	; (80104c0 <netconn_new_with_proto_and_callback+0xe8>)
 8010446:	481d      	ldr	r0, [pc, #116]	; (80104bc <netconn_new_with_proto_and_callback+0xe4>)
 8010448:	f00d ff94 	bl	801e374 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 801044c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044e:	3314      	adds	r3, #20
 8010450:	4618      	mov	r0, r3
 8010452:	f00d fafc 	bl	801da4e <sys_mbox_valid>
 8010456:	4603      	mov	r3, r0
 8010458:	2b00      	cmp	r3, #0
 801045a:	d005      	beq.n	8010468 <netconn_new_with_proto_and_callback+0x90>
 801045c:	4b15      	ldr	r3, [pc, #84]	; (80104b4 <netconn_new_with_proto_and_callback+0xdc>)
 801045e:	22a6      	movs	r2, #166	; 0xa6
 8010460:	4918      	ldr	r1, [pc, #96]	; (80104c4 <netconn_new_with_proto_and_callback+0xec>)
 8010462:	4816      	ldr	r0, [pc, #88]	; (80104bc <netconn_new_with_proto_and_callback+0xe4>)
 8010464:	f00d ff86 	bl	801e374 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046a:	330c      	adds	r3, #12
 801046c:	4618      	mov	r0, r3
 801046e:	f00d fb7f 	bl	801db70 <sys_sem_valid>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	d105      	bne.n	8010484 <netconn_new_with_proto_and_callback+0xac>
 8010478:	4b0e      	ldr	r3, [pc, #56]	; (80104b4 <netconn_new_with_proto_and_callback+0xdc>)
 801047a:	22a9      	movs	r2, #169	; 0xa9
 801047c:	4912      	ldr	r1, [pc, #72]	; (80104c8 <netconn_new_with_proto_and_callback+0xf0>)
 801047e:	480f      	ldr	r0, [pc, #60]	; (80104bc <netconn_new_with_proto_and_callback+0xe4>)
 8010480:	f00d ff78 	bl	801e374 <iprintf>
      sys_sem_free(&conn->op_completed);
 8010484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010486:	330c      	adds	r3, #12
 8010488:	4618      	mov	r0, r3
 801048a:	f00d fb64 	bl	801db56 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010490:	3310      	adds	r3, #16
 8010492:	4618      	mov	r0, r3
 8010494:	f00d fa54 	bl	801d940 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010498:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801049a:	2007      	movs	r0, #7
 801049c:	f002 ffa8 	bl	80133f0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80104a0:	2300      	movs	r3, #0
 80104a2:	e000      	b.n	80104a6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80104a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3730      	adds	r7, #48	; 0x30
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
 80104ae:	bf00      	nop
 80104b0:	0801160d 	.word	0x0801160d
 80104b4:	0801fd00 	.word	0x0801fd00
 80104b8:	0801fd34 	.word	0x0801fd34
 80104bc:	0801fd58 	.word	0x0801fd58
 80104c0:	0801fd80 	.word	0x0801fd80
 80104c4:	0801fd98 	.word	0x0801fd98
 80104c8:	0801fdbc 	.word	0x0801fdbc

080104cc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b08c      	sub	sp, #48	; 0x30
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d101      	bne.n	80104de <netconn_prepare_delete+0x12>
    return ERR_OK;
 80104da:	2300      	movs	r3, #0
 80104dc:	e014      	b.n	8010508 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80104e2:	2329      	movs	r3, #41	; 0x29
 80104e4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80104e6:	f107 030c 	add.w	r3, r7, #12
 80104ea:	4619      	mov	r1, r3
 80104ec:	4808      	ldr	r0, [pc, #32]	; (8010510 <netconn_prepare_delete+0x44>)
 80104ee:	f7ff ff55 	bl	801039c <netconn_apimsg>
 80104f2:	4603      	mov	r3, r0
 80104f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80104f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d002      	beq.n	8010506 <netconn_prepare_delete+0x3a>
    return err;
 8010500:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010504:	e000      	b.n	8010508 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010506:	2300      	movs	r3, #0
}
 8010508:	4618      	mov	r0, r3
 801050a:	3730      	adds	r7, #48	; 0x30
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	08011b71 	.word	0x08011b71

08010514 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d101      	bne.n	8010526 <netconn_delete+0x12>
    return ERR_OK;
 8010522:	2300      	movs	r3, #0
 8010524:	e00d      	b.n	8010542 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7ff ffd0 	bl	80104cc <netconn_prepare_delete>
 801052c:	4603      	mov	r3, r0
 801052e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8010530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d102      	bne.n	801053e <netconn_delete+0x2a>
    netconn_free(conn);
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f001 f8e7 	bl	801170c <netconn_free>
  }
  return err;
 801053e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010542:	4618      	mov	r0, r3
 8010544:	3710      	adds	r7, #16
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
	...

0801054c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b08e      	sub	sp, #56	; 0x38
 8010550:	af00      	add	r7, sp, #0
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	4613      	mov	r3, r2
 8010558:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d109      	bne.n	8010574 <netconn_bind+0x28>
 8010560:	4b11      	ldr	r3, [pc, #68]	; (80105a8 <netconn_bind+0x5c>)
 8010562:	f44f 729c 	mov.w	r2, #312	; 0x138
 8010566:	4911      	ldr	r1, [pc, #68]	; (80105ac <netconn_bind+0x60>)
 8010568:	4811      	ldr	r0, [pc, #68]	; (80105b0 <netconn_bind+0x64>)
 801056a:	f00d ff03 	bl	801e374 <iprintf>
 801056e:	f06f 030f 	mvn.w	r3, #15
 8010572:	e015      	b.n	80105a0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d101      	bne.n	801057e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 801057a:	4b0e      	ldr	r3, [pc, #56]	; (80105b4 <netconn_bind+0x68>)
 801057c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8010586:	88fb      	ldrh	r3, [r7, #6]
 8010588:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 801058a:	f107 0314 	add.w	r3, r7, #20
 801058e:	4619      	mov	r1, r3
 8010590:	4809      	ldr	r0, [pc, #36]	; (80105b8 <netconn_bind+0x6c>)
 8010592:	f7ff ff03 	bl	801039c <netconn_apimsg>
 8010596:	4603      	mov	r3, r0
 8010598:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 801059c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3738      	adds	r7, #56	; 0x38
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}
 80105a8:	0801fd00 	.word	0x0801fd00
 80105ac:	0801fe38 	.word	0x0801fe38
 80105b0:	0801fd58 	.word	0x0801fd58
 80105b4:	080234dc 	.word	0x080234dc
 80105b8:	08011d39 	.word	0x08011d39

080105bc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b08c      	sub	sp, #48	; 0x30
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	460b      	mov	r3, r1
 80105c6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d109      	bne.n	80105e2 <netconn_listen_with_backlog+0x26>
 80105ce:	4b0d      	ldr	r3, [pc, #52]	; (8010604 <netconn_listen_with_backlog+0x48>)
 80105d0:	f240 12bb 	movw	r2, #443	; 0x1bb
 80105d4:	490c      	ldr	r1, [pc, #48]	; (8010608 <netconn_listen_with_backlog+0x4c>)
 80105d6:	480d      	ldr	r0, [pc, #52]	; (801060c <netconn_listen_with_backlog+0x50>)
 80105d8:	f00d fecc 	bl	801e374 <iprintf>
 80105dc:	f06f 030f 	mvn.w	r3, #15
 80105e0:	e00c      	b.n	80105fc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80105e6:	f107 030c 	add.w	r3, r7, #12
 80105ea:	4619      	mov	r1, r3
 80105ec:	4808      	ldr	r0, [pc, #32]	; (8010610 <netconn_listen_with_backlog+0x54>)
 80105ee:	f7ff fed5 	bl	801039c <netconn_apimsg>
 80105f2:	4603      	mov	r3, r0
 80105f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80105f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3730      	adds	r7, #48	; 0x30
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	0801fd00 	.word	0x0801fd00
 8010608:	0801feb8 	.word	0x0801feb8
 801060c:	0801fd58 	.word	0x0801fd58
 8010610:	08011dad 	.word	0x08011dad

08010614 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b086      	sub	sp, #24
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d109      	bne.n	8010638 <netconn_accept+0x24>
 8010624:	4b3d      	ldr	r3, [pc, #244]	; (801071c <netconn_accept+0x108>)
 8010626:	f240 12e1 	movw	r2, #481	; 0x1e1
 801062a:	493d      	ldr	r1, [pc, #244]	; (8010720 <netconn_accept+0x10c>)
 801062c:	483d      	ldr	r0, [pc, #244]	; (8010724 <netconn_accept+0x110>)
 801062e:	f00d fea1 	bl	801e374 <iprintf>
 8010632:	f06f 030f 	mvn.w	r3, #15
 8010636:	e06c      	b.n	8010712 <netconn_accept+0xfe>
  *new_conn = NULL;
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	2200      	movs	r2, #0
 801063c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d109      	bne.n	8010658 <netconn_accept+0x44>
 8010644:	4b35      	ldr	r3, [pc, #212]	; (801071c <netconn_accept+0x108>)
 8010646:	f240 12e3 	movw	r2, #483	; 0x1e3
 801064a:	4937      	ldr	r1, [pc, #220]	; (8010728 <netconn_accept+0x114>)
 801064c:	4835      	ldr	r0, [pc, #212]	; (8010724 <netconn_accept+0x110>)
 801064e:	f00d fe91 	bl	801e374 <iprintf>
 8010652:	f06f 030f 	mvn.w	r3, #15
 8010656:	e05c      	b.n	8010712 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f000 fb6c 	bl	8010d36 <netconn_err>
 801065e:	4603      	mov	r3, r0
 8010660:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8010662:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d002      	beq.n	8010670 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 801066a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801066e:	e050      	b.n	8010712 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	3314      	adds	r3, #20
 8010674:	4618      	mov	r0, r3
 8010676:	f00d f9ea 	bl	801da4e <sys_mbox_valid>
 801067a:	4603      	mov	r3, r0
 801067c:	2b00      	cmp	r3, #0
 801067e:	d005      	beq.n	801068c <netconn_accept+0x78>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	7e1b      	ldrb	r3, [r3, #24]
 8010684:	f003 0301 	and.w	r3, r3, #1
 8010688:	2b00      	cmp	r3, #0
 801068a:	d002      	beq.n	8010692 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 801068c:	f06f 030e 	mvn.w	r3, #14
 8010690:	e03f      	b.n	8010712 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	7e1b      	ldrb	r3, [r3, #24]
 8010696:	f003 0302 	and.w	r3, r3, #2
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00e      	beq.n	80106bc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	3314      	adds	r3, #20
 80106a2:	f107 020c 	add.w	r2, r7, #12
 80106a6:	4611      	mov	r1, r2
 80106a8:	4618      	mov	r0, r3
 80106aa:	f00d f9b4 	bl	801da16 <sys_arch_mbox_tryfetch>
 80106ae:	4603      	mov	r3, r0
 80106b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b4:	d10a      	bne.n	80106cc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80106b6:	f06f 0306 	mvn.w	r3, #6
 80106ba:	e02a      	b.n	8010712 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	3314      	adds	r3, #20
 80106c0:	f107 010c 	add.w	r1, r7, #12
 80106c4:	2200      	movs	r2, #0
 80106c6:	4618      	mov	r0, r3
 80106c8:	f00d f966 	bl	801d998 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6a1b      	ldr	r3, [r3, #32]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d005      	beq.n	80106e0 <netconn_accept+0xcc>
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6a1b      	ldr	r3, [r3, #32]
 80106d8:	2200      	movs	r2, #0
 80106da:	2101      	movs	r1, #1
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f107 0213 	add.w	r2, r7, #19
 80106e6:	4611      	mov	r1, r2
 80106e8:	4618      	mov	r0, r3
 80106ea:	f000 fb75 	bl	8010dd8 <lwip_netconn_is_err_msg>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d002      	beq.n	80106fa <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80106f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106f8:	e00b      	b.n	8010712 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d102      	bne.n	8010706 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8010700:	f06f 030e 	mvn.w	r3, #14
 8010704:	e005      	b.n	8010712 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	697a      	ldr	r2, [r7, #20]
 801070e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8010710:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8010712:	4618      	mov	r0, r3
 8010714:	3718      	adds	r7, #24
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	0801fd00 	.word	0x0801fd00
 8010720:	0801fed8 	.word	0x0801fed8
 8010724:	0801fd58 	.word	0x0801fd58
 8010728:	0801fef8 	.word	0x0801fef8

0801072c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b088      	sub	sp, #32
 8010730:	af00      	add	r7, sp, #0
 8010732:	60f8      	str	r0, [r7, #12]
 8010734:	60b9      	str	r1, [r7, #8]
 8010736:	4613      	mov	r3, r2
 8010738:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801073a:	2300      	movs	r3, #0
 801073c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d109      	bne.n	8010758 <netconn_recv_data+0x2c>
 8010744:	4b58      	ldr	r3, [pc, #352]	; (80108a8 <netconn_recv_data+0x17c>)
 8010746:	f44f 7212 	mov.w	r2, #584	; 0x248
 801074a:	4958      	ldr	r1, [pc, #352]	; (80108ac <netconn_recv_data+0x180>)
 801074c:	4858      	ldr	r0, [pc, #352]	; (80108b0 <netconn_recv_data+0x184>)
 801074e:	f00d fe11 	bl	801e374 <iprintf>
 8010752:	f06f 030f 	mvn.w	r3, #15
 8010756:	e0a2      	b.n	801089e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	2200      	movs	r2, #0
 801075c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d109      	bne.n	8010778 <netconn_recv_data+0x4c>
 8010764:	4b50      	ldr	r3, [pc, #320]	; (80108a8 <netconn_recv_data+0x17c>)
 8010766:	f240 224a 	movw	r2, #586	; 0x24a
 801076a:	4952      	ldr	r1, [pc, #328]	; (80108b4 <netconn_recv_data+0x188>)
 801076c:	4850      	ldr	r0, [pc, #320]	; (80108b0 <netconn_recv_data+0x184>)
 801076e:	f00d fe01 	bl	801e374 <iprintf>
 8010772:	f06f 030f 	mvn.w	r3, #15
 8010776:	e092      	b.n	801089e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	3310      	adds	r3, #16
 801077c:	4618      	mov	r0, r3
 801077e:	f00d f966 	bl	801da4e <sys_mbox_valid>
 8010782:	4603      	mov	r3, r0
 8010784:	2b00      	cmp	r3, #0
 8010786:	d10e      	bne.n	80107a6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	f000 fad4 	bl	8010d36 <netconn_err>
 801078e:	4603      	mov	r3, r0
 8010790:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8010792:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d002      	beq.n	80107a0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801079a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801079e:	e07e      	b.n	801089e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80107a0:	f06f 030a 	mvn.w	r3, #10
 80107a4:	e07b      	b.n	801089e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	7e1b      	ldrb	r3, [r3, #24]
 80107aa:	f003 0302 	and.w	r3, r3, #2
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d10f      	bne.n	80107d2 <netconn_recv_data+0xa6>
 80107b2:	79fb      	ldrb	r3, [r7, #7]
 80107b4:	f003 0304 	and.w	r3, r3, #4
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d10a      	bne.n	80107d2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	7e1b      	ldrb	r3, [r3, #24]
 80107c0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d104      	bne.n	80107d2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d023      	beq.n	801081a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	3310      	adds	r3, #16
 80107d6:	f107 0218 	add.w	r2, r7, #24
 80107da:	4611      	mov	r1, r2
 80107dc:	4618      	mov	r0, r3
 80107de:	f00d f91a 	bl	801da16 <sys_arch_mbox_tryfetch>
 80107e2:	4603      	mov	r3, r0
 80107e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107e8:	d11f      	bne.n	801082a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80107ea:	68f8      	ldr	r0, [r7, #12]
 80107ec:	f000 faa3 	bl	8010d36 <netconn_err>
 80107f0:	4603      	mov	r3, r0
 80107f2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80107f4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d002      	beq.n	8010802 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80107fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010800:	e04d      	b.n	801089e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	7e1b      	ldrb	r3, [r3, #24]
 8010806:	f003 0301 	and.w	r3, r3, #1
 801080a:	2b00      	cmp	r3, #0
 801080c:	d002      	beq.n	8010814 <netconn_recv_data+0xe8>
        return ERR_CONN;
 801080e:	f06f 030a 	mvn.w	r3, #10
 8010812:	e044      	b.n	801089e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8010814:	f06f 0306 	mvn.w	r3, #6
 8010818:	e041      	b.n	801089e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	3310      	adds	r3, #16
 801081e:	f107 0118 	add.w	r1, r7, #24
 8010822:	2200      	movs	r2, #0
 8010824:	4618      	mov	r0, r3
 8010826:	f00d f8b7 	bl	801d998 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010832:	2b10      	cmp	r3, #16
 8010834:	d117      	bne.n	8010866 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8010836:	69bb      	ldr	r3, [r7, #24]
 8010838:	f107 0217 	add.w	r2, r7, #23
 801083c:	4611      	mov	r1, r2
 801083e:	4618      	mov	r0, r3
 8010840:	f000 faca 	bl	8010dd8 <lwip_netconn_is_err_msg>
 8010844:	4603      	mov	r3, r0
 8010846:	2b00      	cmp	r3, #0
 8010848:	d009      	beq.n	801085e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 801084a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801084e:	f113 0f0f 	cmn.w	r3, #15
 8010852:	d101      	bne.n	8010858 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8010854:	2300      	movs	r3, #0
 8010856:	e022      	b.n	801089e <netconn_recv_data+0x172>
      }
      return err;
 8010858:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801085c:	e01f      	b.n	801089e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 801085e:	69bb      	ldr	r3, [r7, #24]
 8010860:	891b      	ldrh	r3, [r3, #8]
 8010862:	83fb      	strh	r3, [r7, #30]
 8010864:	e00d      	b.n	8010882 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8010866:	69bb      	ldr	r3, [r7, #24]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d106      	bne.n	801087a <netconn_recv_data+0x14e>
 801086c:	4b0e      	ldr	r3, [pc, #56]	; (80108a8 <netconn_recv_data+0x17c>)
 801086e:	f240 2291 	movw	r2, #657	; 0x291
 8010872:	4911      	ldr	r1, [pc, #68]	; (80108b8 <netconn_recv_data+0x18c>)
 8010874:	480e      	ldr	r0, [pc, #56]	; (80108b0 <netconn_recv_data+0x184>)
 8010876:	f00d fd7d 	bl	801e374 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801087a:	69bb      	ldr	r3, [r7, #24]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	891b      	ldrh	r3, [r3, #8]
 8010880:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	6a1b      	ldr	r3, [r3, #32]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d005      	beq.n	8010896 <netconn_recv_data+0x16a>
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	6a1b      	ldr	r3, [r3, #32]
 801088e:	8bfa      	ldrh	r2, [r7, #30]
 8010890:	2101      	movs	r1, #1
 8010892:	68f8      	ldr	r0, [r7, #12]
 8010894:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8010896:	69ba      	ldr	r2, [r7, #24]
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801089c:	2300      	movs	r3, #0
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3720      	adds	r7, #32
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
 80108a6:	bf00      	nop
 80108a8:	0801fd00 	.word	0x0801fd00
 80108ac:	0801ff18 	.word	0x0801ff18
 80108b0:	0801fd58 	.word	0x0801fd58
 80108b4:	0801ff38 	.word	0x0801ff38
 80108b8:	0801ff54 	.word	0x0801ff54

080108bc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b084      	sub	sp, #16
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	60f8      	str	r0, [r7, #12]
 80108c4:	60b9      	str	r1, [r7, #8]
 80108c6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d005      	beq.n	80108da <netconn_tcp_recvd_msg+0x1e>
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80108d6:	2b10      	cmp	r3, #16
 80108d8:	d009      	beq.n	80108ee <netconn_tcp_recvd_msg+0x32>
 80108da:	4b0c      	ldr	r3, [pc, #48]	; (801090c <netconn_tcp_recvd_msg+0x50>)
 80108dc:	f240 22a7 	movw	r2, #679	; 0x2a7
 80108e0:	490b      	ldr	r1, [pc, #44]	; (8010910 <netconn_tcp_recvd_msg+0x54>)
 80108e2:	480c      	ldr	r0, [pc, #48]	; (8010914 <netconn_tcp_recvd_msg+0x58>)
 80108e4:	f00d fd46 	bl	801e374 <iprintf>
 80108e8:	f06f 030f 	mvn.w	r3, #15
 80108ec:	e00a      	b.n	8010904 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	68fa      	ldr	r2, [r7, #12]
 80108f2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	68ba      	ldr	r2, [r7, #8]
 80108f8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80108fa:	6879      	ldr	r1, [r7, #4]
 80108fc:	4806      	ldr	r0, [pc, #24]	; (8010918 <netconn_tcp_recvd_msg+0x5c>)
 80108fe:	f7ff fd4d 	bl	801039c <netconn_apimsg>
 8010902:	4603      	mov	r3, r0
}
 8010904:	4618      	mov	r0, r3
 8010906:	3710      	adds	r7, #16
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}
 801090c:	0801fd00 	.word	0x0801fd00
 8010910:	0801ff60 	.word	0x0801ff60
 8010914:	0801fd58 	.word	0x0801fd58
 8010918:	08011edd 	.word	0x08011edd

0801091c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b090      	sub	sp, #64	; 0x40
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	4613      	mov	r3, r2
 8010928:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	3310      	adds	r3, #16
 801092e:	4618      	mov	r0, r3
 8010930:	f00d f88d 	bl	801da4e <sys_mbox_valid>
 8010934:	4603      	mov	r3, r0
 8010936:	2b00      	cmp	r3, #0
 8010938:	d102      	bne.n	8010940 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 801093a:	f06f 030a 	mvn.w	r3, #10
 801093e:	e06d      	b.n	8010a1c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	7e1b      	ldrb	r3, [r3, #24]
 8010944:	b25b      	sxtb	r3, r3
 8010946:	2b00      	cmp	r3, #0
 8010948:	da07      	bge.n	801095a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	7e1b      	ldrb	r3, [r3, #24]
 801094e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010952:	b2da      	uxtb	r2, r3
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	761a      	strb	r2, [r3, #24]
    goto handle_fin;
 8010958:	e039      	b.n	80109ce <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 801095a:	79fb      	ldrb	r3, [r7, #7]
 801095c:	461a      	mov	r2, r3
 801095e:	68b9      	ldr	r1, [r7, #8]
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f7ff fee3 	bl	801072c <netconn_recv_data>
 8010966:	4603      	mov	r3, r0
 8010968:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 801096c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010970:	2b00      	cmp	r3, #0
 8010972:	d002      	beq.n	801097a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8010974:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010978:	e050      	b.n	8010a1c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8010980:	79fb      	ldrb	r3, [r7, #7]
 8010982:	f003 0308 	and.w	r3, r3, #8
 8010986:	2b00      	cmp	r3, #0
 8010988:	d10e      	bne.n	80109a8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 801098a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098c:	2b00      	cmp	r3, #0
 801098e:	d002      	beq.n	8010996 <netconn_recv_data_tcp+0x7a>
 8010990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010992:	891b      	ldrh	r3, [r3, #8]
 8010994:	e000      	b.n	8010998 <netconn_recv_data_tcp+0x7c>
 8010996:	2301      	movs	r3, #1
 8010998:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 801099a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801099c:	f107 0214 	add.w	r2, r7, #20
 80109a0:	4619      	mov	r1, r3
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f7ff ff8a 	bl	80108bc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80109a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d134      	bne.n	8010a18 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80109ae:	79fb      	ldrb	r3, [r7, #7]
 80109b0:	f003 0310 	and.w	r3, r3, #16
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d009      	beq.n	80109cc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	7e1b      	ldrb	r3, [r3, #24]
 80109bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80109c0:	b2da      	uxtb	r2, r3
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	761a      	strb	r2, [r3, #24]
      return ERR_WOULDBLOCK;
 80109c6:	f06f 0306 	mvn.w	r3, #6
 80109ca:	e027      	b.n	8010a1c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80109cc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	6a1b      	ldr	r3, [r3, #32]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d005      	beq.n	80109e2 <netconn_recv_data_tcp+0xc6>
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	6a1b      	ldr	r3, [r3, #32]
 80109da:	2200      	movs	r2, #0
 80109dc:	2101      	movs	r1, #1
 80109de:	68f8      	ldr	r0, [r7, #12]
 80109e0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d10f      	bne.n	8010a0a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	f000 f9a3 	bl	8010d36 <netconn_err>
 80109f0:	4603      	mov	r3, r0
 80109f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80109f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d002      	beq.n	8010a04 <netconn_recv_data_tcp+0xe8>
          return err;
 80109fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010a02:	e00b      	b.n	8010a1c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8010a04:	f06f 030d 	mvn.w	r3, #13
 8010a08:	e008      	b.n	8010a1c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8010a0a:	2101      	movs	r1, #1
 8010a0c:	68f8      	ldr	r0, [r7, #12]
 8010a0e:	f000 f955 	bl	8010cbc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8010a12:	f06f 030e 	mvn.w	r3, #14
 8010a16:	e001      	b.n	8010a1c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8010a18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3740      	adds	r7, #64	; 0x40
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}

08010a24 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b086      	sub	sp, #24
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d109      	bne.n	8010a4c <netconn_recv+0x28>
 8010a38:	4b32      	ldr	r3, [pc, #200]	; (8010b04 <netconn_recv+0xe0>)
 8010a3a:	f240 3263 	movw	r2, #867	; 0x363
 8010a3e:	4932      	ldr	r1, [pc, #200]	; (8010b08 <netconn_recv+0xe4>)
 8010a40:	4832      	ldr	r0, [pc, #200]	; (8010b0c <netconn_recv+0xe8>)
 8010a42:	f00d fc97 	bl	801e374 <iprintf>
 8010a46:	f06f 030f 	mvn.w	r3, #15
 8010a4a:	e056      	b.n	8010afa <netconn_recv+0xd6>
  *new_buf = NULL;
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d109      	bne.n	8010a6c <netconn_recv+0x48>
 8010a58:	4b2a      	ldr	r3, [pc, #168]	; (8010b04 <netconn_recv+0xe0>)
 8010a5a:	f240 3265 	movw	r2, #869	; 0x365
 8010a5e:	492c      	ldr	r1, [pc, #176]	; (8010b10 <netconn_recv+0xec>)
 8010a60:	482a      	ldr	r0, [pc, #168]	; (8010b0c <netconn_recv+0xe8>)
 8010a62:	f00d fc87 	bl	801e374 <iprintf>
 8010a66:	f06f 030f 	mvn.w	r3, #15
 8010a6a:	e046      	b.n	8010afa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a74:	2b10      	cmp	r3, #16
 8010a76:	d13a      	bne.n	8010aee <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8010a7c:	2006      	movs	r0, #6
 8010a7e:	f002 fc41 	bl	8013304 <memp_malloc>
 8010a82:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d102      	bne.n	8010a90 <netconn_recv+0x6c>
      return ERR_MEM;
 8010a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a8e:	e034      	b.n	8010afa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8010a90:	f107 030c 	add.w	r3, r7, #12
 8010a94:	2200      	movs	r2, #0
 8010a96:	4619      	mov	r1, r3
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7ff ff3f 	bl	801091c <netconn_recv_data_tcp>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010aa2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d006      	beq.n	8010ab8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8010aaa:	6979      	ldr	r1, [r7, #20]
 8010aac:	2006      	movs	r0, #6
 8010aae:	f002 fc9f 	bl	80133f0 <memp_free>
      return err;
 8010ab2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ab6:	e020      	b.n	8010afa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d106      	bne.n	8010acc <netconn_recv+0xa8>
 8010abe:	4b11      	ldr	r3, [pc, #68]	; (8010b04 <netconn_recv+0xe0>)
 8010ac0:	f240 3279 	movw	r2, #889	; 0x379
 8010ac4:	4913      	ldr	r1, [pc, #76]	; (8010b14 <netconn_recv+0xf0>)
 8010ac6:	4811      	ldr	r0, [pc, #68]	; (8010b0c <netconn_recv+0xe8>)
 8010ac8:	f00d fc54 	bl	801e374 <iprintf>

    buf->p = p;
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010ad2:	68fa      	ldr	r2, [r7, #12]
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	2200      	movs	r2, #0
 8010adc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	697a      	ldr	r2, [r7, #20]
 8010ae8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8010aea:	2300      	movs	r3, #0
 8010aec:	e005      	b.n	8010afa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8010aee:	2200      	movs	r2, #0
 8010af0:	6839      	ldr	r1, [r7, #0]
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f7ff fe1a 	bl	801072c <netconn_recv_data>
 8010af8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3718      	adds	r7, #24
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	0801fd00 	.word	0x0801fd00
 8010b08:	0801ff18 	.word	0x0801ff18
 8010b0c:	0801fd58 	.word	0x0801fd58
 8010b10:	0801ff38 	.word	0x0801ff38
 8010b14:	0801ffb0 	.word	0x0801ffb0

08010b18 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b088      	sub	sp, #32
 8010b1c:	af02      	add	r7, sp, #8
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	607a      	str	r2, [r7, #4]
 8010b24:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8010b2e:	78fa      	ldrb	r2, [r7, #3]
 8010b30:	f107 0110 	add.w	r1, r7, #16
 8010b34:	6a3b      	ldr	r3, [r7, #32]
 8010b36:	9300      	str	r3, [sp, #0]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	68f8      	ldr	r0, [r7, #12]
 8010b3e:	f000 f805 	bl	8010b4c <netconn_write_vectors_partly>
 8010b42:	4603      	mov	r3, r0
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3718      	adds	r7, #24
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b092      	sub	sp, #72	; 0x48
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	4611      	mov	r1, r2
 8010b58:	461a      	mov	r2, r3
 8010b5a:	460b      	mov	r3, r1
 8010b5c:	80fb      	strh	r3, [r7, #6]
 8010b5e:	4613      	mov	r3, r2
 8010b60:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d109      	bne.n	8010b7c <netconn_write_vectors_partly+0x30>
 8010b68:	4b4e      	ldr	r3, [pc, #312]	; (8010ca4 <netconn_write_vectors_partly+0x158>)
 8010b6a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010b6e:	494e      	ldr	r1, [pc, #312]	; (8010ca8 <netconn_write_vectors_partly+0x15c>)
 8010b70:	484e      	ldr	r0, [pc, #312]	; (8010cac <netconn_write_vectors_partly+0x160>)
 8010b72:	f00d fbff 	bl	801e374 <iprintf>
 8010b76:	f06f 030f 	mvn.w	r3, #15
 8010b7a:	e08e      	b.n	8010c9a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b84:	2b10      	cmp	r3, #16
 8010b86:	d009      	beq.n	8010b9c <netconn_write_vectors_partly+0x50>
 8010b88:	4b46      	ldr	r3, [pc, #280]	; (8010ca4 <netconn_write_vectors_partly+0x158>)
 8010b8a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8010b8e:	4948      	ldr	r1, [pc, #288]	; (8010cb0 <netconn_write_vectors_partly+0x164>)
 8010b90:	4846      	ldr	r0, [pc, #280]	; (8010cac <netconn_write_vectors_partly+0x160>)
 8010b92:	f00d fbef 	bl	801e374 <iprintf>
 8010b96:	f06f 0305 	mvn.w	r3, #5
 8010b9a:	e07e      	b.n	8010c9a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	7e1b      	ldrb	r3, [r3, #24]
 8010ba0:	f003 0302 	and.w	r3, r3, #2
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d104      	bne.n	8010bb2 <netconn_write_vectors_partly+0x66>
 8010ba8:	797b      	ldrb	r3, [r7, #5]
 8010baa:	f003 0304 	and.w	r3, r3, #4
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d001      	beq.n	8010bb6 <netconn_write_vectors_partly+0x6a>
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	e000      	b.n	8010bb8 <netconn_write_vectors_partly+0x6c>
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8010bbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d005      	beq.n	8010bd0 <netconn_write_vectors_partly+0x84>
 8010bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d102      	bne.n	8010bd0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8010bca:	f06f 0305 	mvn.w	r3, #5
 8010bce:	e064      	b.n	8010c9a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8010bd8:	e015      	b.n	8010c06 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8010bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bdc:	00db      	lsls	r3, r3, #3
 8010bde:	68ba      	ldr	r2, [r7, #8]
 8010be0:	4413      	add	r3, r2
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010be6:	4413      	add	r3, r2
 8010be8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8010bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bec:	00db      	lsls	r3, r3, #3
 8010bee:	68ba      	ldr	r2, [r7, #8]
 8010bf0:	4413      	add	r3, r2
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	d202      	bcs.n	8010c00 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8010bfa:	f06f 0305 	mvn.w	r3, #5
 8010bfe:	e04c      	b.n	8010c9a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8010c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c02:	3301      	adds	r3, #1
 8010c04:	643b      	str	r3, [r7, #64]	; 0x40
 8010c06:	88fb      	ldrh	r3, [r7, #6]
 8010c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	dbe5      	blt.n	8010bda <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8010c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d101      	bne.n	8010c18 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8010c14:	2300      	movs	r3, #0
 8010c16:	e040      	b.n	8010c9a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8010c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	da0a      	bge.n	8010c34 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8010c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d102      	bne.n	8010c2a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8010c24:	f06f 0305 	mvn.w	r3, #5
 8010c28:	e037      	b.n	8010c9a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8010c2a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010c2e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8010c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c32:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8010c3c:	88fb      	ldrh	r3, [r7, #6]
 8010c3e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8010c40:	2300      	movs	r3, #0
 8010c42:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8010c44:	797b      	ldrb	r3, [r7, #5]
 8010c46:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8010c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8010c52:	f107 0314 	add.w	r3, r7, #20
 8010c56:	4619      	mov	r1, r3
 8010c58:	4816      	ldr	r0, [pc, #88]	; (8010cb4 <netconn_write_vectors_partly+0x168>)
 8010c5a:	f7ff fb9f 	bl	801039c <netconn_apimsg>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8010c64:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d114      	bne.n	8010c96 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8010c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d002      	beq.n	8010c78 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8010c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c76:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8010c78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d10a      	bne.n	8010c96 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8010c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d006      	beq.n	8010c96 <netconn_write_vectors_partly+0x14a>
 8010c88:	4b06      	ldr	r3, [pc, #24]	; (8010ca4 <netconn_write_vectors_partly+0x158>)
 8010c8a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010c8e:	490a      	ldr	r1, [pc, #40]	; (8010cb8 <netconn_write_vectors_partly+0x16c>)
 8010c90:	4806      	ldr	r0, [pc, #24]	; (8010cac <netconn_write_vectors_partly+0x160>)
 8010c92:	f00d fb6f 	bl	801e374 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8010c96:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3748      	adds	r7, #72	; 0x48
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
 8010ca2:	bf00      	nop
 8010ca4:	0801fd00 	.word	0x0801fd00
 8010ca8:	0801ffd8 	.word	0x0801ffd8
 8010cac:	0801fd58 	.word	0x0801fd58
 8010cb0:	0801fff4 	.word	0x0801fff4
 8010cb4:	080122e1 	.word	0x080122e1
 8010cb8:	08020018 	.word	0x08020018

08010cbc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b08c      	sub	sp, #48	; 0x30
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d109      	bne.n	8010ce2 <netconn_close_shutdown+0x26>
 8010cce:	4b0f      	ldr	r3, [pc, #60]	; (8010d0c <netconn_close_shutdown+0x50>)
 8010cd0:	f240 4247 	movw	r2, #1095	; 0x447
 8010cd4:	490e      	ldr	r1, [pc, #56]	; (8010d10 <netconn_close_shutdown+0x54>)
 8010cd6:	480f      	ldr	r0, [pc, #60]	; (8010d14 <netconn_close_shutdown+0x58>)
 8010cd8:	f00d fb4c 	bl	801e374 <iprintf>
 8010cdc:	f06f 030f 	mvn.w	r3, #15
 8010ce0:	e010      	b.n	8010d04 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8010ce6:	78fb      	ldrb	r3, [r7, #3]
 8010ce8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010cea:	2329      	movs	r3, #41	; 0x29
 8010cec:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8010cee:	f107 030c 	add.w	r3, r7, #12
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	4808      	ldr	r0, [pc, #32]	; (8010d18 <netconn_close_shutdown+0x5c>)
 8010cf6:	f7ff fb51 	bl	801039c <netconn_apimsg>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010d00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	3730      	adds	r7, #48	; 0x30
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	0801fd00 	.word	0x0801fd00
 8010d10:	0802003c 	.word	0x0802003c
 8010d14:	0801fd58 	.word	0x0801fd58
 8010d18:	080123f9 	.word	0x080123f9

08010d1c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8010d24:	2103      	movs	r1, #3
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f7ff ffc8 	bl	8010cbc <netconn_close_shutdown>
 8010d2c:	4603      	mov	r3, r0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3708      	adds	r7, #8
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b084      	sub	sp, #16
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d101      	bne.n	8010d48 <netconn_err+0x12>
    return ERR_OK;
 8010d44:	2300      	movs	r3, #0
 8010d46:	e00d      	b.n	8010d64 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8010d48:	f00c ff9c 	bl	801dc84 <sys_arch_protect>
 8010d4c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	7a1b      	ldrb	r3, [r3, #8]
 8010d52:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2200      	movs	r2, #0
 8010d58:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f00c ffa0 	bl	801dca0 <sys_arch_unprotect>
  return err;
 8010d60:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3710      	adds	r7, #16
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	4603      	mov	r3, r0
 8010d74:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8010d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d7a:	f113 0f0d 	cmn.w	r3, #13
 8010d7e:	d009      	beq.n	8010d94 <lwip_netconn_err_to_msg+0x28>
 8010d80:	f113 0f0d 	cmn.w	r3, #13
 8010d84:	dc0c      	bgt.n	8010da0 <lwip_netconn_err_to_msg+0x34>
 8010d86:	f113 0f0f 	cmn.w	r3, #15
 8010d8a:	d007      	beq.n	8010d9c <lwip_netconn_err_to_msg+0x30>
 8010d8c:	f113 0f0e 	cmn.w	r3, #14
 8010d90:	d002      	beq.n	8010d98 <lwip_netconn_err_to_msg+0x2c>
 8010d92:	e005      	b.n	8010da0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8010d94:	4b0a      	ldr	r3, [pc, #40]	; (8010dc0 <lwip_netconn_err_to_msg+0x54>)
 8010d96:	e00e      	b.n	8010db6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8010d98:	4b0a      	ldr	r3, [pc, #40]	; (8010dc4 <lwip_netconn_err_to_msg+0x58>)
 8010d9a:	e00c      	b.n	8010db6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8010d9c:	4b0a      	ldr	r3, [pc, #40]	; (8010dc8 <lwip_netconn_err_to_msg+0x5c>)
 8010d9e:	e00a      	b.n	8010db6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8010da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d005      	beq.n	8010db4 <lwip_netconn_err_to_msg+0x48>
 8010da8:	4b08      	ldr	r3, [pc, #32]	; (8010dcc <lwip_netconn_err_to_msg+0x60>)
 8010daa:	227d      	movs	r2, #125	; 0x7d
 8010dac:	4908      	ldr	r1, [pc, #32]	; (8010dd0 <lwip_netconn_err_to_msg+0x64>)
 8010dae:	4809      	ldr	r0, [pc, #36]	; (8010dd4 <lwip_netconn_err_to_msg+0x68>)
 8010db0:	f00d fae0 	bl	801e374 <iprintf>
      return NULL;
 8010db4:	2300      	movs	r3, #0
  }
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3708      	adds	r7, #8
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	080233c8 	.word	0x080233c8
 8010dc4:	080233c9 	.word	0x080233c9
 8010dc8:	080233ca 	.word	0x080233ca
 8010dcc:	08020058 	.word	0x08020058
 8010dd0:	0802008c 	.word	0x0802008c
 8010dd4:	0802009c 	.word	0x0802009c

08010dd8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d105      	bne.n	8010df4 <lwip_netconn_is_err_msg+0x1c>
 8010de8:	4b12      	ldr	r3, [pc, #72]	; (8010e34 <lwip_netconn_is_err_msg+0x5c>)
 8010dea:	2285      	movs	r2, #133	; 0x85
 8010dec:	4912      	ldr	r1, [pc, #72]	; (8010e38 <lwip_netconn_is_err_msg+0x60>)
 8010dee:	4813      	ldr	r0, [pc, #76]	; (8010e3c <lwip_netconn_is_err_msg+0x64>)
 8010df0:	f00d fac0 	bl	801e374 <iprintf>

  if (msg == &netconn_aborted) {
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	4a12      	ldr	r2, [pc, #72]	; (8010e40 <lwip_netconn_is_err_msg+0x68>)
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d104      	bne.n	8010e06 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	22f3      	movs	r2, #243	; 0xf3
 8010e00:	701a      	strb	r2, [r3, #0]
    return 1;
 8010e02:	2301      	movs	r3, #1
 8010e04:	e012      	b.n	8010e2c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	4a0e      	ldr	r2, [pc, #56]	; (8010e44 <lwip_netconn_is_err_msg+0x6c>)
 8010e0a:	4293      	cmp	r3, r2
 8010e0c:	d104      	bne.n	8010e18 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	22f2      	movs	r2, #242	; 0xf2
 8010e12:	701a      	strb	r2, [r3, #0]
    return 1;
 8010e14:	2301      	movs	r3, #1
 8010e16:	e009      	b.n	8010e2c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	4a0b      	ldr	r2, [pc, #44]	; (8010e48 <lwip_netconn_is_err_msg+0x70>)
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d104      	bne.n	8010e2a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	22f1      	movs	r2, #241	; 0xf1
 8010e24:	701a      	strb	r2, [r3, #0]
    return 1;
 8010e26:	2301      	movs	r3, #1
 8010e28:	e000      	b.n	8010e2c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8010e2a:	2300      	movs	r3, #0
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}
 8010e34:	08020058 	.word	0x08020058
 8010e38:	080200c4 	.word	0x080200c4
 8010e3c:	0802009c 	.word	0x0802009c
 8010e40:	080233c8 	.word	0x080233c8
 8010e44:	080233c9 	.word	0x080233c9
 8010e48:	080233ca 	.word	0x080233ca

08010e4c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b088      	sub	sp, #32
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	607a      	str	r2, [r7, #4]
 8010e58:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d105      	bne.n	8010e6c <recv_udp+0x20>
 8010e60:	4b34      	ldr	r3, [pc, #208]	; (8010f34 <recv_udp+0xe8>)
 8010e62:	22e5      	movs	r2, #229	; 0xe5
 8010e64:	4934      	ldr	r1, [pc, #208]	; (8010f38 <recv_udp+0xec>)
 8010e66:	4835      	ldr	r0, [pc, #212]	; (8010f3c <recv_udp+0xf0>)
 8010e68:	f00d fa84 	bl	801e374 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d105      	bne.n	8010e7e <recv_udp+0x32>
 8010e72:	4b30      	ldr	r3, [pc, #192]	; (8010f34 <recv_udp+0xe8>)
 8010e74:	22e6      	movs	r2, #230	; 0xe6
 8010e76:	4932      	ldr	r1, [pc, #200]	; (8010f40 <recv_udp+0xf4>)
 8010e78:	4830      	ldr	r0, [pc, #192]	; (8010f3c <recv_udp+0xf0>)
 8010e7a:	f00d fa7b 	bl	801e374 <iprintf>
  conn = (struct netconn *)arg;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8010e82:	69fb      	ldr	r3, [r7, #28]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d103      	bne.n	8010e90 <recv_udp+0x44>
    pbuf_free(p);
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f003 fac9 	bl	8014420 <pbuf_free>
    return;
 8010e8e:	e04d      	b.n	8010f2c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8010e90:	69fb      	ldr	r3, [r7, #28]
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	68ba      	ldr	r2, [r7, #8]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d005      	beq.n	8010ea6 <recv_udp+0x5a>
 8010e9a:	4b26      	ldr	r3, [pc, #152]	; (8010f34 <recv_udp+0xe8>)
 8010e9c:	22ee      	movs	r2, #238	; 0xee
 8010e9e:	4929      	ldr	r1, [pc, #164]	; (8010f44 <recv_udp+0xf8>)
 8010ea0:	4826      	ldr	r0, [pc, #152]	; (8010f3c <recv_udp+0xf0>)
 8010ea2:	f00d fa67 	bl	801e374 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	3310      	adds	r3, #16
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f00c fdcf 	bl	801da4e <sys_mbox_valid>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d103      	bne.n	8010ebe <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f003 fab2 	bl	8014420 <pbuf_free>
    return;
 8010ebc:	e036      	b.n	8010f2c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8010ebe:	2006      	movs	r0, #6
 8010ec0:	f002 fa20 	bl	8013304 <memp_malloc>
 8010ec4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8010ec6:	69bb      	ldr	r3, [r7, #24]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d103      	bne.n	8010ed4 <recv_udp+0x88>
    pbuf_free(p);
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f003 faa7 	bl	8014420 <pbuf_free>
    return;
 8010ed2:	e02b      	b.n	8010f2c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8010ed4:	69bb      	ldr	r3, [r7, #24]
 8010ed6:	687a      	ldr	r2, [r7, #4]
 8010ed8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010eda:	69bb      	ldr	r3, [r7, #24]
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d002      	beq.n	8010eec <recv_udp+0xa0>
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	e000      	b.n	8010eee <recv_udp+0xa2>
 8010eec:	2300      	movs	r3, #0
 8010eee:	69ba      	ldr	r2, [r7, #24]
 8010ef0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8010ef2:	69bb      	ldr	r3, [r7, #24]
 8010ef4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010ef6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	891b      	ldrh	r3, [r3, #8]
 8010efc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8010efe:	69fb      	ldr	r3, [r7, #28]
 8010f00:	3310      	adds	r3, #16
 8010f02:	69b9      	ldr	r1, [r7, #24]
 8010f04:	4618      	mov	r0, r3
 8010f06:	f00c fd2d 	bl	801d964 <sys_mbox_trypost>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d003      	beq.n	8010f18 <recv_udp+0xcc>
    netbuf_delete(buf);
 8010f10:	69b8      	ldr	r0, [r7, #24]
 8010f12:	f001 fafd 	bl	8012510 <netbuf_delete>
    return;
 8010f16:	e009      	b.n	8010f2c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	6a1b      	ldr	r3, [r3, #32]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d005      	beq.n	8010f2c <recv_udp+0xe0>
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	6a1b      	ldr	r3, [r3, #32]
 8010f24:	8afa      	ldrh	r2, [r7, #22]
 8010f26:	2100      	movs	r1, #0
 8010f28:	69f8      	ldr	r0, [r7, #28]
 8010f2a:	4798      	blx	r3
  }
}
 8010f2c:	3720      	adds	r7, #32
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	08020058 	.word	0x08020058
 8010f38:	080200d0 	.word	0x080200d0
 8010f3c:	0802009c 	.word	0x0802009c
 8010f40:	080200f4 	.word	0x080200f4
 8010f44:	08020114 	.word	0x08020114

08010f48 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b088      	sub	sp, #32
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	60f8      	str	r0, [r7, #12]
 8010f50:	60b9      	str	r1, [r7, #8]
 8010f52:	607a      	str	r2, [r7, #4]
 8010f54:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d106      	bne.n	8010f6a <recv_tcp+0x22>
 8010f5c:	4b36      	ldr	r3, [pc, #216]	; (8011038 <recv_tcp+0xf0>)
 8010f5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010f62:	4936      	ldr	r1, [pc, #216]	; (801103c <recv_tcp+0xf4>)
 8010f64:	4836      	ldr	r0, [pc, #216]	; (8011040 <recv_tcp+0xf8>)
 8010f66:	f00d fa05 	bl	801e374 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d106      	bne.n	8010f7e <recv_tcp+0x36>
 8010f70:	4b31      	ldr	r3, [pc, #196]	; (8011038 <recv_tcp+0xf0>)
 8010f72:	f240 122d 	movw	r2, #301	; 0x12d
 8010f76:	4933      	ldr	r1, [pc, #204]	; (8011044 <recv_tcp+0xfc>)
 8010f78:	4831      	ldr	r0, [pc, #196]	; (8011040 <recv_tcp+0xf8>)
 8010f7a:	f00d f9fb 	bl	801e374 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8010f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d006      	beq.n	8010f94 <recv_tcp+0x4c>
 8010f86:	4b2c      	ldr	r3, [pc, #176]	; (8011038 <recv_tcp+0xf0>)
 8010f88:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8010f8c:	492e      	ldr	r1, [pc, #184]	; (8011048 <recv_tcp+0x100>)
 8010f8e:	482c      	ldr	r0, [pc, #176]	; (8011040 <recv_tcp+0xf8>)
 8010f90:	f00d f9f0 	bl	801e374 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d102      	bne.n	8010fa4 <recv_tcp+0x5c>
    return ERR_VAL;
 8010f9e:	f06f 0305 	mvn.w	r3, #5
 8010fa2:	e045      	b.n	8011030 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	68ba      	ldr	r2, [r7, #8]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d006      	beq.n	8010fbc <recv_tcp+0x74>
 8010fae:	4b22      	ldr	r3, [pc, #136]	; (8011038 <recv_tcp+0xf0>)
 8010fb0:	f240 1235 	movw	r2, #309	; 0x135
 8010fb4:	4925      	ldr	r1, [pc, #148]	; (801104c <recv_tcp+0x104>)
 8010fb6:	4822      	ldr	r0, [pc, #136]	; (8011040 <recv_tcp+0xf8>)
 8010fb8:	f00d f9dc 	bl	801e374 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	3310      	adds	r3, #16
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f00c fd44 	bl	801da4e <sys_mbox_valid>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d10d      	bne.n	8010fe8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d008      	beq.n	8010fe4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	891b      	ldrh	r3, [r3, #8]
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	68b8      	ldr	r0, [r7, #8]
 8010fda:	f004 f9d9 	bl	8015390 <tcp_recved>
      pbuf_free(p);
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f003 fa1e 	bl	8014420 <pbuf_free>
    }
    return ERR_OK;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	e023      	b.n	8011030 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d005      	beq.n	8010ffa <recv_tcp+0xb2>
    msg = p;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	891b      	ldrh	r3, [r3, #8]
 8010ff6:	83fb      	strh	r3, [r7, #30]
 8010ff8:	e003      	b.n	8011002 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8010ffa:	4b15      	ldr	r3, [pc, #84]	; (8011050 <recv_tcp+0x108>)
 8010ffc:	61bb      	str	r3, [r7, #24]
    len = 0;
 8010ffe:	2300      	movs	r3, #0
 8011000:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	3310      	adds	r3, #16
 8011006:	69b9      	ldr	r1, [r7, #24]
 8011008:	4618      	mov	r0, r3
 801100a:	f00c fcab 	bl	801d964 <sys_mbox_trypost>
 801100e:	4603      	mov	r3, r0
 8011010:	2b00      	cmp	r3, #0
 8011012:	d002      	beq.n	801101a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011014:	f04f 33ff 	mov.w	r3, #4294967295
 8011018:	e00a      	b.n	8011030 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	6a1b      	ldr	r3, [r3, #32]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d005      	beq.n	801102e <recv_tcp+0xe6>
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	6a1b      	ldr	r3, [r3, #32]
 8011026:	8bfa      	ldrh	r2, [r7, #30]
 8011028:	2100      	movs	r1, #0
 801102a:	6978      	ldr	r0, [r7, #20]
 801102c:	4798      	blx	r3
  }

  return ERR_OK;
 801102e:	2300      	movs	r3, #0
}
 8011030:	4618      	mov	r0, r3
 8011032:	3720      	adds	r7, #32
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}
 8011038:	08020058 	.word	0x08020058
 801103c:	08020134 	.word	0x08020134
 8011040:	0802009c 	.word	0x0802009c
 8011044:	08020158 	.word	0x08020158
 8011048:	08020178 	.word	0x08020178
 801104c:	08020190 	.word	0x08020190
 8011050:	080233ca 	.word	0x080233ca

08011054 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d106      	bne.n	8011076 <poll_tcp+0x22>
 8011068:	4b29      	ldr	r3, [pc, #164]	; (8011110 <poll_tcp+0xbc>)
 801106a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 801106e:	4929      	ldr	r1, [pc, #164]	; (8011114 <poll_tcp+0xc0>)
 8011070:	4829      	ldr	r0, [pc, #164]	; (8011118 <poll_tcp+0xc4>)
 8011072:	f00d f97f 	bl	801e374 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	785b      	ldrb	r3, [r3, #1]
 801107a:	2b01      	cmp	r3, #1
 801107c:	d104      	bne.n	8011088 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801107e:	2101      	movs	r1, #1
 8011080:	68f8      	ldr	r0, [r7, #12]
 8011082:	f000 ff61 	bl	8011f48 <lwip_netconn_do_writemore>
 8011086:	e016      	b.n	80110b6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	785b      	ldrb	r3, [r3, #1]
 801108c:	2b04      	cmp	r3, #4
 801108e:	d112      	bne.n	80110b6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	69db      	ldr	r3, [r3, #28]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d00a      	beq.n	80110ae <poll_tcp+0x5a>
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	69db      	ldr	r3, [r3, #28]
 801109c:	7a5b      	ldrb	r3, [r3, #9]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d005      	beq.n	80110ae <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	69db      	ldr	r3, [r3, #28]
 80110a6:	7a5a      	ldrb	r2, [r3, #9]
 80110a8:	3a01      	subs	r2, #1
 80110aa:	b2d2      	uxtb	r2, r2
 80110ac:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80110ae:	2101      	movs	r1, #1
 80110b0:	68f8      	ldr	r0, [r7, #12]
 80110b2:	f000 fbf3 	bl	801189c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	7e1b      	ldrb	r3, [r3, #24]
 80110ba:	f003 0310 	and.w	r3, r3, #16
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d021      	beq.n	8011106 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d01d      	beq.n	8011106 <poll_tcp+0xb2>
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80110d2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80110d6:	d316      	bcc.n	8011106 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	685b      	ldr	r3, [r3, #4]
 80110dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80110e0:	2b04      	cmp	r3, #4
 80110e2:	d810      	bhi.n	8011106 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	7e1b      	ldrb	r3, [r3, #24]
 80110e8:	f023 0310 	bic.w	r3, r3, #16
 80110ec:	b2da      	uxtb	r2, r3
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	761a      	strb	r2, [r3, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	6a1b      	ldr	r3, [r3, #32]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d005      	beq.n	8011106 <poll_tcp+0xb2>
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	6a1b      	ldr	r3, [r3, #32]
 80110fe:	2200      	movs	r2, #0
 8011100:	2102      	movs	r1, #2
 8011102:	68f8      	ldr	r0, [r7, #12]
 8011104:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011106:	2300      	movs	r3, #0
}
 8011108:	4618      	mov	r0, r3
 801110a:	3710      	adds	r7, #16
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}
 8011110:	08020058 	.word	0x08020058
 8011114:	080201b0 	.word	0x080201b0
 8011118:	0802009c 	.word	0x0802009c

0801111c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b086      	sub	sp, #24
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	4613      	mov	r3, r2
 8011128:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d106      	bne.n	8011142 <sent_tcp+0x26>
 8011134:	4b20      	ldr	r3, [pc, #128]	; (80111b8 <sent_tcp+0x9c>)
 8011136:	f240 1293 	movw	r2, #403	; 0x193
 801113a:	4920      	ldr	r1, [pc, #128]	; (80111bc <sent_tcp+0xa0>)
 801113c:	4820      	ldr	r0, [pc, #128]	; (80111c0 <sent_tcp+0xa4>)
 801113e:	f00d f919 	bl	801e374 <iprintf>

  if (conn) {
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d032      	beq.n	80111ae <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	785b      	ldrb	r3, [r3, #1]
 801114c:	2b01      	cmp	r3, #1
 801114e:	d104      	bne.n	801115a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011150:	2101      	movs	r1, #1
 8011152:	6978      	ldr	r0, [r7, #20]
 8011154:	f000 fef8 	bl	8011f48 <lwip_netconn_do_writemore>
 8011158:	e007      	b.n	801116a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	785b      	ldrb	r3, [r3, #1]
 801115e:	2b04      	cmp	r3, #4
 8011160:	d103      	bne.n	801116a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011162:	2101      	movs	r1, #1
 8011164:	6978      	ldr	r0, [r7, #20]
 8011166:	f000 fb99 	bl	801189c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d01d      	beq.n	80111ae <sent_tcp+0x92>
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	685b      	ldr	r3, [r3, #4]
 8011176:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801117a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801117e:	d316      	bcc.n	80111ae <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011188:	2b04      	cmp	r3, #4
 801118a:	d810      	bhi.n	80111ae <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	7e1b      	ldrb	r3, [r3, #24]
 8011190:	f023 0310 	bic.w	r3, r3, #16
 8011194:	b2da      	uxtb	r2, r3
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	761a      	strb	r2, [r3, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	6a1b      	ldr	r3, [r3, #32]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d005      	beq.n	80111ae <sent_tcp+0x92>
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	6a1b      	ldr	r3, [r3, #32]
 80111a6:	88fa      	ldrh	r2, [r7, #6]
 80111a8:	2102      	movs	r1, #2
 80111aa:	6978      	ldr	r0, [r7, #20]
 80111ac:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80111ae:	2300      	movs	r3, #0
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3718      	adds	r7, #24
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}
 80111b8:	08020058 	.word	0x08020058
 80111bc:	080201b0 	.word	0x080201b0
 80111c0:	0802009c 	.word	0x0802009c

080111c4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b088      	sub	sp, #32
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	460b      	mov	r3, r1
 80111ce:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80111d4:	69fb      	ldr	r3, [r7, #28]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d106      	bne.n	80111e8 <err_tcp+0x24>
 80111da:	4b5f      	ldr	r3, [pc, #380]	; (8011358 <err_tcp+0x194>)
 80111dc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80111e0:	495e      	ldr	r1, [pc, #376]	; (801135c <err_tcp+0x198>)
 80111e2:	485f      	ldr	r0, [pc, #380]	; (8011360 <err_tcp+0x19c>)
 80111e4:	f00d f8c6 	bl	801e374 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80111e8:	f00c fd4c 	bl	801dc84 <sys_arch_protect>
 80111ec:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80111ee:	69fb      	ldr	r3, [r7, #28]
 80111f0:	2200      	movs	r2, #0
 80111f2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80111f4:	69fb      	ldr	r3, [r7, #28]
 80111f6:	78fa      	ldrb	r2, [r7, #3]
 80111f8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80111fa:	69fb      	ldr	r3, [r7, #28]
 80111fc:	7e1b      	ldrb	r3, [r3, #24]
 80111fe:	f043 0301 	orr.w	r3, r3, #1
 8011202:	b2da      	uxtb	r2, r3
 8011204:	69fb      	ldr	r3, [r7, #28]
 8011206:	761a      	strb	r2, [r3, #24]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011208:	69fb      	ldr	r3, [r7, #28]
 801120a:	785b      	ldrb	r3, [r3, #1]
 801120c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 801120e:	69fb      	ldr	r3, [r7, #28]
 8011210:	2200      	movs	r2, #0
 8011212:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011214:	69b8      	ldr	r0, [r7, #24]
 8011216:	f00c fd43 	bl	801dca0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801121a:	69fb      	ldr	r3, [r7, #28]
 801121c:	6a1b      	ldr	r3, [r3, #32]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d005      	beq.n	801122e <err_tcp+0x6a>
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	6a1b      	ldr	r3, [r3, #32]
 8011226:	2200      	movs	r2, #0
 8011228:	2104      	movs	r1, #4
 801122a:	69f8      	ldr	r0, [r7, #28]
 801122c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801122e:	69fb      	ldr	r3, [r7, #28]
 8011230:	6a1b      	ldr	r3, [r3, #32]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d005      	beq.n	8011242 <err_tcp+0x7e>
 8011236:	69fb      	ldr	r3, [r7, #28]
 8011238:	6a1b      	ldr	r3, [r3, #32]
 801123a:	2200      	movs	r2, #0
 801123c:	2100      	movs	r1, #0
 801123e:	69f8      	ldr	r0, [r7, #28]
 8011240:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011242:	69fb      	ldr	r3, [r7, #28]
 8011244:	6a1b      	ldr	r3, [r3, #32]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d005      	beq.n	8011256 <err_tcp+0x92>
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	6a1b      	ldr	r3, [r3, #32]
 801124e:	2200      	movs	r2, #0
 8011250:	2102      	movs	r1, #2
 8011252:	69f8      	ldr	r0, [r7, #28]
 8011254:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801125a:	4618      	mov	r0, r3
 801125c:	f7ff fd86 	bl	8010d6c <lwip_netconn_err_to_msg>
 8011260:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011262:	69fb      	ldr	r3, [r7, #28]
 8011264:	3310      	adds	r3, #16
 8011266:	4618      	mov	r0, r3
 8011268:	f00c fbf1 	bl	801da4e <sys_mbox_valid>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d005      	beq.n	801127e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011272:	69fb      	ldr	r3, [r7, #28]
 8011274:	3310      	adds	r3, #16
 8011276:	6939      	ldr	r1, [r7, #16]
 8011278:	4618      	mov	r0, r3
 801127a:	f00c fb73 	bl	801d964 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801127e:	69fb      	ldr	r3, [r7, #28]
 8011280:	3314      	adds	r3, #20
 8011282:	4618      	mov	r0, r3
 8011284:	f00c fbe3 	bl	801da4e <sys_mbox_valid>
 8011288:	4603      	mov	r3, r0
 801128a:	2b00      	cmp	r3, #0
 801128c:	d005      	beq.n	801129a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801128e:	69fb      	ldr	r3, [r7, #28]
 8011290:	3314      	adds	r3, #20
 8011292:	6939      	ldr	r1, [r7, #16]
 8011294:	4618      	mov	r0, r3
 8011296:	f00c fb65 	bl	801d964 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801129a:	7dfb      	ldrb	r3, [r7, #23]
 801129c:	2b01      	cmp	r3, #1
 801129e:	d005      	beq.n	80112ac <err_tcp+0xe8>
 80112a0:	7dfb      	ldrb	r3, [r7, #23]
 80112a2:	2b04      	cmp	r3, #4
 80112a4:	d002      	beq.n	80112ac <err_tcp+0xe8>
 80112a6:	7dfb      	ldrb	r3, [r7, #23]
 80112a8:	2b03      	cmp	r3, #3
 80112aa:	d143      	bne.n	8011334 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	7e1b      	ldrb	r3, [r3, #24]
 80112b0:	f003 0304 	and.w	r3, r3, #4
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	bf14      	ite	ne
 80112b8:	2301      	movne	r3, #1
 80112ba:	2300      	moveq	r3, #0
 80112bc:	b2db      	uxtb	r3, r3
 80112be:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80112c0:	69fb      	ldr	r3, [r7, #28]
 80112c2:	7e1b      	ldrb	r3, [r3, #24]
 80112c4:	f023 0304 	bic.w	r3, r3, #4
 80112c8:	b2da      	uxtb	r2, r3
 80112ca:	69fb      	ldr	r3, [r7, #28]
 80112cc:	761a      	strb	r2, [r3, #24]

    if (!was_nonblocking_connect) {
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d13b      	bne.n	801134c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80112d4:	69fb      	ldr	r3, [r7, #28]
 80112d6:	69db      	ldr	r3, [r3, #28]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d106      	bne.n	80112ea <err_tcp+0x126>
 80112dc:	4b1e      	ldr	r3, [pc, #120]	; (8011358 <err_tcp+0x194>)
 80112de:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80112e2:	4920      	ldr	r1, [pc, #128]	; (8011364 <err_tcp+0x1a0>)
 80112e4:	481e      	ldr	r0, [pc, #120]	; (8011360 <err_tcp+0x19c>)
 80112e6:	f00d f845 	bl	801e374 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80112ea:	7dfb      	ldrb	r3, [r7, #23]
 80112ec:	2b04      	cmp	r3, #4
 80112ee:	d104      	bne.n	80112fa <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80112f0:	69fb      	ldr	r3, [r7, #28]
 80112f2:	69db      	ldr	r3, [r3, #28]
 80112f4:	2200      	movs	r2, #0
 80112f6:	711a      	strb	r2, [r3, #4]
 80112f8:	e003      	b.n	8011302 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80112fa:	69fb      	ldr	r3, [r7, #28]
 80112fc:	69db      	ldr	r3, [r3, #28]
 80112fe:	78fa      	ldrb	r2, [r7, #3]
 8011300:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011302:	69fb      	ldr	r3, [r7, #28]
 8011304:	69db      	ldr	r3, [r3, #28]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	330c      	adds	r3, #12
 801130a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 801130c:	68b8      	ldr	r0, [r7, #8]
 801130e:	f00c fc2f 	bl	801db70 <sys_sem_valid>
 8011312:	4603      	mov	r3, r0
 8011314:	2b00      	cmp	r3, #0
 8011316:	d106      	bne.n	8011326 <err_tcp+0x162>
 8011318:	4b0f      	ldr	r3, [pc, #60]	; (8011358 <err_tcp+0x194>)
 801131a:	f240 12ef 	movw	r2, #495	; 0x1ef
 801131e:	4912      	ldr	r1, [pc, #72]	; (8011368 <err_tcp+0x1a4>)
 8011320:	480f      	ldr	r0, [pc, #60]	; (8011360 <err_tcp+0x19c>)
 8011322:	f00d f827 	bl	801e374 <iprintf>
      conn->current_msg = NULL;
 8011326:	69fb      	ldr	r3, [r7, #28]
 8011328:	2200      	movs	r2, #0
 801132a:	61da      	str	r2, [r3, #28]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 801132c:	68b8      	ldr	r0, [r7, #8]
 801132e:	f00c fc05 	bl	801db3c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8011332:	e00b      	b.n	801134c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	69db      	ldr	r3, [r3, #28]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d008      	beq.n	801134e <err_tcp+0x18a>
 801133c:	4b06      	ldr	r3, [pc, #24]	; (8011358 <err_tcp+0x194>)
 801133e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8011342:	490a      	ldr	r1, [pc, #40]	; (801136c <err_tcp+0x1a8>)
 8011344:	4806      	ldr	r0, [pc, #24]	; (8011360 <err_tcp+0x19c>)
 8011346:	f00d f815 	bl	801e374 <iprintf>
  }
}
 801134a:	e000      	b.n	801134e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 801134c:	bf00      	nop
}
 801134e:	bf00      	nop
 8011350:	3720      	adds	r7, #32
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
 8011356:	bf00      	nop
 8011358:	08020058 	.word	0x08020058
 801135c:	080201b0 	.word	0x080201b0
 8011360:	0802009c 	.word	0x0802009c
 8011364:	080201c0 	.word	0x080201c0
 8011368:	080201dc 	.word	0x080201dc
 801136c:	080201f8 	.word	0x080201f8

08011370 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	685b      	ldr	r3, [r3, #4]
 801137c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801137e:	6879      	ldr	r1, [r7, #4]
 8011380:	68f8      	ldr	r0, [r7, #12]
 8011382:	f004 fecb 	bl	801611c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8011386:	490a      	ldr	r1, [pc, #40]	; (80113b0 <setup_tcp+0x40>)
 8011388:	68f8      	ldr	r0, [r7, #12]
 801138a:	f004 fed9 	bl	8016140 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801138e:	4909      	ldr	r1, [pc, #36]	; (80113b4 <setup_tcp+0x44>)
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	f004 fef7 	bl	8016184 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8011396:	2202      	movs	r2, #2
 8011398:	4907      	ldr	r1, [pc, #28]	; (80113b8 <setup_tcp+0x48>)
 801139a:	68f8      	ldr	r0, [r7, #12]
 801139c:	f004 ff4e 	bl	801623c <tcp_poll>
  tcp_err(pcb, err_tcp);
 80113a0:	4906      	ldr	r1, [pc, #24]	; (80113bc <setup_tcp+0x4c>)
 80113a2:	68f8      	ldr	r0, [r7, #12]
 80113a4:	f004 ff10 	bl	80161c8 <tcp_err>
}
 80113a8:	bf00      	nop
 80113aa:	3710      	adds	r7, #16
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	08010f49 	.word	0x08010f49
 80113b4:	0801111d 	.word	0x0801111d
 80113b8:	08011055 	.word	0x08011055
 80113bc:	080111c5 	.word	0x080111c5

080113c0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80113c0:	b590      	push	{r4, r7, lr}
 80113c2:	b089      	sub	sp, #36	; 0x24
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	4613      	mov	r3, r2
 80113cc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d102      	bne.n	80113de <accept_function+0x1e>
    return ERR_VAL;
 80113d8:	f06f 0305 	mvn.w	r3, #5
 80113dc:	e0a1      	b.n	8011522 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80113de:	69fb      	ldr	r3, [r7, #28]
 80113e0:	3314      	adds	r3, #20
 80113e2:	4618      	mov	r0, r3
 80113e4:	f00c fb33 	bl	801da4e <sys_mbox_valid>
 80113e8:	4603      	mov	r3, r0
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d102      	bne.n	80113f4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80113ee:	f06f 0305 	mvn.w	r3, #5
 80113f2:	e096      	b.n	8011522 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d11b      	bne.n	8011432 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	f103 0414 	add.w	r4, r3, #20
 8011400:	f06f 000c 	mvn.w	r0, #12
 8011404:	f7ff fcb2 	bl	8010d6c <lwip_netconn_err_to_msg>
 8011408:	4603      	mov	r3, r0
 801140a:	4619      	mov	r1, r3
 801140c:	4620      	mov	r0, r4
 801140e:	f00c faa9 	bl	801d964 <sys_mbox_trypost>
 8011412:	4603      	mov	r3, r0
 8011414:	2b00      	cmp	r3, #0
 8011416:	d109      	bne.n	801142c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	6a1b      	ldr	r3, [r3, #32]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d005      	beq.n	801142c <accept_function+0x6c>
 8011420:	69fb      	ldr	r3, [r7, #28]
 8011422:	6a1b      	ldr	r3, [r3, #32]
 8011424:	2200      	movs	r2, #0
 8011426:	2100      	movs	r1, #0
 8011428:	69f8      	ldr	r0, [r7, #28]
 801142a:	4798      	blx	r3
    }
    return ERR_VAL;
 801142c:	f06f 0305 	mvn.w	r3, #5
 8011430:	e077      	b.n	8011522 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8011432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d006      	beq.n	8011448 <accept_function+0x88>
 801143a:	4b3c      	ldr	r3, [pc, #240]	; (801152c <accept_function+0x16c>)
 801143c:	f240 222a 	movw	r2, #554	; 0x22a
 8011440:	493b      	ldr	r1, [pc, #236]	; (8011530 <accept_function+0x170>)
 8011442:	483c      	ldr	r0, [pc, #240]	; (8011534 <accept_function+0x174>)
 8011444:	f00c ff96 	bl	801e374 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8011448:	69fb      	ldr	r3, [r7, #28]
 801144a:	781a      	ldrb	r2, [r3, #0]
 801144c:	69fb      	ldr	r3, [r7, #28]
 801144e:	6a1b      	ldr	r3, [r3, #32]
 8011450:	4619      	mov	r1, r3
 8011452:	4610      	mov	r0, r2
 8011454:	f000 f8f0 	bl	8011638 <netconn_alloc>
 8011458:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 801145a:	69bb      	ldr	r3, [r7, #24]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d11b      	bne.n	8011498 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	f103 0414 	add.w	r4, r3, #20
 8011466:	f06f 000c 	mvn.w	r0, #12
 801146a:	f7ff fc7f 	bl	8010d6c <lwip_netconn_err_to_msg>
 801146e:	4603      	mov	r3, r0
 8011470:	4619      	mov	r1, r3
 8011472:	4620      	mov	r0, r4
 8011474:	f00c fa76 	bl	801d964 <sys_mbox_trypost>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d109      	bne.n	8011492 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	6a1b      	ldr	r3, [r3, #32]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d005      	beq.n	8011492 <accept_function+0xd2>
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	6a1b      	ldr	r3, [r3, #32]
 801148a:	2200      	movs	r2, #0
 801148c:	2100      	movs	r1, #0
 801148e:	69f8      	ldr	r0, [r7, #28]
 8011490:	4798      	blx	r3
    }
    return ERR_MEM;
 8011492:	f04f 33ff 	mov.w	r3, #4294967295
 8011496:	e044      	b.n	8011522 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8011498:	69bb      	ldr	r3, [r7, #24]
 801149a:	68ba      	ldr	r2, [r7, #8]
 801149c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 801149e:	69b8      	ldr	r0, [r7, #24]
 80114a0:	f7ff ff66 	bl	8011370 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	3314      	adds	r3, #20
 80114a8:	69b9      	ldr	r1, [r7, #24]
 80114aa:	4618      	mov	r0, r3
 80114ac:	f00c fa5a 	bl	801d964 <sys_mbox_trypost>
 80114b0:	4603      	mov	r3, r0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d02a      	beq.n	801150c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80114bc:	2100      	movs	r1, #0
 80114be:	6978      	ldr	r0, [r7, #20]
 80114c0:	f004 fe2c 	bl	801611c <tcp_arg>
    tcp_recv(pcb, NULL);
 80114c4:	2100      	movs	r1, #0
 80114c6:	6978      	ldr	r0, [r7, #20]
 80114c8:	f004 fe3a 	bl	8016140 <tcp_recv>
    tcp_sent(pcb, NULL);
 80114cc:	2100      	movs	r1, #0
 80114ce:	6978      	ldr	r0, [r7, #20]
 80114d0:	f004 fe58 	bl	8016184 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80114d4:	2200      	movs	r2, #0
 80114d6:	2100      	movs	r1, #0
 80114d8:	6978      	ldr	r0, [r7, #20]
 80114da:	f004 feaf 	bl	801623c <tcp_poll>
    tcp_err(pcb, NULL);
 80114de:	2100      	movs	r1, #0
 80114e0:	6978      	ldr	r0, [r7, #20]
 80114e2:	f004 fe71 	bl	80161c8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80114e6:	69bb      	ldr	r3, [r7, #24]
 80114e8:	2200      	movs	r2, #0
 80114ea:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	3310      	adds	r3, #16
 80114f0:	4618      	mov	r0, r3
 80114f2:	f00c fa25 	bl	801d940 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80114f6:	69bb      	ldr	r3, [r7, #24]
 80114f8:	3310      	adds	r3, #16
 80114fa:	4618      	mov	r0, r3
 80114fc:	f00c fab8 	bl	801da70 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8011500:	69b8      	ldr	r0, [r7, #24]
 8011502:	f000 f903 	bl	801170c <netconn_free>
    return ERR_MEM;
 8011506:	f04f 33ff 	mov.w	r3, #4294967295
 801150a:	e00a      	b.n	8011522 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801150c:	69fb      	ldr	r3, [r7, #28]
 801150e:	6a1b      	ldr	r3, [r3, #32]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d005      	beq.n	8011520 <accept_function+0x160>
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	6a1b      	ldr	r3, [r3, #32]
 8011518:	2200      	movs	r2, #0
 801151a:	2100      	movs	r1, #0
 801151c:	69f8      	ldr	r0, [r7, #28]
 801151e:	4798      	blx	r3
  }

  return ERR_OK;
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	3724      	adds	r7, #36	; 0x24
 8011526:	46bd      	mov	sp, r7
 8011528:	bd90      	pop	{r4, r7, pc}
 801152a:	bf00      	nop
 801152c:	08020058 	.word	0x08020058
 8011530:	08020214 	.word	0x08020214
 8011534:	0802009c 	.word	0x0802009c

08011538 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8011538:	b590      	push	{r4, r7, lr}
 801153a:	b085      	sub	sp, #20
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8011540:	2300      	movs	r3, #0
 8011542:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d006      	beq.n	801155c <pcb_new+0x24>
 801154e:	4b2b      	ldr	r3, [pc, #172]	; (80115fc <pcb_new+0xc4>)
 8011550:	f240 2265 	movw	r2, #613	; 0x265
 8011554:	492a      	ldr	r1, [pc, #168]	; (8011600 <pcb_new+0xc8>)
 8011556:	482b      	ldr	r0, [pc, #172]	; (8011604 <pcb_new+0xcc>)
 8011558:	f00c ff0c 	bl	801e374 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011566:	2b10      	cmp	r3, #16
 8011568:	d022      	beq.n	80115b0 <pcb_new+0x78>
 801156a:	2b20      	cmp	r3, #32
 801156c:	d133      	bne.n	80115d6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681c      	ldr	r4, [r3, #0]
 8011572:	7bfb      	ldrb	r3, [r7, #15]
 8011574:	4618      	mov	r0, r3
 8011576:	f009 feb0 	bl	801b2da <udp_new_ip_type>
 801157a:	4603      	mov	r3, r0
 801157c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d02a      	beq.n	80115de <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	2b22      	cmp	r3, #34	; 0x22
 8011590:	d104      	bne.n	801159c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	2201      	movs	r2, #1
 801159a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	6858      	ldr	r0, [r3, #4]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	461a      	mov	r2, r3
 80115a8:	4917      	ldr	r1, [pc, #92]	; (8011608 <pcb_new+0xd0>)
 80115aa:	f009 fe1d 	bl	801b1e8 <udp_recv>
      }
      break;
 80115ae:	e016      	b.n	80115de <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681c      	ldr	r4, [r3, #0]
 80115b4:	7bfb      	ldrb	r3, [r7, #15]
 80115b6:	4618      	mov	r0, r3
 80115b8:	f004 fda2 	bl	8016100 <tcp_new_ip_type>
 80115bc:	4603      	mov	r3, r0
 80115be:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d00b      	beq.n	80115e2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7ff fece 	bl	8011370 <setup_tcp>
      }
      break;
 80115d4:	e005      	b.n	80115e2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	22fa      	movs	r2, #250	; 0xfa
 80115da:	711a      	strb	r2, [r3, #4]
      return;
 80115dc:	e00a      	b.n	80115f4 <pcb_new+0xbc>
      break;
 80115de:	bf00      	nop
 80115e0:	e000      	b.n	80115e4 <pcb_new+0xac>
      break;
 80115e2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d102      	bne.n	80115f4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	22ff      	movs	r2, #255	; 0xff
 80115f2:	711a      	strb	r2, [r3, #4]
  }
}
 80115f4:	3714      	adds	r7, #20
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd90      	pop	{r4, r7, pc}
 80115fa:	bf00      	nop
 80115fc:	08020058 	.word	0x08020058
 8011600:	0802023c 	.word	0x0802023c
 8011604:	0802009c 	.word	0x0802009c
 8011608:	08010e4d 	.word	0x08010e4d

0801160c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b084      	sub	sp, #16
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2200      	movs	r2, #0
 801161c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d102      	bne.n	801162e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8011628:	68f8      	ldr	r0, [r7, #12]
 801162a:	f7ff ff85 	bl	8011538 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 801162e:	bf00      	nop
 8011630:	3710      	adds	r7, #16
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}
	...

08011638 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b086      	sub	sp, #24
 801163c:	af00      	add	r7, sp, #0
 801163e:	4603      	mov	r3, r0
 8011640:	6039      	str	r1, [r7, #0]
 8011642:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8011644:	2300      	movs	r3, #0
 8011646:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8011648:	2007      	movs	r0, #7
 801164a:	f001 fe5b 	bl	8013304 <memp_malloc>
 801164e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d101      	bne.n	801165a <netconn_alloc+0x22>
    return NULL;
 8011656:	2300      	movs	r3, #0
 8011658:	e04e      	b.n	80116f8 <netconn_alloc+0xc0>
  }

  conn->pending_err = ERR_OK;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2200      	movs	r2, #0
 801165e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	79fa      	ldrb	r2, [r7, #7]
 8011664:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2200      	movs	r2, #0
 801166a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 801166c:	79fb      	ldrb	r3, [r7, #7]
 801166e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011672:	2b10      	cmp	r3, #16
 8011674:	d004      	beq.n	8011680 <netconn_alloc+0x48>
 8011676:	2b20      	cmp	r3, #32
 8011678:	d105      	bne.n	8011686 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801167a:	2306      	movs	r3, #6
 801167c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 801167e:	e00a      	b.n	8011696 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8011680:	2306      	movs	r3, #6
 8011682:	617b      	str	r3, [r7, #20]
      break;
 8011684:	e007      	b.n	8011696 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8011686:	4b1e      	ldr	r3, [pc, #120]	; (8011700 <netconn_alloc+0xc8>)
 8011688:	f240 22e5 	movw	r2, #741	; 0x2e5
 801168c:	491d      	ldr	r1, [pc, #116]	; (8011704 <netconn_alloc+0xcc>)
 801168e:	481e      	ldr	r0, [pc, #120]	; (8011708 <netconn_alloc+0xd0>)
 8011690:	f00c fe70 	bl	801e374 <iprintf>
      goto free_and_return;
 8011694:	e02b      	b.n	80116ee <netconn_alloc+0xb6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	3310      	adds	r3, #16
 801169a:	6979      	ldr	r1, [r7, #20]
 801169c:	4618      	mov	r0, r3
 801169e:	f00c f92d 	bl	801d8fc <sys_mbox_new>
 80116a2:	4603      	mov	r3, r0
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d121      	bne.n	80116ec <netconn_alloc+0xb4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	330c      	adds	r3, #12
 80116ac:	2100      	movs	r1, #0
 80116ae:	4618      	mov	r0, r3
 80116b0:	f00c f9eb 	bl	801da8a <sys_sem_new>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d005      	beq.n	80116c6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	3310      	adds	r3, #16
 80116be:	4618      	mov	r0, r3
 80116c0:	f00c f93e 	bl	801d940 <sys_mbox_free>
    goto free_and_return;
 80116c4:	e013      	b.n	80116ee <netconn_alloc+0xb6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	3314      	adds	r3, #20
 80116ca:	4618      	mov	r0, r3
 80116cc:	f00c f9d0 	bl	801da70 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2200      	movs	r2, #0
 80116d4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	683a      	ldr	r2, [r7, #0]
 80116da:	621a      	str	r2, [r3, #32]
#if LWIP_TCP
  conn->current_msg  = NULL;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2200      	movs	r2, #0
 80116e0:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	7cfa      	ldrb	r2, [r7, #19]
 80116e6:	761a      	strb	r2, [r3, #24]
  return conn;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	e005      	b.n	80116f8 <netconn_alloc+0xc0>
    goto free_and_return;
 80116ec:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80116ee:	68f9      	ldr	r1, [r7, #12]
 80116f0:	2007      	movs	r0, #7
 80116f2:	f001 fe7d 	bl	80133f0 <memp_free>
  return NULL;
 80116f6:	2300      	movs	r3, #0
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3718      	adds	r7, #24
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	08020058 	.word	0x08020058
 8011704:	0802025c 	.word	0x0802025c
 8011708:	0802009c 	.word	0x0802009c

0801170c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d006      	beq.n	801172a <netconn_free+0x1e>
 801171c:	4b1b      	ldr	r3, [pc, #108]	; (801178c <netconn_free+0x80>)
 801171e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011722:	491b      	ldr	r1, [pc, #108]	; (8011790 <netconn_free+0x84>)
 8011724:	481b      	ldr	r0, [pc, #108]	; (8011794 <netconn_free+0x88>)
 8011726:	f00c fe25 	bl	801e374 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	3310      	adds	r3, #16
 801172e:	4618      	mov	r0, r3
 8011730:	f00c f98d 	bl	801da4e <sys_mbox_valid>
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d006      	beq.n	8011748 <netconn_free+0x3c>
 801173a:	4b14      	ldr	r3, [pc, #80]	; (801178c <netconn_free+0x80>)
 801173c:	f240 3223 	movw	r2, #803	; 0x323
 8011740:	4915      	ldr	r1, [pc, #84]	; (8011798 <netconn_free+0x8c>)
 8011742:	4814      	ldr	r0, [pc, #80]	; (8011794 <netconn_free+0x88>)
 8011744:	f00c fe16 	bl	801e374 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	3314      	adds	r3, #20
 801174c:	4618      	mov	r0, r3
 801174e:	f00c f97e 	bl	801da4e <sys_mbox_valid>
 8011752:	4603      	mov	r3, r0
 8011754:	2b00      	cmp	r3, #0
 8011756:	d006      	beq.n	8011766 <netconn_free+0x5a>
 8011758:	4b0c      	ldr	r3, [pc, #48]	; (801178c <netconn_free+0x80>)
 801175a:	f240 3226 	movw	r2, #806	; 0x326
 801175e:	490f      	ldr	r1, [pc, #60]	; (801179c <netconn_free+0x90>)
 8011760:	480c      	ldr	r0, [pc, #48]	; (8011794 <netconn_free+0x88>)
 8011762:	f00c fe07 	bl	801e374 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	330c      	adds	r3, #12
 801176a:	4618      	mov	r0, r3
 801176c:	f00c f9f3 	bl	801db56 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	330c      	adds	r3, #12
 8011774:	4618      	mov	r0, r3
 8011776:	f00c fa0c 	bl	801db92 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 801177a:	6879      	ldr	r1, [r7, #4]
 801177c:	2007      	movs	r0, #7
 801177e:	f001 fe37 	bl	80133f0 <memp_free>
}
 8011782:	bf00      	nop
 8011784:	3708      	adds	r7, #8
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
 801178a:	bf00      	nop
 801178c:	08020058 	.word	0x08020058
 8011790:	08020284 	.word	0x08020284
 8011794:	0802009c 	.word	0x0802009c
 8011798:	080202b4 	.word	0x080202b4
 801179c:	080202f0 	.word	0x080202f0

080117a0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b086      	sub	sp, #24
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	3310      	adds	r3, #16
 80117ac:	4618      	mov	r0, r3
 80117ae:	f00c f94e 	bl	801da4e <sys_mbox_valid>
 80117b2:	4603      	mov	r3, r0
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d02f      	beq.n	8011818 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80117b8:	e018      	b.n	80117ec <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80117c2:	2b10      	cmp	r3, #16
 80117c4:	d10e      	bne.n	80117e4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80117c6:	693b      	ldr	r3, [r7, #16]
 80117c8:	f107 020f 	add.w	r2, r7, #15
 80117cc:	4611      	mov	r1, r2
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7ff fb02 	bl	8010dd8 <lwip_netconn_is_err_msg>
 80117d4:	4603      	mov	r3, r0
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d108      	bne.n	80117ec <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	4618      	mov	r0, r3
 80117de:	f002 fe1f 	bl	8014420 <pbuf_free>
 80117e2:	e003      	b.n	80117ec <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	4618      	mov	r0, r3
 80117e8:	f000 fe92 	bl	8012510 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	3310      	adds	r3, #16
 80117f0:	f107 0210 	add.w	r2, r7, #16
 80117f4:	4611      	mov	r1, r2
 80117f6:	4618      	mov	r0, r3
 80117f8:	f00c f90d 	bl	801da16 <sys_arch_mbox_tryfetch>
 80117fc:	4603      	mov	r3, r0
 80117fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011802:	d1da      	bne.n	80117ba <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	3310      	adds	r3, #16
 8011808:	4618      	mov	r0, r3
 801180a:	f00c f899 	bl	801d940 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	3310      	adds	r3, #16
 8011812:	4618      	mov	r0, r3
 8011814:	f00c f92c 	bl	801da70 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	3314      	adds	r3, #20
 801181c:	4618      	mov	r0, r3
 801181e:	f00c f916 	bl	801da4e <sys_mbox_valid>
 8011822:	4603      	mov	r3, r0
 8011824:	2b00      	cmp	r3, #0
 8011826:	d034      	beq.n	8011892 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011828:	e01d      	b.n	8011866 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	f107 020e 	add.w	r2, r7, #14
 8011830:	4611      	mov	r1, r2
 8011832:	4618      	mov	r0, r3
 8011834:	f7ff fad0 	bl	8010dd8 <lwip_netconn_is_err_msg>
 8011838:	4603      	mov	r3, r0
 801183a:	2b00      	cmp	r3, #0
 801183c:	d113      	bne.n	8011866 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8011842:	6978      	ldr	r0, [r7, #20]
 8011844:	f7ff ffac 	bl	80117a0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d007      	beq.n	8011860 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	4618      	mov	r0, r3
 8011856:	f003 fbd3 	bl	8015000 <tcp_abort>
            newconn->pcb.tcp = NULL;
 801185a:	697b      	ldr	r3, [r7, #20]
 801185c:	2200      	movs	r2, #0
 801185e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011860:	6978      	ldr	r0, [r7, #20]
 8011862:	f7ff ff53 	bl	801170c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	3314      	adds	r3, #20
 801186a:	f107 0210 	add.w	r2, r7, #16
 801186e:	4611      	mov	r1, r2
 8011870:	4618      	mov	r0, r3
 8011872:	f00c f8d0 	bl	801da16 <sys_arch_mbox_tryfetch>
 8011876:	4603      	mov	r3, r0
 8011878:	f1b3 3fff 	cmp.w	r3, #4294967295
 801187c:	d1d5      	bne.n	801182a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	3314      	adds	r3, #20
 8011882:	4618      	mov	r0, r3
 8011884:	f00c f85c 	bl	801d940 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	3314      	adds	r3, #20
 801188c:	4618      	mov	r0, r3
 801188e:	f00c f8ef 	bl	801da70 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011892:	bf00      	nop
 8011894:	3718      	adds	r7, #24
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
	...

0801189c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b086      	sub	sp, #24
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	460b      	mov	r3, r1
 80118a6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80118a8:	2300      	movs	r3, #0
 80118aa:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d106      	bne.n	80118c0 <lwip_netconn_do_close_internal+0x24>
 80118b2:	4b87      	ldr	r3, [pc, #540]	; (8011ad0 <lwip_netconn_do_close_internal+0x234>)
 80118b4:	f240 32a2 	movw	r2, #930	; 0x3a2
 80118b8:	4986      	ldr	r1, [pc, #536]	; (8011ad4 <lwip_netconn_do_close_internal+0x238>)
 80118ba:	4887      	ldr	r0, [pc, #540]	; (8011ad8 <lwip_netconn_do_close_internal+0x23c>)
 80118bc:	f00c fd5a 	bl	801e374 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80118c8:	2b10      	cmp	r3, #16
 80118ca:	d006      	beq.n	80118da <lwip_netconn_do_close_internal+0x3e>
 80118cc:	4b80      	ldr	r3, [pc, #512]	; (8011ad0 <lwip_netconn_do_close_internal+0x234>)
 80118ce:	f240 32a3 	movw	r2, #931	; 0x3a3
 80118d2:	4982      	ldr	r1, [pc, #520]	; (8011adc <lwip_netconn_do_close_internal+0x240>)
 80118d4:	4880      	ldr	r0, [pc, #512]	; (8011ad8 <lwip_netconn_do_close_internal+0x23c>)
 80118d6:	f00c fd4d 	bl	801e374 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	785b      	ldrb	r3, [r3, #1]
 80118de:	2b04      	cmp	r3, #4
 80118e0:	d006      	beq.n	80118f0 <lwip_netconn_do_close_internal+0x54>
 80118e2:	4b7b      	ldr	r3, [pc, #492]	; (8011ad0 <lwip_netconn_do_close_internal+0x234>)
 80118e4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80118e8:	497d      	ldr	r1, [pc, #500]	; (8011ae0 <lwip_netconn_do_close_internal+0x244>)
 80118ea:	487b      	ldr	r0, [pc, #492]	; (8011ad8 <lwip_netconn_do_close_internal+0x23c>)
 80118ec:	f00c fd42 	bl	801e374 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	685b      	ldr	r3, [r3, #4]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d106      	bne.n	8011906 <lwip_netconn_do_close_internal+0x6a>
 80118f8:	4b75      	ldr	r3, [pc, #468]	; (8011ad0 <lwip_netconn_do_close_internal+0x234>)
 80118fa:	f240 32a5 	movw	r2, #933	; 0x3a5
 80118fe:	4979      	ldr	r1, [pc, #484]	; (8011ae4 <lwip_netconn_do_close_internal+0x248>)
 8011900:	4875      	ldr	r0, [pc, #468]	; (8011ad8 <lwip_netconn_do_close_internal+0x23c>)
 8011902:	f00c fd37 	bl	801e374 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	69db      	ldr	r3, [r3, #28]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d106      	bne.n	801191c <lwip_netconn_do_close_internal+0x80>
 801190e:	4b70      	ldr	r3, [pc, #448]	; (8011ad0 <lwip_netconn_do_close_internal+0x234>)
 8011910:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011914:	4974      	ldr	r1, [pc, #464]	; (8011ae8 <lwip_netconn_do_close_internal+0x24c>)
 8011916:	4870      	ldr	r0, [pc, #448]	; (8011ad8 <lwip_netconn_do_close_internal+0x23c>)
 8011918:	f00c fd2c 	bl	801e374 <iprintf>

  tpcb = conn->pcb.tcp;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	69db      	ldr	r3, [r3, #28]
 8011926:	7a1b      	ldrb	r3, [r3, #8]
 8011928:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801192a:	7bfb      	ldrb	r3, [r7, #15]
 801192c:	f003 0301 	and.w	r3, r3, #1
 8011930:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8011932:	7bfb      	ldrb	r3, [r7, #15]
 8011934:	f003 0302 	and.w	r3, r3, #2
 8011938:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801193a:	7bfb      	ldrb	r3, [r7, #15]
 801193c:	2b03      	cmp	r3, #3
 801193e:	d102      	bne.n	8011946 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8011940:	2301      	movs	r3, #1
 8011942:	75bb      	strb	r3, [r7, #22]
 8011944:	e01f      	b.n	8011986 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8011946:	7bbb      	ldrb	r3, [r7, #14]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d00e      	beq.n	801196a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011950:	2b05      	cmp	r3, #5
 8011952:	d007      	beq.n	8011964 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8011958:	2b06      	cmp	r3, #6
 801195a:	d003      	beq.n	8011964 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011960:	2b08      	cmp	r3, #8
 8011962:	d102      	bne.n	801196a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8011964:	2301      	movs	r3, #1
 8011966:	75bb      	strb	r3, [r7, #22]
 8011968:	e00d      	b.n	8011986 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801196a:	7b7b      	ldrb	r3, [r7, #13]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d008      	beq.n	8011982 <lwip_netconn_do_close_internal+0xe6>
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	8b5b      	ldrh	r3, [r3, #26]
 8011974:	f003 0310 	and.w	r3, r3, #16
 8011978:	2b00      	cmp	r3, #0
 801197a:	d002      	beq.n	8011982 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 801197c:	2301      	movs	r3, #1
 801197e:	75bb      	strb	r3, [r7, #22]
 8011980:	e001      	b.n	8011986 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8011982:	2300      	movs	r3, #0
 8011984:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8011986:	7dbb      	ldrb	r3, [r7, #22]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d003      	beq.n	8011994 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 801198c:	2100      	movs	r1, #0
 801198e:	6938      	ldr	r0, [r7, #16]
 8011990:	f004 fbc4 	bl	801611c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	7d1b      	ldrb	r3, [r3, #20]
 8011998:	2b01      	cmp	r3, #1
 801199a:	d104      	bne.n	80119a6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 801199c:	2100      	movs	r1, #0
 801199e:	6938      	ldr	r0, [r7, #16]
 80119a0:	f004 fc34 	bl	801620c <tcp_accept>
 80119a4:	e01d      	b.n	80119e2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80119a6:	7bbb      	ldrb	r3, [r7, #14]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d007      	beq.n	80119bc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80119ac:	2100      	movs	r1, #0
 80119ae:	6938      	ldr	r0, [r7, #16]
 80119b0:	f004 fbc6 	bl	8016140 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80119b4:	2100      	movs	r1, #0
 80119b6:	6938      	ldr	r0, [r7, #16]
 80119b8:	f004 fc28 	bl	801620c <tcp_accept>
    }
    if (shut_tx) {
 80119bc:	7b7b      	ldrb	r3, [r7, #13]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d003      	beq.n	80119ca <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80119c2:	2100      	movs	r1, #0
 80119c4:	6938      	ldr	r0, [r7, #16]
 80119c6:	f004 fbdd 	bl	8016184 <tcp_sent>
    }
    if (shut_close) {
 80119ca:	7dbb      	ldrb	r3, [r7, #22]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d008      	beq.n	80119e2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80119d0:	2200      	movs	r2, #0
 80119d2:	2100      	movs	r1, #0
 80119d4:	6938      	ldr	r0, [r7, #16]
 80119d6:	f004 fc31 	bl	801623c <tcp_poll>
      tcp_err(tpcb, NULL);
 80119da:	2100      	movs	r1, #0
 80119dc:	6938      	ldr	r0, [r7, #16]
 80119de:	f004 fbf3 	bl	80161c8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80119e2:	7dbb      	ldrb	r3, [r7, #22]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d005      	beq.n	80119f4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80119e8:	6938      	ldr	r0, [r7, #16]
 80119ea:	f003 f9c3 	bl	8014d74 <tcp_close>
 80119ee:	4603      	mov	r3, r0
 80119f0:	75fb      	strb	r3, [r7, #23]
 80119f2:	e007      	b.n	8011a04 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80119f4:	7bbb      	ldrb	r3, [r7, #14]
 80119f6:	7b7a      	ldrb	r2, [r7, #13]
 80119f8:	4619      	mov	r1, r3
 80119fa:	6938      	ldr	r0, [r7, #16]
 80119fc:	f003 f9e6 	bl	8014dcc <tcp_shutdown>
 8011a00:	4603      	mov	r3, r0
 8011a02:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8011a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d102      	bne.n	8011a12 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	757b      	strb	r3, [r7, #21]
 8011a10:	e016      	b.n	8011a40 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8011a12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a1a:	d10f      	bne.n	8011a3c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	69db      	ldr	r3, [r3, #28]
 8011a20:	7a5b      	ldrb	r3, [r3, #9]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d10c      	bne.n	8011a40 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8011a26:	2301      	movs	r3, #1
 8011a28:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8011a2a:	7dbb      	ldrb	r3, [r7, #22]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d007      	beq.n	8011a40 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8011a30:	6938      	ldr	r0, [r7, #16]
 8011a32:	f003 fae5 	bl	8015000 <tcp_abort>
          err = ERR_OK;
 8011a36:	2300      	movs	r3, #0
 8011a38:	75fb      	strb	r3, [r7, #23]
 8011a3a:	e001      	b.n	8011a40 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011a40:	7d7b      	ldrb	r3, [r7, #21]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d052      	beq.n	8011aec <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	69db      	ldr	r3, [r3, #28]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	330c      	adds	r3, #12
 8011a4e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	69db      	ldr	r3, [r3, #28]
 8011a54:	7dfa      	ldrb	r2, [r7, #23]
 8011a56:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	61da      	str	r2, [r3, #28]
    conn->state = NETCONN_NONE;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2200      	movs	r2, #0
 8011a62:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8011a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d129      	bne.n	8011ac0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8011a6c:	7dbb      	ldrb	r3, [r7, #22]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d00c      	beq.n	8011a8c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2200      	movs	r2, #0
 8011a76:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6a1b      	ldr	r3, [r3, #32]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d005      	beq.n	8011a8c <lwip_netconn_do_close_internal+0x1f0>
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6a1b      	ldr	r3, [r3, #32]
 8011a84:	2200      	movs	r2, #0
 8011a86:	2104      	movs	r1, #4
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	4798      	blx	r3
      }
      if (shut_rx) {
 8011a8c:	7bbb      	ldrb	r3, [r7, #14]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d009      	beq.n	8011aa6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6a1b      	ldr	r3, [r3, #32]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d005      	beq.n	8011aa6 <lwip_netconn_do_close_internal+0x20a>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6a1b      	ldr	r3, [r3, #32]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	2100      	movs	r1, #0
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	4798      	blx	r3
      }
      if (shut_tx) {
 8011aa6:	7b7b      	ldrb	r3, [r7, #13]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d009      	beq.n	8011ac0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6a1b      	ldr	r3, [r3, #32]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d005      	beq.n	8011ac0 <lwip_netconn_do_close_internal+0x224>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6a1b      	ldr	r3, [r3, #32]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	2102      	movs	r1, #2
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011ac0:	78fb      	ldrb	r3, [r7, #3]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d002      	beq.n	8011acc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8011ac6:	68b8      	ldr	r0, [r7, #8]
 8011ac8:	f00c f838 	bl	801db3c <sys_sem_signal>
    }
    return ERR_OK;
 8011acc:	2300      	movs	r3, #0
 8011ace:	e03c      	b.n	8011b4a <lwip_netconn_do_close_internal+0x2ae>
 8011ad0:	08020058 	.word	0x08020058
 8011ad4:	0802032c 	.word	0x0802032c
 8011ad8:	0802009c 	.word	0x0802009c
 8011adc:	0802033c 	.word	0x0802033c
 8011ae0:	0802035c 	.word	0x0802035c
 8011ae4:	08020380 	.word	0x08020380
 8011ae8:	080201c0 	.word	0x080201c0
  }
  if (!close_finished) {
 8011aec:	7d7b      	ldrb	r3, [r7, #21]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d11e      	bne.n	8011b30 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	7d1b      	ldrb	r3, [r3, #20]
 8011af6:	2b01      	cmp	r3, #1
 8011af8:	d106      	bne.n	8011b08 <lwip_netconn_do_close_internal+0x26c>
 8011afa:	4b16      	ldr	r3, [pc, #88]	; (8011b54 <lwip_netconn_do_close_internal+0x2b8>)
 8011afc:	f240 4241 	movw	r2, #1089	; 0x441
 8011b00:	4915      	ldr	r1, [pc, #84]	; (8011b58 <lwip_netconn_do_close_internal+0x2bc>)
 8011b02:	4816      	ldr	r0, [pc, #88]	; (8011b5c <lwip_netconn_do_close_internal+0x2c0>)
 8011b04:	f00c fc36 	bl	801e374 <iprintf>
    if (shut_tx) {
 8011b08:	7b7b      	ldrb	r3, [r7, #13]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d003      	beq.n	8011b16 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8011b0e:	4914      	ldr	r1, [pc, #80]	; (8011b60 <lwip_netconn_do_close_internal+0x2c4>)
 8011b10:	6938      	ldr	r0, [r7, #16]
 8011b12:	f004 fb37 	bl	8016184 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8011b16:	2201      	movs	r2, #1
 8011b18:	4912      	ldr	r1, [pc, #72]	; (8011b64 <lwip_netconn_do_close_internal+0x2c8>)
 8011b1a:	6938      	ldr	r0, [r7, #16]
 8011b1c:	f004 fb8e 	bl	801623c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8011b20:	4911      	ldr	r1, [pc, #68]	; (8011b68 <lwip_netconn_do_close_internal+0x2cc>)
 8011b22:	6938      	ldr	r0, [r7, #16]
 8011b24:	f004 fb50 	bl	80161c8 <tcp_err>
    tcp_arg(tpcb, conn);
 8011b28:	6879      	ldr	r1, [r7, #4]
 8011b2a:	6938      	ldr	r0, [r7, #16]
 8011b2c:	f004 faf6 	bl	801611c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8011b30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d106      	bne.n	8011b46 <lwip_netconn_do_close_internal+0x2aa>
 8011b38:	4b06      	ldr	r3, [pc, #24]	; (8011b54 <lwip_netconn_do_close_internal+0x2b8>)
 8011b3a:	f240 424d 	movw	r2, #1101	; 0x44d
 8011b3e:	490b      	ldr	r1, [pc, #44]	; (8011b6c <lwip_netconn_do_close_internal+0x2d0>)
 8011b40:	4806      	ldr	r0, [pc, #24]	; (8011b5c <lwip_netconn_do_close_internal+0x2c0>)
 8011b42:	f00c fc17 	bl	801e374 <iprintf>
  return err;
 8011b46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3718      	adds	r7, #24
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	08020058 	.word	0x08020058
 8011b58:	08020394 	.word	0x08020394
 8011b5c:	0802009c 	.word	0x0802009c
 8011b60:	0801111d 	.word	0x0801111d
 8011b64:	08011055 	.word	0x08011055
 8011b68:	080111c5 	.word	0x080111c5
 8011b6c:	080203b8 	.word	0x080203b8

08011b70 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b084      	sub	sp, #16
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	785b      	ldrb	r3, [r3, #1]
 8011b82:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8011b84:	7afb      	ldrb	r3, [r7, #11]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d00d      	beq.n	8011ba6 <lwip_netconn_do_delconn+0x36>
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b94:	2b10      	cmp	r3, #16
 8011b96:	d006      	beq.n	8011ba6 <lwip_netconn_do_delconn+0x36>
 8011b98:	4b60      	ldr	r3, [pc, #384]	; (8011d1c <lwip_netconn_do_delconn+0x1ac>)
 8011b9a:	f240 425e 	movw	r2, #1118	; 0x45e
 8011b9e:	4960      	ldr	r1, [pc, #384]	; (8011d20 <lwip_netconn_do_delconn+0x1b0>)
 8011ba0:	4860      	ldr	r0, [pc, #384]	; (8011d24 <lwip_netconn_do_delconn+0x1b4>)
 8011ba2:	f00c fbe7 	bl	801e374 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8011ba6:	7afb      	ldrb	r3, [r7, #11]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d005      	beq.n	8011bb8 <lwip_netconn_do_delconn+0x48>
 8011bac:	7afb      	ldrb	r3, [r7, #11]
 8011bae:	2b02      	cmp	r3, #2
 8011bb0:	d002      	beq.n	8011bb8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8011bb2:	7afb      	ldrb	r3, [r7, #11]
 8011bb4:	2b03      	cmp	r3, #3
 8011bb6:	d109      	bne.n	8011bcc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8011bb8:	7afb      	ldrb	r3, [r7, #11]
 8011bba:	2b03      	cmp	r3, #3
 8011bbc:	d10a      	bne.n	8011bd4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	7e1b      	ldrb	r3, [r3, #24]
 8011bc4:	f003 0304 	and.w	r3, r3, #4
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d103      	bne.n	8011bd4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	22fb      	movs	r2, #251	; 0xfb
 8011bd0:	711a      	strb	r2, [r3, #4]
 8011bd2:	e097      	b.n	8011d04 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8011bd4:	7afb      	ldrb	r3, [r7, #11]
 8011bd6:	2b03      	cmp	r3, #3
 8011bd8:	d10d      	bne.n	8011bf6 <lwip_netconn_do_delconn+0x86>
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	7e1b      	ldrb	r3, [r3, #24]
 8011be0:	f003 0304 	and.w	r3, r3, #4
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d106      	bne.n	8011bf6 <lwip_netconn_do_delconn+0x86>
 8011be8:	4b4c      	ldr	r3, [pc, #304]	; (8011d1c <lwip_netconn_do_delconn+0x1ac>)
 8011bea:	f240 427a 	movw	r2, #1146	; 0x47a
 8011bee:	494e      	ldr	r1, [pc, #312]	; (8011d28 <lwip_netconn_do_delconn+0x1b8>)
 8011bf0:	484c      	ldr	r0, [pc, #304]	; (8011d24 <lwip_netconn_do_delconn+0x1b4>)
 8011bf2:	f00c fbbf 	bl	801e374 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7ff fdcd 	bl	80117a0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	685b      	ldr	r3, [r3, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d05f      	beq.n	8011cd0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c1a:	2b10      	cmp	r3, #16
 8011c1c:	d00d      	beq.n	8011c3a <lwip_netconn_do_delconn+0xca>
 8011c1e:	2b20      	cmp	r3, #32
 8011c20:	d151      	bne.n	8011cc6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	685b      	ldr	r3, [r3, #4]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f009 faf8 	bl	801b228 <udp_remove>
          break;
 8011c38:	e046      	b.n	8011cc8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	69db      	ldr	r3, [r3, #28]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d006      	beq.n	8011c52 <lwip_netconn_do_delconn+0xe2>
 8011c44:	4b35      	ldr	r3, [pc, #212]	; (8011d1c <lwip_netconn_do_delconn+0x1ac>)
 8011c46:	f240 4294 	movw	r2, #1172	; 0x494
 8011c4a:	4938      	ldr	r1, [pc, #224]	; (8011d2c <lwip_netconn_do_delconn+0x1bc>)
 8011c4c:	4835      	ldr	r0, [pc, #212]	; (8011d24 <lwip_netconn_do_delconn+0x1b4>)
 8011c4e:	f00c fb91 	bl	801e374 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	2204      	movs	r2, #4
 8011c58:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	2203      	movs	r2, #3
 8011c5e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	68fa      	ldr	r2, [r7, #12]
 8011c66:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	2100      	movs	r1, #0
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7ff fe14 	bl	801189c <lwip_netconn_do_close_internal>
 8011c74:	4603      	mov	r3, r0
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d04b      	beq.n	8011d12 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	785b      	ldrb	r3, [r3, #1]
 8011c80:	2b04      	cmp	r3, #4
 8011c82:	d006      	beq.n	8011c92 <lwip_netconn_do_delconn+0x122>
 8011c84:	4b25      	ldr	r3, [pc, #148]	; (8011d1c <lwip_netconn_do_delconn+0x1ac>)
 8011c86:	f240 429a 	movw	r2, #1178	; 0x49a
 8011c8a:	4929      	ldr	r1, [pc, #164]	; (8011d30 <lwip_netconn_do_delconn+0x1c0>)
 8011c8c:	4825      	ldr	r0, [pc, #148]	; (8011d24 <lwip_netconn_do_delconn+0x1b4>)
 8011c8e:	f00c fb71 	bl	801e374 <iprintf>
            UNLOCK_TCPIP_CORE();
 8011c92:	4828      	ldr	r0, [pc, #160]	; (8011d34 <lwip_netconn_do_delconn+0x1c4>)
 8011c94:	f00b ffc3 	bl	801dc1e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	330c      	adds	r3, #12
 8011c9e:	2100      	movs	r1, #0
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f00b ff1a 	bl	801dada <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8011ca6:	4823      	ldr	r0, [pc, #140]	; (8011d34 <lwip_netconn_do_delconn+0x1c4>)
 8011ca8:	f00b ffaa 	bl	801dc00 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	785b      	ldrb	r3, [r3, #1]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d02d      	beq.n	8011d12 <lwip_netconn_do_delconn+0x1a2>
 8011cb6:	4b19      	ldr	r3, [pc, #100]	; (8011d1c <lwip_netconn_do_delconn+0x1ac>)
 8011cb8:	f240 429e 	movw	r2, #1182	; 0x49e
 8011cbc:	491c      	ldr	r1, [pc, #112]	; (8011d30 <lwip_netconn_do_delconn+0x1c0>)
 8011cbe:	4819      	ldr	r0, [pc, #100]	; (8011d24 <lwip_netconn_do_delconn+0x1b4>)
 8011cc0:	f00c fb58 	bl	801e374 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8011cc4:	e025      	b.n	8011d12 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8011cc6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	6a1b      	ldr	r3, [r3, #32]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d007      	beq.n	8011cea <lwip_netconn_do_delconn+0x17a>
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	6a1b      	ldr	r3, [r3, #32]
 8011ce0:	68fa      	ldr	r2, [r7, #12]
 8011ce2:	6810      	ldr	r0, [r2, #0]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	2100      	movs	r1, #0
 8011ce8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	6a1b      	ldr	r3, [r3, #32]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d007      	beq.n	8011d04 <lwip_netconn_do_delconn+0x194>
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	6a1b      	ldr	r3, [r3, #32]
 8011cfa:	68fa      	ldr	r2, [r7, #12]
 8011cfc:	6810      	ldr	r0, [r2, #0]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	2102      	movs	r1, #2
 8011d02:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	330c      	adds	r3, #12
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f00b ff30 	bl	801db70 <sys_sem_valid>
 8011d10:	e000      	b.n	8011d14 <lwip_netconn_do_delconn+0x1a4>
          return;
 8011d12:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8011d14:	3710      	adds	r7, #16
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
 8011d1a:	bf00      	nop
 8011d1c:	08020058 	.word	0x08020058
 8011d20:	080203c8 	.word	0x080203c8
 8011d24:	0802009c 	.word	0x0802009c
 8011d28:	080203dc 	.word	0x080203dc
 8011d2c:	080203fc 	.word	0x080203fc
 8011d30:	08020418 	.word	0x08020418
 8011d34:	2000a068 	.word	0x2000a068

08011d38 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	685b      	ldr	r3, [r3, #4]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d025      	beq.n	8011d9a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d58:	2b10      	cmp	r3, #16
 8011d5a:	d00e      	beq.n	8011d7a <lwip_netconn_do_bind+0x42>
 8011d5c:	2b20      	cmp	r3, #32
 8011d5e:	d119      	bne.n	8011d94 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011d60:	68bb      	ldr	r3, [r7, #8]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	6858      	ldr	r0, [r3, #4]
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	6899      	ldr	r1, [r3, #8]
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	899b      	ldrh	r3, [r3, #12]
 8011d6e:	461a      	mov	r2, r3
 8011d70:	f009 f9b2 	bl	801b0d8 <udp_bind>
 8011d74:	4603      	mov	r3, r0
 8011d76:	73fb      	strb	r3, [r7, #15]
        break;
 8011d78:	e011      	b.n	8011d9e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	6858      	ldr	r0, [r3, #4]
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	6899      	ldr	r1, [r3, #8]
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	899b      	ldrh	r3, [r3, #12]
 8011d88:	461a      	mov	r2, r3
 8011d8a:	f003 f945 	bl	8015018 <tcp_bind>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	73fb      	strb	r3, [r7, #15]
        break;
 8011d92:	e004      	b.n	8011d9e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8011d94:	23fa      	movs	r3, #250	; 0xfa
 8011d96:	73fb      	strb	r3, [r7, #15]
        break;
 8011d98:	e001      	b.n	8011d9e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8011d9a:	23fa      	movs	r3, #250	; 0xfa
 8011d9c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	7bfa      	ldrb	r2, [r7, #15]
 8011da2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8011da4:	bf00      	nop
 8011da6:	3710      	adds	r7, #16
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b086      	sub	sp, #24
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d07f      	beq.n	8011ec2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011dcc:	2b10      	cmp	r3, #16
 8011dce:	d175      	bne.n	8011ebc <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	785b      	ldrb	r3, [r3, #1]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d165      	bne.n	8011ea6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	7d1b      	ldrb	r3, [r3, #20]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d002      	beq.n	8011dec <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8011de6:	23fa      	movs	r3, #250	; 0xfa
 8011de8:	72fb      	strb	r3, [r7, #11]
 8011dea:	e06c      	b.n	8011ec6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8011dec:	23ff      	movs	r3, #255	; 0xff
 8011dee:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	f107 020b 	add.w	r2, r7, #11
 8011dfa:	7cf9      	ldrb	r1, [r7, #19]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f003 f9c3 	bl	8015188 <tcp_listen_with_backlog_and_err>
 8011e02:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d05d      	beq.n	8011ec6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	3310      	adds	r3, #16
 8011e10:	4618      	mov	r0, r3
 8011e12:	f00b fe1c 	bl	801da4e <sys_mbox_valid>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00b      	beq.n	8011e34 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	3310      	adds	r3, #16
 8011e22:	4618      	mov	r0, r3
 8011e24:	f00b fd8c 	bl	801d940 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	3310      	adds	r3, #16
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f00b fe1e 	bl	801da70 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8011e34:	2300      	movs	r3, #0
 8011e36:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	3314      	adds	r3, #20
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f00b fe05 	bl	801da4e <sys_mbox_valid>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d108      	bne.n	8011e5c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8011e4a:	697b      	ldr	r3, [r7, #20]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	3314      	adds	r3, #20
 8011e50:	2106      	movs	r1, #6
 8011e52:	4618      	mov	r0, r3
 8011e54:	f00b fd52 	bl	801d8fc <sys_mbox_new>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8011e5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d118      	bne.n	8011e96 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	2202      	movs	r2, #2
 8011e6a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	68fa      	ldr	r2, [r7, #12]
 8011e72:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8011e74:	697b      	ldr	r3, [r7, #20]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	685a      	ldr	r2, [r3, #4]
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	4619      	mov	r1, r3
 8011e80:	4610      	mov	r0, r2
 8011e82:	f004 f94b 	bl	801611c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	685b      	ldr	r3, [r3, #4]
 8011e8c:	4912      	ldr	r1, [pc, #72]	; (8011ed8 <lwip_netconn_do_listen+0x12c>)
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f004 f9bc 	bl	801620c <tcp_accept>
 8011e94:	e017      	b.n	8011ec6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8011e96:	68f8      	ldr	r0, [r7, #12]
 8011e98:	f002 ff6c 	bl	8014d74 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	605a      	str	r2, [r3, #4]
 8011ea4:	e00f      	b.n	8011ec6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	785b      	ldrb	r3, [r3, #1]
 8011eac:	2b02      	cmp	r3, #2
 8011eae:	d102      	bne.n	8011eb6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	72fb      	strb	r3, [r7, #11]
 8011eb4:	e007      	b.n	8011ec6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8011eb6:	23f5      	movs	r3, #245	; 0xf5
 8011eb8:	72fb      	strb	r3, [r7, #11]
 8011eba:	e004      	b.n	8011ec6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8011ebc:	23f0      	movs	r3, #240	; 0xf0
 8011ebe:	72fb      	strb	r3, [r7, #11]
 8011ec0:	e001      	b.n	8011ec6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8011ec2:	23f5      	movs	r3, #245	; 0xf5
 8011ec4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8011ec6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8011ece:	bf00      	nop
 8011ed0:	3718      	adds	r7, #24
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}
 8011ed6:	bf00      	nop
 8011ed8:	080113c1 	.word	0x080113c1

08011edc <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b086      	sub	sp, #24
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	2200      	movs	r2, #0
 8011eec:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	685b      	ldr	r3, [r3, #4]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d022      	beq.n	8011f3e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	781b      	ldrb	r3, [r3, #0]
 8011efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f02:	2b10      	cmp	r3, #16
 8011f04:	d11b      	bne.n	8011f3e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	689b      	ldr	r3, [r3, #8]
 8011f0a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8011f0c:	697b      	ldr	r3, [r7, #20]
 8011f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f12:	d202      	bcs.n	8011f1a <lwip_netconn_do_recv+0x3e>
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	e001      	b.n	8011f1e <lwip_netconn_do_recv+0x42>
 8011f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011f1e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	89fa      	ldrh	r2, [r7, #14]
 8011f28:	4611      	mov	r1, r2
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f003 fa30 	bl	8015390 <tcp_recved>
        remaining -= recved;
 8011f30:	89fb      	ldrh	r3, [r7, #14]
 8011f32:	697a      	ldr	r2, [r7, #20]
 8011f34:	1ad3      	subs	r3, r2, r3
 8011f36:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d1e6      	bne.n	8011f0c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011f3e:	bf00      	nop
 8011f40:	3718      	adds	r7, #24
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
	...

08011f48 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b088      	sub	sp, #32
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	460b      	mov	r3, r1
 8011f52:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8011f54:	2300      	movs	r3, #0
 8011f56:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d106      	bne.n	8011f6c <lwip_netconn_do_writemore+0x24>
 8011f5e:	4b96      	ldr	r3, [pc, #600]	; (80121b8 <lwip_netconn_do_writemore+0x270>)
 8011f60:	f240 6273 	movw	r2, #1651	; 0x673
 8011f64:	4995      	ldr	r1, [pc, #596]	; (80121bc <lwip_netconn_do_writemore+0x274>)
 8011f66:	4896      	ldr	r0, [pc, #600]	; (80121c0 <lwip_netconn_do_writemore+0x278>)
 8011f68:	f00c fa04 	bl	801e374 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	785b      	ldrb	r3, [r3, #1]
 8011f70:	2b01      	cmp	r3, #1
 8011f72:	d006      	beq.n	8011f82 <lwip_netconn_do_writemore+0x3a>
 8011f74:	4b90      	ldr	r3, [pc, #576]	; (80121b8 <lwip_netconn_do_writemore+0x270>)
 8011f76:	f240 6274 	movw	r2, #1652	; 0x674
 8011f7a:	4992      	ldr	r1, [pc, #584]	; (80121c4 <lwip_netconn_do_writemore+0x27c>)
 8011f7c:	4890      	ldr	r0, [pc, #576]	; (80121c0 <lwip_netconn_do_writemore+0x278>)
 8011f7e:	f00c f9f9 	bl	801e374 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	69db      	ldr	r3, [r3, #28]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d106      	bne.n	8011f98 <lwip_netconn_do_writemore+0x50>
 8011f8a:	4b8b      	ldr	r3, [pc, #556]	; (80121b8 <lwip_netconn_do_writemore+0x270>)
 8011f8c:	f240 6275 	movw	r2, #1653	; 0x675
 8011f90:	498d      	ldr	r1, [pc, #564]	; (80121c8 <lwip_netconn_do_writemore+0x280>)
 8011f92:	488b      	ldr	r0, [pc, #556]	; (80121c0 <lwip_netconn_do_writemore+0x278>)
 8011f94:	f00c f9ee 	bl	801e374 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d106      	bne.n	8011fae <lwip_netconn_do_writemore+0x66>
 8011fa0:	4b85      	ldr	r3, [pc, #532]	; (80121b8 <lwip_netconn_do_writemore+0x270>)
 8011fa2:	f240 6276 	movw	r2, #1654	; 0x676
 8011fa6:	4989      	ldr	r1, [pc, #548]	; (80121cc <lwip_netconn_do_writemore+0x284>)
 8011fa8:	4885      	ldr	r0, [pc, #532]	; (80121c0 <lwip_netconn_do_writemore+0x278>)
 8011faa:	f00c f9e3 	bl	801e374 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	69db      	ldr	r3, [r3, #28]
 8011fb2:	699a      	ldr	r2, [r3, #24]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	69db      	ldr	r3, [r3, #28]
 8011fb8:	695b      	ldr	r3, [r3, #20]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d306      	bcc.n	8011fcc <lwip_netconn_do_writemore+0x84>
 8011fbe:	4b7e      	ldr	r3, [pc, #504]	; (80121b8 <lwip_netconn_do_writemore+0x270>)
 8011fc0:	f240 6277 	movw	r2, #1655	; 0x677
 8011fc4:	4982      	ldr	r1, [pc, #520]	; (80121d0 <lwip_netconn_do_writemore+0x288>)
 8011fc6:	487e      	ldr	r0, [pc, #504]	; (80121c0 <lwip_netconn_do_writemore+0x278>)
 8011fc8:	f00c f9d4 	bl	801e374 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	69db      	ldr	r3, [r3, #28]
 8011fd0:	899b      	ldrh	r3, [r3, #12]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d106      	bne.n	8011fe4 <lwip_netconn_do_writemore+0x9c>
 8011fd6:	4b78      	ldr	r3, [pc, #480]	; (80121b8 <lwip_netconn_do_writemore+0x270>)
 8011fd8:	f240 6279 	movw	r2, #1657	; 0x679
 8011fdc:	497d      	ldr	r1, [pc, #500]	; (80121d4 <lwip_netconn_do_writemore+0x28c>)
 8011fde:	4878      	ldr	r0, [pc, #480]	; (80121c0 <lwip_netconn_do_writemore+0x278>)
 8011fe0:	f00c f9c8 	bl	801e374 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	69db      	ldr	r3, [r3, #28]
 8011fe8:	7f1b      	ldrb	r3, [r3, #28]
 8011fea:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	7e1b      	ldrb	r3, [r3, #24]
 8011ff0:	f003 0302 	and.w	r3, r3, #2
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d104      	bne.n	8012002 <lwip_netconn_do_writemore+0xba>
 8011ff8:	7ebb      	ldrb	r3, [r7, #26]
 8011ffa:	f003 0304 	and.w	r3, r3, #4
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d001      	beq.n	8012006 <lwip_netconn_do_writemore+0xbe>
 8012002:	2301      	movs	r3, #1
 8012004:	e000      	b.n	8012008 <lwip_netconn_do_writemore+0xc0>
 8012006:	2300      	movs	r3, #0
 8012008:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	69db      	ldr	r3, [r3, #28]
 801200e:	689b      	ldr	r3, [r3, #8]
 8012010:	681a      	ldr	r2, [r3, #0]
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	69db      	ldr	r3, [r3, #28]
 8012016:	691b      	ldr	r3, [r3, #16]
 8012018:	4413      	add	r3, r2
 801201a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	69db      	ldr	r3, [r3, #28]
 8012020:	689b      	ldr	r3, [r3, #8]
 8012022:	685a      	ldr	r2, [r3, #4]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	69db      	ldr	r3, [r3, #28]
 8012028:	691b      	ldr	r3, [r3, #16]
 801202a:	1ad3      	subs	r3, r2, r3
 801202c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012034:	d307      	bcc.n	8012046 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8012036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801203a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801203c:	7ebb      	ldrb	r3, [r7, #26]
 801203e:	f043 0302 	orr.w	r3, r3, #2
 8012042:	76bb      	strb	r3, [r7, #26]
 8012044:	e001      	b.n	801204a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012052:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012054:	89fa      	ldrh	r2, [r7, #14]
 8012056:	8bbb      	ldrh	r3, [r7, #28]
 8012058:	429a      	cmp	r2, r3
 801205a:	d216      	bcs.n	801208a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 801205c:	89fb      	ldrh	r3, [r7, #14]
 801205e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8012060:	7e3b      	ldrb	r3, [r7, #24]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d00d      	beq.n	8012082 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8012066:	8bbb      	ldrh	r3, [r7, #28]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d10e      	bne.n	801208a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	69db      	ldr	r3, [r3, #28]
 8012070:	699b      	ldr	r3, [r3, #24]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d102      	bne.n	801207c <lwip_netconn_do_writemore+0x134>
 8012076:	f06f 0306 	mvn.w	r3, #6
 801207a:	e000      	b.n	801207e <lwip_netconn_do_writemore+0x136>
 801207c:	2300      	movs	r3, #0
 801207e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8012080:	e07d      	b.n	801217e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8012082:	7ebb      	ldrb	r3, [r7, #26]
 8012084:	f043 0302 	orr.w	r3, r3, #2
 8012088:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	69db      	ldr	r3, [r3, #28]
 801208e:	691a      	ldr	r2, [r3, #16]
 8012090:	8bbb      	ldrh	r3, [r7, #28]
 8012092:	441a      	add	r2, r3
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	69db      	ldr	r3, [r3, #28]
 8012098:	689b      	ldr	r3, [r3, #8]
 801209a:	685b      	ldr	r3, [r3, #4]
 801209c:	429a      	cmp	r2, r3
 801209e:	d906      	bls.n	80120ae <lwip_netconn_do_writemore+0x166>
 80120a0:	4b45      	ldr	r3, [pc, #276]	; (80121b8 <lwip_netconn_do_writemore+0x270>)
 80120a2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80120a6:	494c      	ldr	r1, [pc, #304]	; (80121d8 <lwip_netconn_do_writemore+0x290>)
 80120a8:	4845      	ldr	r0, [pc, #276]	; (80121c0 <lwip_netconn_do_writemore+0x278>)
 80120aa:	f00c f963 	bl	801e374 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80120ae:	8bbb      	ldrh	r3, [r7, #28]
 80120b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120b4:	4293      	cmp	r3, r2
 80120b6:	d103      	bne.n	80120c0 <lwip_netconn_do_writemore+0x178>
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120be:	d209      	bcs.n	80120d4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80120c4:	8bba      	ldrh	r2, [r7, #28]
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d10b      	bne.n	80120e2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	69db      	ldr	r3, [r3, #28]
 80120ce:	899b      	ldrh	r3, [r3, #12]
 80120d0:	2b01      	cmp	r3, #1
 80120d2:	d906      	bls.n	80120e2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80120d4:	2301      	movs	r3, #1
 80120d6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80120d8:	7ebb      	ldrb	r3, [r7, #26]
 80120da:	f043 0302 	orr.w	r3, r3, #2
 80120de:	76bb      	strb	r3, [r7, #26]
 80120e0:	e001      	b.n	80120e6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80120e2:	2300      	movs	r3, #0
 80120e4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6858      	ldr	r0, [r3, #4]
 80120ea:	7ebb      	ldrb	r3, [r7, #26]
 80120ec:	8bba      	ldrh	r2, [r7, #28]
 80120ee:	6979      	ldr	r1, [r7, #20]
 80120f0:	f006 ff56 	bl	8018fa0 <tcp_write>
 80120f4:	4603      	mov	r3, r0
 80120f6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80120f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d12c      	bne.n	801215a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	69db      	ldr	r3, [r3, #28]
 8012104:	6999      	ldr	r1, [r3, #24]
 8012106:	8bba      	ldrh	r2, [r7, #28]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	69db      	ldr	r3, [r3, #28]
 801210c:	440a      	add	r2, r1
 801210e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	69db      	ldr	r3, [r3, #28]
 8012114:	6919      	ldr	r1, [r3, #16]
 8012116:	8bba      	ldrh	r2, [r7, #28]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	69db      	ldr	r3, [r3, #28]
 801211c:	440a      	add	r2, r1
 801211e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	69db      	ldr	r3, [r3, #28]
 8012124:	691a      	ldr	r2, [r3, #16]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	69db      	ldr	r3, [r3, #28]
 801212a:	689b      	ldr	r3, [r3, #8]
 801212c:	685b      	ldr	r3, [r3, #4]
 801212e:	429a      	cmp	r2, r3
 8012130:	d113      	bne.n	801215a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	69db      	ldr	r3, [r3, #28]
 8012136:	899a      	ldrh	r2, [r3, #12]
 8012138:	3a01      	subs	r2, #1
 801213a:	b292      	uxth	r2, r2
 801213c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	69db      	ldr	r3, [r3, #28]
 8012142:	899b      	ldrh	r3, [r3, #12]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d008      	beq.n	801215a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	69db      	ldr	r3, [r3, #28]
 801214c:	689a      	ldr	r2, [r3, #8]
 801214e:	3208      	adds	r2, #8
 8012150:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	69db      	ldr	r3, [r3, #28]
 8012156:	2200      	movs	r2, #0
 8012158:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801215a:	7e7b      	ldrb	r3, [r7, #25]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d004      	beq.n	801216a <lwip_netconn_do_writemore+0x222>
 8012160:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012164:	2b00      	cmp	r3, #0
 8012166:	f43f af50 	beq.w	801200a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801216a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d004      	beq.n	801217c <lwip_netconn_do_writemore+0x234>
 8012172:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801217a:	d146      	bne.n	801220a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 801217c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801217e:	7e3b      	ldrb	r3, [r7, #24]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d02b      	beq.n	80121dc <lwip_netconn_do_writemore+0x294>
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	69db      	ldr	r3, [r3, #28]
 8012188:	699a      	ldr	r2, [r3, #24]
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	69db      	ldr	r3, [r3, #28]
 801218e:	695b      	ldr	r3, [r3, #20]
 8012190:	429a      	cmp	r2, r3
 8012192:	d223      	bcs.n	80121dc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6a1b      	ldr	r3, [r3, #32]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d005      	beq.n	80121a8 <lwip_netconn_do_writemore+0x260>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6a1b      	ldr	r3, [r3, #32]
 80121a0:	2200      	movs	r2, #0
 80121a2:	2103      	movs	r1, #3
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	7e1b      	ldrb	r3, [r3, #24]
 80121ac:	f043 0310 	orr.w	r3, r3, #16
 80121b0:	b2da      	uxtb	r2, r3
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	761a      	strb	r2, [r3, #24]
 80121b6:	e028      	b.n	801220a <lwip_netconn_do_writemore+0x2c2>
 80121b8:	08020058 	.word	0x08020058
 80121bc:	080201b0 	.word	0x080201b0
 80121c0:	0802009c 	.word	0x0802009c
 80121c4:	080204b8 	.word	0x080204b8
 80121c8:	080201c0 	.word	0x080201c0
 80121cc:	080204d8 	.word	0x080204d8
 80121d0:	080204f0 	.word	0x080204f0
 80121d4:	08020530 	.word	0x08020530
 80121d8:	08020558 	.word	0x08020558
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	685b      	ldr	r3, [r3, #4]
 80121e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80121e4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80121e8:	d305      	bcc.n	80121f6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80121f2:	2b04      	cmp	r3, #4
 80121f4:	d909      	bls.n	801220a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6a1b      	ldr	r3, [r3, #32]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d005      	beq.n	801220a <lwip_netconn_do_writemore+0x2c2>
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6a1b      	ldr	r3, [r3, #32]
 8012202:	2200      	movs	r2, #0
 8012204:	2103      	movs	r1, #3
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801220a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d11d      	bne.n	801224e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	69db      	ldr	r3, [r3, #28]
 8012216:	699a      	ldr	r2, [r3, #24]
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	69db      	ldr	r3, [r3, #28]
 801221c:	695b      	ldr	r3, [r3, #20]
 801221e:	429a      	cmp	r2, r3
 8012220:	d002      	beq.n	8012228 <lwip_netconn_do_writemore+0x2e0>
 8012222:	7e3b      	ldrb	r3, [r7, #24]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d001      	beq.n	801222c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8012228:	2301      	movs	r3, #1
 801222a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	685b      	ldr	r3, [r3, #4]
 8012230:	4618      	mov	r0, r3
 8012232:	f007 fc9f 	bl	8019b74 <tcp_output>
 8012236:	4603      	mov	r3, r0
 8012238:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801223a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801223e:	f113 0f04 	cmn.w	r3, #4
 8012242:	d12c      	bne.n	801229e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012244:	7b3b      	ldrb	r3, [r7, #12]
 8012246:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012248:	2301      	movs	r3, #1
 801224a:	76fb      	strb	r3, [r7, #27]
 801224c:	e027      	b.n	801229e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801224e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012256:	d120      	bne.n	801229a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	4618      	mov	r0, r3
 801225e:	f007 fc89 	bl	8019b74 <tcp_output>
 8012262:	4603      	mov	r3, r0
 8012264:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8012266:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801226a:	f113 0f04 	cmn.w	r3, #4
 801226e:	d104      	bne.n	801227a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012270:	7b7b      	ldrb	r3, [r7, #13]
 8012272:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012274:	2301      	movs	r3, #1
 8012276:	76fb      	strb	r3, [r7, #27]
 8012278:	e011      	b.n	801229e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 801227a:	7e3b      	ldrb	r3, [r7, #24]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d00e      	beq.n	801229e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	69db      	ldr	r3, [r3, #28]
 8012284:	699b      	ldr	r3, [r3, #24]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d102      	bne.n	8012290 <lwip_netconn_do_writemore+0x348>
 801228a:	f06f 0306 	mvn.w	r3, #6
 801228e:	e000      	b.n	8012292 <lwip_netconn_do_writemore+0x34a>
 8012290:	2300      	movs	r3, #0
 8012292:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012294:	2301      	movs	r3, #1
 8012296:	76fb      	strb	r3, [r7, #27]
 8012298:	e001      	b.n	801229e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 801229a:	2301      	movs	r3, #1
 801229c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801229e:	7efb      	ldrb	r3, [r7, #27]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d015      	beq.n	80122d0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	69db      	ldr	r3, [r3, #28]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	330c      	adds	r3, #12
 80122ac:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	69db      	ldr	r3, [r3, #28]
 80122b2:	7ffa      	ldrb	r2, [r7, #31]
 80122b4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2200      	movs	r2, #0
 80122ba:	61da      	str	r2, [r3, #28]
    conn->state = NETCONN_NONE;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2200      	movs	r2, #0
 80122c0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80122c2:	78fb      	ldrb	r3, [r7, #3]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d006      	beq.n	80122d6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80122c8:	68b8      	ldr	r0, [r7, #8]
 80122ca:	f00b fc37 	bl	801db3c <sys_sem_signal>
 80122ce:	e002      	b.n	80122d6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80122d0:	f04f 33ff 	mov.w	r3, #4294967295
 80122d4:	e000      	b.n	80122d8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80122d6:	2300      	movs	r3, #0
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3720      	adds	r7, #32
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}

080122e0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	4618      	mov	r0, r3
 80122f2:	f7fe fd20 	bl	8010d36 <netconn_err>
 80122f6:	4603      	mov	r3, r0
 80122f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80122fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d166      	bne.n	80123d0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	781b      	ldrb	r3, [r3, #0]
 8012308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801230c:	2b10      	cmp	r3, #16
 801230e:	d15d      	bne.n	80123cc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	785b      	ldrb	r3, [r3, #1]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d002      	beq.n	8012320 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 801231a:	23fb      	movs	r3, #251	; 0xfb
 801231c:	73fb      	strb	r3, [r7, #15]
 801231e:	e057      	b.n	80123d0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d04d      	beq.n	80123c6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2201      	movs	r2, #1
 8012330:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	69db      	ldr	r3, [r3, #28]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d006      	beq.n	801234a <lwip_netconn_do_write+0x6a>
 801233c:	4b28      	ldr	r3, [pc, #160]	; (80123e0 <lwip_netconn_do_write+0x100>)
 801233e:	f240 7223 	movw	r2, #1827	; 0x723
 8012342:	4928      	ldr	r1, [pc, #160]	; (80123e4 <lwip_netconn_do_write+0x104>)
 8012344:	4828      	ldr	r0, [pc, #160]	; (80123e8 <lwip_netconn_do_write+0x108>)
 8012346:	f00c f815 	bl	801e374 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	695b      	ldr	r3, [r3, #20]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d106      	bne.n	8012360 <lwip_netconn_do_write+0x80>
 8012352:	4b23      	ldr	r3, [pc, #140]	; (80123e0 <lwip_netconn_do_write+0x100>)
 8012354:	f240 7224 	movw	r2, #1828	; 0x724
 8012358:	4924      	ldr	r1, [pc, #144]	; (80123ec <lwip_netconn_do_write+0x10c>)
 801235a:	4823      	ldr	r0, [pc, #140]	; (80123e8 <lwip_netconn_do_write+0x108>)
 801235c:	f00c f80a 	bl	801e374 <iprintf>
        msg->conn->current_msg = msg;
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	68ba      	ldr	r2, [r7, #8]
 8012366:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	2100      	movs	r1, #0
 801236e:	4618      	mov	r0, r3
 8012370:	f7ff fdea 	bl	8011f48 <lwip_netconn_do_writemore>
 8012374:	4603      	mov	r3, r0
 8012376:	2b00      	cmp	r3, #0
 8012378:	d02e      	beq.n	80123d8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	785b      	ldrb	r3, [r3, #1]
 8012380:	2b01      	cmp	r3, #1
 8012382:	d006      	beq.n	8012392 <lwip_netconn_do_write+0xb2>
 8012384:	4b16      	ldr	r3, [pc, #88]	; (80123e0 <lwip_netconn_do_write+0x100>)
 8012386:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801238a:	4919      	ldr	r1, [pc, #100]	; (80123f0 <lwip_netconn_do_write+0x110>)
 801238c:	4816      	ldr	r0, [pc, #88]	; (80123e8 <lwip_netconn_do_write+0x108>)
 801238e:	f00b fff1 	bl	801e374 <iprintf>
          UNLOCK_TCPIP_CORE();
 8012392:	4818      	ldr	r0, [pc, #96]	; (80123f4 <lwip_netconn_do_write+0x114>)
 8012394:	f00b fc43 	bl	801dc1e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	330c      	adds	r3, #12
 801239e:	2100      	movs	r1, #0
 80123a0:	4618      	mov	r0, r3
 80123a2:	f00b fb9a 	bl	801dada <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80123a6:	4813      	ldr	r0, [pc, #76]	; (80123f4 <lwip_netconn_do_write+0x114>)
 80123a8:	f00b fc2a 	bl	801dc00 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	785b      	ldrb	r3, [r3, #1]
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d110      	bne.n	80123d8 <lwip_netconn_do_write+0xf8>
 80123b6:	4b0a      	ldr	r3, [pc, #40]	; (80123e0 <lwip_netconn_do_write+0x100>)
 80123b8:	f240 722c 	movw	r2, #1836	; 0x72c
 80123bc:	490c      	ldr	r1, [pc, #48]	; (80123f0 <lwip_netconn_do_write+0x110>)
 80123be:	480a      	ldr	r0, [pc, #40]	; (80123e8 <lwip_netconn_do_write+0x108>)
 80123c0:	f00b ffd8 	bl	801e374 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80123c4:	e008      	b.n	80123d8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80123c6:	23f5      	movs	r3, #245	; 0xf5
 80123c8:	73fb      	strb	r3, [r7, #15]
 80123ca:	e001      	b.n	80123d0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80123cc:	23fa      	movs	r3, #250	; 0xfa
 80123ce:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	7bfa      	ldrb	r2, [r7, #15]
 80123d4:	711a      	strb	r2, [r3, #4]
 80123d6:	e000      	b.n	80123da <lwip_netconn_do_write+0xfa>
        return;
 80123d8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80123da:	3710      	adds	r7, #16
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}
 80123e0:	08020058 	.word	0x08020058
 80123e4:	080203fc 	.word	0x080203fc
 80123e8:	0802009c 	.word	0x0802009c
 80123ec:	08020584 	.word	0x08020584
 80123f0:	08020418 	.word	0x08020418
 80123f4:	2000a068 	.word	0x2000a068

080123f8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b084      	sub	sp, #16
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	785b      	ldrb	r3, [r3, #1]
 801240a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	685b      	ldr	r3, [r3, #4]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d069      	beq.n	80124ea <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	781b      	ldrb	r3, [r3, #0]
 801241c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8012420:	2b10      	cmp	r3, #16
 8012422:	d162      	bne.n	80124ea <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012428:	2b03      	cmp	r3, #3
 801242a:	d002      	beq.n	8012432 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801242c:	7afb      	ldrb	r3, [r7, #11]
 801242e:	2b02      	cmp	r3, #2
 8012430:	d05b      	beq.n	80124ea <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8012432:	7afb      	ldrb	r3, [r7, #11]
 8012434:	2b03      	cmp	r3, #3
 8012436:	d103      	bne.n	8012440 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	22f5      	movs	r2, #245	; 0xf5
 801243c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801243e:	e059      	b.n	80124f4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8012440:	7afb      	ldrb	r3, [r7, #11]
 8012442:	2b01      	cmp	r3, #1
 8012444:	d103      	bne.n	801244e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	22fb      	movs	r2, #251	; 0xfb
 801244a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801244c:	e052      	b.n	80124f4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	7a1b      	ldrb	r3, [r3, #8]
 8012452:	f003 0301 	and.w	r3, r3, #1
 8012456:	2b00      	cmp	r3, #0
 8012458:	d004      	beq.n	8012464 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	4618      	mov	r0, r3
 8012460:	f7ff f99e 	bl	80117a0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	69db      	ldr	r3, [r3, #28]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d006      	beq.n	801247c <lwip_netconn_do_close+0x84>
 801246e:	4b23      	ldr	r3, [pc, #140]	; (80124fc <lwip_netconn_do_close+0x104>)
 8012470:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8012474:	4922      	ldr	r1, [pc, #136]	; (8012500 <lwip_netconn_do_close+0x108>)
 8012476:	4823      	ldr	r0, [pc, #140]	; (8012504 <lwip_netconn_do_close+0x10c>)
 8012478:	f00b ff7c 	bl	801e374 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	2204      	movs	r2, #4
 8012482:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	68fa      	ldr	r2, [r7, #12]
 801248a:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	2100      	movs	r1, #0
 8012492:	4618      	mov	r0, r3
 8012494:	f7ff fa02 	bl	801189c <lwip_netconn_do_close_internal>
 8012498:	4603      	mov	r3, r0
 801249a:	2b00      	cmp	r3, #0
 801249c:	d029      	beq.n	80124f2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	785b      	ldrb	r3, [r3, #1]
 80124a4:	2b04      	cmp	r3, #4
 80124a6:	d006      	beq.n	80124b6 <lwip_netconn_do_close+0xbe>
 80124a8:	4b14      	ldr	r3, [pc, #80]	; (80124fc <lwip_netconn_do_close+0x104>)
 80124aa:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80124ae:	4916      	ldr	r1, [pc, #88]	; (8012508 <lwip_netconn_do_close+0x110>)
 80124b0:	4814      	ldr	r0, [pc, #80]	; (8012504 <lwip_netconn_do_close+0x10c>)
 80124b2:	f00b ff5f 	bl	801e374 <iprintf>
        UNLOCK_TCPIP_CORE();
 80124b6:	4815      	ldr	r0, [pc, #84]	; (801250c <lwip_netconn_do_close+0x114>)
 80124b8:	f00b fbb1 	bl	801dc1e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	330c      	adds	r3, #12
 80124c2:	2100      	movs	r1, #0
 80124c4:	4618      	mov	r0, r3
 80124c6:	f00b fb08 	bl	801dada <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80124ca:	4810      	ldr	r0, [pc, #64]	; (801250c <lwip_netconn_do_close+0x114>)
 80124cc:	f00b fb98 	bl	801dc00 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	785b      	ldrb	r3, [r3, #1]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00b      	beq.n	80124f2 <lwip_netconn_do_close+0xfa>
 80124da:	4b08      	ldr	r3, [pc, #32]	; (80124fc <lwip_netconn_do_close+0x104>)
 80124dc:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80124e0:	4909      	ldr	r1, [pc, #36]	; (8012508 <lwip_netconn_do_close+0x110>)
 80124e2:	4808      	ldr	r0, [pc, #32]	; (8012504 <lwip_netconn_do_close+0x10c>)
 80124e4:	f00b ff46 	bl	801e374 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80124e8:	e003      	b.n	80124f2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	22f5      	movs	r2, #245	; 0xf5
 80124ee:	711a      	strb	r2, [r3, #4]
 80124f0:	e000      	b.n	80124f4 <lwip_netconn_do_close+0xfc>
      return;
 80124f2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80124f4:	3710      	adds	r7, #16
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	08020058 	.word	0x08020058
 8012500:	080203fc 	.word	0x080203fc
 8012504:	0802009c 	.word	0x0802009c
 8012508:	08020418 	.word	0x08020418
 801250c:	2000a068 	.word	0x2000a068

08012510 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d013      	beq.n	8012546 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d00b      	beq.n	801253e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4618      	mov	r0, r3
 801252c:	f001 ff78 	bl	8014420 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	2200      	movs	r2, #0
 8012534:	605a      	str	r2, [r3, #4]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	685a      	ldr	r2, [r3, #4]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801253e:	6879      	ldr	r1, [r7, #4]
 8012540:	2006      	movs	r0, #6
 8012542:	f000 ff55 	bl	80133f0 <memp_free>
  }
}
 8012546:	bf00      	nop
 8012548:	3708      	adds	r7, #8
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}
	...

08012550 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d108      	bne.n	8012574 <netbuf_data+0x24>
 8012562:	4b1b      	ldr	r3, [pc, #108]	; (80125d0 <netbuf_data+0x80>)
 8012564:	22c6      	movs	r2, #198	; 0xc6
 8012566:	491b      	ldr	r1, [pc, #108]	; (80125d4 <netbuf_data+0x84>)
 8012568:	481b      	ldr	r0, [pc, #108]	; (80125d8 <netbuf_data+0x88>)
 801256a:	f00b ff03 	bl	801e374 <iprintf>
 801256e:	f06f 030f 	mvn.w	r3, #15
 8012572:	e029      	b.n	80125c8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d108      	bne.n	801258c <netbuf_data+0x3c>
 801257a:	4b15      	ldr	r3, [pc, #84]	; (80125d0 <netbuf_data+0x80>)
 801257c:	22c7      	movs	r2, #199	; 0xc7
 801257e:	4917      	ldr	r1, [pc, #92]	; (80125dc <netbuf_data+0x8c>)
 8012580:	4815      	ldr	r0, [pc, #84]	; (80125d8 <netbuf_data+0x88>)
 8012582:	f00b fef7 	bl	801e374 <iprintf>
 8012586:	f06f 030f 	mvn.w	r3, #15
 801258a:	e01d      	b.n	80125c8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d108      	bne.n	80125a4 <netbuf_data+0x54>
 8012592:	4b0f      	ldr	r3, [pc, #60]	; (80125d0 <netbuf_data+0x80>)
 8012594:	22c8      	movs	r2, #200	; 0xc8
 8012596:	4912      	ldr	r1, [pc, #72]	; (80125e0 <netbuf_data+0x90>)
 8012598:	480f      	ldr	r0, [pc, #60]	; (80125d8 <netbuf_data+0x88>)
 801259a:	f00b feeb 	bl	801e374 <iprintf>
 801259e:	f06f 030f 	mvn.w	r3, #15
 80125a2:	e011      	b.n	80125c8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	685b      	ldr	r3, [r3, #4]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d102      	bne.n	80125b2 <netbuf_data+0x62>
    return ERR_BUF;
 80125ac:	f06f 0301 	mvn.w	r3, #1
 80125b0:	e00a      	b.n	80125c8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	685a      	ldr	r2, [r3, #4]
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	895a      	ldrh	r2, [r3, #10]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80125c6:	2300      	movs	r3, #0
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3710      	adds	r7, #16
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}
 80125d0:	080205b0 	.word	0x080205b0
 80125d4:	080206b8 	.word	0x080206b8
 80125d8:	08020600 	.word	0x08020600
 80125dc:	080206d4 	.word	0x080206d4
 80125e0:	080206f4 	.word	0x080206f4

080125e4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b084      	sub	sp, #16
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80125ee:	f008 fb79 	bl	801ace4 <sys_timeouts_sleeptime>
 80125f2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125fa:	d10b      	bne.n	8012614 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80125fc:	4813      	ldr	r0, [pc, #76]	; (801264c <tcpip_timeouts_mbox_fetch+0x68>)
 80125fe:	f00b fb0e 	bl	801dc1e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012602:	2200      	movs	r2, #0
 8012604:	6839      	ldr	r1, [r7, #0]
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f00b f9c6 	bl	801d998 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801260c:	480f      	ldr	r0, [pc, #60]	; (801264c <tcpip_timeouts_mbox_fetch+0x68>)
 801260e:	f00b faf7 	bl	801dc00 <sys_mutex_lock>
    return;
 8012612:	e018      	b.n	8012646 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d102      	bne.n	8012620 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801261a:	f008 fb29 	bl	801ac70 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801261e:	e7e6      	b.n	80125ee <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012620:	480a      	ldr	r0, [pc, #40]	; (801264c <tcpip_timeouts_mbox_fetch+0x68>)
 8012622:	f00b fafc 	bl	801dc1e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	6839      	ldr	r1, [r7, #0]
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f00b f9b4 	bl	801d998 <sys_arch_mbox_fetch>
 8012630:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012632:	4806      	ldr	r0, [pc, #24]	; (801264c <tcpip_timeouts_mbox_fetch+0x68>)
 8012634:	f00b fae4 	bl	801dc00 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801263e:	d102      	bne.n	8012646 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012640:	f008 fb16 	bl	801ac70 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012644:	e7d3      	b.n	80125ee <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012646:	3710      	adds	r7, #16
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}
 801264c:	2000a068 	.word	0x2000a068

08012650 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b084      	sub	sp, #16
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012658:	4810      	ldr	r0, [pc, #64]	; (801269c <tcpip_thread+0x4c>)
 801265a:	f00b fad1 	bl	801dc00 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801265e:	4b10      	ldr	r3, [pc, #64]	; (80126a0 <tcpip_thread+0x50>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d005      	beq.n	8012672 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012666:	4b0e      	ldr	r3, [pc, #56]	; (80126a0 <tcpip_thread+0x50>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	4a0e      	ldr	r2, [pc, #56]	; (80126a4 <tcpip_thread+0x54>)
 801266c:	6812      	ldr	r2, [r2, #0]
 801266e:	4610      	mov	r0, r2
 8012670:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012672:	f107 030c 	add.w	r3, r7, #12
 8012676:	4619      	mov	r1, r3
 8012678:	480b      	ldr	r0, [pc, #44]	; (80126a8 <tcpip_thread+0x58>)
 801267a:	f7ff ffb3 	bl	80125e4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d106      	bne.n	8012692 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012684:	4b09      	ldr	r3, [pc, #36]	; (80126ac <tcpip_thread+0x5c>)
 8012686:	2291      	movs	r2, #145	; 0x91
 8012688:	4909      	ldr	r1, [pc, #36]	; (80126b0 <tcpip_thread+0x60>)
 801268a:	480a      	ldr	r0, [pc, #40]	; (80126b4 <tcpip_thread+0x64>)
 801268c:	f00b fe72 	bl	801e374 <iprintf>
      continue;
 8012690:	e003      	b.n	801269a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	4618      	mov	r0, r3
 8012696:	f000 f80f 	bl	80126b8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801269a:	e7ea      	b.n	8012672 <tcpip_thread+0x22>
 801269c:	2000a068 	.word	0x2000a068
 80126a0:	2000a05c 	.word	0x2000a05c
 80126a4:	2000a060 	.word	0x2000a060
 80126a8:	2000a064 	.word	0x2000a064
 80126ac:	08020748 	.word	0x08020748
 80126b0:	08020778 	.word	0x08020778
 80126b4:	08020798 	.word	0x08020798

080126b8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	2b02      	cmp	r3, #2
 80126c6:	d026      	beq.n	8012716 <tcpip_thread_handle_msg+0x5e>
 80126c8:	2b02      	cmp	r3, #2
 80126ca:	dc2b      	bgt.n	8012724 <tcpip_thread_handle_msg+0x6c>
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d002      	beq.n	80126d6 <tcpip_thread_handle_msg+0x1e>
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	d015      	beq.n	8012700 <tcpip_thread_handle_msg+0x48>
 80126d4:	e026      	b.n	8012724 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	68db      	ldr	r3, [r3, #12]
 80126da:	687a      	ldr	r2, [r7, #4]
 80126dc:	6850      	ldr	r0, [r2, #4]
 80126de:	687a      	ldr	r2, [r7, #4]
 80126e0:	6892      	ldr	r2, [r2, #8]
 80126e2:	4611      	mov	r1, r2
 80126e4:	4798      	blx	r3
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d004      	beq.n	80126f6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	685b      	ldr	r3, [r3, #4]
 80126f0:	4618      	mov	r0, r3
 80126f2:	f001 fe95 	bl	8014420 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80126f6:	6879      	ldr	r1, [r7, #4]
 80126f8:	2009      	movs	r0, #9
 80126fa:	f000 fe79 	bl	80133f0 <memp_free>
      break;
 80126fe:	e018      	b.n	8012732 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	687a      	ldr	r2, [r7, #4]
 8012706:	6892      	ldr	r2, [r2, #8]
 8012708:	4610      	mov	r0, r2
 801270a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801270c:	6879      	ldr	r1, [r7, #4]
 801270e:	2008      	movs	r0, #8
 8012710:	f000 fe6e 	bl	80133f0 <memp_free>
      break;
 8012714:	e00d      	b.n	8012732 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	685b      	ldr	r3, [r3, #4]
 801271a:	687a      	ldr	r2, [r7, #4]
 801271c:	6892      	ldr	r2, [r2, #8]
 801271e:	4610      	mov	r0, r2
 8012720:	4798      	blx	r3
      break;
 8012722:	e006      	b.n	8012732 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012724:	4b05      	ldr	r3, [pc, #20]	; (801273c <tcpip_thread_handle_msg+0x84>)
 8012726:	22cf      	movs	r2, #207	; 0xcf
 8012728:	4905      	ldr	r1, [pc, #20]	; (8012740 <tcpip_thread_handle_msg+0x88>)
 801272a:	4806      	ldr	r0, [pc, #24]	; (8012744 <tcpip_thread_handle_msg+0x8c>)
 801272c:	f00b fe22 	bl	801e374 <iprintf>
      break;
 8012730:	bf00      	nop
  }
}
 8012732:	bf00      	nop
 8012734:	3708      	adds	r7, #8
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}
 801273a:	bf00      	nop
 801273c:	08020748 	.word	0x08020748
 8012740:	08020778 	.word	0x08020778
 8012744:	08020798 	.word	0x08020798

08012748 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b086      	sub	sp, #24
 801274c:	af00      	add	r7, sp, #0
 801274e:	60f8      	str	r0, [r7, #12]
 8012750:	60b9      	str	r1, [r7, #8]
 8012752:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012754:	481a      	ldr	r0, [pc, #104]	; (80127c0 <tcpip_inpkt+0x78>)
 8012756:	f00b f97a 	bl	801da4e <sys_mbox_valid>
 801275a:	4603      	mov	r3, r0
 801275c:	2b00      	cmp	r3, #0
 801275e:	d105      	bne.n	801276c <tcpip_inpkt+0x24>
 8012760:	4b18      	ldr	r3, [pc, #96]	; (80127c4 <tcpip_inpkt+0x7c>)
 8012762:	22fc      	movs	r2, #252	; 0xfc
 8012764:	4918      	ldr	r1, [pc, #96]	; (80127c8 <tcpip_inpkt+0x80>)
 8012766:	4819      	ldr	r0, [pc, #100]	; (80127cc <tcpip_inpkt+0x84>)
 8012768:	f00b fe04 	bl	801e374 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801276c:	2009      	movs	r0, #9
 801276e:	f000 fdc9 	bl	8013304 <memp_malloc>
 8012772:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d102      	bne.n	8012780 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801277a:	f04f 33ff 	mov.w	r3, #4294967295
 801277e:	e01a      	b.n	80127b6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	2200      	movs	r2, #0
 8012784:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	68fa      	ldr	r2, [r7, #12]
 801278a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	68ba      	ldr	r2, [r7, #8]
 8012790:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	687a      	ldr	r2, [r7, #4]
 8012796:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012798:	6979      	ldr	r1, [r7, #20]
 801279a:	4809      	ldr	r0, [pc, #36]	; (80127c0 <tcpip_inpkt+0x78>)
 801279c:	f00b f8e2 	bl	801d964 <sys_mbox_trypost>
 80127a0:	4603      	mov	r3, r0
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d006      	beq.n	80127b4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80127a6:	6979      	ldr	r1, [r7, #20]
 80127a8:	2009      	movs	r0, #9
 80127aa:	f000 fe21 	bl	80133f0 <memp_free>
    return ERR_MEM;
 80127ae:	f04f 33ff 	mov.w	r3, #4294967295
 80127b2:	e000      	b.n	80127b6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80127b4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	3718      	adds	r7, #24
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}
 80127be:	bf00      	nop
 80127c0:	2000a064 	.word	0x2000a064
 80127c4:	08020748 	.word	0x08020748
 80127c8:	080207c0 	.word	0x080207c0
 80127cc:	08020798 	.word	0x08020798

080127d0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127e0:	f003 0318 	and.w	r3, r3, #24
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d006      	beq.n	80127f6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80127e8:	4a08      	ldr	r2, [pc, #32]	; (801280c <tcpip_input+0x3c>)
 80127ea:	6839      	ldr	r1, [r7, #0]
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f7ff ffab 	bl	8012748 <tcpip_inpkt>
 80127f2:	4603      	mov	r3, r0
 80127f4:	e005      	b.n	8012802 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80127f6:	4a06      	ldr	r2, [pc, #24]	; (8012810 <tcpip_input+0x40>)
 80127f8:	6839      	ldr	r1, [r7, #0]
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f7ff ffa4 	bl	8012748 <tcpip_inpkt>
 8012800:	4603      	mov	r3, r0
}
 8012802:	4618      	mov	r0, r3
 8012804:	3708      	adds	r7, #8
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
 801280a:	bf00      	nop
 801280c:	0801d751 	.word	0x0801d751
 8012810:	0801c63d 	.word	0x0801c63d

08012814 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b084      	sub	sp, #16
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801281e:	4819      	ldr	r0, [pc, #100]	; (8012884 <tcpip_try_callback+0x70>)
 8012820:	f00b f915 	bl	801da4e <sys_mbox_valid>
 8012824:	4603      	mov	r3, r0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d106      	bne.n	8012838 <tcpip_try_callback+0x24>
 801282a:	4b17      	ldr	r3, [pc, #92]	; (8012888 <tcpip_try_callback+0x74>)
 801282c:	f240 125d 	movw	r2, #349	; 0x15d
 8012830:	4916      	ldr	r1, [pc, #88]	; (801288c <tcpip_try_callback+0x78>)
 8012832:	4817      	ldr	r0, [pc, #92]	; (8012890 <tcpip_try_callback+0x7c>)
 8012834:	f00b fd9e 	bl	801e374 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012838:	2008      	movs	r0, #8
 801283a:	f000 fd63 	bl	8013304 <memp_malloc>
 801283e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d102      	bne.n	801284c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012846:	f04f 33ff 	mov.w	r3, #4294967295
 801284a:	e017      	b.n	801287c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2201      	movs	r2, #1
 8012850:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	687a      	ldr	r2, [r7, #4]
 8012856:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	683a      	ldr	r2, [r7, #0]
 801285c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801285e:	68f9      	ldr	r1, [r7, #12]
 8012860:	4808      	ldr	r0, [pc, #32]	; (8012884 <tcpip_try_callback+0x70>)
 8012862:	f00b f87f 	bl	801d964 <sys_mbox_trypost>
 8012866:	4603      	mov	r3, r0
 8012868:	2b00      	cmp	r3, #0
 801286a:	d006      	beq.n	801287a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801286c:	68f9      	ldr	r1, [r7, #12]
 801286e:	2008      	movs	r0, #8
 8012870:	f000 fdbe 	bl	80133f0 <memp_free>
    return ERR_MEM;
 8012874:	f04f 33ff 	mov.w	r3, #4294967295
 8012878:	e000      	b.n	801287c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801287a:	2300      	movs	r3, #0
}
 801287c:	4618      	mov	r0, r3
 801287e:	3710      	adds	r7, #16
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	2000a064 	.word	0x2000a064
 8012888:	08020748 	.word	0x08020748
 801288c:	080207c0 	.word	0x080207c0
 8012890:	08020798 	.word	0x08020798

08012894 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80128a0:	4806      	ldr	r0, [pc, #24]	; (80128bc <tcpip_send_msg_wait_sem+0x28>)
 80128a2:	f00b f9ad 	bl	801dc00 <sys_mutex_lock>
  fn(apimsg);
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	68b8      	ldr	r0, [r7, #8]
 80128aa:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80128ac:	4803      	ldr	r0, [pc, #12]	; (80128bc <tcpip_send_msg_wait_sem+0x28>)
 80128ae:	f00b f9b6 	bl	801dc1e <sys_mutex_unlock>
  return ERR_OK;
 80128b2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3710      	adds	r7, #16
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}
 80128bc:	2000a068 	.word	0x2000a068

080128c0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b084      	sub	sp, #16
 80128c4:	af02      	add	r7, sp, #8
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80128ca:	f000 f871 	bl	80129b0 <lwip_init>

  tcpip_init_done = initfunc;
 80128ce:	4a17      	ldr	r2, [pc, #92]	; (801292c <tcpip_init+0x6c>)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80128d4:	4a16      	ldr	r2, [pc, #88]	; (8012930 <tcpip_init+0x70>)
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80128da:	2106      	movs	r1, #6
 80128dc:	4815      	ldr	r0, [pc, #84]	; (8012934 <tcpip_init+0x74>)
 80128de:	f00b f80d 	bl	801d8fc <sys_mbox_new>
 80128e2:	4603      	mov	r3, r0
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d006      	beq.n	80128f6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80128e8:	4b13      	ldr	r3, [pc, #76]	; (8012938 <tcpip_init+0x78>)
 80128ea:	f240 2261 	movw	r2, #609	; 0x261
 80128ee:	4913      	ldr	r1, [pc, #76]	; (801293c <tcpip_init+0x7c>)
 80128f0:	4813      	ldr	r0, [pc, #76]	; (8012940 <tcpip_init+0x80>)
 80128f2:	f00b fd3f 	bl	801e374 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80128f6:	4813      	ldr	r0, [pc, #76]	; (8012944 <tcpip_init+0x84>)
 80128f8:	f00b f966 	bl	801dbc8 <sys_mutex_new>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d006      	beq.n	8012910 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012902:	4b0d      	ldr	r3, [pc, #52]	; (8012938 <tcpip_init+0x78>)
 8012904:	f240 2265 	movw	r2, #613	; 0x265
 8012908:	490f      	ldr	r1, [pc, #60]	; (8012948 <tcpip_init+0x88>)
 801290a:	480d      	ldr	r0, [pc, #52]	; (8012940 <tcpip_init+0x80>)
 801290c:	f00b fd32 	bl	801e374 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012910:	2300      	movs	r3, #0
 8012912:	9300      	str	r3, [sp, #0]
 8012914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012918:	2200      	movs	r2, #0
 801291a:	490c      	ldr	r1, [pc, #48]	; (801294c <tcpip_init+0x8c>)
 801291c:	480c      	ldr	r0, [pc, #48]	; (8012950 <tcpip_init+0x90>)
 801291e:	f00b f98b 	bl	801dc38 <sys_thread_new>
}
 8012922:	bf00      	nop
 8012924:	3708      	adds	r7, #8
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop
 801292c:	2000a05c 	.word	0x2000a05c
 8012930:	2000a060 	.word	0x2000a060
 8012934:	2000a064 	.word	0x2000a064
 8012938:	08020748 	.word	0x08020748
 801293c:	080207d0 	.word	0x080207d0
 8012940:	08020798 	.word	0x08020798
 8012944:	2000a068 	.word	0x2000a068
 8012948:	080207f4 	.word	0x080207f4
 801294c:	08012651 	.word	0x08012651
 8012950:	08020818 	.word	0x08020818

08012954 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012954:	b480      	push	{r7}
 8012956:	b083      	sub	sp, #12
 8012958:	af00      	add	r7, sp, #0
 801295a:	4603      	mov	r3, r0
 801295c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801295e:	88fb      	ldrh	r3, [r7, #6]
 8012960:	021b      	lsls	r3, r3, #8
 8012962:	b21a      	sxth	r2, r3
 8012964:	88fb      	ldrh	r3, [r7, #6]
 8012966:	0a1b      	lsrs	r3, r3, #8
 8012968:	b29b      	uxth	r3, r3
 801296a:	b21b      	sxth	r3, r3
 801296c:	4313      	orrs	r3, r2
 801296e:	b21b      	sxth	r3, r3
 8012970:	b29b      	uxth	r3, r3
}
 8012972:	4618      	mov	r0, r3
 8012974:	370c      	adds	r7, #12
 8012976:	46bd      	mov	sp, r7
 8012978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297c:	4770      	bx	lr

0801297e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801297e:	b480      	push	{r7}
 8012980:	b083      	sub	sp, #12
 8012982:	af00      	add	r7, sp, #0
 8012984:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	061a      	lsls	r2, r3, #24
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	021b      	lsls	r3, r3, #8
 801298e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012992:	431a      	orrs	r2, r3
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	0a1b      	lsrs	r3, r3, #8
 8012998:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801299c:	431a      	orrs	r2, r3
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	0e1b      	lsrs	r3, r3, #24
 80129a2:	4313      	orrs	r3, r2
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	370c      	adds	r7, #12
 80129a8:	46bd      	mov	sp, r7
 80129aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ae:	4770      	bx	lr

080129b0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b082      	sub	sp, #8
 80129b4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80129b6:	2300      	movs	r3, #0
 80129b8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80129ba:	f00b f8f7 	bl	801dbac <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80129be:	f000 f8d5 	bl	8012b6c <mem_init>
  memp_init();
 80129c2:	f000 fc31 	bl	8013228 <memp_init>
  pbuf_init();
  netif_init();
 80129c6:	f000 fd63 	bl	8013490 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80129ca:	f008 f9c3 	bl	801ad54 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80129ce:	f001 ffc1 	bl	8014954 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80129d2:	f008 f905 	bl	801abe0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80129d6:	bf00      	nop
 80129d8:	3708      	adds	r7, #8
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}
	...

080129e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	4603      	mov	r3, r0
 80129e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80129ea:	4b05      	ldr	r3, [pc, #20]	; (8012a00 <ptr_to_mem+0x20>)
 80129ec:	681a      	ldr	r2, [r3, #0]
 80129ee:	88fb      	ldrh	r3, [r7, #6]
 80129f0:	4413      	add	r3, r2
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	370c      	adds	r7, #12
 80129f6:	46bd      	mov	sp, r7
 80129f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fc:	4770      	bx	lr
 80129fe:	bf00      	nop
 8012a00:	2000c898 	.word	0x2000c898

08012a04 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012a04:	b480      	push	{r7}
 8012a06:	b083      	sub	sp, #12
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012a0c:	4b05      	ldr	r3, [pc, #20]	; (8012a24 <mem_to_ptr+0x20>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	687a      	ldr	r2, [r7, #4]
 8012a12:	1ad3      	subs	r3, r2, r3
 8012a14:	b29b      	uxth	r3, r3
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	370c      	adds	r7, #12
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a20:	4770      	bx	lr
 8012a22:	bf00      	nop
 8012a24:	2000c898 	.word	0x2000c898

08012a28 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012a28:	b590      	push	{r4, r7, lr}
 8012a2a:	b085      	sub	sp, #20
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012a30:	4b45      	ldr	r3, [pc, #276]	; (8012b48 <plug_holes+0x120>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	687a      	ldr	r2, [r7, #4]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d206      	bcs.n	8012a48 <plug_holes+0x20>
 8012a3a:	4b44      	ldr	r3, [pc, #272]	; (8012b4c <plug_holes+0x124>)
 8012a3c:	f240 12df 	movw	r2, #479	; 0x1df
 8012a40:	4943      	ldr	r1, [pc, #268]	; (8012b50 <plug_holes+0x128>)
 8012a42:	4844      	ldr	r0, [pc, #272]	; (8012b54 <plug_holes+0x12c>)
 8012a44:	f00b fc96 	bl	801e374 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012a48:	4b43      	ldr	r3, [pc, #268]	; (8012b58 <plug_holes+0x130>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	687a      	ldr	r2, [r7, #4]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d306      	bcc.n	8012a60 <plug_holes+0x38>
 8012a52:	4b3e      	ldr	r3, [pc, #248]	; (8012b4c <plug_holes+0x124>)
 8012a54:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012a58:	4940      	ldr	r1, [pc, #256]	; (8012b5c <plug_holes+0x134>)
 8012a5a:	483e      	ldr	r0, [pc, #248]	; (8012b54 <plug_holes+0x12c>)
 8012a5c:	f00b fc8a 	bl	801e374 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	791b      	ldrb	r3, [r3, #4]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d006      	beq.n	8012a76 <plug_holes+0x4e>
 8012a68:	4b38      	ldr	r3, [pc, #224]	; (8012b4c <plug_holes+0x124>)
 8012a6a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8012a6e:	493c      	ldr	r1, [pc, #240]	; (8012b60 <plug_holes+0x138>)
 8012a70:	4838      	ldr	r0, [pc, #224]	; (8012b54 <plug_holes+0x12c>)
 8012a72:	f00b fc7f 	bl	801e374 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	881b      	ldrh	r3, [r3, #0]
 8012a7a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8012a7e:	d906      	bls.n	8012a8e <plug_holes+0x66>
 8012a80:	4b32      	ldr	r3, [pc, #200]	; (8012b4c <plug_holes+0x124>)
 8012a82:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8012a86:	4937      	ldr	r1, [pc, #220]	; (8012b64 <plug_holes+0x13c>)
 8012a88:	4832      	ldr	r0, [pc, #200]	; (8012b54 <plug_holes+0x12c>)
 8012a8a:	f00b fc73 	bl	801e374 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	881b      	ldrh	r3, [r3, #0]
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7ff ffa4 	bl	80129e0 <ptr_to_mem>
 8012a98:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012a9a:	687a      	ldr	r2, [r7, #4]
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d024      	beq.n	8012aec <plug_holes+0xc4>
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	791b      	ldrb	r3, [r3, #4]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d120      	bne.n	8012aec <plug_holes+0xc4>
 8012aaa:	4b2b      	ldr	r3, [pc, #172]	; (8012b58 <plug_holes+0x130>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	68fa      	ldr	r2, [r7, #12]
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d01b      	beq.n	8012aec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012ab4:	4b2c      	ldr	r3, [pc, #176]	; (8012b68 <plug_holes+0x140>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	68fa      	ldr	r2, [r7, #12]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d102      	bne.n	8012ac4 <plug_holes+0x9c>
      lfree = mem;
 8012abe:	4a2a      	ldr	r2, [pc, #168]	; (8012b68 <plug_holes+0x140>)
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	881a      	ldrh	r2, [r3, #0]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	881b      	ldrh	r3, [r3, #0]
 8012ad0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8012ad4:	d00a      	beq.n	8012aec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	881b      	ldrh	r3, [r3, #0]
 8012ada:	4618      	mov	r0, r3
 8012adc:	f7ff ff80 	bl	80129e0 <ptr_to_mem>
 8012ae0:	4604      	mov	r4, r0
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f7ff ff8e 	bl	8012a04 <mem_to_ptr>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	885b      	ldrh	r3, [r3, #2]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f7ff ff75 	bl	80129e0 <ptr_to_mem>
 8012af6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012af8:	68ba      	ldr	r2, [r7, #8]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d01f      	beq.n	8012b40 <plug_holes+0x118>
 8012b00:	68bb      	ldr	r3, [r7, #8]
 8012b02:	791b      	ldrb	r3, [r3, #4]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d11b      	bne.n	8012b40 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012b08:	4b17      	ldr	r3, [pc, #92]	; (8012b68 <plug_holes+0x140>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	687a      	ldr	r2, [r7, #4]
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d102      	bne.n	8012b18 <plug_holes+0xf0>
      lfree = pmem;
 8012b12:	4a15      	ldr	r2, [pc, #84]	; (8012b68 <plug_holes+0x140>)
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	881a      	ldrh	r2, [r3, #0]
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	881b      	ldrh	r3, [r3, #0]
 8012b24:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8012b28:	d00a      	beq.n	8012b40 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	881b      	ldrh	r3, [r3, #0]
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7ff ff56 	bl	80129e0 <ptr_to_mem>
 8012b34:	4604      	mov	r4, r0
 8012b36:	68b8      	ldr	r0, [r7, #8]
 8012b38:	f7ff ff64 	bl	8012a04 <mem_to_ptr>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012b40:	bf00      	nop
 8012b42:	3714      	adds	r7, #20
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd90      	pop	{r4, r7, pc}
 8012b48:	2000c898 	.word	0x2000c898
 8012b4c:	08020828 	.word	0x08020828
 8012b50:	08020858 	.word	0x08020858
 8012b54:	08020870 	.word	0x08020870
 8012b58:	2000c89c 	.word	0x2000c89c
 8012b5c:	08020898 	.word	0x08020898
 8012b60:	080208b4 	.word	0x080208b4
 8012b64:	080208d0 	.word	0x080208d0
 8012b68:	2000c8a4 	.word	0x2000c8a4

08012b6c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b082      	sub	sp, #8
 8012b70:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012b72:	4b1f      	ldr	r3, [pc, #124]	; (8012bf0 <mem_init+0x84>)
 8012b74:	3303      	adds	r3, #3
 8012b76:	f023 0303 	bic.w	r3, r3, #3
 8012b7a:	461a      	mov	r2, r3
 8012b7c:	4b1d      	ldr	r3, [pc, #116]	; (8012bf4 <mem_init+0x88>)
 8012b7e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012b80:	4b1c      	ldr	r3, [pc, #112]	; (8012bf4 <mem_init+0x88>)
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8012b8c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2200      	movs	r2, #0
 8012b92:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2200      	movs	r2, #0
 8012b98:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012b9a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8012b9e:	f7ff ff1f 	bl	80129e0 <ptr_to_mem>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	4a14      	ldr	r2, [pc, #80]	; (8012bf8 <mem_init+0x8c>)
 8012ba6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012ba8:	4b13      	ldr	r3, [pc, #76]	; (8012bf8 <mem_init+0x8c>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2201      	movs	r2, #1
 8012bae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012bb0:	4b11      	ldr	r3, [pc, #68]	; (8012bf8 <mem_init+0x8c>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8012bb8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012bba:	4b0f      	ldr	r3, [pc, #60]	; (8012bf8 <mem_init+0x8c>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8012bc2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012bc4:	4b0b      	ldr	r3, [pc, #44]	; (8012bf4 <mem_init+0x88>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	4a0c      	ldr	r2, [pc, #48]	; (8012bfc <mem_init+0x90>)
 8012bca:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012bcc:	480c      	ldr	r0, [pc, #48]	; (8012c00 <mem_init+0x94>)
 8012bce:	f00a fffb 	bl	801dbc8 <sys_mutex_new>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d006      	beq.n	8012be6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012bd8:	4b0a      	ldr	r3, [pc, #40]	; (8012c04 <mem_init+0x98>)
 8012bda:	f240 221f 	movw	r2, #543	; 0x21f
 8012bde:	490a      	ldr	r1, [pc, #40]	; (8012c08 <mem_init+0x9c>)
 8012be0:	480a      	ldr	r0, [pc, #40]	; (8012c0c <mem_init+0xa0>)
 8012be2:	f00b fbc7 	bl	801e374 <iprintf>
  }
}
 8012be6:	bf00      	nop
 8012be8:	3708      	adds	r7, #8
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	2000a084 	.word	0x2000a084
 8012bf4:	2000c898 	.word	0x2000c898
 8012bf8:	2000c89c 	.word	0x2000c89c
 8012bfc:	2000c8a4 	.word	0x2000c8a4
 8012c00:	2000c8a0 	.word	0x2000c8a0
 8012c04:	08020828 	.word	0x08020828
 8012c08:	080208fc 	.word	0x080208fc
 8012c0c:	08020870 	.word	0x08020870

08012c10 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b086      	sub	sp, #24
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f7ff fef3 	bl	8012a04 <mem_to_ptr>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	881b      	ldrh	r3, [r3, #0]
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7ff feda 	bl	80129e0 <ptr_to_mem>
 8012c2c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	885b      	ldrh	r3, [r3, #2]
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7ff fed4 	bl	80129e0 <ptr_to_mem>
 8012c38:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	881b      	ldrh	r3, [r3, #0]
 8012c3e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8012c42:	d818      	bhi.n	8012c76 <mem_link_valid+0x66>
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	885b      	ldrh	r3, [r3, #2]
 8012c48:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8012c4c:	d813      	bhi.n	8012c76 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012c52:	8afa      	ldrh	r2, [r7, #22]
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d004      	beq.n	8012c62 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	881b      	ldrh	r3, [r3, #0]
 8012c5c:	8afa      	ldrh	r2, [r7, #22]
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d109      	bne.n	8012c76 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012c62:	4b08      	ldr	r3, [pc, #32]	; (8012c84 <mem_link_valid+0x74>)
 8012c64:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012c66:	693a      	ldr	r2, [r7, #16]
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d006      	beq.n	8012c7a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012c6c:	693b      	ldr	r3, [r7, #16]
 8012c6e:	885b      	ldrh	r3, [r3, #2]
 8012c70:	8afa      	ldrh	r2, [r7, #22]
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d001      	beq.n	8012c7a <mem_link_valid+0x6a>
    return 0;
 8012c76:	2300      	movs	r3, #0
 8012c78:	e000      	b.n	8012c7c <mem_link_valid+0x6c>
  }
  return 1;
 8012c7a:	2301      	movs	r3, #1
}
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	3718      	adds	r7, #24
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	2000c89c 	.word	0x2000c89c

08012c88 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b088      	sub	sp, #32
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d070      	beq.n	8012d78 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f003 0303 	and.w	r3, r3, #3
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d00d      	beq.n	8012cbc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012ca0:	4b37      	ldr	r3, [pc, #220]	; (8012d80 <mem_free+0xf8>)
 8012ca2:	f240 2273 	movw	r2, #627	; 0x273
 8012ca6:	4937      	ldr	r1, [pc, #220]	; (8012d84 <mem_free+0xfc>)
 8012ca8:	4837      	ldr	r0, [pc, #220]	; (8012d88 <mem_free+0x100>)
 8012caa:	f00b fb63 	bl	801e374 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012cae:	f00a ffe9 	bl	801dc84 <sys_arch_protect>
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	68f8      	ldr	r0, [r7, #12]
 8012cb6:	f00a fff3 	bl	801dca0 <sys_arch_unprotect>
    return;
 8012cba:	e05e      	b.n	8012d7a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	3b08      	subs	r3, #8
 8012cc0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012cc2:	4b32      	ldr	r3, [pc, #200]	; (8012d8c <mem_free+0x104>)
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	69fa      	ldr	r2, [r7, #28]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d306      	bcc.n	8012cda <mem_free+0x52>
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f103 020c 	add.w	r2, r3, #12
 8012cd2:	4b2f      	ldr	r3, [pc, #188]	; (8012d90 <mem_free+0x108>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d90d      	bls.n	8012cf6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012cda:	4b29      	ldr	r3, [pc, #164]	; (8012d80 <mem_free+0xf8>)
 8012cdc:	f240 227f 	movw	r2, #639	; 0x27f
 8012ce0:	492c      	ldr	r1, [pc, #176]	; (8012d94 <mem_free+0x10c>)
 8012ce2:	4829      	ldr	r0, [pc, #164]	; (8012d88 <mem_free+0x100>)
 8012ce4:	f00b fb46 	bl	801e374 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012ce8:	f00a ffcc 	bl	801dc84 <sys_arch_protect>
 8012cec:	6138      	str	r0, [r7, #16]
 8012cee:	6938      	ldr	r0, [r7, #16]
 8012cf0:	f00a ffd6 	bl	801dca0 <sys_arch_unprotect>
    return;
 8012cf4:	e041      	b.n	8012d7a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012cf6:	4828      	ldr	r0, [pc, #160]	; (8012d98 <mem_free+0x110>)
 8012cf8:	f00a ff82 	bl	801dc00 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012cfc:	69fb      	ldr	r3, [r7, #28]
 8012cfe:	791b      	ldrb	r3, [r3, #4]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d110      	bne.n	8012d26 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012d04:	4b1e      	ldr	r3, [pc, #120]	; (8012d80 <mem_free+0xf8>)
 8012d06:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8012d0a:	4924      	ldr	r1, [pc, #144]	; (8012d9c <mem_free+0x114>)
 8012d0c:	481e      	ldr	r0, [pc, #120]	; (8012d88 <mem_free+0x100>)
 8012d0e:	f00b fb31 	bl	801e374 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012d12:	4821      	ldr	r0, [pc, #132]	; (8012d98 <mem_free+0x110>)
 8012d14:	f00a ff83 	bl	801dc1e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012d18:	f00a ffb4 	bl	801dc84 <sys_arch_protect>
 8012d1c:	6178      	str	r0, [r7, #20]
 8012d1e:	6978      	ldr	r0, [r7, #20]
 8012d20:	f00a ffbe 	bl	801dca0 <sys_arch_unprotect>
    return;
 8012d24:	e029      	b.n	8012d7a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012d26:	69f8      	ldr	r0, [r7, #28]
 8012d28:	f7ff ff72 	bl	8012c10 <mem_link_valid>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d110      	bne.n	8012d54 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012d32:	4b13      	ldr	r3, [pc, #76]	; (8012d80 <mem_free+0xf8>)
 8012d34:	f240 2295 	movw	r2, #661	; 0x295
 8012d38:	4919      	ldr	r1, [pc, #100]	; (8012da0 <mem_free+0x118>)
 8012d3a:	4813      	ldr	r0, [pc, #76]	; (8012d88 <mem_free+0x100>)
 8012d3c:	f00b fb1a 	bl	801e374 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012d40:	4815      	ldr	r0, [pc, #84]	; (8012d98 <mem_free+0x110>)
 8012d42:	f00a ff6c 	bl	801dc1e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012d46:	f00a ff9d 	bl	801dc84 <sys_arch_protect>
 8012d4a:	61b8      	str	r0, [r7, #24]
 8012d4c:	69b8      	ldr	r0, [r7, #24]
 8012d4e:	f00a ffa7 	bl	801dca0 <sys_arch_unprotect>
    return;
 8012d52:	e012      	b.n	8012d7a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012d54:	69fb      	ldr	r3, [r7, #28]
 8012d56:	2200      	movs	r2, #0
 8012d58:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012d5a:	4b12      	ldr	r3, [pc, #72]	; (8012da4 <mem_free+0x11c>)
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	69fa      	ldr	r2, [r7, #28]
 8012d60:	429a      	cmp	r2, r3
 8012d62:	d202      	bcs.n	8012d6a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012d64:	4a0f      	ldr	r2, [pc, #60]	; (8012da4 <mem_free+0x11c>)
 8012d66:	69fb      	ldr	r3, [r7, #28]
 8012d68:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012d6a:	69f8      	ldr	r0, [r7, #28]
 8012d6c:	f7ff fe5c 	bl	8012a28 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012d70:	4809      	ldr	r0, [pc, #36]	; (8012d98 <mem_free+0x110>)
 8012d72:	f00a ff54 	bl	801dc1e <sys_mutex_unlock>
 8012d76:	e000      	b.n	8012d7a <mem_free+0xf2>
    return;
 8012d78:	bf00      	nop
}
 8012d7a:	3720      	adds	r7, #32
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}
 8012d80:	08020828 	.word	0x08020828
 8012d84:	08020918 	.word	0x08020918
 8012d88:	08020870 	.word	0x08020870
 8012d8c:	2000c898 	.word	0x2000c898
 8012d90:	2000c89c 	.word	0x2000c89c
 8012d94:	0802093c 	.word	0x0802093c
 8012d98:	2000c8a0 	.word	0x2000c8a0
 8012d9c:	08020958 	.word	0x08020958
 8012da0:	08020980 	.word	0x08020980
 8012da4:	2000c8a4 	.word	0x2000c8a4

08012da8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b088      	sub	sp, #32
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	460b      	mov	r3, r1
 8012db2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012db4:	887b      	ldrh	r3, [r7, #2]
 8012db6:	3303      	adds	r3, #3
 8012db8:	b29b      	uxth	r3, r3
 8012dba:	f023 0303 	bic.w	r3, r3, #3
 8012dbe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012dc0:	8bfb      	ldrh	r3, [r7, #30]
 8012dc2:	2b0b      	cmp	r3, #11
 8012dc4:	d801      	bhi.n	8012dca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012dc6:	230c      	movs	r3, #12
 8012dc8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012dca:	8bfb      	ldrh	r3, [r7, #30]
 8012dcc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8012dd0:	d803      	bhi.n	8012dda <mem_trim+0x32>
 8012dd2:	8bfa      	ldrh	r2, [r7, #30]
 8012dd4:	887b      	ldrh	r3, [r7, #2]
 8012dd6:	429a      	cmp	r2, r3
 8012dd8:	d201      	bcs.n	8012dde <mem_trim+0x36>
    return NULL;
 8012dda:	2300      	movs	r3, #0
 8012ddc:	e0d8      	b.n	8012f90 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012dde:	4b6e      	ldr	r3, [pc, #440]	; (8012f98 <mem_trim+0x1f0>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d304      	bcc.n	8012df2 <mem_trim+0x4a>
 8012de8:	4b6c      	ldr	r3, [pc, #432]	; (8012f9c <mem_trim+0x1f4>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	687a      	ldr	r2, [r7, #4]
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d306      	bcc.n	8012e00 <mem_trim+0x58>
 8012df2:	4b6b      	ldr	r3, [pc, #428]	; (8012fa0 <mem_trim+0x1f8>)
 8012df4:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012df8:	496a      	ldr	r1, [pc, #424]	; (8012fa4 <mem_trim+0x1fc>)
 8012dfa:	486b      	ldr	r0, [pc, #428]	; (8012fa8 <mem_trim+0x200>)
 8012dfc:	f00b faba 	bl	801e374 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012e00:	4b65      	ldr	r3, [pc, #404]	; (8012f98 <mem_trim+0x1f0>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	429a      	cmp	r2, r3
 8012e08:	d304      	bcc.n	8012e14 <mem_trim+0x6c>
 8012e0a:	4b64      	ldr	r3, [pc, #400]	; (8012f9c <mem_trim+0x1f4>)
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	687a      	ldr	r2, [r7, #4]
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d307      	bcc.n	8012e24 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012e14:	f00a ff36 	bl	801dc84 <sys_arch_protect>
 8012e18:	60b8      	str	r0, [r7, #8]
 8012e1a:	68b8      	ldr	r0, [r7, #8]
 8012e1c:	f00a ff40 	bl	801dca0 <sys_arch_unprotect>
    return rmem;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	e0b5      	b.n	8012f90 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	3b08      	subs	r3, #8
 8012e28:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012e2a:	69b8      	ldr	r0, [r7, #24]
 8012e2c:	f7ff fdea 	bl	8012a04 <mem_to_ptr>
 8012e30:	4603      	mov	r3, r0
 8012e32:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012e34:	69bb      	ldr	r3, [r7, #24]
 8012e36:	881a      	ldrh	r2, [r3, #0]
 8012e38:	8afb      	ldrh	r3, [r7, #22]
 8012e3a:	1ad3      	subs	r3, r2, r3
 8012e3c:	b29b      	uxth	r3, r3
 8012e3e:	3b08      	subs	r3, #8
 8012e40:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012e42:	8bfa      	ldrh	r2, [r7, #30]
 8012e44:	8abb      	ldrh	r3, [r7, #20]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d906      	bls.n	8012e58 <mem_trim+0xb0>
 8012e4a:	4b55      	ldr	r3, [pc, #340]	; (8012fa0 <mem_trim+0x1f8>)
 8012e4c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8012e50:	4956      	ldr	r1, [pc, #344]	; (8012fac <mem_trim+0x204>)
 8012e52:	4855      	ldr	r0, [pc, #340]	; (8012fa8 <mem_trim+0x200>)
 8012e54:	f00b fa8e 	bl	801e374 <iprintf>
  if (newsize > size) {
 8012e58:	8bfa      	ldrh	r2, [r7, #30]
 8012e5a:	8abb      	ldrh	r3, [r7, #20]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d901      	bls.n	8012e64 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8012e60:	2300      	movs	r3, #0
 8012e62:	e095      	b.n	8012f90 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8012e64:	8bfa      	ldrh	r2, [r7, #30]
 8012e66:	8abb      	ldrh	r3, [r7, #20]
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d101      	bne.n	8012e70 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	e08f      	b.n	8012f90 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012e70:	484f      	ldr	r0, [pc, #316]	; (8012fb0 <mem_trim+0x208>)
 8012e72:	f00a fec5 	bl	801dc00 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012e76:	69bb      	ldr	r3, [r7, #24]
 8012e78:	881b      	ldrh	r3, [r3, #0]
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7ff fdb0 	bl	80129e0 <ptr_to_mem>
 8012e80:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	791b      	ldrb	r3, [r3, #4]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d13f      	bne.n	8012f0a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	881b      	ldrh	r3, [r3, #0]
 8012e8e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8012e92:	d106      	bne.n	8012ea2 <mem_trim+0xfa>
 8012e94:	4b42      	ldr	r3, [pc, #264]	; (8012fa0 <mem_trim+0x1f8>)
 8012e96:	f240 22f5 	movw	r2, #757	; 0x2f5
 8012e9a:	4946      	ldr	r1, [pc, #280]	; (8012fb4 <mem_trim+0x20c>)
 8012e9c:	4842      	ldr	r0, [pc, #264]	; (8012fa8 <mem_trim+0x200>)
 8012e9e:	f00b fa69 	bl	801e374 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012ea2:	693b      	ldr	r3, [r7, #16]
 8012ea4:	881b      	ldrh	r3, [r3, #0]
 8012ea6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012ea8:	8afa      	ldrh	r2, [r7, #22]
 8012eaa:	8bfb      	ldrh	r3, [r7, #30]
 8012eac:	4413      	add	r3, r2
 8012eae:	b29b      	uxth	r3, r3
 8012eb0:	3308      	adds	r3, #8
 8012eb2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012eb4:	4b40      	ldr	r3, [pc, #256]	; (8012fb8 <mem_trim+0x210>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	693a      	ldr	r2, [r7, #16]
 8012eba:	429a      	cmp	r2, r3
 8012ebc:	d106      	bne.n	8012ecc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012ebe:	89fb      	ldrh	r3, [r7, #14]
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7ff fd8d 	bl	80129e0 <ptr_to_mem>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	4a3b      	ldr	r2, [pc, #236]	; (8012fb8 <mem_trim+0x210>)
 8012eca:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012ecc:	89fb      	ldrh	r3, [r7, #14]
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7ff fd86 	bl	80129e0 <ptr_to_mem>
 8012ed4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	2200      	movs	r2, #0
 8012eda:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012edc:	693b      	ldr	r3, [r7, #16]
 8012ede:	89ba      	ldrh	r2, [r7, #12]
 8012ee0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	8afa      	ldrh	r2, [r7, #22]
 8012ee6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012ee8:	69bb      	ldr	r3, [r7, #24]
 8012eea:	89fa      	ldrh	r2, [r7, #14]
 8012eec:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	881b      	ldrh	r3, [r3, #0]
 8012ef2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8012ef6:	d047      	beq.n	8012f88 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012ef8:	693b      	ldr	r3, [r7, #16]
 8012efa:	881b      	ldrh	r3, [r3, #0]
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7ff fd6f 	bl	80129e0 <ptr_to_mem>
 8012f02:	4602      	mov	r2, r0
 8012f04:	89fb      	ldrh	r3, [r7, #14]
 8012f06:	8053      	strh	r3, [r2, #2]
 8012f08:	e03e      	b.n	8012f88 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012f0a:	8bfb      	ldrh	r3, [r7, #30]
 8012f0c:	f103 0214 	add.w	r2, r3, #20
 8012f10:	8abb      	ldrh	r3, [r7, #20]
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d838      	bhi.n	8012f88 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012f16:	8afa      	ldrh	r2, [r7, #22]
 8012f18:	8bfb      	ldrh	r3, [r7, #30]
 8012f1a:	4413      	add	r3, r2
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	3308      	adds	r3, #8
 8012f20:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012f22:	69bb      	ldr	r3, [r7, #24]
 8012f24:	881b      	ldrh	r3, [r3, #0]
 8012f26:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8012f2a:	d106      	bne.n	8012f3a <mem_trim+0x192>
 8012f2c:	4b1c      	ldr	r3, [pc, #112]	; (8012fa0 <mem_trim+0x1f8>)
 8012f2e:	f240 3216 	movw	r2, #790	; 0x316
 8012f32:	4920      	ldr	r1, [pc, #128]	; (8012fb4 <mem_trim+0x20c>)
 8012f34:	481c      	ldr	r0, [pc, #112]	; (8012fa8 <mem_trim+0x200>)
 8012f36:	f00b fa1d 	bl	801e374 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012f3a:	89fb      	ldrh	r3, [r7, #14]
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7ff fd4f 	bl	80129e0 <ptr_to_mem>
 8012f42:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012f44:	4b1c      	ldr	r3, [pc, #112]	; (8012fb8 <mem_trim+0x210>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	693a      	ldr	r2, [r7, #16]
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d202      	bcs.n	8012f54 <mem_trim+0x1ac>
      lfree = mem2;
 8012f4e:	4a1a      	ldr	r2, [pc, #104]	; (8012fb8 <mem_trim+0x210>)
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	2200      	movs	r2, #0
 8012f58:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012f5a:	69bb      	ldr	r3, [r7, #24]
 8012f5c:	881a      	ldrh	r2, [r3, #0]
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	8afa      	ldrh	r2, [r7, #22]
 8012f66:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012f68:	69bb      	ldr	r3, [r7, #24]
 8012f6a:	89fa      	ldrh	r2, [r7, #14]
 8012f6c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012f6e:	693b      	ldr	r3, [r7, #16]
 8012f70:	881b      	ldrh	r3, [r3, #0]
 8012f72:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8012f76:	d007      	beq.n	8012f88 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	881b      	ldrh	r3, [r3, #0]
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7ff fd2f 	bl	80129e0 <ptr_to_mem>
 8012f82:	4602      	mov	r2, r0
 8012f84:	89fb      	ldrh	r3, [r7, #14]
 8012f86:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012f88:	4809      	ldr	r0, [pc, #36]	; (8012fb0 <mem_trim+0x208>)
 8012f8a:	f00a fe48 	bl	801dc1e <sys_mutex_unlock>
  return rmem;
 8012f8e:	687b      	ldr	r3, [r7, #4]
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3720      	adds	r7, #32
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	2000c898 	.word	0x2000c898
 8012f9c:	2000c89c 	.word	0x2000c89c
 8012fa0:	08020828 	.word	0x08020828
 8012fa4:	080209b4 	.word	0x080209b4
 8012fa8:	08020870 	.word	0x08020870
 8012fac:	080209cc 	.word	0x080209cc
 8012fb0:	2000c8a0 	.word	0x2000c8a0
 8012fb4:	080209ec 	.word	0x080209ec
 8012fb8:	2000c8a4 	.word	0x2000c8a4

08012fbc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b088      	sub	sp, #32
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012fc6:	88fb      	ldrh	r3, [r7, #6]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d101      	bne.n	8012fd0 <mem_malloc+0x14>
    return NULL;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	e0e2      	b.n	8013196 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012fd0:	88fb      	ldrh	r3, [r7, #6]
 8012fd2:	3303      	adds	r3, #3
 8012fd4:	b29b      	uxth	r3, r3
 8012fd6:	f023 0303 	bic.w	r3, r3, #3
 8012fda:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012fdc:	8bbb      	ldrh	r3, [r7, #28]
 8012fde:	2b0b      	cmp	r3, #11
 8012fe0:	d801      	bhi.n	8012fe6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012fe2:	230c      	movs	r3, #12
 8012fe4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012fe6:	8bbb      	ldrh	r3, [r7, #28]
 8012fe8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8012fec:	d803      	bhi.n	8012ff6 <mem_malloc+0x3a>
 8012fee:	8bba      	ldrh	r2, [r7, #28]
 8012ff0:	88fb      	ldrh	r3, [r7, #6]
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d201      	bcs.n	8012ffa <mem_malloc+0x3e>
    return NULL;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	e0cd      	b.n	8013196 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012ffa:	4869      	ldr	r0, [pc, #420]	; (80131a0 <mem_malloc+0x1e4>)
 8012ffc:	f00a fe00 	bl	801dc00 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013000:	4b68      	ldr	r3, [pc, #416]	; (80131a4 <mem_malloc+0x1e8>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	4618      	mov	r0, r3
 8013006:	f7ff fcfd 	bl	8012a04 <mem_to_ptr>
 801300a:	4603      	mov	r3, r0
 801300c:	83fb      	strh	r3, [r7, #30]
 801300e:	e0b7      	b.n	8013180 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013010:	8bfb      	ldrh	r3, [r7, #30]
 8013012:	4618      	mov	r0, r3
 8013014:	f7ff fce4 	bl	80129e0 <ptr_to_mem>
 8013018:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	791b      	ldrb	r3, [r3, #4]
 801301e:	2b00      	cmp	r3, #0
 8013020:	f040 80a7 	bne.w	8013172 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	881b      	ldrh	r3, [r3, #0]
 8013028:	461a      	mov	r2, r3
 801302a:	8bfb      	ldrh	r3, [r7, #30]
 801302c:	1ad3      	subs	r3, r2, r3
 801302e:	f1a3 0208 	sub.w	r2, r3, #8
 8013032:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013034:	429a      	cmp	r2, r3
 8013036:	f0c0 809c 	bcc.w	8013172 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	881b      	ldrh	r3, [r3, #0]
 801303e:	461a      	mov	r2, r3
 8013040:	8bfb      	ldrh	r3, [r7, #30]
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	f1a3 0208 	sub.w	r2, r3, #8
 8013048:	8bbb      	ldrh	r3, [r7, #28]
 801304a:	3314      	adds	r3, #20
 801304c:	429a      	cmp	r2, r3
 801304e:	d333      	bcc.n	80130b8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013050:	8bfa      	ldrh	r2, [r7, #30]
 8013052:	8bbb      	ldrh	r3, [r7, #28]
 8013054:	4413      	add	r3, r2
 8013056:	b29b      	uxth	r3, r3
 8013058:	3308      	adds	r3, #8
 801305a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801305c:	8a7b      	ldrh	r3, [r7, #18]
 801305e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8013062:	d106      	bne.n	8013072 <mem_malloc+0xb6>
 8013064:	4b50      	ldr	r3, [pc, #320]	; (80131a8 <mem_malloc+0x1ec>)
 8013066:	f240 3287 	movw	r2, #903	; 0x387
 801306a:	4950      	ldr	r1, [pc, #320]	; (80131ac <mem_malloc+0x1f0>)
 801306c:	4850      	ldr	r0, [pc, #320]	; (80131b0 <mem_malloc+0x1f4>)
 801306e:	f00b f981 	bl	801e374 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013072:	8a7b      	ldrh	r3, [r7, #18]
 8013074:	4618      	mov	r0, r3
 8013076:	f7ff fcb3 	bl	80129e0 <ptr_to_mem>
 801307a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	2200      	movs	r2, #0
 8013080:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	881a      	ldrh	r2, [r3, #0]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	8bfa      	ldrh	r2, [r7, #30]
 801308e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	8a7a      	ldrh	r2, [r7, #18]
 8013094:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	2201      	movs	r2, #1
 801309a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	881b      	ldrh	r3, [r3, #0]
 80130a0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80130a4:	d00b      	beq.n	80130be <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	881b      	ldrh	r3, [r3, #0]
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7ff fc98 	bl	80129e0 <ptr_to_mem>
 80130b0:	4602      	mov	r2, r0
 80130b2:	8a7b      	ldrh	r3, [r7, #18]
 80130b4:	8053      	strh	r3, [r2, #2]
 80130b6:	e002      	b.n	80130be <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	2201      	movs	r2, #1
 80130bc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80130be:	4b39      	ldr	r3, [pc, #228]	; (80131a4 <mem_malloc+0x1e8>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	697a      	ldr	r2, [r7, #20]
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d127      	bne.n	8013118 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80130c8:	4b36      	ldr	r3, [pc, #216]	; (80131a4 <mem_malloc+0x1e8>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80130ce:	e005      	b.n	80130dc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80130d0:	69bb      	ldr	r3, [r7, #24]
 80130d2:	881b      	ldrh	r3, [r3, #0]
 80130d4:	4618      	mov	r0, r3
 80130d6:	f7ff fc83 	bl	80129e0 <ptr_to_mem>
 80130da:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80130dc:	69bb      	ldr	r3, [r7, #24]
 80130de:	791b      	ldrb	r3, [r3, #4]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d004      	beq.n	80130ee <mem_malloc+0x132>
 80130e4:	4b33      	ldr	r3, [pc, #204]	; (80131b4 <mem_malloc+0x1f8>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	69ba      	ldr	r2, [r7, #24]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d1f0      	bne.n	80130d0 <mem_malloc+0x114>
          }
          lfree = cur;
 80130ee:	4a2d      	ldr	r2, [pc, #180]	; (80131a4 <mem_malloc+0x1e8>)
 80130f0:	69bb      	ldr	r3, [r7, #24]
 80130f2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80130f4:	4b2b      	ldr	r3, [pc, #172]	; (80131a4 <mem_malloc+0x1e8>)
 80130f6:	681a      	ldr	r2, [r3, #0]
 80130f8:	4b2e      	ldr	r3, [pc, #184]	; (80131b4 <mem_malloc+0x1f8>)
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	429a      	cmp	r2, r3
 80130fe:	d00b      	beq.n	8013118 <mem_malloc+0x15c>
 8013100:	4b28      	ldr	r3, [pc, #160]	; (80131a4 <mem_malloc+0x1e8>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	791b      	ldrb	r3, [r3, #4]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d006      	beq.n	8013118 <mem_malloc+0x15c>
 801310a:	4b27      	ldr	r3, [pc, #156]	; (80131a8 <mem_malloc+0x1ec>)
 801310c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013110:	4929      	ldr	r1, [pc, #164]	; (80131b8 <mem_malloc+0x1fc>)
 8013112:	4827      	ldr	r0, [pc, #156]	; (80131b0 <mem_malloc+0x1f4>)
 8013114:	f00b f92e 	bl	801e374 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013118:	4821      	ldr	r0, [pc, #132]	; (80131a0 <mem_malloc+0x1e4>)
 801311a:	f00a fd80 	bl	801dc1e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801311e:	8bba      	ldrh	r2, [r7, #28]
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	4413      	add	r3, r2
 8013124:	3308      	adds	r3, #8
 8013126:	4a23      	ldr	r2, [pc, #140]	; (80131b4 <mem_malloc+0x1f8>)
 8013128:	6812      	ldr	r2, [r2, #0]
 801312a:	4293      	cmp	r3, r2
 801312c:	d906      	bls.n	801313c <mem_malloc+0x180>
 801312e:	4b1e      	ldr	r3, [pc, #120]	; (80131a8 <mem_malloc+0x1ec>)
 8013130:	f240 32b9 	movw	r2, #953	; 0x3b9
 8013134:	4921      	ldr	r1, [pc, #132]	; (80131bc <mem_malloc+0x200>)
 8013136:	481e      	ldr	r0, [pc, #120]	; (80131b0 <mem_malloc+0x1f4>)
 8013138:	f00b f91c 	bl	801e374 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	f003 0303 	and.w	r3, r3, #3
 8013142:	2b00      	cmp	r3, #0
 8013144:	d006      	beq.n	8013154 <mem_malloc+0x198>
 8013146:	4b18      	ldr	r3, [pc, #96]	; (80131a8 <mem_malloc+0x1ec>)
 8013148:	f240 32bb 	movw	r2, #955	; 0x3bb
 801314c:	491c      	ldr	r1, [pc, #112]	; (80131c0 <mem_malloc+0x204>)
 801314e:	4818      	ldr	r0, [pc, #96]	; (80131b0 <mem_malloc+0x1f4>)
 8013150:	f00b f910 	bl	801e374 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	f003 0303 	and.w	r3, r3, #3
 801315a:	2b00      	cmp	r3, #0
 801315c:	d006      	beq.n	801316c <mem_malloc+0x1b0>
 801315e:	4b12      	ldr	r3, [pc, #72]	; (80131a8 <mem_malloc+0x1ec>)
 8013160:	f240 32bd 	movw	r2, #957	; 0x3bd
 8013164:	4917      	ldr	r1, [pc, #92]	; (80131c4 <mem_malloc+0x208>)
 8013166:	4812      	ldr	r0, [pc, #72]	; (80131b0 <mem_malloc+0x1f4>)
 8013168:	f00b f904 	bl	801e374 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	3308      	adds	r3, #8
 8013170:	e011      	b.n	8013196 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013172:	8bfb      	ldrh	r3, [r7, #30]
 8013174:	4618      	mov	r0, r3
 8013176:	f7ff fc33 	bl	80129e0 <ptr_to_mem>
 801317a:	4603      	mov	r3, r0
 801317c:	881b      	ldrh	r3, [r3, #0]
 801317e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013180:	8bfa      	ldrh	r2, [r7, #30]
 8013182:	8bbb      	ldrh	r3, [r7, #28]
 8013184:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8013188:	429a      	cmp	r2, r3
 801318a:	f4ff af41 	bcc.w	8013010 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801318e:	4804      	ldr	r0, [pc, #16]	; (80131a0 <mem_malloc+0x1e4>)
 8013190:	f00a fd45 	bl	801dc1e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013194:	2300      	movs	r3, #0
}
 8013196:	4618      	mov	r0, r3
 8013198:	3720      	adds	r7, #32
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	2000c8a0 	.word	0x2000c8a0
 80131a4:	2000c8a4 	.word	0x2000c8a4
 80131a8:	08020828 	.word	0x08020828
 80131ac:	080209ec 	.word	0x080209ec
 80131b0:	08020870 	.word	0x08020870
 80131b4:	2000c89c 	.word	0x2000c89c
 80131b8:	08020a00 	.word	0x08020a00
 80131bc:	08020a1c 	.word	0x08020a1c
 80131c0:	08020a4c 	.word	0x08020a4c
 80131c4:	08020a7c 	.word	0x08020a7c

080131c8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80131c8:	b480      	push	{r7}
 80131ca:	b085      	sub	sp, #20
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	689b      	ldr	r3, [r3, #8]
 80131d4:	2200      	movs	r2, #0
 80131d6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	685b      	ldr	r3, [r3, #4]
 80131dc:	3303      	adds	r3, #3
 80131de:	f023 0303 	bic.w	r3, r3, #3
 80131e2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80131e4:	2300      	movs	r3, #0
 80131e6:	60fb      	str	r3, [r7, #12]
 80131e8:	e011      	b.n	801320e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	689b      	ldr	r3, [r3, #8]
 80131ee:	681a      	ldr	r2, [r3, #0]
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	689b      	ldr	r3, [r3, #8]
 80131f8:	68ba      	ldr	r2, [r7, #8]
 80131fa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	881b      	ldrh	r3, [r3, #0]
 8013200:	461a      	mov	r2, r3
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	4413      	add	r3, r2
 8013206:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	3301      	adds	r3, #1
 801320c:	60fb      	str	r3, [r7, #12]
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	885b      	ldrh	r3, [r3, #2]
 8013212:	461a      	mov	r2, r3
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	4293      	cmp	r3, r2
 8013218:	dbe7      	blt.n	80131ea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801321a:	bf00      	nop
 801321c:	bf00      	nop
 801321e:	3714      	adds	r7, #20
 8013220:	46bd      	mov	sp, r7
 8013222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013226:	4770      	bx	lr

08013228 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b082      	sub	sp, #8
 801322c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801322e:	2300      	movs	r3, #0
 8013230:	80fb      	strh	r3, [r7, #6]
 8013232:	e009      	b.n	8013248 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013234:	88fb      	ldrh	r3, [r7, #6]
 8013236:	4a08      	ldr	r2, [pc, #32]	; (8013258 <memp_init+0x30>)
 8013238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801323c:	4618      	mov	r0, r3
 801323e:	f7ff ffc3 	bl	80131c8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013242:	88fb      	ldrh	r3, [r7, #6]
 8013244:	3301      	adds	r3, #1
 8013246:	80fb      	strh	r3, [r7, #6]
 8013248:	88fb      	ldrh	r3, [r7, #6]
 801324a:	2b0c      	cmp	r3, #12
 801324c:	d9f2      	bls.n	8013234 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801324e:	bf00      	nop
 8013250:	bf00      	nop
 8013252:	3708      	adds	r7, #8
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}
 8013258:	08023468 	.word	0x08023468

0801325c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b084      	sub	sp, #16
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013264:	f00a fd0e 	bl	801dc84 <sys_arch_protect>
 8013268:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	689b      	ldr	r3, [r3, #8]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d015      	beq.n	80132a4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	689b      	ldr	r3, [r3, #8]
 801327c:	68ba      	ldr	r2, [r7, #8]
 801327e:	6812      	ldr	r2, [r2, #0]
 8013280:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	f003 0303 	and.w	r3, r3, #3
 8013288:	2b00      	cmp	r3, #0
 801328a:	d006      	beq.n	801329a <do_memp_malloc_pool+0x3e>
 801328c:	4b09      	ldr	r3, [pc, #36]	; (80132b4 <do_memp_malloc_pool+0x58>)
 801328e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013292:	4909      	ldr	r1, [pc, #36]	; (80132b8 <do_memp_malloc_pool+0x5c>)
 8013294:	4809      	ldr	r0, [pc, #36]	; (80132bc <do_memp_malloc_pool+0x60>)
 8013296:	f00b f86d 	bl	801e374 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801329a:	68f8      	ldr	r0, [r7, #12]
 801329c:	f00a fd00 	bl	801dca0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	e003      	b.n	80132ac <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80132a4:	68f8      	ldr	r0, [r7, #12]
 80132a6:	f00a fcfb 	bl	801dca0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80132aa:	2300      	movs	r3, #0
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3710      	adds	r7, #16
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}
 80132b4:	08020aa0 	.word	0x08020aa0
 80132b8:	08020ad0 	.word	0x08020ad0
 80132bc:	08020af4 	.word	0x08020af4

080132c0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d106      	bne.n	80132dc <memp_malloc_pool+0x1c>
 80132ce:	4b0a      	ldr	r3, [pc, #40]	; (80132f8 <memp_malloc_pool+0x38>)
 80132d0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80132d4:	4909      	ldr	r1, [pc, #36]	; (80132fc <memp_malloc_pool+0x3c>)
 80132d6:	480a      	ldr	r0, [pc, #40]	; (8013300 <memp_malloc_pool+0x40>)
 80132d8:	f00b f84c 	bl	801e374 <iprintf>
  if (desc == NULL) {
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d101      	bne.n	80132e6 <memp_malloc_pool+0x26>
    return NULL;
 80132e2:	2300      	movs	r3, #0
 80132e4:	e003      	b.n	80132ee <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f7ff ffb8 	bl	801325c <do_memp_malloc_pool>
 80132ec:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	3708      	adds	r7, #8
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	bf00      	nop
 80132f8:	08020aa0 	.word	0x08020aa0
 80132fc:	08020b1c 	.word	0x08020b1c
 8013300:	08020af4 	.word	0x08020af4

08013304 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b084      	sub	sp, #16
 8013308:	af00      	add	r7, sp, #0
 801330a:	4603      	mov	r3, r0
 801330c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801330e:	79fb      	ldrb	r3, [r7, #7]
 8013310:	2b0c      	cmp	r3, #12
 8013312:	d908      	bls.n	8013326 <memp_malloc+0x22>
 8013314:	4b0a      	ldr	r3, [pc, #40]	; (8013340 <memp_malloc+0x3c>)
 8013316:	f240 1257 	movw	r2, #343	; 0x157
 801331a:	490a      	ldr	r1, [pc, #40]	; (8013344 <memp_malloc+0x40>)
 801331c:	480a      	ldr	r0, [pc, #40]	; (8013348 <memp_malloc+0x44>)
 801331e:	f00b f829 	bl	801e374 <iprintf>
 8013322:	2300      	movs	r3, #0
 8013324:	e008      	b.n	8013338 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013326:	79fb      	ldrb	r3, [r7, #7]
 8013328:	4a08      	ldr	r2, [pc, #32]	; (801334c <memp_malloc+0x48>)
 801332a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801332e:	4618      	mov	r0, r3
 8013330:	f7ff ff94 	bl	801325c <do_memp_malloc_pool>
 8013334:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013336:	68fb      	ldr	r3, [r7, #12]
}
 8013338:	4618      	mov	r0, r3
 801333a:	3710      	adds	r7, #16
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}
 8013340:	08020aa0 	.word	0x08020aa0
 8013344:	08020b30 	.word	0x08020b30
 8013348:	08020af4 	.word	0x08020af4
 801334c:	08023468 	.word	0x08023468

08013350 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b084      	sub	sp, #16
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
 8013358:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	f003 0303 	and.w	r3, r3, #3
 8013360:	2b00      	cmp	r3, #0
 8013362:	d006      	beq.n	8013372 <do_memp_free_pool+0x22>
 8013364:	4b0d      	ldr	r3, [pc, #52]	; (801339c <do_memp_free_pool+0x4c>)
 8013366:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801336a:	490d      	ldr	r1, [pc, #52]	; (80133a0 <do_memp_free_pool+0x50>)
 801336c:	480d      	ldr	r0, [pc, #52]	; (80133a4 <do_memp_free_pool+0x54>)
 801336e:	f00b f801 	bl	801e374 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013376:	f00a fc85 	bl	801dc84 <sys_arch_protect>
 801337a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	689b      	ldr	r3, [r3, #8]
 8013380:	681a      	ldr	r2, [r3, #0]
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	689b      	ldr	r3, [r3, #8]
 801338a:	68fa      	ldr	r2, [r7, #12]
 801338c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801338e:	68b8      	ldr	r0, [r7, #8]
 8013390:	f00a fc86 	bl	801dca0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013394:	bf00      	nop
 8013396:	3710      	adds	r7, #16
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}
 801339c:	08020aa0 	.word	0x08020aa0
 80133a0:	08020b50 	.word	0x08020b50
 80133a4:	08020af4 	.word	0x08020af4

080133a8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
 80133b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d106      	bne.n	80133c6 <memp_free_pool+0x1e>
 80133b8:	4b0a      	ldr	r3, [pc, #40]	; (80133e4 <memp_free_pool+0x3c>)
 80133ba:	f240 1295 	movw	r2, #405	; 0x195
 80133be:	490a      	ldr	r1, [pc, #40]	; (80133e8 <memp_free_pool+0x40>)
 80133c0:	480a      	ldr	r0, [pc, #40]	; (80133ec <memp_free_pool+0x44>)
 80133c2:	f00a ffd7 	bl	801e374 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d007      	beq.n	80133dc <memp_free_pool+0x34>
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d004      	beq.n	80133dc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80133d2:	6839      	ldr	r1, [r7, #0]
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f7ff ffbb 	bl	8013350 <do_memp_free_pool>
 80133da:	e000      	b.n	80133de <memp_free_pool+0x36>
    return;
 80133dc:	bf00      	nop
}
 80133de:	3708      	adds	r7, #8
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	08020aa0 	.word	0x08020aa0
 80133e8:	08020b1c 	.word	0x08020b1c
 80133ec:	08020af4 	.word	0x08020af4

080133f0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	4603      	mov	r3, r0
 80133f8:	6039      	str	r1, [r7, #0]
 80133fa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80133fc:	79fb      	ldrb	r3, [r7, #7]
 80133fe:	2b0c      	cmp	r3, #12
 8013400:	d907      	bls.n	8013412 <memp_free+0x22>
 8013402:	4b0c      	ldr	r3, [pc, #48]	; (8013434 <memp_free+0x44>)
 8013404:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8013408:	490b      	ldr	r1, [pc, #44]	; (8013438 <memp_free+0x48>)
 801340a:	480c      	ldr	r0, [pc, #48]	; (801343c <memp_free+0x4c>)
 801340c:	f00a ffb2 	bl	801e374 <iprintf>
 8013410:	e00c      	b.n	801342c <memp_free+0x3c>

  if (mem == NULL) {
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d008      	beq.n	801342a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013418:	79fb      	ldrb	r3, [r7, #7]
 801341a:	4a09      	ldr	r2, [pc, #36]	; (8013440 <memp_free+0x50>)
 801341c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013420:	6839      	ldr	r1, [r7, #0]
 8013422:	4618      	mov	r0, r3
 8013424:	f7ff ff94 	bl	8013350 <do_memp_free_pool>
 8013428:	e000      	b.n	801342c <memp_free+0x3c>
    return;
 801342a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801342c:	3708      	adds	r7, #8
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}
 8013432:	bf00      	nop
 8013434:	08020aa0 	.word	0x08020aa0
 8013438:	08020b70 	.word	0x08020b70
 801343c:	08020af4 	.word	0x08020af4
 8013440:	08023468 	.word	0x08023468

08013444 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b082      	sub	sp, #8
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d105      	bne.n	801345e <netif_loopif_init+0x1a>
 8013452:	4b0b      	ldr	r3, [pc, #44]	; (8013480 <netif_loopif_init+0x3c>)
 8013454:	2299      	movs	r2, #153	; 0x99
 8013456:	490b      	ldr	r1, [pc, #44]	; (8013484 <netif_loopif_init+0x40>)
 8013458:	480b      	ldr	r0, [pc, #44]	; (8013488 <netif_loopif_init+0x44>)
 801345a:	f00a ff8b 	bl	801e374 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	226c      	movs	r2, #108	; 0x6c
 8013462:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	226f      	movs	r2, #111	; 0x6f
 801346a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	4a06      	ldr	r2, [pc, #24]	; (801348c <netif_loopif_init+0x48>)
 8013472:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 8013474:	2300      	movs	r3, #0
}
 8013476:	4618      	mov	r0, r3
 8013478:	3708      	adds	r7, #8
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}
 801347e:	bf00      	nop
 8013480:	08020b8c 	.word	0x08020b8c
 8013484:	08020bc0 	.word	0x08020bc0
 8013488:	08020be4 	.word	0x08020be4
 801348c:	08013bd9 	.word	0x08013bd9

08013490 <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b088      	sub	sp, #32
 8013494:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 8013496:	4b0f      	ldr	r3, [pc, #60]	; (80134d4 <netif_init+0x44>)
 8013498:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 801349a:	4b0e      	ldr	r3, [pc, #56]	; (80134d4 <netif_init+0x44>)
 801349c:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 801349e:	23ff      	movs	r3, #255	; 0xff
 80134a0:	60bb      	str	r3, [r7, #8]
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
#else  /* NO_SYS */
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, tcpip_input);
 80134a2:	1d3b      	adds	r3, r7, #4
 80134a4:	f107 0208 	add.w	r2, r7, #8
 80134a8:	f107 010c 	add.w	r1, r7, #12
 80134ac:	480a      	ldr	r0, [pc, #40]	; (80134d8 <netif_init+0x48>)
 80134ae:	9002      	str	r0, [sp, #8]
 80134b0:	480a      	ldr	r0, [pc, #40]	; (80134dc <netif_init+0x4c>)
 80134b2:	9001      	str	r0, [sp, #4]
 80134b4:	2000      	movs	r0, #0
 80134b6:	9000      	str	r0, [sp, #0]
 80134b8:	4809      	ldr	r0, [pc, #36]	; (80134e0 <netif_init+0x50>)
 80134ba:	f000 f813 	bl	80134e4 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 80134be:	4808      	ldr	r0, [pc, #32]	; (80134e0 <netif_init+0x50>)
 80134c0:	f000 fa92 	bl	80139e8 <netif_set_link_up>
  netif_set_up(&loop_netif);
 80134c4:	4806      	ldr	r0, [pc, #24]	; (80134e0 <netif_init+0x50>)
 80134c6:	f000 f9e1 	bl	801388c <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 80134ca:	bf00      	nop
 80134cc:	3710      	adds	r7, #16
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	0100007f 	.word	0x0100007f
 80134d8:	080127d1 	.word	0x080127d1
 80134dc:	08013445 	.word	0x08013445
 80134e0:	2000f970 	.word	0x2000f970

080134e4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b086      	sub	sp, #24
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	607a      	str	r2, [r7, #4]
 80134f0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d108      	bne.n	801350a <netif_add+0x26>
 80134f8:	4b5c      	ldr	r3, [pc, #368]	; (801366c <netif_add+0x188>)
 80134fa:	f240 1227 	movw	r2, #295	; 0x127
 80134fe:	495c      	ldr	r1, [pc, #368]	; (8013670 <netif_add+0x18c>)
 8013500:	485c      	ldr	r0, [pc, #368]	; (8013674 <netif_add+0x190>)
 8013502:	f00a ff37 	bl	801e374 <iprintf>
 8013506:	2300      	movs	r3, #0
 8013508:	e0ab      	b.n	8013662 <netif_add+0x17e>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801350c:	2b00      	cmp	r3, #0
 801350e:	d108      	bne.n	8013522 <netif_add+0x3e>
 8013510:	4b56      	ldr	r3, [pc, #344]	; (801366c <netif_add+0x188>)
 8013512:	f44f 7294 	mov.w	r2, #296	; 0x128
 8013516:	4958      	ldr	r1, [pc, #352]	; (8013678 <netif_add+0x194>)
 8013518:	4856      	ldr	r0, [pc, #344]	; (8013674 <netif_add+0x190>)
 801351a:	f00a ff2b 	bl	801e374 <iprintf>
 801351e:	2300      	movs	r3, #0
 8013520:	e09f      	b.n	8013662 <netif_add+0x17e>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d101      	bne.n	801352c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013528:	4b54      	ldr	r3, [pc, #336]	; (801367c <netif_add+0x198>)
 801352a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d101      	bne.n	8013536 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013532:	4b52      	ldr	r3, [pc, #328]	; (801367c <netif_add+0x198>)
 8013534:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d101      	bne.n	8013540 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801353c:	4b4f      	ldr	r3, [pc, #316]	; (801367c <netif_add+0x198>)
 801353e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2200      	movs	r2, #0
 8013544:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	2200      	movs	r2, #0
 801354a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	2200      	movs	r2, #0
 8013550:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	4a4a      	ldr	r2, [pc, #296]	; (8013680 <netif_add+0x19c>)
 8013556:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2200      	movs	r2, #0
 801355c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	2200      	movs	r2, #0
 8013562:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	2200      	movs	r2, #0
 801356a:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	2200      	movs	r2, #0
 8013570:	621a      	str	r2, [r3, #32]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	2200      	movs	r2, #0
 8013576:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	2200      	movs	r2, #0
 801357c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	6a3a      	ldr	r2, [r7, #32]
 8013582:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 8013584:	4b3f      	ldr	r3, [pc, #252]	; (8013684 <netif_add+0x1a0>)
 8013586:	781a      	ldrb	r2, [r3, #0]
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013592:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	687a      	ldr	r2, [r7, #4]
 8013598:	68b9      	ldr	r1, [r7, #8]
 801359a:	68f8      	ldr	r0, [r7, #12]
 801359c:	f000 f91c 	bl	80137d8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80135a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a2:	68f8      	ldr	r0, [r7, #12]
 80135a4:	4798      	blx	r3
 80135a6:	4603      	mov	r3, r0
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d001      	beq.n	80135b0 <netif_add+0xcc>
    return NULL;
 80135ac:	2300      	movs	r3, #0
 80135ae:	e058      	b.n	8013662 <netif_add+0x17e>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80135b6:	2bff      	cmp	r3, #255	; 0xff
 80135b8:	d103      	bne.n	80135c2 <netif_add+0xde>
        netif->num = 0;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	2200      	movs	r2, #0
 80135be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80135c2:	2300      	movs	r3, #0
 80135c4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80135c6:	4b30      	ldr	r3, [pc, #192]	; (8013688 <netif_add+0x1a4>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	617b      	str	r3, [r7, #20]
 80135cc:	e02b      	b.n	8013626 <netif_add+0x142>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80135ce:	697a      	ldr	r2, [r7, #20]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d106      	bne.n	80135e4 <netif_add+0x100>
 80135d6:	4b25      	ldr	r3, [pc, #148]	; (801366c <netif_add+0x188>)
 80135d8:	f240 128b 	movw	r2, #395	; 0x18b
 80135dc:	492b      	ldr	r1, [pc, #172]	; (801368c <netif_add+0x1a8>)
 80135de:	4825      	ldr	r0, [pc, #148]	; (8013674 <netif_add+0x190>)
 80135e0:	f00a fec8 	bl	801e374 <iprintf>
        num_netifs++;
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	3301      	adds	r3, #1
 80135e8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	2bff      	cmp	r3, #255	; 0xff
 80135ee:	dd06      	ble.n	80135fe <netif_add+0x11a>
 80135f0:	4b1e      	ldr	r3, [pc, #120]	; (801366c <netif_add+0x188>)
 80135f2:	f240 128d 	movw	r2, #397	; 0x18d
 80135f6:	4926      	ldr	r1, [pc, #152]	; (8013690 <netif_add+0x1ac>)
 80135f8:	481e      	ldr	r0, [pc, #120]	; (8013674 <netif_add+0x190>)
 80135fa:	f00a febb 	bl	801e374 <iprintf>
        if (netif2->num == netif->num) {
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801360a:	429a      	cmp	r2, r3
 801360c:	d108      	bne.n	8013620 <netif_add+0x13c>
          netif->num++;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013614:	3301      	adds	r3, #1
 8013616:	b2da      	uxtb	r2, r3
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801361e:	e005      	b.n	801362c <netif_add+0x148>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013620:	697b      	ldr	r3, [r7, #20]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	617b      	str	r3, [r7, #20]
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d1d0      	bne.n	80135ce <netif_add+0xea>
        }
      }
    } while (netif2 != NULL);
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d1be      	bne.n	80135b0 <netif_add+0xcc>
  }
  if (netif->num == 254) {
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013638:	2bfe      	cmp	r3, #254	; 0xfe
 801363a:	d103      	bne.n	8013644 <netif_add+0x160>
    netif_num = 0;
 801363c:	4b11      	ldr	r3, [pc, #68]	; (8013684 <netif_add+0x1a0>)
 801363e:	2200      	movs	r2, #0
 8013640:	701a      	strb	r2, [r3, #0]
 8013642:	e006      	b.n	8013652 <netif_add+0x16e>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801364a:	3301      	adds	r3, #1
 801364c:	b2da      	uxtb	r2, r3
 801364e:	4b0d      	ldr	r3, [pc, #52]	; (8013684 <netif_add+0x1a0>)
 8013650:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013652:	4b0d      	ldr	r3, [pc, #52]	; (8013688 <netif_add+0x1a4>)
 8013654:	681a      	ldr	r2, [r3, #0]
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801365a:	4a0b      	ldr	r2, [pc, #44]	; (8013688 <netif_add+0x1a4>)
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013660:	68fb      	ldr	r3, [r7, #12]
}
 8013662:	4618      	mov	r0, r3
 8013664:	3718      	adds	r7, #24
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
 801366a:	bf00      	nop
 801366c:	08020b8c 	.word	0x08020b8c
 8013670:	08020c44 	.word	0x08020c44
 8013674:	08020be4 	.word	0x08020be4
 8013678:	08020c60 	.word	0x08020c60
 801367c:	080234dc 	.word	0x080234dc
 8013680:	08013ce9 	.word	0x08013ce9
 8013684:	2000f96c 	.word	0x2000f96c
 8013688:	2000f964 	.word	0x2000f964
 801368c:	08020c84 	.word	0x08020c84
 8013690:	08020c98 	.word	0x08020c98

08013694 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801369e:	6839      	ldr	r1, [r7, #0]
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f002 ff71 	bl	8016588 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80136a6:	6839      	ldr	r1, [r7, #0]
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f007 fe23 	bl	801b2f4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80136ae:	bf00      	nop
 80136b0:	3708      	adds	r7, #8
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
	...

080136b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b086      	sub	sp, #24
 80136bc:	af00      	add	r7, sp, #0
 80136be:	60f8      	str	r0, [r7, #12]
 80136c0:	60b9      	str	r1, [r7, #8]
 80136c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d106      	bne.n	80136d8 <netif_do_set_ipaddr+0x20>
 80136ca:	4b21      	ldr	r3, [pc, #132]	; (8013750 <netif_do_set_ipaddr+0x98>)
 80136cc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80136d0:	4920      	ldr	r1, [pc, #128]	; (8013754 <netif_do_set_ipaddr+0x9c>)
 80136d2:	4821      	ldr	r0, [pc, #132]	; (8013758 <netif_do_set_ipaddr+0xa0>)
 80136d4:	f00a fe4e 	bl	801e374 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d106      	bne.n	80136ec <netif_do_set_ipaddr+0x34>
 80136de:	4b1c      	ldr	r3, [pc, #112]	; (8013750 <netif_do_set_ipaddr+0x98>)
 80136e0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80136e4:	491b      	ldr	r1, [pc, #108]	; (8013754 <netif_do_set_ipaddr+0x9c>)
 80136e6:	481c      	ldr	r0, [pc, #112]	; (8013758 <netif_do_set_ipaddr+0xa0>)
 80136e8:	f00a fe44 	bl	801e374 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	3304      	adds	r3, #4
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d024      	beq.n	8013744 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	3304      	adds	r3, #4
 8013704:	681a      	ldr	r2, [r3, #0]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801370a:	f107 0314 	add.w	r3, r7, #20
 801370e:	4619      	mov	r1, r3
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f7ff ffbf 	bl	8013694 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d002      	beq.n	8013722 <netif_do_set_ipaddr+0x6a>
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	e000      	b.n	8013724 <netif_do_set_ipaddr+0x6c>
 8013722:	2300      	movs	r3, #0
 8013724:	68fa      	ldr	r2, [r7, #12]
 8013726:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013728:	2101      	movs	r1, #1
 801372a:	68f8      	ldr	r0, [r7, #12]
 801372c:	f000 f8e2 	bl	80138f4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	69db      	ldr	r3, [r3, #28]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d003      	beq.n	8013740 <netif_do_set_ipaddr+0x88>
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	69db      	ldr	r3, [r3, #28]
 801373c:	68f8      	ldr	r0, [r7, #12]
 801373e:	4798      	blx	r3
    return 1; /* address changed */
 8013740:	2301      	movs	r3, #1
 8013742:	e000      	b.n	8013746 <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 8013744:	2300      	movs	r3, #0
}
 8013746:	4618      	mov	r0, r3
 8013748:	3718      	adds	r7, #24
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}
 801374e:	bf00      	nop
 8013750:	08020b8c 	.word	0x08020b8c
 8013754:	08020cc8 	.word	0x08020cc8
 8013758:	08020be4 	.word	0x08020be4

0801375c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801375c:	b480      	push	{r7}
 801375e:	b085      	sub	sp, #20
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	681a      	ldr	r2, [r3, #0]
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	3308      	adds	r3, #8
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	429a      	cmp	r2, r3
 8013774:	d00a      	beq.n	801378c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d002      	beq.n	8013782 <netif_do_set_netmask+0x26>
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	e000      	b.n	8013784 <netif_do_set_netmask+0x28>
 8013782:	2300      	movs	r3, #0
 8013784:	68fa      	ldr	r2, [r7, #12]
 8013786:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013788:	2301      	movs	r3, #1
 801378a:	e000      	b.n	801378e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801378c:	2300      	movs	r3, #0
}
 801378e:	4618      	mov	r0, r3
 8013790:	3714      	adds	r7, #20
 8013792:	46bd      	mov	sp, r7
 8013794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013798:	4770      	bx	lr

0801379a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801379a:	b480      	push	{r7}
 801379c:	b085      	sub	sp, #20
 801379e:	af00      	add	r7, sp, #0
 80137a0:	60f8      	str	r0, [r7, #12]
 80137a2:	60b9      	str	r1, [r7, #8]
 80137a4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	681a      	ldr	r2, [r3, #0]
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	330c      	adds	r3, #12
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d00a      	beq.n	80137ca <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d002      	beq.n	80137c0 <netif_do_set_gw+0x26>
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	e000      	b.n	80137c2 <netif_do_set_gw+0x28>
 80137c0:	2300      	movs	r3, #0
 80137c2:	68fa      	ldr	r2, [r7, #12]
 80137c4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80137c6:	2301      	movs	r3, #1
 80137c8:	e000      	b.n	80137cc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80137ca:	2300      	movs	r3, #0
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3714      	adds	r7, #20
 80137d0:	46bd      	mov	sp, r7
 80137d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d6:	4770      	bx	lr

080137d8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b088      	sub	sp, #32
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	60b9      	str	r1, [r7, #8]
 80137e2:	607a      	str	r2, [r7, #4]
 80137e4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80137e6:	2300      	movs	r3, #0
 80137e8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80137ea:	2300      	movs	r3, #0
 80137ec:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d101      	bne.n	80137f8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80137f4:	4b1c      	ldr	r3, [pc, #112]	; (8013868 <netif_set_addr+0x90>)
 80137f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d101      	bne.n	8013802 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80137fe:	4b1a      	ldr	r3, [pc, #104]	; (8013868 <netif_set_addr+0x90>)
 8013800:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d101      	bne.n	801380c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013808:	4b17      	ldr	r3, [pc, #92]	; (8013868 <netif_set_addr+0x90>)
 801380a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d003      	beq.n	801381a <netif_set_addr+0x42>
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d101      	bne.n	801381e <netif_set_addr+0x46>
 801381a:	2301      	movs	r3, #1
 801381c:	e000      	b.n	8013820 <netif_set_addr+0x48>
 801381e:	2300      	movs	r3, #0
 8013820:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d006      	beq.n	8013836 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013828:	f107 0310 	add.w	r3, r7, #16
 801382c:	461a      	mov	r2, r3
 801382e:	68b9      	ldr	r1, [r7, #8]
 8013830:	68f8      	ldr	r0, [r7, #12]
 8013832:	f7ff ff41 	bl	80136b8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013836:	69fa      	ldr	r2, [r7, #28]
 8013838:	6879      	ldr	r1, [r7, #4]
 801383a:	68f8      	ldr	r0, [r7, #12]
 801383c:	f7ff ff8e 	bl	801375c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013840:	69ba      	ldr	r2, [r7, #24]
 8013842:	6839      	ldr	r1, [r7, #0]
 8013844:	68f8      	ldr	r0, [r7, #12]
 8013846:	f7ff ffa8 	bl	801379a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d106      	bne.n	801385e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013850:	f107 0310 	add.w	r3, r7, #16
 8013854:	461a      	mov	r2, r3
 8013856:	68b9      	ldr	r1, [r7, #8]
 8013858:	68f8      	ldr	r0, [r7, #12]
 801385a:	f7ff ff2d 	bl	80136b8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801385e:	bf00      	nop
 8013860:	3720      	adds	r7, #32
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop
 8013868:	080234dc 	.word	0x080234dc

0801386c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801386c:	b480      	push	{r7}
 801386e:	b083      	sub	sp, #12
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013874:	4a04      	ldr	r2, [pc, #16]	; (8013888 <netif_set_default+0x1c>)
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801387a:	bf00      	nop
 801387c:	370c      	adds	r7, #12
 801387e:	46bd      	mov	sp, r7
 8013880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013884:	4770      	bx	lr
 8013886:	bf00      	nop
 8013888:	2000f968 	.word	0x2000f968

0801388c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b082      	sub	sp, #8
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d107      	bne.n	80138aa <netif_set_up+0x1e>
 801389a:	4b13      	ldr	r3, [pc, #76]	; (80138e8 <netif_set_up+0x5c>)
 801389c:	f44f 7254 	mov.w	r2, #848	; 0x350
 80138a0:	4912      	ldr	r1, [pc, #72]	; (80138ec <netif_set_up+0x60>)
 80138a2:	4813      	ldr	r0, [pc, #76]	; (80138f0 <netif_set_up+0x64>)
 80138a4:	f00a fd66 	bl	801e374 <iprintf>
 80138a8:	e01b      	b.n	80138e2 <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138b0:	f003 0301 	and.w	r3, r3, #1
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d114      	bne.n	80138e2 <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138be:	f043 0301 	orr.w	r3, r3, #1
 80138c2:	b2da      	uxtb	r2, r3
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	69db      	ldr	r3, [r3, #28]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d003      	beq.n	80138da <netif_set_up+0x4e>
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	69db      	ldr	r3, [r3, #28]
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80138da:	2103      	movs	r1, #3
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f000 f809 	bl	80138f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80138e2:	3708      	adds	r7, #8
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}
 80138e8:	08020b8c 	.word	0x08020b8c
 80138ec:	08020d38 	.word	0x08020d38
 80138f0:	08020be4 	.word	0x08020be4

080138f4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b082      	sub	sp, #8
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	460b      	mov	r3, r1
 80138fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d106      	bne.n	8013914 <netif_issue_reports+0x20>
 8013906:	4b18      	ldr	r3, [pc, #96]	; (8013968 <netif_issue_reports+0x74>)
 8013908:	f240 326d 	movw	r2, #877	; 0x36d
 801390c:	4917      	ldr	r1, [pc, #92]	; (801396c <netif_issue_reports+0x78>)
 801390e:	4818      	ldr	r0, [pc, #96]	; (8013970 <netif_issue_reports+0x7c>)
 8013910:	f00a fd30 	bl	801e374 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801391a:	f003 0304 	and.w	r3, r3, #4
 801391e:	2b00      	cmp	r3, #0
 8013920:	d01e      	beq.n	8013960 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013928:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801392c:	2b00      	cmp	r3, #0
 801392e:	d017      	beq.n	8013960 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013930:	78fb      	ldrb	r3, [r7, #3]
 8013932:	f003 0301 	and.w	r3, r3, #1
 8013936:	2b00      	cmp	r3, #0
 8013938:	d013      	beq.n	8013962 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	3304      	adds	r3, #4
 801393e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013940:	2b00      	cmp	r3, #0
 8013942:	d00e      	beq.n	8013962 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801394a:	f003 0308 	and.w	r3, r3, #8
 801394e:	2b00      	cmp	r3, #0
 8013950:	d007      	beq.n	8013962 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	3304      	adds	r3, #4
 8013956:	4619      	mov	r1, r3
 8013958:	6878      	ldr	r0, [r7, #4]
 801395a:	f008 fc35 	bl	801c1c8 <etharp_request>
 801395e:	e000      	b.n	8013962 <netif_issue_reports+0x6e>
    return;
 8013960:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013962:	3708      	adds	r7, #8
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}
 8013968:	08020b8c 	.word	0x08020b8c
 801396c:	08020d54 	.word	0x08020d54
 8013970:	08020be4 	.word	0x08020be4

08013974 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d107      	bne.n	8013992 <netif_set_down+0x1e>
 8013982:	4b16      	ldr	r3, [pc, #88]	; (80139dc <netif_set_down+0x68>)
 8013984:	f240 329b 	movw	r2, #923	; 0x39b
 8013988:	4915      	ldr	r1, [pc, #84]	; (80139e0 <netif_set_down+0x6c>)
 801398a:	4816      	ldr	r0, [pc, #88]	; (80139e4 <netif_set_down+0x70>)
 801398c:	f00a fcf2 	bl	801e374 <iprintf>
 8013990:	e021      	b.n	80139d6 <netif_set_down+0x62>

  if (netif->flags & NETIF_FLAG_UP) {
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013998:	f003 0301 	and.w	r3, r3, #1
 801399c:	2b00      	cmp	r3, #0
 801399e:	d01a      	beq.n	80139d6 <netif_set_down+0x62>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139a6:	f023 0301 	bic.w	r3, r3, #1
 80139aa:	b2da      	uxtb	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139b8:	f003 0308 	and.w	r3, r3, #8
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d002      	beq.n	80139c6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f007 ffbf 	bl	801b944 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	69db      	ldr	r3, [r3, #28]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d003      	beq.n	80139d6 <netif_set_down+0x62>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	69db      	ldr	r3, [r3, #28]
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	4798      	blx	r3
  }
}
 80139d6:	3708      	adds	r7, #8
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}
 80139dc:	08020b8c 	.word	0x08020b8c
 80139e0:	08020d78 	.word	0x08020d78
 80139e4:	08020be4 	.word	0x08020be4

080139e8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d107      	bne.n	8013a06 <netif_set_link_up+0x1e>
 80139f6:	4b13      	ldr	r3, [pc, #76]	; (8013a44 <netif_set_link_up+0x5c>)
 80139f8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80139fc:	4912      	ldr	r1, [pc, #72]	; (8013a48 <netif_set_link_up+0x60>)
 80139fe:	4813      	ldr	r0, [pc, #76]	; (8013a4c <netif_set_link_up+0x64>)
 8013a00:	f00a fcb8 	bl	801e374 <iprintf>
 8013a04:	e01b      	b.n	8013a3e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013a0c:	f003 0304 	and.w	r3, r3, #4
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d114      	bne.n	8013a3e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013a1a:	f043 0304 	orr.w	r3, r3, #4
 8013a1e:	b2da      	uxtb	r2, r3
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013a26:	2103      	movs	r1, #3
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	f7ff ff63 	bl	80138f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6a1b      	ldr	r3, [r3, #32]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d003      	beq.n	8013a3e <netif_set_link_up+0x56>
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6a1b      	ldr	r3, [r3, #32]
 8013a3a:	6878      	ldr	r0, [r7, #4]
 8013a3c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013a3e:	3708      	adds	r7, #8
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}
 8013a44:	08020b8c 	.word	0x08020b8c
 8013a48:	08020d98 	.word	0x08020d98
 8013a4c:	08020be4 	.word	0x08020be4

08013a50 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d107      	bne.n	8013a6e <netif_set_link_down+0x1e>
 8013a5e:	4b11      	ldr	r3, [pc, #68]	; (8013aa4 <netif_set_link_down+0x54>)
 8013a60:	f240 4206 	movw	r2, #1030	; 0x406
 8013a64:	4910      	ldr	r1, [pc, #64]	; (8013aa8 <netif_set_link_down+0x58>)
 8013a66:	4811      	ldr	r0, [pc, #68]	; (8013aac <netif_set_link_down+0x5c>)
 8013a68:	f00a fc84 	bl	801e374 <iprintf>
 8013a6c:	e017      	b.n	8013a9e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013a74:	f003 0304 	and.w	r3, r3, #4
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d010      	beq.n	8013a9e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013a82:	f023 0304 	bic.w	r3, r3, #4
 8013a86:	b2da      	uxtb	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	6a1b      	ldr	r3, [r3, #32]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d003      	beq.n	8013a9e <netif_set_link_down+0x4e>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	6a1b      	ldr	r3, [r3, #32]
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}
 8013aa4:	08020b8c 	.word	0x08020b8c
 8013aa8:	08020dbc 	.word	0x08020dbc
 8013aac:	08020be4 	.word	0x08020be4

08013ab0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b083      	sub	sp, #12
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d002      	beq.n	8013ac6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	683a      	ldr	r2, [r7, #0]
 8013ac4:	621a      	str	r2, [r3, #32]
  }
}
 8013ac6:	bf00      	nop
 8013ac8:	370c      	adds	r7, #12
 8013aca:	46bd      	mov	sp, r7
 8013acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad0:	4770      	bx	lr
	...

08013ad4 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b088      	sub	sp, #32
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
 8013adc:	6039      	str	r1, [r7, #0]
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	76fb      	strb	r3, [r7, #27]
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d106      	bne.n	8013af6 <netif_loop_output+0x22>
 8013ae8:	4b35      	ldr	r3, [pc, #212]	; (8013bc0 <netif_loop_output+0xec>)
 8013aea:	f240 424b 	movw	r2, #1099	; 0x44b
 8013aee:	4935      	ldr	r1, [pc, #212]	; (8013bc4 <netif_loop_output+0xf0>)
 8013af0:	4835      	ldr	r0, [pc, #212]	; (8013bc8 <netif_loop_output+0xf4>)
 8013af2:	f00a fc3f 	bl	801e374 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d106      	bne.n	8013b0a <netif_loop_output+0x36>
 8013afc:	4b30      	ldr	r3, [pc, #192]	; (8013bc0 <netif_loop_output+0xec>)
 8013afe:	f240 424c 	movw	r2, #1100	; 0x44c
 8013b02:	4932      	ldr	r1, [pc, #200]	; (8013bcc <netif_loop_output+0xf8>)
 8013b04:	4830      	ldr	r0, [pc, #192]	; (8013bc8 <netif_loop_output+0xf4>)
 8013b06:	f00a fc35 	bl	801e374 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	891b      	ldrh	r3, [r3, #8]
 8013b0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b12:	4619      	mov	r1, r3
 8013b14:	200e      	movs	r0, #14
 8013b16:	f000 f99f 	bl	8013e58 <pbuf_alloc>
 8013b1a:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d102      	bne.n	8013b28 <netif_loop_output+0x54>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 8013b22:	f04f 33ff 	mov.w	r3, #4294967295
 8013b26:	e046      	b.n	8013bb6 <netif_loop_output+0xe2>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 8013b28:	6839      	ldr	r1, [r7, #0]
 8013b2a:	6978      	ldr	r0, [r7, #20]
 8013b2c:	f000 fd9c 	bl	8014668 <pbuf_copy>
 8013b30:	4603      	mov	r3, r0
 8013b32:	74fb      	strb	r3, [r7, #19]
 8013b34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d005      	beq.n	8013b48 <netif_loop_output+0x74>
    pbuf_free(r);
 8013b3c:	6978      	ldr	r0, [r7, #20]
 8013b3e:	f000 fc6f 	bl	8014420 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 8013b42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b46:	e036      	b.n	8013bb6 <netif_loop_output+0xe2>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	61fb      	str	r3, [r7, #28]
 8013b4c:	e002      	b.n	8013b54 <netif_loop_output+0x80>
 8013b4e:	69fb      	ldr	r3, [r7, #28]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	61fb      	str	r3, [r7, #28]
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d1f8      	bne.n	8013b4e <netif_loop_output+0x7a>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
 8013b5c:	f00a f892 	bl	801dc84 <sys_arch_protect>
 8013b60:	60f8      	str	r0, [r7, #12]
  if (netif->loop_first != NULL) {
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d012      	beq.n	8013b90 <netif_loop_output+0xbc>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d106      	bne.n	8013b80 <netif_loop_output+0xac>
 8013b72:	4b13      	ldr	r3, [pc, #76]	; (8013bc0 <netif_loop_output+0xec>)
 8013b74:	f240 4277 	movw	r2, #1143	; 0x477
 8013b78:	4915      	ldr	r1, [pc, #84]	; (8013bd0 <netif_loop_output+0xfc>)
 8013b7a:	4813      	ldr	r0, [pc, #76]	; (8013bc8 <netif_loop_output+0xf4>)
 8013b7c:	f00a fbfa 	bl	801e374 <iprintf>
    netif->loop_last->next = r;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b84:	697a      	ldr	r2, [r7, #20]
 8013b86:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	69fa      	ldr	r2, [r7, #28]
 8013b8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8013b8e:	e007      	b.n	8013ba0 <netif_loop_output+0xcc>
  } else {
    netif->loop_first = r;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	697a      	ldr	r2, [r7, #20]
 8013b94:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	69fa      	ldr	r2, [r7, #28]
 8013b9a:	63da      	str	r2, [r3, #60]	; 0x3c
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
    /* No existing packets queued, schedule poll */
    schedule_poll = 1;
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	76fb      	strb	r3, [r7, #27]
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  }
  SYS_ARCH_UNPROTECT(lev);
 8013ba0:	68f8      	ldr	r0, [r7, #12]
 8013ba2:	f00a f87d 	bl	801dca0 <sys_arch_unprotect>
  MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
  MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);

#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  /* For multithreading environment, schedule a call to netif_poll */
  if (schedule_poll) {
 8013ba6:	7efb      	ldrb	r3, [r7, #27]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d003      	beq.n	8013bb4 <netif_loop_output+0xe0>
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
 8013bac:	6879      	ldr	r1, [r7, #4]
 8013bae:	4809      	ldr	r0, [pc, #36]	; (8013bd4 <netif_loop_output+0x100>)
 8013bb0:	f7fe fe30 	bl	8012814 <tcpip_try_callback>
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 8013bb4:	2300      	movs	r3, #0
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3720      	adds	r7, #32
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	08020b8c 	.word	0x08020b8c
 8013bc4:	08020de0 	.word	0x08020de0
 8013bc8:	08020be4 	.word	0x08020be4
 8013bcc:	08020e04 	.word	0x08020e04
 8013bd0:	08020e24 	.word	0x08020e24
 8013bd4:	08013bf9 	.word	0x08013bf9

08013bd8 <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b084      	sub	sp, #16
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	60f8      	str	r0, [r7, #12]
 8013be0:	60b9      	str	r1, [r7, #8]
 8013be2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 8013be4:	68b9      	ldr	r1, [r7, #8]
 8013be6:	68f8      	ldr	r0, [r7, #12]
 8013be8:	f7ff ff74 	bl	8013ad4 <netif_loop_output>
 8013bec:	4603      	mov	r3, r0
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3710      	adds	r7, #16
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}
	...

08013bf8 <netif_poll>:
 * netif_loop_output() are put on a list that is passed to netif->input() by
 * netif_poll().
 */
void
netif_poll(struct netif *netif)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b086      	sub	sp, #24
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
  struct netif *stats_if = netif;
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_poll: invalid netif", netif != NULL);
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d106      	bne.n	8013c14 <netif_poll+0x1c>
 8013c06:	4b33      	ldr	r3, [pc, #204]	; (8013cd4 <netif_poll+0xdc>)
 8013c08:	f240 42bb 	movw	r2, #1211	; 0x4bb
 8013c0c:	4932      	ldr	r1, [pc, #200]	; (8013cd8 <netif_poll+0xe0>)
 8013c0e:	4833      	ldr	r0, [pc, #204]	; (8013cdc <netif_poll+0xe4>)
 8013c10:	f00a fbb0 	bl	801e374 <iprintf>

  /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
  SYS_ARCH_PROTECT(lev);
 8013c14:	f00a f836 	bl	801dc84 <sys_arch_protect>
 8013c18:	6178      	str	r0, [r7, #20]
  while (netif->loop_first != NULL) {
 8013c1a:	e04f      	b.n	8013cbc <netif_poll+0xc4>
    struct pbuf *in, *in_end;
#if LWIP_LOOPBACK_MAX_PBUFS
    u8_t clen = 1;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    in = in_end = netif->loop_first;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c20:	613b      	str	r3, [r7, #16]
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	60fb      	str	r3, [r7, #12]
    while (in_end->len != in_end->tot_len) {
 8013c26:	e00d      	b.n	8013c44 <netif_poll+0x4c>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d106      	bne.n	8013c3e <netif_poll+0x46>
 8013c30:	4b28      	ldr	r3, [pc, #160]	; (8013cd4 <netif_poll+0xdc>)
 8013c32:	f240 42c7 	movw	r2, #1223	; 0x4c7
 8013c36:	492a      	ldr	r1, [pc, #168]	; (8013ce0 <netif_poll+0xe8>)
 8013c38:	4828      	ldr	r0, [pc, #160]	; (8013cdc <netif_poll+0xe4>)
 8013c3a:	f00a fb9b 	bl	801e374 <iprintf>
      in_end = in_end->next;
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	613b      	str	r3, [r7, #16]
    while (in_end->len != in_end->tot_len) {
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	895a      	ldrh	r2, [r3, #10]
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	891b      	ldrh	r3, [r3, #8]
 8013c4c:	429a      	cmp	r2, r3
 8013c4e:	d1eb      	bne.n	8013c28 <netif_poll+0x30>
                ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
    netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current - clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    /* 'in_end' now points to the last pbuf from 'in' */
    if (in_end == netif->loop_last) {
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c54:	693a      	ldr	r2, [r7, #16]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d107      	bne.n	8013c6a <netif_poll+0x72>
      /* this was the last pbuf in the list */
      netif->loop_first = netif->loop_last = NULL;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	639a      	str	r2, [r3, #56]	; 0x38
 8013c68:	e00e      	b.n	8013c88 <netif_poll+0x90>
    } else {
      /* pop the pbuf off the list */
      netif->loop_first = in_end->next;
 8013c6a:	693b      	ldr	r3, [r7, #16]
 8013c6c:	681a      	ldr	r2, [r3, #0]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	639a      	str	r2, [r3, #56]	; 0x38
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d106      	bne.n	8013c88 <netif_poll+0x90>
 8013c7a:	4b16      	ldr	r3, [pc, #88]	; (8013cd4 <netif_poll+0xdc>)
 8013c7c:	f240 42db 	movw	r2, #1243	; 0x4db
 8013c80:	4918      	ldr	r1, [pc, #96]	; (8013ce4 <netif_poll+0xec>)
 8013c82:	4816      	ldr	r0, [pc, #88]	; (8013cdc <netif_poll+0xe4>)
 8013c84:	f00a fb76 	bl	801e374 <iprintf>
    }
    /* De-queue the pbuf from its successors on the 'loop_' list. */
    in_end->next = NULL;
 8013c88:	693b      	ldr	r3, [r7, #16]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	601a      	str	r2, [r3, #0]
    SYS_ARCH_UNPROTECT(lev);
 8013c8e:	6978      	ldr	r0, [r7, #20]
 8013c90:	f00a f806 	bl	801dca0 <sys_arch_unprotect>

    in->if_idx = netif_get_index(netif);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	b2da      	uxtb	r2, r3
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	73da      	strb	r2, [r3, #15]

    LINK_STATS_INC(link.recv);
    MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
    MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
    /* loopback packets are always IP packets! */
    if (ip_input(in, netif) != ERR_OK) {
 8013ca2:	6879      	ldr	r1, [r7, #4]
 8013ca4:	68f8      	ldr	r0, [r7, #12]
 8013ca6:	f008 fcc9 	bl	801c63c <ip4_input>
 8013caa:	4603      	mov	r3, r0
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d002      	beq.n	8013cb6 <netif_poll+0xbe>
      pbuf_free(in);
 8013cb0:	68f8      	ldr	r0, [r7, #12]
 8013cb2:	f000 fbb5 	bl	8014420 <pbuf_free>
    }
    SYS_ARCH_PROTECT(lev);
 8013cb6:	f009 ffe5 	bl	801dc84 <sys_arch_protect>
 8013cba:	6178      	str	r0, [r7, #20]
  while (netif->loop_first != NULL) {
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d1ab      	bne.n	8013c1c <netif_poll+0x24>
  }
  SYS_ARCH_UNPROTECT(lev);
 8013cc4:	6978      	ldr	r0, [r7, #20]
 8013cc6:	f009 ffeb 	bl	801dca0 <sys_arch_unprotect>
}
 8013cca:	bf00      	nop
 8013ccc:	3718      	adds	r7, #24
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	08020b8c 	.word	0x08020b8c
 8013cd8:	08020e50 	.word	0x08020e50
 8013cdc:	08020be4 	.word	0x08020be4
 8013ce0:	08020e6c 	.word	0x08020e6c
 8013ce4:	08020e9c 	.word	0x08020e9c

08013ce8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013ce8:	b480      	push	{r7}
 8013cea:	b085      	sub	sp, #20
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	60f8      	str	r0, [r7, #12]
 8013cf0:	60b9      	str	r1, [r7, #8]
 8013cf2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013cf4:	f06f 030b 	mvn.w	r3, #11
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	3714      	adds	r7, #20
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d02:	4770      	bx	lr

08013d04 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013d04:	b480      	push	{r7}
 8013d06:	b085      	sub	sp, #20
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013d0e:	79fb      	ldrb	r3, [r7, #7]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d013      	beq.n	8013d3c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013d14:	4b0d      	ldr	r3, [pc, #52]	; (8013d4c <netif_get_by_index+0x48>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	60fb      	str	r3, [r7, #12]
 8013d1a:	e00c      	b.n	8013d36 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d22:	3301      	adds	r3, #1
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	79fa      	ldrb	r2, [r7, #7]
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	d101      	bne.n	8013d30 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	e006      	b.n	8013d3e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	60fb      	str	r3, [r7, #12]
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d1ef      	bne.n	8013d1c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013d3c:	2300      	movs	r3, #0
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3714      	adds	r7, #20
 8013d42:	46bd      	mov	sp, r7
 8013d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d48:	4770      	bx	lr
 8013d4a:	bf00      	nop
 8013d4c:	2000f964 	.word	0x2000f964

08013d50 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013d56:	f009 ff95 	bl	801dc84 <sys_arch_protect>
 8013d5a:	6038      	str	r0, [r7, #0]
 8013d5c:	4b0d      	ldr	r3, [pc, #52]	; (8013d94 <pbuf_free_ooseq+0x44>)
 8013d5e:	2200      	movs	r2, #0
 8013d60:	701a      	strb	r2, [r3, #0]
 8013d62:	6838      	ldr	r0, [r7, #0]
 8013d64:	f009 ff9c 	bl	801dca0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013d68:	4b0b      	ldr	r3, [pc, #44]	; (8013d98 <pbuf_free_ooseq+0x48>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	607b      	str	r3, [r7, #4]
 8013d6e:	e00a      	b.n	8013d86 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d003      	beq.n	8013d80 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f002 fc43 	bl	8016604 <tcp_free_ooseq>
      return;
 8013d7e:	e005      	b.n	8013d8c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	68db      	ldr	r3, [r3, #12]
 8013d84:	607b      	str	r3, [r7, #4]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d1f1      	bne.n	8013d70 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013d8c:	3708      	adds	r7, #8
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	2000f9b0 	.word	0x2000f9b0
 8013d98:	2000f9c0 	.word	0x2000f9c0

08013d9c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b082      	sub	sp, #8
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013da4:	f7ff ffd4 	bl	8013d50 <pbuf_free_ooseq>
}
 8013da8:	bf00      	nop
 8013daa:	3708      	adds	r7, #8
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}

08013db0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b082      	sub	sp, #8
 8013db4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013db6:	f009 ff65 	bl	801dc84 <sys_arch_protect>
 8013dba:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013dbc:	4b0f      	ldr	r3, [pc, #60]	; (8013dfc <pbuf_pool_is_empty+0x4c>)
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013dc2:	4b0e      	ldr	r3, [pc, #56]	; (8013dfc <pbuf_pool_is_empty+0x4c>)
 8013dc4:	2201      	movs	r2, #1
 8013dc6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013dc8:	6878      	ldr	r0, [r7, #4]
 8013dca:	f009 ff69 	bl	801dca0 <sys_arch_unprotect>

  if (!queued) {
 8013dce:	78fb      	ldrb	r3, [r7, #3]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d10f      	bne.n	8013df4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013dd4:	2100      	movs	r1, #0
 8013dd6:	480a      	ldr	r0, [pc, #40]	; (8013e00 <pbuf_pool_is_empty+0x50>)
 8013dd8:	f7fe fd1c 	bl	8012814 <tcpip_try_callback>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d008      	beq.n	8013df4 <pbuf_pool_is_empty+0x44>
 8013de2:	f009 ff4f 	bl	801dc84 <sys_arch_protect>
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	4b04      	ldr	r3, [pc, #16]	; (8013dfc <pbuf_pool_is_empty+0x4c>)
 8013dea:	2200      	movs	r2, #0
 8013dec:	701a      	strb	r2, [r3, #0]
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f009 ff56 	bl	801dca0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013df4:	bf00      	nop
 8013df6:	3708      	adds	r7, #8
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd80      	pop	{r7, pc}
 8013dfc:	2000f9b0 	.word	0x2000f9b0
 8013e00:	08013d9d 	.word	0x08013d9d

08013e04 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013e04:	b480      	push	{r7}
 8013e06:	b085      	sub	sp, #20
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	60f8      	str	r0, [r7, #12]
 8013e0c:	60b9      	str	r1, [r7, #8]
 8013e0e:	4611      	mov	r1, r2
 8013e10:	461a      	mov	r2, r3
 8013e12:	460b      	mov	r3, r1
 8013e14:	80fb      	strh	r3, [r7, #6]
 8013e16:	4613      	mov	r3, r2
 8013e18:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	68ba      	ldr	r2, [r7, #8]
 8013e24:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	88fa      	ldrh	r2, [r7, #6]
 8013e2a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	88ba      	ldrh	r2, [r7, #4]
 8013e30:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013e32:	8b3b      	ldrh	r3, [r7, #24]
 8013e34:	b2da      	uxtb	r2, r3
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	7f3a      	ldrb	r2, [r7, #28]
 8013e3e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2201      	movs	r2, #1
 8013e44:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	73da      	strb	r2, [r3, #15]
}
 8013e4c:	bf00      	nop
 8013e4e:	3714      	adds	r7, #20
 8013e50:	46bd      	mov	sp, r7
 8013e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e56:	4770      	bx	lr

08013e58 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b08c      	sub	sp, #48	; 0x30
 8013e5c:	af02      	add	r7, sp, #8
 8013e5e:	4603      	mov	r3, r0
 8013e60:	71fb      	strb	r3, [r7, #7]
 8013e62:	460b      	mov	r3, r1
 8013e64:	80bb      	strh	r3, [r7, #4]
 8013e66:	4613      	mov	r3, r2
 8013e68:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013e6a:	79fb      	ldrb	r3, [r7, #7]
 8013e6c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013e6e:	887b      	ldrh	r3, [r7, #2]
 8013e70:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013e74:	d07f      	beq.n	8013f76 <pbuf_alloc+0x11e>
 8013e76:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013e7a:	f300 80c8 	bgt.w	801400e <pbuf_alloc+0x1b6>
 8013e7e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013e82:	d010      	beq.n	8013ea6 <pbuf_alloc+0x4e>
 8013e84:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013e88:	f300 80c1 	bgt.w	801400e <pbuf_alloc+0x1b6>
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d002      	beq.n	8013e96 <pbuf_alloc+0x3e>
 8013e90:	2b41      	cmp	r3, #65	; 0x41
 8013e92:	f040 80bc 	bne.w	801400e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013e96:	887a      	ldrh	r2, [r7, #2]
 8013e98:	88bb      	ldrh	r3, [r7, #4]
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	2000      	movs	r0, #0
 8013e9e:	f000 f8d1 	bl	8014044 <pbuf_alloc_reference>
 8013ea2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8013ea4:	e0bd      	b.n	8014022 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013eae:	88bb      	ldrh	r3, [r7, #4]
 8013eb0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013eb2:	200c      	movs	r0, #12
 8013eb4:	f7ff fa26 	bl	8013304 <memp_malloc>
 8013eb8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d109      	bne.n	8013ed4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013ec0:	f7ff ff76 	bl	8013db0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d002      	beq.n	8013ed0 <pbuf_alloc+0x78>
            pbuf_free(p);
 8013eca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ecc:	f000 faa8 	bl	8014420 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	e0a7      	b.n	8014024 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013ed4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ed6:	3303      	adds	r3, #3
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	f023 0303 	bic.w	r3, r3, #3
 8013ede:	b29b      	uxth	r3, r3
 8013ee0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8013ee4:	b29b      	uxth	r3, r3
 8013ee6:	8b7a      	ldrh	r2, [r7, #26]
 8013ee8:	4293      	cmp	r3, r2
 8013eea:	bf28      	it	cs
 8013eec:	4613      	movcs	r3, r2
 8013eee:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013ef0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ef2:	3310      	adds	r3, #16
 8013ef4:	693a      	ldr	r2, [r7, #16]
 8013ef6:	4413      	add	r3, r2
 8013ef8:	3303      	adds	r3, #3
 8013efa:	f023 0303 	bic.w	r3, r3, #3
 8013efe:	4618      	mov	r0, r3
 8013f00:	89f9      	ldrh	r1, [r7, #14]
 8013f02:	8b7a      	ldrh	r2, [r7, #26]
 8013f04:	2300      	movs	r3, #0
 8013f06:	9301      	str	r3, [sp, #4]
 8013f08:	887b      	ldrh	r3, [r7, #2]
 8013f0a:	9300      	str	r3, [sp, #0]
 8013f0c:	460b      	mov	r3, r1
 8013f0e:	4601      	mov	r1, r0
 8013f10:	6938      	ldr	r0, [r7, #16]
 8013f12:	f7ff ff77 	bl	8013e04 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013f16:	693b      	ldr	r3, [r7, #16]
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	f003 0303 	and.w	r3, r3, #3
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d006      	beq.n	8013f30 <pbuf_alloc+0xd8>
 8013f22:	4b42      	ldr	r3, [pc, #264]	; (801402c <pbuf_alloc+0x1d4>)
 8013f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013f28:	4941      	ldr	r1, [pc, #260]	; (8014030 <pbuf_alloc+0x1d8>)
 8013f2a:	4842      	ldr	r0, [pc, #264]	; (8014034 <pbuf_alloc+0x1dc>)
 8013f2c:	f00a fa22 	bl	801e374 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013f30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f32:	3303      	adds	r3, #3
 8013f34:	f023 0303 	bic.w	r3, r3, #3
 8013f38:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013f3c:	d106      	bne.n	8013f4c <pbuf_alloc+0xf4>
 8013f3e:	4b3b      	ldr	r3, [pc, #236]	; (801402c <pbuf_alloc+0x1d4>)
 8013f40:	f44f 7281 	mov.w	r2, #258	; 0x102
 8013f44:	493c      	ldr	r1, [pc, #240]	; (8014038 <pbuf_alloc+0x1e0>)
 8013f46:	483b      	ldr	r0, [pc, #236]	; (8014034 <pbuf_alloc+0x1dc>)
 8013f48:	f00a fa14 	bl	801e374 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d102      	bne.n	8013f58 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	627b      	str	r3, [r7, #36]	; 0x24
 8013f56:	e002      	b.n	8013f5e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013f58:	69fb      	ldr	r3, [r7, #28]
 8013f5a:	693a      	ldr	r2, [r7, #16]
 8013f5c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013f62:	8b7a      	ldrh	r2, [r7, #26]
 8013f64:	89fb      	ldrh	r3, [r7, #14]
 8013f66:	1ad3      	subs	r3, r2, r3
 8013f68:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8013f6e:	8b7b      	ldrh	r3, [r7, #26]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d19e      	bne.n	8013eb2 <pbuf_alloc+0x5a>
      break;
 8013f74:	e055      	b.n	8014022 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013f76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013f78:	3303      	adds	r3, #3
 8013f7a:	b29b      	uxth	r3, r3
 8013f7c:	f023 0303 	bic.w	r3, r3, #3
 8013f80:	b29a      	uxth	r2, r3
 8013f82:	88bb      	ldrh	r3, [r7, #4]
 8013f84:	3303      	adds	r3, #3
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	f023 0303 	bic.w	r3, r3, #3
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	4413      	add	r3, r2
 8013f90:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013f92:	8b3b      	ldrh	r3, [r7, #24]
 8013f94:	3310      	adds	r3, #16
 8013f96:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013f98:	8b3a      	ldrh	r2, [r7, #24]
 8013f9a:	88bb      	ldrh	r3, [r7, #4]
 8013f9c:	3303      	adds	r3, #3
 8013f9e:	f023 0303 	bic.w	r3, r3, #3
 8013fa2:	429a      	cmp	r2, r3
 8013fa4:	d306      	bcc.n	8013fb4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013fa6:	8afa      	ldrh	r2, [r7, #22]
 8013fa8:	88bb      	ldrh	r3, [r7, #4]
 8013faa:	3303      	adds	r3, #3
 8013fac:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	d201      	bcs.n	8013fb8 <pbuf_alloc+0x160>
        return NULL;
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	e035      	b.n	8014024 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013fb8:	8afb      	ldrh	r3, [r7, #22]
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7fe fffe 	bl	8012fbc <mem_malloc>
 8013fc0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8013fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d101      	bne.n	8013fcc <pbuf_alloc+0x174>
        return NULL;
 8013fc8:	2300      	movs	r3, #0
 8013fca:	e02b      	b.n	8014024 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013fcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013fce:	3310      	adds	r3, #16
 8013fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fd2:	4413      	add	r3, r2
 8013fd4:	3303      	adds	r3, #3
 8013fd6:	f023 0303 	bic.w	r3, r3, #3
 8013fda:	4618      	mov	r0, r3
 8013fdc:	88b9      	ldrh	r1, [r7, #4]
 8013fde:	88ba      	ldrh	r2, [r7, #4]
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	9301      	str	r3, [sp, #4]
 8013fe4:	887b      	ldrh	r3, [r7, #2]
 8013fe6:	9300      	str	r3, [sp, #0]
 8013fe8:	460b      	mov	r3, r1
 8013fea:	4601      	mov	r1, r0
 8013fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013fee:	f7ff ff09 	bl	8013e04 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff4:	685b      	ldr	r3, [r3, #4]
 8013ff6:	f003 0303 	and.w	r3, r3, #3
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d010      	beq.n	8014020 <pbuf_alloc+0x1c8>
 8013ffe:	4b0b      	ldr	r3, [pc, #44]	; (801402c <pbuf_alloc+0x1d4>)
 8014000:	f44f 7291 	mov.w	r2, #290	; 0x122
 8014004:	490d      	ldr	r1, [pc, #52]	; (801403c <pbuf_alloc+0x1e4>)
 8014006:	480b      	ldr	r0, [pc, #44]	; (8014034 <pbuf_alloc+0x1dc>)
 8014008:	f00a f9b4 	bl	801e374 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801400c:	e008      	b.n	8014020 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801400e:	4b07      	ldr	r3, [pc, #28]	; (801402c <pbuf_alloc+0x1d4>)
 8014010:	f240 1227 	movw	r2, #295	; 0x127
 8014014:	490a      	ldr	r1, [pc, #40]	; (8014040 <pbuf_alloc+0x1e8>)
 8014016:	4807      	ldr	r0, [pc, #28]	; (8014034 <pbuf_alloc+0x1dc>)
 8014018:	f00a f9ac 	bl	801e374 <iprintf>
      return NULL;
 801401c:	2300      	movs	r3, #0
 801401e:	e001      	b.n	8014024 <pbuf_alloc+0x1cc>
      break;
 8014020:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8014022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014024:	4618      	mov	r0, r3
 8014026:	3728      	adds	r7, #40	; 0x28
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	08020ec4 	.word	0x08020ec4
 8014030:	08020ef4 	.word	0x08020ef4
 8014034:	08020f24 	.word	0x08020f24
 8014038:	08020f4c 	.word	0x08020f4c
 801403c:	08020f80 	.word	0x08020f80
 8014040:	08020fac 	.word	0x08020fac

08014044 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b086      	sub	sp, #24
 8014048:	af02      	add	r7, sp, #8
 801404a:	6078      	str	r0, [r7, #4]
 801404c:	460b      	mov	r3, r1
 801404e:	807b      	strh	r3, [r7, #2]
 8014050:	4613      	mov	r3, r2
 8014052:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014054:	883b      	ldrh	r3, [r7, #0]
 8014056:	2b41      	cmp	r3, #65	; 0x41
 8014058:	d009      	beq.n	801406e <pbuf_alloc_reference+0x2a>
 801405a:	883b      	ldrh	r3, [r7, #0]
 801405c:	2b01      	cmp	r3, #1
 801405e:	d006      	beq.n	801406e <pbuf_alloc_reference+0x2a>
 8014060:	4b0f      	ldr	r3, [pc, #60]	; (80140a0 <pbuf_alloc_reference+0x5c>)
 8014062:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8014066:	490f      	ldr	r1, [pc, #60]	; (80140a4 <pbuf_alloc_reference+0x60>)
 8014068:	480f      	ldr	r0, [pc, #60]	; (80140a8 <pbuf_alloc_reference+0x64>)
 801406a:	f00a f983 	bl	801e374 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801406e:	200b      	movs	r0, #11
 8014070:	f7ff f948 	bl	8013304 <memp_malloc>
 8014074:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d101      	bne.n	8014080 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801407c:	2300      	movs	r3, #0
 801407e:	e00b      	b.n	8014098 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014080:	8879      	ldrh	r1, [r7, #2]
 8014082:	887a      	ldrh	r2, [r7, #2]
 8014084:	2300      	movs	r3, #0
 8014086:	9301      	str	r3, [sp, #4]
 8014088:	883b      	ldrh	r3, [r7, #0]
 801408a:	9300      	str	r3, [sp, #0]
 801408c:	460b      	mov	r3, r1
 801408e:	6879      	ldr	r1, [r7, #4]
 8014090:	68f8      	ldr	r0, [r7, #12]
 8014092:	f7ff feb7 	bl	8013e04 <pbuf_init_alloced_pbuf>
  return p;
 8014096:	68fb      	ldr	r3, [r7, #12]
}
 8014098:	4618      	mov	r0, r3
 801409a:	3710      	adds	r7, #16
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	08020ec4 	.word	0x08020ec4
 80140a4:	08020fc8 	.word	0x08020fc8
 80140a8:	08020f24 	.word	0x08020f24

080140ac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b088      	sub	sp, #32
 80140b0:	af02      	add	r7, sp, #8
 80140b2:	607b      	str	r3, [r7, #4]
 80140b4:	4603      	mov	r3, r0
 80140b6:	73fb      	strb	r3, [r7, #15]
 80140b8:	460b      	mov	r3, r1
 80140ba:	81bb      	strh	r3, [r7, #12]
 80140bc:	4613      	mov	r3, r2
 80140be:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80140c0:	7bfb      	ldrb	r3, [r7, #15]
 80140c2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80140c4:	8a7b      	ldrh	r3, [r7, #18]
 80140c6:	3303      	adds	r3, #3
 80140c8:	f023 0203 	bic.w	r2, r3, #3
 80140cc:	89bb      	ldrh	r3, [r7, #12]
 80140ce:	441a      	add	r2, r3
 80140d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d901      	bls.n	80140da <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80140d6:	2300      	movs	r3, #0
 80140d8:	e018      	b.n	801410c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80140da:	6a3b      	ldr	r3, [r7, #32]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d007      	beq.n	80140f0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80140e0:	8a7b      	ldrh	r3, [r7, #18]
 80140e2:	3303      	adds	r3, #3
 80140e4:	f023 0303 	bic.w	r3, r3, #3
 80140e8:	6a3a      	ldr	r2, [r7, #32]
 80140ea:	4413      	add	r3, r2
 80140ec:	617b      	str	r3, [r7, #20]
 80140ee:	e001      	b.n	80140f4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80140f0:	2300      	movs	r3, #0
 80140f2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	89b9      	ldrh	r1, [r7, #12]
 80140f8:	89ba      	ldrh	r2, [r7, #12]
 80140fa:	2302      	movs	r3, #2
 80140fc:	9301      	str	r3, [sp, #4]
 80140fe:	897b      	ldrh	r3, [r7, #10]
 8014100:	9300      	str	r3, [sp, #0]
 8014102:	460b      	mov	r3, r1
 8014104:	6979      	ldr	r1, [r7, #20]
 8014106:	f7ff fe7d 	bl	8013e04 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801410a:	687b      	ldr	r3, [r7, #4]
}
 801410c:	4618      	mov	r0, r3
 801410e:	3718      	adds	r7, #24
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}

08014114 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b084      	sub	sp, #16
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
 801411c:	460b      	mov	r3, r1
 801411e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d106      	bne.n	8014134 <pbuf_realloc+0x20>
 8014126:	4b3a      	ldr	r3, [pc, #232]	; (8014210 <pbuf_realloc+0xfc>)
 8014128:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801412c:	4939      	ldr	r1, [pc, #228]	; (8014214 <pbuf_realloc+0x100>)
 801412e:	483a      	ldr	r0, [pc, #232]	; (8014218 <pbuf_realloc+0x104>)
 8014130:	f00a f920 	bl	801e374 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	891b      	ldrh	r3, [r3, #8]
 8014138:	887a      	ldrh	r2, [r7, #2]
 801413a:	429a      	cmp	r2, r3
 801413c:	d263      	bcs.n	8014206 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	891a      	ldrh	r2, [r3, #8]
 8014142:	887b      	ldrh	r3, [r7, #2]
 8014144:	1ad3      	subs	r3, r2, r3
 8014146:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014148:	887b      	ldrh	r3, [r7, #2]
 801414a:	817b      	strh	r3, [r7, #10]
  q = p;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014150:	e018      	b.n	8014184 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	895b      	ldrh	r3, [r3, #10]
 8014156:	897a      	ldrh	r2, [r7, #10]
 8014158:	1ad3      	subs	r3, r2, r3
 801415a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	891a      	ldrh	r2, [r3, #8]
 8014160:	893b      	ldrh	r3, [r7, #8]
 8014162:	1ad3      	subs	r3, r2, r3
 8014164:	b29a      	uxth	r2, r3
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d106      	bne.n	8014184 <pbuf_realloc+0x70>
 8014176:	4b26      	ldr	r3, [pc, #152]	; (8014210 <pbuf_realloc+0xfc>)
 8014178:	f240 12af 	movw	r2, #431	; 0x1af
 801417c:	4927      	ldr	r1, [pc, #156]	; (801421c <pbuf_realloc+0x108>)
 801417e:	4826      	ldr	r0, [pc, #152]	; (8014218 <pbuf_realloc+0x104>)
 8014180:	f00a f8f8 	bl	801e374 <iprintf>
  while (rem_len > q->len) {
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	895b      	ldrh	r3, [r3, #10]
 8014188:	897a      	ldrh	r2, [r7, #10]
 801418a:	429a      	cmp	r2, r3
 801418c:	d8e1      	bhi.n	8014152 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	7b1b      	ldrb	r3, [r3, #12]
 8014192:	f003 030f 	and.w	r3, r3, #15
 8014196:	2b00      	cmp	r3, #0
 8014198:	d121      	bne.n	80141de <pbuf_realloc+0xca>
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	895b      	ldrh	r3, [r3, #10]
 801419e:	897a      	ldrh	r2, [r7, #10]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d01c      	beq.n	80141de <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	7b5b      	ldrb	r3, [r3, #13]
 80141a8:	f003 0302 	and.w	r3, r3, #2
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d116      	bne.n	80141de <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	685a      	ldr	r2, [r3, #4]
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	1ad3      	subs	r3, r2, r3
 80141b8:	b29a      	uxth	r2, r3
 80141ba:	897b      	ldrh	r3, [r7, #10]
 80141bc:	4413      	add	r3, r2
 80141be:	b29b      	uxth	r3, r3
 80141c0:	4619      	mov	r1, r3
 80141c2:	68f8      	ldr	r0, [r7, #12]
 80141c4:	f7fe fdf0 	bl	8012da8 <mem_trim>
 80141c8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d106      	bne.n	80141de <pbuf_realloc+0xca>
 80141d0:	4b0f      	ldr	r3, [pc, #60]	; (8014210 <pbuf_realloc+0xfc>)
 80141d2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80141d6:	4912      	ldr	r1, [pc, #72]	; (8014220 <pbuf_realloc+0x10c>)
 80141d8:	480f      	ldr	r0, [pc, #60]	; (8014218 <pbuf_realloc+0x104>)
 80141da:	f00a f8cb 	bl	801e374 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	897a      	ldrh	r2, [r7, #10]
 80141e2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	895a      	ldrh	r2, [r3, #10]
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d004      	beq.n	80141fe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	4618      	mov	r0, r3
 80141fa:	f000 f911 	bl	8014420 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	2200      	movs	r2, #0
 8014202:	601a      	str	r2, [r3, #0]
 8014204:	e000      	b.n	8014208 <pbuf_realloc+0xf4>
    return;
 8014206:	bf00      	nop

}
 8014208:	3710      	adds	r7, #16
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	08020ec4 	.word	0x08020ec4
 8014214:	08020fdc 	.word	0x08020fdc
 8014218:	08020f24 	.word	0x08020f24
 801421c:	08020ff4 	.word	0x08020ff4
 8014220:	0802100c 	.word	0x0802100c

08014224 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b086      	sub	sp, #24
 8014228:	af00      	add	r7, sp, #0
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	4613      	mov	r3, r2
 8014230:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d106      	bne.n	8014246 <pbuf_add_header_impl+0x22>
 8014238:	4b2b      	ldr	r3, [pc, #172]	; (80142e8 <pbuf_add_header_impl+0xc4>)
 801423a:	f240 12df 	movw	r2, #479	; 0x1df
 801423e:	492b      	ldr	r1, [pc, #172]	; (80142ec <pbuf_add_header_impl+0xc8>)
 8014240:	482b      	ldr	r0, [pc, #172]	; (80142f0 <pbuf_add_header_impl+0xcc>)
 8014242:	f00a f897 	bl	801e374 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d003      	beq.n	8014254 <pbuf_add_header_impl+0x30>
 801424c:	68bb      	ldr	r3, [r7, #8]
 801424e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014252:	d301      	bcc.n	8014258 <pbuf_add_header_impl+0x34>
    return 1;
 8014254:	2301      	movs	r3, #1
 8014256:	e043      	b.n	80142e0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d101      	bne.n	8014262 <pbuf_add_header_impl+0x3e>
    return 0;
 801425e:	2300      	movs	r3, #0
 8014260:	e03e      	b.n	80142e0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	891a      	ldrh	r2, [r3, #8]
 801426a:	8a7b      	ldrh	r3, [r7, #18]
 801426c:	4413      	add	r3, r2
 801426e:	b29b      	uxth	r3, r3
 8014270:	8a7a      	ldrh	r2, [r7, #18]
 8014272:	429a      	cmp	r2, r3
 8014274:	d901      	bls.n	801427a <pbuf_add_header_impl+0x56>
    return 1;
 8014276:	2301      	movs	r3, #1
 8014278:	e032      	b.n	80142e0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	7b1b      	ldrb	r3, [r3, #12]
 801427e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014280:	8a3b      	ldrh	r3, [r7, #16]
 8014282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014286:	2b00      	cmp	r3, #0
 8014288:	d00c      	beq.n	80142a4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	685a      	ldr	r2, [r3, #4]
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	425b      	negs	r3, r3
 8014292:	4413      	add	r3, r2
 8014294:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	3310      	adds	r3, #16
 801429a:	697a      	ldr	r2, [r7, #20]
 801429c:	429a      	cmp	r2, r3
 801429e:	d20d      	bcs.n	80142bc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80142a0:	2301      	movs	r3, #1
 80142a2:	e01d      	b.n	80142e0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80142a4:	79fb      	ldrb	r3, [r7, #7]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d006      	beq.n	80142b8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	685a      	ldr	r2, [r3, #4]
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	425b      	negs	r3, r3
 80142b2:	4413      	add	r3, r2
 80142b4:	617b      	str	r3, [r7, #20]
 80142b6:	e001      	b.n	80142bc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80142b8:	2301      	movs	r3, #1
 80142ba:	e011      	b.n	80142e0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	697a      	ldr	r2, [r7, #20]
 80142c0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	895a      	ldrh	r2, [r3, #10]
 80142c6:	8a7b      	ldrh	r3, [r7, #18]
 80142c8:	4413      	add	r3, r2
 80142ca:	b29a      	uxth	r2, r3
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	891a      	ldrh	r2, [r3, #8]
 80142d4:	8a7b      	ldrh	r3, [r7, #18]
 80142d6:	4413      	add	r3, r2
 80142d8:	b29a      	uxth	r2, r3
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	811a      	strh	r2, [r3, #8]


  return 0;
 80142de:	2300      	movs	r3, #0
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3718      	adds	r7, #24
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}
 80142e8:	08020ec4 	.word	0x08020ec4
 80142ec:	08021028 	.word	0x08021028
 80142f0:	08020f24 	.word	0x08020f24

080142f4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80142fe:	2200      	movs	r2, #0
 8014300:	6839      	ldr	r1, [r7, #0]
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f7ff ff8e 	bl	8014224 <pbuf_add_header_impl>
 8014308:	4603      	mov	r3, r0
}
 801430a:	4618      	mov	r0, r3
 801430c:	3708      	adds	r7, #8
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}
	...

08014314 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b084      	sub	sp, #16
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d106      	bne.n	8014332 <pbuf_remove_header+0x1e>
 8014324:	4b20      	ldr	r3, [pc, #128]	; (80143a8 <pbuf_remove_header+0x94>)
 8014326:	f240 224b 	movw	r2, #587	; 0x24b
 801432a:	4920      	ldr	r1, [pc, #128]	; (80143ac <pbuf_remove_header+0x98>)
 801432c:	4820      	ldr	r0, [pc, #128]	; (80143b0 <pbuf_remove_header+0x9c>)
 801432e:	f00a f821 	bl	801e374 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d003      	beq.n	8014340 <pbuf_remove_header+0x2c>
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801433e:	d301      	bcc.n	8014344 <pbuf_remove_header+0x30>
    return 1;
 8014340:	2301      	movs	r3, #1
 8014342:	e02c      	b.n	801439e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d101      	bne.n	801434e <pbuf_remove_header+0x3a>
    return 0;
 801434a:	2300      	movs	r3, #0
 801434c:	e027      	b.n	801439e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	895b      	ldrh	r3, [r3, #10]
 8014356:	89fa      	ldrh	r2, [r7, #14]
 8014358:	429a      	cmp	r2, r3
 801435a:	d908      	bls.n	801436e <pbuf_remove_header+0x5a>
 801435c:	4b12      	ldr	r3, [pc, #72]	; (80143a8 <pbuf_remove_header+0x94>)
 801435e:	f240 2255 	movw	r2, #597	; 0x255
 8014362:	4914      	ldr	r1, [pc, #80]	; (80143b4 <pbuf_remove_header+0xa0>)
 8014364:	4812      	ldr	r0, [pc, #72]	; (80143b0 <pbuf_remove_header+0x9c>)
 8014366:	f00a f805 	bl	801e374 <iprintf>
 801436a:	2301      	movs	r3, #1
 801436c:	e017      	b.n	801439e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	685b      	ldr	r3, [r3, #4]
 8014372:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	685a      	ldr	r2, [r3, #4]
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	441a      	add	r2, r3
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	895a      	ldrh	r2, [r3, #10]
 8014384:	89fb      	ldrh	r3, [r7, #14]
 8014386:	1ad3      	subs	r3, r2, r3
 8014388:	b29a      	uxth	r2, r3
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	891a      	ldrh	r2, [r3, #8]
 8014392:	89fb      	ldrh	r3, [r7, #14]
 8014394:	1ad3      	subs	r3, r2, r3
 8014396:	b29a      	uxth	r2, r3
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801439c:	2300      	movs	r3, #0
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3710      	adds	r7, #16
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop
 80143a8:	08020ec4 	.word	0x08020ec4
 80143ac:	08021028 	.word	0x08021028
 80143b0:	08020f24 	.word	0x08020f24
 80143b4:	08021034 	.word	0x08021034

080143b8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b082      	sub	sp, #8
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	460b      	mov	r3, r1
 80143c2:	807b      	strh	r3, [r7, #2]
 80143c4:	4613      	mov	r3, r2
 80143c6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80143c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	da08      	bge.n	80143e2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80143d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80143d4:	425b      	negs	r3, r3
 80143d6:	4619      	mov	r1, r3
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f7ff ff9b 	bl	8014314 <pbuf_remove_header>
 80143de:	4603      	mov	r3, r0
 80143e0:	e007      	b.n	80143f2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80143e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80143e6:	787a      	ldrb	r2, [r7, #1]
 80143e8:	4619      	mov	r1, r3
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f7ff ff1a 	bl	8014224 <pbuf_add_header_impl>
 80143f0:	4603      	mov	r3, r0
  }
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3708      	adds	r7, #8
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}

080143fa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80143fa:	b580      	push	{r7, lr}
 80143fc:	b082      	sub	sp, #8
 80143fe:	af00      	add	r7, sp, #0
 8014400:	6078      	str	r0, [r7, #4]
 8014402:	460b      	mov	r3, r1
 8014404:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014406:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801440a:	2201      	movs	r2, #1
 801440c:	4619      	mov	r1, r3
 801440e:	6878      	ldr	r0, [r7, #4]
 8014410:	f7ff ffd2 	bl	80143b8 <pbuf_header_impl>
 8014414:	4603      	mov	r3, r0
}
 8014416:	4618      	mov	r0, r3
 8014418:	3708      	adds	r7, #8
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
	...

08014420 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b088      	sub	sp, #32
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d10b      	bne.n	8014446 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d106      	bne.n	8014442 <pbuf_free+0x22>
 8014434:	4b3b      	ldr	r3, [pc, #236]	; (8014524 <pbuf_free+0x104>)
 8014436:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801443a:	493b      	ldr	r1, [pc, #236]	; (8014528 <pbuf_free+0x108>)
 801443c:	483b      	ldr	r0, [pc, #236]	; (801452c <pbuf_free+0x10c>)
 801443e:	f009 ff99 	bl	801e374 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014442:	2300      	movs	r3, #0
 8014444:	e069      	b.n	801451a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014446:	2300      	movs	r3, #0
 8014448:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801444a:	e062      	b.n	8014512 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801444c:	f009 fc1a 	bl	801dc84 <sys_arch_protect>
 8014450:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	7b9b      	ldrb	r3, [r3, #14]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d106      	bne.n	8014468 <pbuf_free+0x48>
 801445a:	4b32      	ldr	r3, [pc, #200]	; (8014524 <pbuf_free+0x104>)
 801445c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014460:	4933      	ldr	r1, [pc, #204]	; (8014530 <pbuf_free+0x110>)
 8014462:	4832      	ldr	r0, [pc, #200]	; (801452c <pbuf_free+0x10c>)
 8014464:	f009 ff86 	bl	801e374 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	7b9b      	ldrb	r3, [r3, #14]
 801446c:	3b01      	subs	r3, #1
 801446e:	b2da      	uxtb	r2, r3
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	739a      	strb	r2, [r3, #14]
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	7b9b      	ldrb	r3, [r3, #14]
 8014478:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801447a:	69b8      	ldr	r0, [r7, #24]
 801447c:	f009 fc10 	bl	801dca0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014480:	7dfb      	ldrb	r3, [r7, #23]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d143      	bne.n	801450e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	7b1b      	ldrb	r3, [r3, #12]
 8014490:	f003 030f 	and.w	r3, r3, #15
 8014494:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	7b5b      	ldrb	r3, [r3, #13]
 801449a:	f003 0302 	and.w	r3, r3, #2
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d011      	beq.n	80144c6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	691b      	ldr	r3, [r3, #16]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d106      	bne.n	80144bc <pbuf_free+0x9c>
 80144ae:	4b1d      	ldr	r3, [pc, #116]	; (8014524 <pbuf_free+0x104>)
 80144b0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80144b4:	491f      	ldr	r1, [pc, #124]	; (8014534 <pbuf_free+0x114>)
 80144b6:	481d      	ldr	r0, [pc, #116]	; (801452c <pbuf_free+0x10c>)
 80144b8:	f009 ff5c 	bl	801e374 <iprintf>
        pc->custom_free_function(p);
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	691b      	ldr	r3, [r3, #16]
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	4798      	blx	r3
 80144c4:	e01d      	b.n	8014502 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80144c6:	7bfb      	ldrb	r3, [r7, #15]
 80144c8:	2b02      	cmp	r3, #2
 80144ca:	d104      	bne.n	80144d6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80144cc:	6879      	ldr	r1, [r7, #4]
 80144ce:	200c      	movs	r0, #12
 80144d0:	f7fe ff8e 	bl	80133f0 <memp_free>
 80144d4:	e015      	b.n	8014502 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80144d6:	7bfb      	ldrb	r3, [r7, #15]
 80144d8:	2b01      	cmp	r3, #1
 80144da:	d104      	bne.n	80144e6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80144dc:	6879      	ldr	r1, [r7, #4]
 80144de:	200b      	movs	r0, #11
 80144e0:	f7fe ff86 	bl	80133f0 <memp_free>
 80144e4:	e00d      	b.n	8014502 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80144e6:	7bfb      	ldrb	r3, [r7, #15]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d103      	bne.n	80144f4 <pbuf_free+0xd4>
          mem_free(p);
 80144ec:	6878      	ldr	r0, [r7, #4]
 80144ee:	f7fe fbcb 	bl	8012c88 <mem_free>
 80144f2:	e006      	b.n	8014502 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80144f4:	4b0b      	ldr	r3, [pc, #44]	; (8014524 <pbuf_free+0x104>)
 80144f6:	f240 320f 	movw	r2, #783	; 0x30f
 80144fa:	490f      	ldr	r1, [pc, #60]	; (8014538 <pbuf_free+0x118>)
 80144fc:	480b      	ldr	r0, [pc, #44]	; (801452c <pbuf_free+0x10c>)
 80144fe:	f009 ff39 	bl	801e374 <iprintf>
        }
      }
      count++;
 8014502:	7ffb      	ldrb	r3, [r7, #31]
 8014504:	3301      	adds	r3, #1
 8014506:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	607b      	str	r3, [r7, #4]
 801450c:	e001      	b.n	8014512 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801450e:	2300      	movs	r3, #0
 8014510:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d199      	bne.n	801444c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014518:	7ffb      	ldrb	r3, [r7, #31]
}
 801451a:	4618      	mov	r0, r3
 801451c:	3720      	adds	r7, #32
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}
 8014522:	bf00      	nop
 8014524:	08020ec4 	.word	0x08020ec4
 8014528:	08021028 	.word	0x08021028
 801452c:	08020f24 	.word	0x08020f24
 8014530:	08021054 	.word	0x08021054
 8014534:	0802106c 	.word	0x0802106c
 8014538:	08021090 	.word	0x08021090

0801453c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801453c:	b480      	push	{r7}
 801453e:	b085      	sub	sp, #20
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014544:	2300      	movs	r3, #0
 8014546:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014548:	e005      	b.n	8014556 <pbuf_clen+0x1a>
    ++len;
 801454a:	89fb      	ldrh	r3, [r7, #14]
 801454c:	3301      	adds	r3, #1
 801454e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d1f6      	bne.n	801454a <pbuf_clen+0xe>
  }
  return len;
 801455c:	89fb      	ldrh	r3, [r7, #14]
}
 801455e:	4618      	mov	r0, r3
 8014560:	3714      	adds	r7, #20
 8014562:	46bd      	mov	sp, r7
 8014564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014568:	4770      	bx	lr
	...

0801456c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b084      	sub	sp, #16
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d016      	beq.n	80145a8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801457a:	f009 fb83 	bl	801dc84 <sys_arch_protect>
 801457e:	60f8      	str	r0, [r7, #12]
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	7b9b      	ldrb	r3, [r3, #14]
 8014584:	3301      	adds	r3, #1
 8014586:	b2da      	uxtb	r2, r3
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	739a      	strb	r2, [r3, #14]
 801458c:	68f8      	ldr	r0, [r7, #12]
 801458e:	f009 fb87 	bl	801dca0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	7b9b      	ldrb	r3, [r3, #14]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d106      	bne.n	80145a8 <pbuf_ref+0x3c>
 801459a:	4b05      	ldr	r3, [pc, #20]	; (80145b0 <pbuf_ref+0x44>)
 801459c:	f240 3242 	movw	r2, #834	; 0x342
 80145a0:	4904      	ldr	r1, [pc, #16]	; (80145b4 <pbuf_ref+0x48>)
 80145a2:	4805      	ldr	r0, [pc, #20]	; (80145b8 <pbuf_ref+0x4c>)
 80145a4:	f009 fee6 	bl	801e374 <iprintf>
  }
}
 80145a8:	bf00      	nop
 80145aa:	3710      	adds	r7, #16
 80145ac:	46bd      	mov	sp, r7
 80145ae:	bd80      	pop	{r7, pc}
 80145b0:	08020ec4 	.word	0x08020ec4
 80145b4:	080210a4 	.word	0x080210a4
 80145b8:	08020f24 	.word	0x08020f24

080145bc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b084      	sub	sp, #16
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d002      	beq.n	80145d2 <pbuf_cat+0x16>
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d107      	bne.n	80145e2 <pbuf_cat+0x26>
 80145d2:	4b20      	ldr	r3, [pc, #128]	; (8014654 <pbuf_cat+0x98>)
 80145d4:	f240 3259 	movw	r2, #857	; 0x359
 80145d8:	491f      	ldr	r1, [pc, #124]	; (8014658 <pbuf_cat+0x9c>)
 80145da:	4820      	ldr	r0, [pc, #128]	; (801465c <pbuf_cat+0xa0>)
 80145dc:	f009 feca 	bl	801e374 <iprintf>
 80145e0:	e034      	b.n	801464c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	60fb      	str	r3, [r7, #12]
 80145e6:	e00a      	b.n	80145fe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	891a      	ldrh	r2, [r3, #8]
 80145ec:	683b      	ldr	r3, [r7, #0]
 80145ee:	891b      	ldrh	r3, [r3, #8]
 80145f0:	4413      	add	r3, r2
 80145f2:	b29a      	uxth	r2, r3
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	60fb      	str	r3, [r7, #12]
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d1f0      	bne.n	80145e8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	891a      	ldrh	r2, [r3, #8]
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	895b      	ldrh	r3, [r3, #10]
 801460e:	429a      	cmp	r2, r3
 8014610:	d006      	beq.n	8014620 <pbuf_cat+0x64>
 8014612:	4b10      	ldr	r3, [pc, #64]	; (8014654 <pbuf_cat+0x98>)
 8014614:	f240 3262 	movw	r2, #866	; 0x362
 8014618:	4911      	ldr	r1, [pc, #68]	; (8014660 <pbuf_cat+0xa4>)
 801461a:	4810      	ldr	r0, [pc, #64]	; (801465c <pbuf_cat+0xa0>)
 801461c:	f009 feaa 	bl	801e374 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d006      	beq.n	8014636 <pbuf_cat+0x7a>
 8014628:	4b0a      	ldr	r3, [pc, #40]	; (8014654 <pbuf_cat+0x98>)
 801462a:	f240 3263 	movw	r2, #867	; 0x363
 801462e:	490d      	ldr	r1, [pc, #52]	; (8014664 <pbuf_cat+0xa8>)
 8014630:	480a      	ldr	r0, [pc, #40]	; (801465c <pbuf_cat+0xa0>)
 8014632:	f009 fe9f 	bl	801e374 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	891a      	ldrh	r2, [r3, #8]
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	891b      	ldrh	r3, [r3, #8]
 801463e:	4413      	add	r3, r2
 8014640:	b29a      	uxth	r2, r3
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	683a      	ldr	r2, [r7, #0]
 801464a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801464c:	3710      	adds	r7, #16
 801464e:	46bd      	mov	sp, r7
 8014650:	bd80      	pop	{r7, pc}
 8014652:	bf00      	nop
 8014654:	08020ec4 	.word	0x08020ec4
 8014658:	080210b8 	.word	0x080210b8
 801465c:	08020f24 	.word	0x08020f24
 8014660:	080210f0 	.word	0x080210f0
 8014664:	08021120 	.word	0x08021120

08014668 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b086      	sub	sp, #24
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014672:	2300      	movs	r3, #0
 8014674:	617b      	str	r3, [r7, #20]
 8014676:	2300      	movs	r3, #0
 8014678:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d008      	beq.n	8014692 <pbuf_copy+0x2a>
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d005      	beq.n	8014692 <pbuf_copy+0x2a>
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	891a      	ldrh	r2, [r3, #8]
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	891b      	ldrh	r3, [r3, #8]
 801468e:	429a      	cmp	r2, r3
 8014690:	d209      	bcs.n	80146a6 <pbuf_copy+0x3e>
 8014692:	4b57      	ldr	r3, [pc, #348]	; (80147f0 <pbuf_copy+0x188>)
 8014694:	f240 32c9 	movw	r2, #969	; 0x3c9
 8014698:	4956      	ldr	r1, [pc, #344]	; (80147f4 <pbuf_copy+0x18c>)
 801469a:	4857      	ldr	r0, [pc, #348]	; (80147f8 <pbuf_copy+0x190>)
 801469c:	f009 fe6a 	bl	801e374 <iprintf>
 80146a0:	f06f 030f 	mvn.w	r3, #15
 80146a4:	e09f      	b.n	80147e6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	895b      	ldrh	r3, [r3, #10]
 80146aa:	461a      	mov	r2, r3
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	1ad2      	subs	r2, r2, r3
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	895b      	ldrh	r3, [r3, #10]
 80146b4:	4619      	mov	r1, r3
 80146b6:	693b      	ldr	r3, [r7, #16]
 80146b8:	1acb      	subs	r3, r1, r3
 80146ba:	429a      	cmp	r2, r3
 80146bc:	d306      	bcc.n	80146cc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	895b      	ldrh	r3, [r3, #10]
 80146c2:	461a      	mov	r2, r3
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	1ad3      	subs	r3, r2, r3
 80146c8:	60fb      	str	r3, [r7, #12]
 80146ca:	e005      	b.n	80146d8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	895b      	ldrh	r3, [r3, #10]
 80146d0:	461a      	mov	r2, r3
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	1ad3      	subs	r3, r2, r3
 80146d6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	685a      	ldr	r2, [r3, #4]
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	18d0      	adds	r0, r2, r3
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	685a      	ldr	r2, [r3, #4]
 80146e4:	693b      	ldr	r3, [r7, #16]
 80146e6:	4413      	add	r3, r2
 80146e8:	68fa      	ldr	r2, [r7, #12]
 80146ea:	4619      	mov	r1, r3
 80146ec:	f009 fd32 	bl	801e154 <memcpy>
    offset_to += len;
 80146f0:	697a      	ldr	r2, [r7, #20]
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	4413      	add	r3, r2
 80146f6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80146f8:	693a      	ldr	r2, [r7, #16]
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	4413      	add	r3, r2
 80146fe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	895b      	ldrh	r3, [r3, #10]
 8014704:	461a      	mov	r2, r3
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	4293      	cmp	r3, r2
 801470a:	d906      	bls.n	801471a <pbuf_copy+0xb2>
 801470c:	4b38      	ldr	r3, [pc, #224]	; (80147f0 <pbuf_copy+0x188>)
 801470e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014712:	493a      	ldr	r1, [pc, #232]	; (80147fc <pbuf_copy+0x194>)
 8014714:	4838      	ldr	r0, [pc, #224]	; (80147f8 <pbuf_copy+0x190>)
 8014716:	f009 fe2d 	bl	801e374 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	895b      	ldrh	r3, [r3, #10]
 801471e:	461a      	mov	r2, r3
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	4293      	cmp	r3, r2
 8014724:	d906      	bls.n	8014734 <pbuf_copy+0xcc>
 8014726:	4b32      	ldr	r3, [pc, #200]	; (80147f0 <pbuf_copy+0x188>)
 8014728:	f240 32da 	movw	r2, #986	; 0x3da
 801472c:	4934      	ldr	r1, [pc, #208]	; (8014800 <pbuf_copy+0x198>)
 801472e:	4832      	ldr	r0, [pc, #200]	; (80147f8 <pbuf_copy+0x190>)
 8014730:	f009 fe20 	bl	801e374 <iprintf>
    if (offset_from >= p_from->len) {
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	895b      	ldrh	r3, [r3, #10]
 8014738:	461a      	mov	r2, r3
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	4293      	cmp	r3, r2
 801473e:	d304      	bcc.n	801474a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014740:	2300      	movs	r3, #0
 8014742:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014744:	683b      	ldr	r3, [r7, #0]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	895b      	ldrh	r3, [r3, #10]
 801474e:	461a      	mov	r2, r3
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	4293      	cmp	r3, r2
 8014754:	d114      	bne.n	8014780 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014756:	2300      	movs	r3, #0
 8014758:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d10c      	bne.n	8014780 <pbuf_copy+0x118>
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d009      	beq.n	8014780 <pbuf_copy+0x118>
 801476c:	4b20      	ldr	r3, [pc, #128]	; (80147f0 <pbuf_copy+0x188>)
 801476e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8014772:	4924      	ldr	r1, [pc, #144]	; (8014804 <pbuf_copy+0x19c>)
 8014774:	4820      	ldr	r0, [pc, #128]	; (80147f8 <pbuf_copy+0x190>)
 8014776:	f009 fdfd 	bl	801e374 <iprintf>
 801477a:	f06f 030f 	mvn.w	r3, #15
 801477e:	e032      	b.n	80147e6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014780:	683b      	ldr	r3, [r7, #0]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d013      	beq.n	80147ae <pbuf_copy+0x146>
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	895a      	ldrh	r2, [r3, #10]
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	891b      	ldrh	r3, [r3, #8]
 801478e:	429a      	cmp	r2, r3
 8014790:	d10d      	bne.n	80147ae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d009      	beq.n	80147ae <pbuf_copy+0x146>
 801479a:	4b15      	ldr	r3, [pc, #84]	; (80147f0 <pbuf_copy+0x188>)
 801479c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80147a0:	4919      	ldr	r1, [pc, #100]	; (8014808 <pbuf_copy+0x1a0>)
 80147a2:	4815      	ldr	r0, [pc, #84]	; (80147f8 <pbuf_copy+0x190>)
 80147a4:	f009 fde6 	bl	801e374 <iprintf>
 80147a8:	f06f 0305 	mvn.w	r3, #5
 80147ac:	e01b      	b.n	80147e6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d013      	beq.n	80147dc <pbuf_copy+0x174>
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	895a      	ldrh	r2, [r3, #10]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	891b      	ldrh	r3, [r3, #8]
 80147bc:	429a      	cmp	r2, r3
 80147be:	d10d      	bne.n	80147dc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d009      	beq.n	80147dc <pbuf_copy+0x174>
 80147c8:	4b09      	ldr	r3, [pc, #36]	; (80147f0 <pbuf_copy+0x188>)
 80147ca:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80147ce:	490e      	ldr	r1, [pc, #56]	; (8014808 <pbuf_copy+0x1a0>)
 80147d0:	4809      	ldr	r0, [pc, #36]	; (80147f8 <pbuf_copy+0x190>)
 80147d2:	f009 fdcf 	bl	801e374 <iprintf>
 80147d6:	f06f 0305 	mvn.w	r3, #5
 80147da:	e004      	b.n	80147e6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	f47f af61 	bne.w	80146a6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80147e4:	2300      	movs	r3, #0
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3718      	adds	r7, #24
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}
 80147ee:	bf00      	nop
 80147f0:	08020ec4 	.word	0x08020ec4
 80147f4:	0802116c 	.word	0x0802116c
 80147f8:	08020f24 	.word	0x08020f24
 80147fc:	0802119c 	.word	0x0802119c
 8014800:	080211b4 	.word	0x080211b4
 8014804:	080211d0 	.word	0x080211d0
 8014808:	080211e0 	.word	0x080211e0

0801480c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b088      	sub	sp, #32
 8014810:	af00      	add	r7, sp, #0
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	4611      	mov	r1, r2
 8014818:	461a      	mov	r2, r3
 801481a:	460b      	mov	r3, r1
 801481c:	80fb      	strh	r3, [r7, #6]
 801481e:	4613      	mov	r3, r2
 8014820:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014822:	2300      	movs	r3, #0
 8014824:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014826:	2300      	movs	r3, #0
 8014828:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d108      	bne.n	8014842 <pbuf_copy_partial+0x36>
 8014830:	4b2b      	ldr	r3, [pc, #172]	; (80148e0 <pbuf_copy_partial+0xd4>)
 8014832:	f240 420a 	movw	r2, #1034	; 0x40a
 8014836:	492b      	ldr	r1, [pc, #172]	; (80148e4 <pbuf_copy_partial+0xd8>)
 8014838:	482b      	ldr	r0, [pc, #172]	; (80148e8 <pbuf_copy_partial+0xdc>)
 801483a:	f009 fd9b 	bl	801e374 <iprintf>
 801483e:	2300      	movs	r3, #0
 8014840:	e04a      	b.n	80148d8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d108      	bne.n	801485a <pbuf_copy_partial+0x4e>
 8014848:	4b25      	ldr	r3, [pc, #148]	; (80148e0 <pbuf_copy_partial+0xd4>)
 801484a:	f240 420b 	movw	r2, #1035	; 0x40b
 801484e:	4927      	ldr	r1, [pc, #156]	; (80148ec <pbuf_copy_partial+0xe0>)
 8014850:	4825      	ldr	r0, [pc, #148]	; (80148e8 <pbuf_copy_partial+0xdc>)
 8014852:	f009 fd8f 	bl	801e374 <iprintf>
 8014856:	2300      	movs	r3, #0
 8014858:	e03e      	b.n	80148d8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	61fb      	str	r3, [r7, #28]
 801485e:	e034      	b.n	80148ca <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014860:	88bb      	ldrh	r3, [r7, #4]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d00a      	beq.n	801487c <pbuf_copy_partial+0x70>
 8014866:	69fb      	ldr	r3, [r7, #28]
 8014868:	895b      	ldrh	r3, [r3, #10]
 801486a:	88ba      	ldrh	r2, [r7, #4]
 801486c:	429a      	cmp	r2, r3
 801486e:	d305      	bcc.n	801487c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014870:	69fb      	ldr	r3, [r7, #28]
 8014872:	895b      	ldrh	r3, [r3, #10]
 8014874:	88ba      	ldrh	r2, [r7, #4]
 8014876:	1ad3      	subs	r3, r2, r3
 8014878:	80bb      	strh	r3, [r7, #4]
 801487a:	e023      	b.n	80148c4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801487c:	69fb      	ldr	r3, [r7, #28]
 801487e:	895a      	ldrh	r2, [r3, #10]
 8014880:	88bb      	ldrh	r3, [r7, #4]
 8014882:	1ad3      	subs	r3, r2, r3
 8014884:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014886:	8b3a      	ldrh	r2, [r7, #24]
 8014888:	88fb      	ldrh	r3, [r7, #6]
 801488a:	429a      	cmp	r2, r3
 801488c:	d901      	bls.n	8014892 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801488e:	88fb      	ldrh	r3, [r7, #6]
 8014890:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8014892:	8b7b      	ldrh	r3, [r7, #26]
 8014894:	68ba      	ldr	r2, [r7, #8]
 8014896:	18d0      	adds	r0, r2, r3
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	685a      	ldr	r2, [r3, #4]
 801489c:	88bb      	ldrh	r3, [r7, #4]
 801489e:	4413      	add	r3, r2
 80148a0:	8b3a      	ldrh	r2, [r7, #24]
 80148a2:	4619      	mov	r1, r3
 80148a4:	f009 fc56 	bl	801e154 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80148a8:	8afa      	ldrh	r2, [r7, #22]
 80148aa:	8b3b      	ldrh	r3, [r7, #24]
 80148ac:	4413      	add	r3, r2
 80148ae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80148b0:	8b7a      	ldrh	r2, [r7, #26]
 80148b2:	8b3b      	ldrh	r3, [r7, #24]
 80148b4:	4413      	add	r3, r2
 80148b6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80148b8:	88fa      	ldrh	r2, [r7, #6]
 80148ba:	8b3b      	ldrh	r3, [r7, #24]
 80148bc:	1ad3      	subs	r3, r2, r3
 80148be:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80148c0:	2300      	movs	r3, #0
 80148c2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80148c4:	69fb      	ldr	r3, [r7, #28]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	61fb      	str	r3, [r7, #28]
 80148ca:	88fb      	ldrh	r3, [r7, #6]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d002      	beq.n	80148d6 <pbuf_copy_partial+0xca>
 80148d0:	69fb      	ldr	r3, [r7, #28]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d1c4      	bne.n	8014860 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80148d6:	8afb      	ldrh	r3, [r7, #22]
}
 80148d8:	4618      	mov	r0, r3
 80148da:	3720      	adds	r7, #32
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}
 80148e0:	08020ec4 	.word	0x08020ec4
 80148e4:	0802120c 	.word	0x0802120c
 80148e8:	08020f24 	.word	0x08020f24
 80148ec:	0802122c 	.word	0x0802122c

080148f0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b084      	sub	sp, #16
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	4603      	mov	r3, r0
 80148f8:	603a      	str	r2, [r7, #0]
 80148fa:	71fb      	strb	r3, [r7, #7]
 80148fc:	460b      	mov	r3, r1
 80148fe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	8919      	ldrh	r1, [r3, #8]
 8014904:	88ba      	ldrh	r2, [r7, #4]
 8014906:	79fb      	ldrb	r3, [r7, #7]
 8014908:	4618      	mov	r0, r3
 801490a:	f7ff faa5 	bl	8013e58 <pbuf_alloc>
 801490e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d101      	bne.n	801491a <pbuf_clone+0x2a>
    return NULL;
 8014916:	2300      	movs	r3, #0
 8014918:	e011      	b.n	801493e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801491a:	6839      	ldr	r1, [r7, #0]
 801491c:	68f8      	ldr	r0, [r7, #12]
 801491e:	f7ff fea3 	bl	8014668 <pbuf_copy>
 8014922:	4603      	mov	r3, r0
 8014924:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014926:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d006      	beq.n	801493c <pbuf_clone+0x4c>
 801492e:	4b06      	ldr	r3, [pc, #24]	; (8014948 <pbuf_clone+0x58>)
 8014930:	f240 5224 	movw	r2, #1316	; 0x524
 8014934:	4905      	ldr	r1, [pc, #20]	; (801494c <pbuf_clone+0x5c>)
 8014936:	4806      	ldr	r0, [pc, #24]	; (8014950 <pbuf_clone+0x60>)
 8014938:	f009 fd1c 	bl	801e374 <iprintf>
  return q;
 801493c:	68fb      	ldr	r3, [r7, #12]
}
 801493e:	4618      	mov	r0, r3
 8014940:	3710      	adds	r7, #16
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}
 8014946:	bf00      	nop
 8014948:	08020ec4 	.word	0x08020ec4
 801494c:	08021338 	.word	0x08021338
 8014950:	08020f24 	.word	0x08020f24

08014954 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014954:	b580      	push	{r7, lr}
 8014956:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014958:	f009 fd24 	bl	801e3a4 <rand>
 801495c:	4603      	mov	r3, r0
 801495e:	b29b      	uxth	r3, r3
 8014960:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014964:	b29b      	uxth	r3, r3
 8014966:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801496a:	b29a      	uxth	r2, r3
 801496c:	4b01      	ldr	r3, [pc, #4]	; (8014974 <tcp_init+0x20>)
 801496e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014970:	bf00      	nop
 8014972:	bd80      	pop	{r7, pc}
 8014974:	20000024 	.word	0x20000024

08014978 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b082      	sub	sp, #8
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	7d1b      	ldrb	r3, [r3, #20]
 8014984:	2b01      	cmp	r3, #1
 8014986:	d105      	bne.n	8014994 <tcp_free+0x1c>
 8014988:	4b06      	ldr	r3, [pc, #24]	; (80149a4 <tcp_free+0x2c>)
 801498a:	22d4      	movs	r2, #212	; 0xd4
 801498c:	4906      	ldr	r1, [pc, #24]	; (80149a8 <tcp_free+0x30>)
 801498e:	4807      	ldr	r0, [pc, #28]	; (80149ac <tcp_free+0x34>)
 8014990:	f009 fcf0 	bl	801e374 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014994:	6879      	ldr	r1, [r7, #4]
 8014996:	2001      	movs	r0, #1
 8014998:	f7fe fd2a 	bl	80133f0 <memp_free>
}
 801499c:	bf00      	nop
 801499e:	3708      	adds	r7, #8
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}
 80149a4:	080213c4 	.word	0x080213c4
 80149a8:	080213f4 	.word	0x080213f4
 80149ac:	08021408 	.word	0x08021408

080149b0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b082      	sub	sp, #8
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	7d1b      	ldrb	r3, [r3, #20]
 80149bc:	2b01      	cmp	r3, #1
 80149be:	d105      	bne.n	80149cc <tcp_free_listen+0x1c>
 80149c0:	4b06      	ldr	r3, [pc, #24]	; (80149dc <tcp_free_listen+0x2c>)
 80149c2:	22df      	movs	r2, #223	; 0xdf
 80149c4:	4906      	ldr	r1, [pc, #24]	; (80149e0 <tcp_free_listen+0x30>)
 80149c6:	4807      	ldr	r0, [pc, #28]	; (80149e4 <tcp_free_listen+0x34>)
 80149c8:	f009 fcd4 	bl	801e374 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80149cc:	6879      	ldr	r1, [r7, #4]
 80149ce:	2002      	movs	r0, #2
 80149d0:	f7fe fd0e 	bl	80133f0 <memp_free>
}
 80149d4:	bf00      	nop
 80149d6:	3708      	adds	r7, #8
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}
 80149dc:	080213c4 	.word	0x080213c4
 80149e0:	08021430 	.word	0x08021430
 80149e4:	08021408 	.word	0x08021408

080149e8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80149ec:	f001 f8a6 	bl	8015b3c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80149f0:	4b07      	ldr	r3, [pc, #28]	; (8014a10 <tcp_tmr+0x28>)
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	3301      	adds	r3, #1
 80149f6:	b2da      	uxtb	r2, r3
 80149f8:	4b05      	ldr	r3, [pc, #20]	; (8014a10 <tcp_tmr+0x28>)
 80149fa:	701a      	strb	r2, [r3, #0]
 80149fc:	4b04      	ldr	r3, [pc, #16]	; (8014a10 <tcp_tmr+0x28>)
 80149fe:	781b      	ldrb	r3, [r3, #0]
 8014a00:	f003 0301 	and.w	r3, r3, #1
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d001      	beq.n	8014a0c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014a08:	f000 fd58 	bl	80154bc <tcp_slowtmr>
  }
}
 8014a0c:	bf00      	nop
 8014a0e:	bd80      	pop	{r7, pc}
 8014a10:	2000f9c9 	.word	0x2000f9c9

08014a14 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b084      	sub	sp, #16
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
 8014a1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014a1e:	683b      	ldr	r3, [r7, #0]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d105      	bne.n	8014a30 <tcp_remove_listener+0x1c>
 8014a24:	4b0d      	ldr	r3, [pc, #52]	; (8014a5c <tcp_remove_listener+0x48>)
 8014a26:	22ff      	movs	r2, #255	; 0xff
 8014a28:	490d      	ldr	r1, [pc, #52]	; (8014a60 <tcp_remove_listener+0x4c>)
 8014a2a:	480e      	ldr	r0, [pc, #56]	; (8014a64 <tcp_remove_listener+0x50>)
 8014a2c:	f009 fca2 	bl	801e374 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	60fb      	str	r3, [r7, #12]
 8014a34:	e00a      	b.n	8014a4c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014a3a:	683a      	ldr	r2, [r7, #0]
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	d102      	bne.n	8014a46 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	2200      	movs	r2, #0
 8014a44:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	68db      	ldr	r3, [r3, #12]
 8014a4a:	60fb      	str	r3, [r7, #12]
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d1f1      	bne.n	8014a36 <tcp_remove_listener+0x22>
    }
  }
}
 8014a52:	bf00      	nop
 8014a54:	bf00      	nop
 8014a56:	3710      	adds	r7, #16
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}
 8014a5c:	080213c4 	.word	0x080213c4
 8014a60:	0802144c 	.word	0x0802144c
 8014a64:	08021408 	.word	0x08021408

08014a68 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b084      	sub	sp, #16
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d106      	bne.n	8014a84 <tcp_listen_closed+0x1c>
 8014a76:	4b14      	ldr	r3, [pc, #80]	; (8014ac8 <tcp_listen_closed+0x60>)
 8014a78:	f240 1211 	movw	r2, #273	; 0x111
 8014a7c:	4913      	ldr	r1, [pc, #76]	; (8014acc <tcp_listen_closed+0x64>)
 8014a7e:	4814      	ldr	r0, [pc, #80]	; (8014ad0 <tcp_listen_closed+0x68>)
 8014a80:	f009 fc78 	bl	801e374 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	7d1b      	ldrb	r3, [r3, #20]
 8014a88:	2b01      	cmp	r3, #1
 8014a8a:	d006      	beq.n	8014a9a <tcp_listen_closed+0x32>
 8014a8c:	4b0e      	ldr	r3, [pc, #56]	; (8014ac8 <tcp_listen_closed+0x60>)
 8014a8e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8014a92:	4910      	ldr	r1, [pc, #64]	; (8014ad4 <tcp_listen_closed+0x6c>)
 8014a94:	480e      	ldr	r0, [pc, #56]	; (8014ad0 <tcp_listen_closed+0x68>)
 8014a96:	f009 fc6d 	bl	801e374 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	60fb      	str	r3, [r7, #12]
 8014a9e:	e00b      	b.n	8014ab8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014aa0:	4a0d      	ldr	r2, [pc, #52]	; (8014ad8 <tcp_listen_closed+0x70>)
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	6879      	ldr	r1, [r7, #4]
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7ff ffb1 	bl	8014a14 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	3301      	adds	r3, #1
 8014ab6:	60fb      	str	r3, [r7, #12]
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	2b03      	cmp	r3, #3
 8014abc:	d9f0      	bls.n	8014aa0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014abe:	bf00      	nop
 8014ac0:	bf00      	nop
 8014ac2:	3710      	adds	r7, #16
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}
 8014ac8:	080213c4 	.word	0x080213c4
 8014acc:	08021474 	.word	0x08021474
 8014ad0:	08021408 	.word	0x08021408
 8014ad4:	08021480 	.word	0x08021480
 8014ad8:	080234b4 	.word	0x080234b4

08014adc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014adc:	b5b0      	push	{r4, r5, r7, lr}
 8014ade:	b088      	sub	sp, #32
 8014ae0:	af04      	add	r7, sp, #16
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	460b      	mov	r3, r1
 8014ae6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d106      	bne.n	8014afc <tcp_close_shutdown+0x20>
 8014aee:	4b63      	ldr	r3, [pc, #396]	; (8014c7c <tcp_close_shutdown+0x1a0>)
 8014af0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014af4:	4962      	ldr	r1, [pc, #392]	; (8014c80 <tcp_close_shutdown+0x1a4>)
 8014af6:	4863      	ldr	r0, [pc, #396]	; (8014c84 <tcp_close_shutdown+0x1a8>)
 8014af8:	f009 fc3c 	bl	801e374 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014afc:	78fb      	ldrb	r3, [r7, #3]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d066      	beq.n	8014bd0 <tcp_close_shutdown+0xf4>
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	7d1b      	ldrb	r3, [r3, #20]
 8014b06:	2b04      	cmp	r3, #4
 8014b08:	d003      	beq.n	8014b12 <tcp_close_shutdown+0x36>
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	7d1b      	ldrb	r3, [r3, #20]
 8014b0e:	2b07      	cmp	r3, #7
 8014b10:	d15e      	bne.n	8014bd0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d104      	bne.n	8014b24 <tcp_close_shutdown+0x48>
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b1e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014b22:	d055      	beq.n	8014bd0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	8b5b      	ldrh	r3, [r3, #26]
 8014b28:	f003 0310 	and.w	r3, r3, #16
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d106      	bne.n	8014b3e <tcp_close_shutdown+0x62>
 8014b30:	4b52      	ldr	r3, [pc, #328]	; (8014c7c <tcp_close_shutdown+0x1a0>)
 8014b32:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8014b36:	4954      	ldr	r1, [pc, #336]	; (8014c88 <tcp_close_shutdown+0x1ac>)
 8014b38:	4852      	ldr	r0, [pc, #328]	; (8014c84 <tcp_close_shutdown+0x1a8>)
 8014b3a:	f009 fc1b 	bl	801e374 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014b46:	687d      	ldr	r5, [r7, #4]
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	3304      	adds	r3, #4
 8014b4c:	687a      	ldr	r2, [r7, #4]
 8014b4e:	8ad2      	ldrh	r2, [r2, #22]
 8014b50:	6879      	ldr	r1, [r7, #4]
 8014b52:	8b09      	ldrh	r1, [r1, #24]
 8014b54:	9102      	str	r1, [sp, #8]
 8014b56:	9201      	str	r2, [sp, #4]
 8014b58:	9300      	str	r3, [sp, #0]
 8014b5a:	462b      	mov	r3, r5
 8014b5c:	4622      	mov	r2, r4
 8014b5e:	4601      	mov	r1, r0
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	f005 fdbb 	bl	801a6dc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f001 fb98 	bl	801629c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014b6c:	4b47      	ldr	r3, [pc, #284]	; (8014c8c <tcp_close_shutdown+0x1b0>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	687a      	ldr	r2, [r7, #4]
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d105      	bne.n	8014b82 <tcp_close_shutdown+0xa6>
 8014b76:	4b45      	ldr	r3, [pc, #276]	; (8014c8c <tcp_close_shutdown+0x1b0>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	68db      	ldr	r3, [r3, #12]
 8014b7c:	4a43      	ldr	r2, [pc, #268]	; (8014c8c <tcp_close_shutdown+0x1b0>)
 8014b7e:	6013      	str	r3, [r2, #0]
 8014b80:	e013      	b.n	8014baa <tcp_close_shutdown+0xce>
 8014b82:	4b42      	ldr	r3, [pc, #264]	; (8014c8c <tcp_close_shutdown+0x1b0>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	60fb      	str	r3, [r7, #12]
 8014b88:	e00c      	b.n	8014ba4 <tcp_close_shutdown+0xc8>
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	68db      	ldr	r3, [r3, #12]
 8014b8e:	687a      	ldr	r2, [r7, #4]
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d104      	bne.n	8014b9e <tcp_close_shutdown+0xc2>
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	68da      	ldr	r2, [r3, #12]
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	60da      	str	r2, [r3, #12]
 8014b9c:	e005      	b.n	8014baa <tcp_close_shutdown+0xce>
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	68db      	ldr	r3, [r3, #12]
 8014ba2:	60fb      	str	r3, [r7, #12]
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d1ef      	bne.n	8014b8a <tcp_close_shutdown+0xae>
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	2200      	movs	r2, #0
 8014bae:	60da      	str	r2, [r3, #12]
 8014bb0:	4b37      	ldr	r3, [pc, #220]	; (8014c90 <tcp_close_shutdown+0x1b4>)
 8014bb2:	2201      	movs	r2, #1
 8014bb4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014bb6:	4b37      	ldr	r3, [pc, #220]	; (8014c94 <tcp_close_shutdown+0x1b8>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	d102      	bne.n	8014bc6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014bc0:	f004 f830 	bl	8018c24 <tcp_trigger_input_pcb_close>
 8014bc4:	e002      	b.n	8014bcc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f7ff fed6 	bl	8014978 <tcp_free>
      }
      return ERR_OK;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	e050      	b.n	8014c72 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	7d1b      	ldrb	r3, [r3, #20]
 8014bd4:	2b02      	cmp	r3, #2
 8014bd6:	d03b      	beq.n	8014c50 <tcp_close_shutdown+0x174>
 8014bd8:	2b02      	cmp	r3, #2
 8014bda:	dc44      	bgt.n	8014c66 <tcp_close_shutdown+0x18a>
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d002      	beq.n	8014be6 <tcp_close_shutdown+0x10a>
 8014be0:	2b01      	cmp	r3, #1
 8014be2:	d02a      	beq.n	8014c3a <tcp_close_shutdown+0x15e>
 8014be4:	e03f      	b.n	8014c66 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	8adb      	ldrh	r3, [r3, #22]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d021      	beq.n	8014c32 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014bee:	4b2a      	ldr	r3, [pc, #168]	; (8014c98 <tcp_close_shutdown+0x1bc>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	687a      	ldr	r2, [r7, #4]
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d105      	bne.n	8014c04 <tcp_close_shutdown+0x128>
 8014bf8:	4b27      	ldr	r3, [pc, #156]	; (8014c98 <tcp_close_shutdown+0x1bc>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	68db      	ldr	r3, [r3, #12]
 8014bfe:	4a26      	ldr	r2, [pc, #152]	; (8014c98 <tcp_close_shutdown+0x1bc>)
 8014c00:	6013      	str	r3, [r2, #0]
 8014c02:	e013      	b.n	8014c2c <tcp_close_shutdown+0x150>
 8014c04:	4b24      	ldr	r3, [pc, #144]	; (8014c98 <tcp_close_shutdown+0x1bc>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	60bb      	str	r3, [r7, #8]
 8014c0a:	e00c      	b.n	8014c26 <tcp_close_shutdown+0x14a>
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	68db      	ldr	r3, [r3, #12]
 8014c10:	687a      	ldr	r2, [r7, #4]
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d104      	bne.n	8014c20 <tcp_close_shutdown+0x144>
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	68da      	ldr	r2, [r3, #12]
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	60da      	str	r2, [r3, #12]
 8014c1e:	e005      	b.n	8014c2c <tcp_close_shutdown+0x150>
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	68db      	ldr	r3, [r3, #12]
 8014c24:	60bb      	str	r3, [r7, #8]
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d1ef      	bne.n	8014c0c <tcp_close_shutdown+0x130>
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f7ff fea0 	bl	8014978 <tcp_free>
      break;
 8014c38:	e01a      	b.n	8014c70 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	f7ff ff14 	bl	8014a68 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014c40:	6879      	ldr	r1, [r7, #4]
 8014c42:	4816      	ldr	r0, [pc, #88]	; (8014c9c <tcp_close_shutdown+0x1c0>)
 8014c44:	f001 fb7a 	bl	801633c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f7ff feb1 	bl	80149b0 <tcp_free_listen>
      break;
 8014c4e:	e00f      	b.n	8014c70 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014c50:	6879      	ldr	r1, [r7, #4]
 8014c52:	480e      	ldr	r0, [pc, #56]	; (8014c8c <tcp_close_shutdown+0x1b0>)
 8014c54:	f001 fb72 	bl	801633c <tcp_pcb_remove>
 8014c58:	4b0d      	ldr	r3, [pc, #52]	; (8014c90 <tcp_close_shutdown+0x1b4>)
 8014c5a:	2201      	movs	r2, #1
 8014c5c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f7ff fe8a 	bl	8014978 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014c64:	e004      	b.n	8014c70 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f000 f81a 	bl	8014ca0 <tcp_close_shutdown_fin>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	e000      	b.n	8014c72 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014c70:	2300      	movs	r3, #0
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3710      	adds	r7, #16
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bdb0      	pop	{r4, r5, r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	080213c4 	.word	0x080213c4
 8014c80:	08021498 	.word	0x08021498
 8014c84:	08021408 	.word	0x08021408
 8014c88:	080214b8 	.word	0x080214b8
 8014c8c:	2000f9c0 	.word	0x2000f9c0
 8014c90:	2000f9c8 	.word	0x2000f9c8
 8014c94:	2000fa00 	.word	0x2000fa00
 8014c98:	2000f9b8 	.word	0x2000f9b8
 8014c9c:	2000f9bc 	.word	0x2000f9bc

08014ca0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b084      	sub	sp, #16
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d106      	bne.n	8014cbc <tcp_close_shutdown_fin+0x1c>
 8014cae:	4b2e      	ldr	r3, [pc, #184]	; (8014d68 <tcp_close_shutdown_fin+0xc8>)
 8014cb0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014cb4:	492d      	ldr	r1, [pc, #180]	; (8014d6c <tcp_close_shutdown_fin+0xcc>)
 8014cb6:	482e      	ldr	r0, [pc, #184]	; (8014d70 <tcp_close_shutdown_fin+0xd0>)
 8014cb8:	f009 fb5c 	bl	801e374 <iprintf>

  switch (pcb->state) {
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	7d1b      	ldrb	r3, [r3, #20]
 8014cc0:	2b07      	cmp	r3, #7
 8014cc2:	d020      	beq.n	8014d06 <tcp_close_shutdown_fin+0x66>
 8014cc4:	2b07      	cmp	r3, #7
 8014cc6:	dc2b      	bgt.n	8014d20 <tcp_close_shutdown_fin+0x80>
 8014cc8:	2b03      	cmp	r3, #3
 8014cca:	d002      	beq.n	8014cd2 <tcp_close_shutdown_fin+0x32>
 8014ccc:	2b04      	cmp	r3, #4
 8014cce:	d00d      	beq.n	8014cec <tcp_close_shutdown_fin+0x4c>
 8014cd0:	e026      	b.n	8014d20 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f004 fe10 	bl	80198f8 <tcp_send_fin>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d11f      	bne.n	8014d24 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2205      	movs	r2, #5
 8014ce8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014cea:	e01b      	b.n	8014d24 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014cec:	6878      	ldr	r0, [r7, #4]
 8014cee:	f004 fe03 	bl	80198f8 <tcp_send_fin>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d114      	bne.n	8014d28 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2205      	movs	r2, #5
 8014d02:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014d04:	e010      	b.n	8014d28 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f004 fdf6 	bl	80198f8 <tcp_send_fin>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d109      	bne.n	8014d2c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2209      	movs	r2, #9
 8014d1c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014d1e:	e005      	b.n	8014d2c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014d20:	2300      	movs	r3, #0
 8014d22:	e01c      	b.n	8014d5e <tcp_close_shutdown_fin+0xbe>
      break;
 8014d24:	bf00      	nop
 8014d26:	e002      	b.n	8014d2e <tcp_close_shutdown_fin+0x8e>
      break;
 8014d28:	bf00      	nop
 8014d2a:	e000      	b.n	8014d2e <tcp_close_shutdown_fin+0x8e>
      break;
 8014d2c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d103      	bne.n	8014d3e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f004 ff1c 	bl	8019b74 <tcp_output>
 8014d3c:	e00d      	b.n	8014d5a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d46:	d108      	bne.n	8014d5a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	8b5b      	ldrh	r3, [r3, #26]
 8014d4c:	f043 0308 	orr.w	r3, r3, #8
 8014d50:	b29a      	uxth	r2, r3
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014d56:	2300      	movs	r3, #0
 8014d58:	e001      	b.n	8014d5e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3710      	adds	r7, #16
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
 8014d66:	bf00      	nop
 8014d68:	080213c4 	.word	0x080213c4
 8014d6c:	08021474 	.word	0x08021474
 8014d70:	08021408 	.word	0x08021408

08014d74 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d109      	bne.n	8014d96 <tcp_close+0x22>
 8014d82:	4b0f      	ldr	r3, [pc, #60]	; (8014dc0 <tcp_close+0x4c>)
 8014d84:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014d88:	490e      	ldr	r1, [pc, #56]	; (8014dc4 <tcp_close+0x50>)
 8014d8a:	480f      	ldr	r0, [pc, #60]	; (8014dc8 <tcp_close+0x54>)
 8014d8c:	f009 faf2 	bl	801e374 <iprintf>
 8014d90:	f06f 030f 	mvn.w	r3, #15
 8014d94:	e00f      	b.n	8014db6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	7d1b      	ldrb	r3, [r3, #20]
 8014d9a:	2b01      	cmp	r3, #1
 8014d9c:	d006      	beq.n	8014dac <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	8b5b      	ldrh	r3, [r3, #26]
 8014da2:	f043 0310 	orr.w	r3, r3, #16
 8014da6:	b29a      	uxth	r2, r3
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014dac:	2101      	movs	r1, #1
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f7ff fe94 	bl	8014adc <tcp_close_shutdown>
 8014db4:	4603      	mov	r3, r0
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	3708      	adds	r7, #8
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}
 8014dbe:	bf00      	nop
 8014dc0:	080213c4 	.word	0x080213c4
 8014dc4:	080214d4 	.word	0x080214d4
 8014dc8:	08021408 	.word	0x08021408

08014dcc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b084      	sub	sp, #16
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	60f8      	str	r0, [r7, #12]
 8014dd4:	60b9      	str	r1, [r7, #8]
 8014dd6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d109      	bne.n	8014df2 <tcp_shutdown+0x26>
 8014dde:	4b26      	ldr	r3, [pc, #152]	; (8014e78 <tcp_shutdown+0xac>)
 8014de0:	f240 2207 	movw	r2, #519	; 0x207
 8014de4:	4925      	ldr	r1, [pc, #148]	; (8014e7c <tcp_shutdown+0xb0>)
 8014de6:	4826      	ldr	r0, [pc, #152]	; (8014e80 <tcp_shutdown+0xb4>)
 8014de8:	f009 fac4 	bl	801e374 <iprintf>
 8014dec:	f06f 030f 	mvn.w	r3, #15
 8014df0:	e03d      	b.n	8014e6e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	7d1b      	ldrb	r3, [r3, #20]
 8014df6:	2b01      	cmp	r3, #1
 8014df8:	d102      	bne.n	8014e00 <tcp_shutdown+0x34>
    return ERR_CONN;
 8014dfa:	f06f 030a 	mvn.w	r3, #10
 8014dfe:	e036      	b.n	8014e6e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d01b      	beq.n	8014e3e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	8b5b      	ldrh	r3, [r3, #26]
 8014e0a:	f043 0310 	orr.w	r3, r3, #16
 8014e0e:	b29a      	uxth	r2, r3
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d005      	beq.n	8014e26 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8014e1a:	2101      	movs	r1, #1
 8014e1c:	68f8      	ldr	r0, [r7, #12]
 8014e1e:	f7ff fe5d 	bl	8014adc <tcp_close_shutdown>
 8014e22:	4603      	mov	r3, r0
 8014e24:	e023      	b.n	8014e6e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d007      	beq.n	8014e3e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7ff faf4 	bl	8014420 <pbuf_free>
      pcb->refused_data = NULL;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d013      	beq.n	8014e6c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	7d1b      	ldrb	r3, [r3, #20]
 8014e48:	2b04      	cmp	r3, #4
 8014e4a:	dc02      	bgt.n	8014e52 <tcp_shutdown+0x86>
 8014e4c:	2b03      	cmp	r3, #3
 8014e4e:	da02      	bge.n	8014e56 <tcp_shutdown+0x8a>
 8014e50:	e009      	b.n	8014e66 <tcp_shutdown+0x9a>
 8014e52:	2b07      	cmp	r3, #7
 8014e54:	d107      	bne.n	8014e66 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8014e56:	68bb      	ldr	r3, [r7, #8]
 8014e58:	b2db      	uxtb	r3, r3
 8014e5a:	4619      	mov	r1, r3
 8014e5c:	68f8      	ldr	r0, [r7, #12]
 8014e5e:	f7ff fe3d 	bl	8014adc <tcp_close_shutdown>
 8014e62:	4603      	mov	r3, r0
 8014e64:	e003      	b.n	8014e6e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8014e66:	f06f 030a 	mvn.w	r3, #10
 8014e6a:	e000      	b.n	8014e6e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8014e6c:	2300      	movs	r3, #0
}
 8014e6e:	4618      	mov	r0, r3
 8014e70:	3710      	adds	r7, #16
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd80      	pop	{r7, pc}
 8014e76:	bf00      	nop
 8014e78:	080213c4 	.word	0x080213c4
 8014e7c:	080214ec 	.word	0x080214ec
 8014e80:	08021408 	.word	0x08021408

08014e84 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b08e      	sub	sp, #56	; 0x38
 8014e88:	af04      	add	r7, sp, #16
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d107      	bne.n	8014ea4 <tcp_abandon+0x20>
 8014e94:	4b52      	ldr	r3, [pc, #328]	; (8014fe0 <tcp_abandon+0x15c>)
 8014e96:	f240 223d 	movw	r2, #573	; 0x23d
 8014e9a:	4952      	ldr	r1, [pc, #328]	; (8014fe4 <tcp_abandon+0x160>)
 8014e9c:	4852      	ldr	r0, [pc, #328]	; (8014fe8 <tcp_abandon+0x164>)
 8014e9e:	f009 fa69 	bl	801e374 <iprintf>
 8014ea2:	e099      	b.n	8014fd8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	7d1b      	ldrb	r3, [r3, #20]
 8014ea8:	2b01      	cmp	r3, #1
 8014eaa:	d106      	bne.n	8014eba <tcp_abandon+0x36>
 8014eac:	4b4c      	ldr	r3, [pc, #304]	; (8014fe0 <tcp_abandon+0x15c>)
 8014eae:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014eb2:	494e      	ldr	r1, [pc, #312]	; (8014fec <tcp_abandon+0x168>)
 8014eb4:	484c      	ldr	r0, [pc, #304]	; (8014fe8 <tcp_abandon+0x164>)
 8014eb6:	f009 fa5d 	bl	801e374 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	7d1b      	ldrb	r3, [r3, #20]
 8014ebe:	2b0a      	cmp	r3, #10
 8014ec0:	d107      	bne.n	8014ed2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014ec2:	6879      	ldr	r1, [r7, #4]
 8014ec4:	484a      	ldr	r0, [pc, #296]	; (8014ff0 <tcp_abandon+0x16c>)
 8014ec6:	f001 fa39 	bl	801633c <tcp_pcb_remove>
    tcp_free(pcb);
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f7ff fd54 	bl	8014978 <tcp_free>
 8014ed0:	e082      	b.n	8014fd8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ede:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ee4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014eec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	691b      	ldr	r3, [r3, #16]
 8014ef2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	7d1b      	ldrb	r3, [r3, #20]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d126      	bne.n	8014f4a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	8adb      	ldrh	r3, [r3, #22]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d02e      	beq.n	8014f62 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014f04:	4b3b      	ldr	r3, [pc, #236]	; (8014ff4 <tcp_abandon+0x170>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	687a      	ldr	r2, [r7, #4]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d105      	bne.n	8014f1a <tcp_abandon+0x96>
 8014f0e:	4b39      	ldr	r3, [pc, #228]	; (8014ff4 <tcp_abandon+0x170>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	68db      	ldr	r3, [r3, #12]
 8014f14:	4a37      	ldr	r2, [pc, #220]	; (8014ff4 <tcp_abandon+0x170>)
 8014f16:	6013      	str	r3, [r2, #0]
 8014f18:	e013      	b.n	8014f42 <tcp_abandon+0xbe>
 8014f1a:	4b36      	ldr	r3, [pc, #216]	; (8014ff4 <tcp_abandon+0x170>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	61fb      	str	r3, [r7, #28]
 8014f20:	e00c      	b.n	8014f3c <tcp_abandon+0xb8>
 8014f22:	69fb      	ldr	r3, [r7, #28]
 8014f24:	68db      	ldr	r3, [r3, #12]
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	429a      	cmp	r2, r3
 8014f2a:	d104      	bne.n	8014f36 <tcp_abandon+0xb2>
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	68da      	ldr	r2, [r3, #12]
 8014f30:	69fb      	ldr	r3, [r7, #28]
 8014f32:	60da      	str	r2, [r3, #12]
 8014f34:	e005      	b.n	8014f42 <tcp_abandon+0xbe>
 8014f36:	69fb      	ldr	r3, [r7, #28]
 8014f38:	68db      	ldr	r3, [r3, #12]
 8014f3a:	61fb      	str	r3, [r7, #28]
 8014f3c:	69fb      	ldr	r3, [r7, #28]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d1ef      	bne.n	8014f22 <tcp_abandon+0x9e>
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	2200      	movs	r2, #0
 8014f46:	60da      	str	r2, [r3, #12]
 8014f48:	e00b      	b.n	8014f62 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	8adb      	ldrh	r3, [r3, #22]
 8014f52:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014f54:	6879      	ldr	r1, [r7, #4]
 8014f56:	4828      	ldr	r0, [pc, #160]	; (8014ff8 <tcp_abandon+0x174>)
 8014f58:	f001 f9f0 	bl	801633c <tcp_pcb_remove>
 8014f5c:	4b27      	ldr	r3, [pc, #156]	; (8014ffc <tcp_abandon+0x178>)
 8014f5e:	2201      	movs	r2, #1
 8014f60:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d004      	beq.n	8014f74 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f000 fec4 	bl	8015cfc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d004      	beq.n	8014f86 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f80:	4618      	mov	r0, r3
 8014f82:	f000 febb 	bl	8015cfc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d004      	beq.n	8014f98 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f92:	4618      	mov	r0, r3
 8014f94:	f000 feb2 	bl	8015cfc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d00e      	beq.n	8014fbc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8014f9e:	6879      	ldr	r1, [r7, #4]
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	3304      	adds	r3, #4
 8014fa4:	687a      	ldr	r2, [r7, #4]
 8014fa6:	8b12      	ldrh	r2, [r2, #24]
 8014fa8:	9202      	str	r2, [sp, #8]
 8014faa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014fac:	9201      	str	r2, [sp, #4]
 8014fae:	9300      	str	r3, [sp, #0]
 8014fb0:	460b      	mov	r3, r1
 8014fb2:	697a      	ldr	r2, [r7, #20]
 8014fb4:	69b9      	ldr	r1, [r7, #24]
 8014fb6:	6878      	ldr	r0, [r7, #4]
 8014fb8:	f005 fb90 	bl	801a6dc <tcp_rst>
    }
    last_state = pcb->state;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	7d1b      	ldrb	r3, [r3, #20]
 8014fc0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8014fc2:	6878      	ldr	r0, [r7, #4]
 8014fc4:	f7ff fcd8 	bl	8014978 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014fc8:	693b      	ldr	r3, [r7, #16]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d004      	beq.n	8014fd8 <tcp_abandon+0x154>
 8014fce:	693b      	ldr	r3, [r7, #16]
 8014fd0:	f06f 010c 	mvn.w	r1, #12
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	4798      	blx	r3
  }
}
 8014fd8:	3728      	adds	r7, #40	; 0x28
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}
 8014fde:	bf00      	nop
 8014fe0:	080213c4 	.word	0x080213c4
 8014fe4:	08021508 	.word	0x08021508
 8014fe8:	08021408 	.word	0x08021408
 8014fec:	08021524 	.word	0x08021524
 8014ff0:	2000f9c4 	.word	0x2000f9c4
 8014ff4:	2000f9b8 	.word	0x2000f9b8
 8014ff8:	2000f9c0 	.word	0x2000f9c0
 8014ffc:	2000f9c8 	.word	0x2000f9c8

08015000 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b082      	sub	sp, #8
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015008:	2101      	movs	r1, #1
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f7ff ff3a 	bl	8014e84 <tcp_abandon>
}
 8015010:	bf00      	nop
 8015012:	3708      	adds	r7, #8
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}

08015018 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b088      	sub	sp, #32
 801501c:	af00      	add	r7, sp, #0
 801501e:	60f8      	str	r0, [r7, #12]
 8015020:	60b9      	str	r1, [r7, #8]
 8015022:	4613      	mov	r3, r2
 8015024:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8015026:	2304      	movs	r3, #4
 8015028:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801502a:	68bb      	ldr	r3, [r7, #8]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d101      	bne.n	8015034 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015030:	4b3e      	ldr	r3, [pc, #248]	; (801512c <tcp_bind+0x114>)
 8015032:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d109      	bne.n	801504e <tcp_bind+0x36>
 801503a:	4b3d      	ldr	r3, [pc, #244]	; (8015130 <tcp_bind+0x118>)
 801503c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8015040:	493c      	ldr	r1, [pc, #240]	; (8015134 <tcp_bind+0x11c>)
 8015042:	483d      	ldr	r0, [pc, #244]	; (8015138 <tcp_bind+0x120>)
 8015044:	f009 f996 	bl	801e374 <iprintf>
 8015048:	f06f 030f 	mvn.w	r3, #15
 801504c:	e06a      	b.n	8015124 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	7d1b      	ldrb	r3, [r3, #20]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d009      	beq.n	801506a <tcp_bind+0x52>
 8015056:	4b36      	ldr	r3, [pc, #216]	; (8015130 <tcp_bind+0x118>)
 8015058:	f240 22ab 	movw	r2, #683	; 0x2ab
 801505c:	4937      	ldr	r1, [pc, #220]	; (801513c <tcp_bind+0x124>)
 801505e:	4836      	ldr	r0, [pc, #216]	; (8015138 <tcp_bind+0x120>)
 8015060:	f009 f988 	bl	801e374 <iprintf>
 8015064:	f06f 0305 	mvn.w	r3, #5
 8015068:	e05c      	b.n	8015124 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801506a:	88fb      	ldrh	r3, [r7, #6]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d109      	bne.n	8015084 <tcp_bind+0x6c>
    port = tcp_new_port();
 8015070:	f000 f9de 	bl	8015430 <tcp_new_port>
 8015074:	4603      	mov	r3, r0
 8015076:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015078:	88fb      	ldrh	r3, [r7, #6]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d135      	bne.n	80150ea <tcp_bind+0xd2>
      return ERR_BUF;
 801507e:	f06f 0301 	mvn.w	r3, #1
 8015082:	e04f      	b.n	8015124 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8015084:	2300      	movs	r3, #0
 8015086:	61fb      	str	r3, [r7, #28]
 8015088:	e02b      	b.n	80150e2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801508a:	4a2d      	ldr	r2, [pc, #180]	; (8015140 <tcp_bind+0x128>)
 801508c:	69fb      	ldr	r3, [r7, #28]
 801508e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	61bb      	str	r3, [r7, #24]
 8015096:	e01e      	b.n	80150d6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8015098:	69bb      	ldr	r3, [r7, #24]
 801509a:	8adb      	ldrh	r3, [r3, #22]
 801509c:	88fa      	ldrh	r2, [r7, #6]
 801509e:	429a      	cmp	r2, r3
 80150a0:	d116      	bne.n	80150d0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80150a2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d010      	beq.n	80150ca <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80150a8:	69bb      	ldr	r3, [r7, #24]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d00c      	beq.n	80150ca <tcp_bind+0xb2>
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d009      	beq.n	80150ca <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d005      	beq.n	80150ca <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80150be:	69bb      	ldr	r3, [r7, #24]
 80150c0:	681a      	ldr	r2, [r3, #0]
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d102      	bne.n	80150d0 <tcp_bind+0xb8>
              return ERR_USE;
 80150ca:	f06f 0307 	mvn.w	r3, #7
 80150ce:	e029      	b.n	8015124 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80150d0:	69bb      	ldr	r3, [r7, #24]
 80150d2:	68db      	ldr	r3, [r3, #12]
 80150d4:	61bb      	str	r3, [r7, #24]
 80150d6:	69bb      	ldr	r3, [r7, #24]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d1dd      	bne.n	8015098 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80150dc:	69fb      	ldr	r3, [r7, #28]
 80150de:	3301      	adds	r3, #1
 80150e0:	61fb      	str	r3, [r7, #28]
 80150e2:	69fa      	ldr	r2, [r7, #28]
 80150e4:	697b      	ldr	r3, [r7, #20]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	dbcf      	blt.n	801508a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d00c      	beq.n	801510a <tcp_bind+0xf2>
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d008      	beq.n	801510a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d002      	beq.n	8015104 <tcp_bind+0xec>
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	e000      	b.n	8015106 <tcp_bind+0xee>
 8015104:	2300      	movs	r3, #0
 8015106:	68fa      	ldr	r2, [r7, #12]
 8015108:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	88fa      	ldrh	r2, [r7, #6]
 801510e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015110:	4b0c      	ldr	r3, [pc, #48]	; (8015144 <tcp_bind+0x12c>)
 8015112:	681a      	ldr	r2, [r3, #0]
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	60da      	str	r2, [r3, #12]
 8015118:	4a0a      	ldr	r2, [pc, #40]	; (8015144 <tcp_bind+0x12c>)
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	6013      	str	r3, [r2, #0]
 801511e:	f005 fc9f 	bl	801aa60 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015122:	2300      	movs	r3, #0
}
 8015124:	4618      	mov	r0, r3
 8015126:	3720      	adds	r7, #32
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}
 801512c:	080234dc 	.word	0x080234dc
 8015130:	080213c4 	.word	0x080213c4
 8015134:	08021558 	.word	0x08021558
 8015138:	08021408 	.word	0x08021408
 801513c:	08021570 	.word	0x08021570
 8015140:	080234b4 	.word	0x080234b4
 8015144:	2000f9b8 	.word	0x2000f9b8

08015148 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
 801514e:	60f8      	str	r0, [r7, #12]
 8015150:	60b9      	str	r1, [r7, #8]
 8015152:	4613      	mov	r3, r2
 8015154:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8015156:	68bb      	ldr	r3, [r7, #8]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d106      	bne.n	801516a <tcp_accept_null+0x22>
 801515c:	4b07      	ldr	r3, [pc, #28]	; (801517c <tcp_accept_null+0x34>)
 801515e:	f240 320f 	movw	r2, #783	; 0x30f
 8015162:	4907      	ldr	r1, [pc, #28]	; (8015180 <tcp_accept_null+0x38>)
 8015164:	4807      	ldr	r0, [pc, #28]	; (8015184 <tcp_accept_null+0x3c>)
 8015166:	f009 f905 	bl	801e374 <iprintf>

  tcp_abort(pcb);
 801516a:	68b8      	ldr	r0, [r7, #8]
 801516c:	f7ff ff48 	bl	8015000 <tcp_abort>

  return ERR_ABRT;
 8015170:	f06f 030c 	mvn.w	r3, #12
}
 8015174:	4618      	mov	r0, r3
 8015176:	3710      	adds	r7, #16
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}
 801517c:	080213c4 	.word	0x080213c4
 8015180:	08021598 	.word	0x08021598
 8015184:	08021408 	.word	0x08021408

08015188 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b088      	sub	sp, #32
 801518c:	af00      	add	r7, sp, #0
 801518e:	60f8      	str	r0, [r7, #12]
 8015190:	460b      	mov	r3, r1
 8015192:	607a      	str	r2, [r7, #4]
 8015194:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8015196:	2300      	movs	r3, #0
 8015198:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d109      	bne.n	80151b4 <tcp_listen_with_backlog_and_err+0x2c>
 80151a0:	4b47      	ldr	r3, [pc, #284]	; (80152c0 <tcp_listen_with_backlog_and_err+0x138>)
 80151a2:	f240 3259 	movw	r2, #857	; 0x359
 80151a6:	4947      	ldr	r1, [pc, #284]	; (80152c4 <tcp_listen_with_backlog_and_err+0x13c>)
 80151a8:	4847      	ldr	r0, [pc, #284]	; (80152c8 <tcp_listen_with_backlog_and_err+0x140>)
 80151aa:	f009 f8e3 	bl	801e374 <iprintf>
 80151ae:	23f0      	movs	r3, #240	; 0xf0
 80151b0:	76fb      	strb	r3, [r7, #27]
 80151b2:	e079      	b.n	80152a8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	7d1b      	ldrb	r3, [r3, #20]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d009      	beq.n	80151d0 <tcp_listen_with_backlog_and_err+0x48>
 80151bc:	4b40      	ldr	r3, [pc, #256]	; (80152c0 <tcp_listen_with_backlog_and_err+0x138>)
 80151be:	f240 325a 	movw	r2, #858	; 0x35a
 80151c2:	4942      	ldr	r1, [pc, #264]	; (80152cc <tcp_listen_with_backlog_and_err+0x144>)
 80151c4:	4840      	ldr	r0, [pc, #256]	; (80152c8 <tcp_listen_with_backlog_and_err+0x140>)
 80151c6:	f009 f8d5 	bl	801e374 <iprintf>
 80151ca:	23f1      	movs	r3, #241	; 0xf1
 80151cc:	76fb      	strb	r3, [r7, #27]
 80151ce:	e06b      	b.n	80152a8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	7d1b      	ldrb	r3, [r3, #20]
 80151d4:	2b01      	cmp	r3, #1
 80151d6:	d104      	bne.n	80151e2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80151dc:	23f7      	movs	r3, #247	; 0xf7
 80151de:	76fb      	strb	r3, [r7, #27]
    goto done;
 80151e0:	e062      	b.n	80152a8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80151e2:	2002      	movs	r0, #2
 80151e4:	f7fe f88e 	bl	8013304 <memp_malloc>
 80151e8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d102      	bne.n	80151f6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80151f0:	23ff      	movs	r3, #255	; 0xff
 80151f2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80151f4:	e058      	b.n	80152a8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	691a      	ldr	r2, [r3, #16]
 80151fa:	69fb      	ldr	r3, [r7, #28]
 80151fc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	8ada      	ldrh	r2, [r3, #22]
 8015202:	69fb      	ldr	r3, [r7, #28]
 8015204:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8015206:	69fb      	ldr	r3, [r7, #28]
 8015208:	2201      	movs	r2, #1
 801520a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	7d5a      	ldrb	r2, [r3, #21]
 8015210:	69fb      	ldr	r3, [r7, #28]
 8015212:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	7a5a      	ldrb	r2, [r3, #9]
 8015218:	69fb      	ldr	r3, [r7, #28]
 801521a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801521c:	69fb      	ldr	r3, [r7, #28]
 801521e:	2200      	movs	r2, #0
 8015220:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	7ada      	ldrb	r2, [r3, #11]
 8015226:	69fb      	ldr	r3, [r7, #28]
 8015228:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	7a9a      	ldrb	r2, [r3, #10]
 801522e:	69fb      	ldr	r3, [r7, #28]
 8015230:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	681a      	ldr	r2, [r3, #0]
 8015236:	69fb      	ldr	r3, [r7, #28]
 8015238:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	8adb      	ldrh	r3, [r3, #22]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d021      	beq.n	8015286 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8015242:	4b23      	ldr	r3, [pc, #140]	; (80152d0 <tcp_listen_with_backlog_and_err+0x148>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	68fa      	ldr	r2, [r7, #12]
 8015248:	429a      	cmp	r2, r3
 801524a:	d105      	bne.n	8015258 <tcp_listen_with_backlog_and_err+0xd0>
 801524c:	4b20      	ldr	r3, [pc, #128]	; (80152d0 <tcp_listen_with_backlog_and_err+0x148>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	68db      	ldr	r3, [r3, #12]
 8015252:	4a1f      	ldr	r2, [pc, #124]	; (80152d0 <tcp_listen_with_backlog_and_err+0x148>)
 8015254:	6013      	str	r3, [r2, #0]
 8015256:	e013      	b.n	8015280 <tcp_listen_with_backlog_and_err+0xf8>
 8015258:	4b1d      	ldr	r3, [pc, #116]	; (80152d0 <tcp_listen_with_backlog_and_err+0x148>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	617b      	str	r3, [r7, #20]
 801525e:	e00c      	b.n	801527a <tcp_listen_with_backlog_and_err+0xf2>
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	68db      	ldr	r3, [r3, #12]
 8015264:	68fa      	ldr	r2, [r7, #12]
 8015266:	429a      	cmp	r2, r3
 8015268:	d104      	bne.n	8015274 <tcp_listen_with_backlog_and_err+0xec>
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	68da      	ldr	r2, [r3, #12]
 801526e:	697b      	ldr	r3, [r7, #20]
 8015270:	60da      	str	r2, [r3, #12]
 8015272:	e005      	b.n	8015280 <tcp_listen_with_backlog_and_err+0xf8>
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	68db      	ldr	r3, [r3, #12]
 8015278:	617b      	str	r3, [r7, #20]
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d1ef      	bne.n	8015260 <tcp_listen_with_backlog_and_err+0xd8>
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	2200      	movs	r2, #0
 8015284:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8015286:	68f8      	ldr	r0, [r7, #12]
 8015288:	f7ff fb76 	bl	8014978 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801528c:	69fb      	ldr	r3, [r7, #28]
 801528e:	4a11      	ldr	r2, [pc, #68]	; (80152d4 <tcp_listen_with_backlog_and_err+0x14c>)
 8015290:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8015292:	4b11      	ldr	r3, [pc, #68]	; (80152d8 <tcp_listen_with_backlog_and_err+0x150>)
 8015294:	681a      	ldr	r2, [r3, #0]
 8015296:	69fb      	ldr	r3, [r7, #28]
 8015298:	60da      	str	r2, [r3, #12]
 801529a:	4a0f      	ldr	r2, [pc, #60]	; (80152d8 <tcp_listen_with_backlog_and_err+0x150>)
 801529c:	69fb      	ldr	r3, [r7, #28]
 801529e:	6013      	str	r3, [r2, #0]
 80152a0:	f005 fbde 	bl	801aa60 <tcp_timer_needed>
  res = ERR_OK;
 80152a4:	2300      	movs	r3, #0
 80152a6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d002      	beq.n	80152b4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	7efa      	ldrb	r2, [r7, #27]
 80152b2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80152b4:	69fb      	ldr	r3, [r7, #28]
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	3720      	adds	r7, #32
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}
 80152be:	bf00      	nop
 80152c0:	080213c4 	.word	0x080213c4
 80152c4:	080215b8 	.word	0x080215b8
 80152c8:	08021408 	.word	0x08021408
 80152cc:	080215e8 	.word	0x080215e8
 80152d0:	2000f9b8 	.word	0x2000f9b8
 80152d4:	08015149 	.word	0x08015149
 80152d8:	2000f9bc 	.word	0x2000f9bc

080152dc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b084      	sub	sp, #16
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d106      	bne.n	80152f8 <tcp_update_rcv_ann_wnd+0x1c>
 80152ea:	4b25      	ldr	r3, [pc, #148]	; (8015380 <tcp_update_rcv_ann_wnd+0xa4>)
 80152ec:	f240 32a6 	movw	r2, #934	; 0x3a6
 80152f0:	4924      	ldr	r1, [pc, #144]	; (8015384 <tcp_update_rcv_ann_wnd+0xa8>)
 80152f2:	4825      	ldr	r0, [pc, #148]	; (8015388 <tcp_update_rcv_ann_wnd+0xac>)
 80152f4:	f009 f83e 	bl	801e374 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152fc:	687a      	ldr	r2, [r7, #4]
 80152fe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015300:	4413      	add	r3, r2
 8015302:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015308:	687a      	ldr	r2, [r7, #4]
 801530a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801530c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015310:	bf28      	it	cs
 8015312:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8015316:	b292      	uxth	r2, r2
 8015318:	4413      	add	r3, r2
 801531a:	68fa      	ldr	r2, [r7, #12]
 801531c:	1ad3      	subs	r3, r2, r3
 801531e:	2b00      	cmp	r3, #0
 8015320:	db08      	blt.n	8015334 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801532e:	68fa      	ldr	r2, [r7, #12]
 8015330:	1ad3      	subs	r3, r2, r3
 8015332:	e020      	b.n	8015376 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801533c:	1ad3      	subs	r3, r2, r3
 801533e:	2b00      	cmp	r3, #0
 8015340:	dd03      	ble.n	801534a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	2200      	movs	r2, #0
 8015346:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015348:	e014      	b.n	8015374 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015352:	1ad3      	subs	r3, r2, r3
 8015354:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015356:	68bb      	ldr	r3, [r7, #8]
 8015358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801535c:	d306      	bcc.n	801536c <tcp_update_rcv_ann_wnd+0x90>
 801535e:	4b08      	ldr	r3, [pc, #32]	; (8015380 <tcp_update_rcv_ann_wnd+0xa4>)
 8015360:	f240 32b6 	movw	r2, #950	; 0x3b6
 8015364:	4909      	ldr	r1, [pc, #36]	; (801538c <tcp_update_rcv_ann_wnd+0xb0>)
 8015366:	4808      	ldr	r0, [pc, #32]	; (8015388 <tcp_update_rcv_ann_wnd+0xac>)
 8015368:	f009 f804 	bl	801e374 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	b29a      	uxth	r2, r3
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8015374:	2300      	movs	r3, #0
  }
}
 8015376:	4618      	mov	r0, r3
 8015378:	3710      	adds	r7, #16
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}
 801537e:	bf00      	nop
 8015380:	080213c4 	.word	0x080213c4
 8015384:	08021620 	.word	0x08021620
 8015388:	08021408 	.word	0x08021408
 801538c:	08021644 	.word	0x08021644

08015390 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b084      	sub	sp, #16
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	460b      	mov	r3, r1
 801539a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d107      	bne.n	80153b2 <tcp_recved+0x22>
 80153a2:	4b1f      	ldr	r3, [pc, #124]	; (8015420 <tcp_recved+0x90>)
 80153a4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80153a8:	491e      	ldr	r1, [pc, #120]	; (8015424 <tcp_recved+0x94>)
 80153aa:	481f      	ldr	r0, [pc, #124]	; (8015428 <tcp_recved+0x98>)
 80153ac:	f008 ffe2 	bl	801e374 <iprintf>
 80153b0:	e032      	b.n	8015418 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	7d1b      	ldrb	r3, [r3, #20]
 80153b6:	2b01      	cmp	r3, #1
 80153b8:	d106      	bne.n	80153c8 <tcp_recved+0x38>
 80153ba:	4b19      	ldr	r3, [pc, #100]	; (8015420 <tcp_recved+0x90>)
 80153bc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80153c0:	491a      	ldr	r1, [pc, #104]	; (801542c <tcp_recved+0x9c>)
 80153c2:	4819      	ldr	r0, [pc, #100]	; (8015428 <tcp_recved+0x98>)
 80153c4:	f008 ffd6 	bl	801e374 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80153cc:	887b      	ldrh	r3, [r7, #2]
 80153ce:	4413      	add	r3, r2
 80153d0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80153d2:	89fb      	ldrh	r3, [r7, #14]
 80153d4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80153d8:	d804      	bhi.n	80153e4 <tcp_recved+0x54>
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80153de:	89fa      	ldrh	r2, [r7, #14]
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d204      	bcs.n	80153ee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80153ea:	851a      	strh	r2, [r3, #40]	; 0x28
 80153ec:	e002      	b.n	80153f4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	89fa      	ldrh	r2, [r7, #14]
 80153f2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f7ff ff71 	bl	80152dc <tcp_update_rcv_ann_wnd>
 80153fa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80153fc:	68bb      	ldr	r3, [r7, #8]
 80153fe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015402:	d309      	bcc.n	8015418 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	8b5b      	ldrh	r3, [r3, #26]
 8015408:	f043 0302 	orr.w	r3, r3, #2
 801540c:	b29a      	uxth	r2, r3
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015412:	6878      	ldr	r0, [r7, #4]
 8015414:	f004 fbae 	bl	8019b74 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015418:	3710      	adds	r7, #16
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}
 801541e:	bf00      	nop
 8015420:	080213c4 	.word	0x080213c4
 8015424:	08021660 	.word	0x08021660
 8015428:	08021408 	.word	0x08021408
 801542c:	08021678 	.word	0x08021678

08015430 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015430:	b480      	push	{r7}
 8015432:	b083      	sub	sp, #12
 8015434:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015436:	2300      	movs	r3, #0
 8015438:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801543a:	4b1e      	ldr	r3, [pc, #120]	; (80154b4 <tcp_new_port+0x84>)
 801543c:	881b      	ldrh	r3, [r3, #0]
 801543e:	3301      	adds	r3, #1
 8015440:	b29a      	uxth	r2, r3
 8015442:	4b1c      	ldr	r3, [pc, #112]	; (80154b4 <tcp_new_port+0x84>)
 8015444:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8015446:	4b1b      	ldr	r3, [pc, #108]	; (80154b4 <tcp_new_port+0x84>)
 8015448:	881b      	ldrh	r3, [r3, #0]
 801544a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801544e:	4293      	cmp	r3, r2
 8015450:	d103      	bne.n	801545a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015452:	4b18      	ldr	r3, [pc, #96]	; (80154b4 <tcp_new_port+0x84>)
 8015454:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015458:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801545a:	2300      	movs	r3, #0
 801545c:	71fb      	strb	r3, [r7, #7]
 801545e:	e01e      	b.n	801549e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015460:	79fb      	ldrb	r3, [r7, #7]
 8015462:	4a15      	ldr	r2, [pc, #84]	; (80154b8 <tcp_new_port+0x88>)
 8015464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	603b      	str	r3, [r7, #0]
 801546c:	e011      	b.n	8015492 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	8ada      	ldrh	r2, [r3, #22]
 8015472:	4b10      	ldr	r3, [pc, #64]	; (80154b4 <tcp_new_port+0x84>)
 8015474:	881b      	ldrh	r3, [r3, #0]
 8015476:	429a      	cmp	r2, r3
 8015478:	d108      	bne.n	801548c <tcp_new_port+0x5c>
        n++;
 801547a:	88bb      	ldrh	r3, [r7, #4]
 801547c:	3301      	adds	r3, #1
 801547e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015480:	88bb      	ldrh	r3, [r7, #4]
 8015482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015486:	d3d8      	bcc.n	801543a <tcp_new_port+0xa>
          return 0;
 8015488:	2300      	movs	r3, #0
 801548a:	e00d      	b.n	80154a8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801548c:	683b      	ldr	r3, [r7, #0]
 801548e:	68db      	ldr	r3, [r3, #12]
 8015490:	603b      	str	r3, [r7, #0]
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d1ea      	bne.n	801546e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015498:	79fb      	ldrb	r3, [r7, #7]
 801549a:	3301      	adds	r3, #1
 801549c:	71fb      	strb	r3, [r7, #7]
 801549e:	79fb      	ldrb	r3, [r7, #7]
 80154a0:	2b03      	cmp	r3, #3
 80154a2:	d9dd      	bls.n	8015460 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80154a4:	4b03      	ldr	r3, [pc, #12]	; (80154b4 <tcp_new_port+0x84>)
 80154a6:	881b      	ldrh	r3, [r3, #0]
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	370c      	adds	r7, #12
 80154ac:	46bd      	mov	sp, r7
 80154ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b2:	4770      	bx	lr
 80154b4:	20000024 	.word	0x20000024
 80154b8:	080234b4 	.word	0x080234b4

080154bc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80154bc:	b5b0      	push	{r4, r5, r7, lr}
 80154be:	b090      	sub	sp, #64	; 0x40
 80154c0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80154c2:	2300      	movs	r3, #0
 80154c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80154c8:	4b94      	ldr	r3, [pc, #592]	; (801571c <tcp_slowtmr+0x260>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	3301      	adds	r3, #1
 80154ce:	4a93      	ldr	r2, [pc, #588]	; (801571c <tcp_slowtmr+0x260>)
 80154d0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80154d2:	4b93      	ldr	r3, [pc, #588]	; (8015720 <tcp_slowtmr+0x264>)
 80154d4:	781b      	ldrb	r3, [r3, #0]
 80154d6:	3301      	adds	r3, #1
 80154d8:	b2da      	uxtb	r2, r3
 80154da:	4b91      	ldr	r3, [pc, #580]	; (8015720 <tcp_slowtmr+0x264>)
 80154dc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80154de:	2300      	movs	r3, #0
 80154e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80154e2:	4b90      	ldr	r3, [pc, #576]	; (8015724 <tcp_slowtmr+0x268>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80154e8:	e29d      	b.n	8015a26 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80154ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ec:	7d1b      	ldrb	r3, [r3, #20]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d106      	bne.n	8015500 <tcp_slowtmr+0x44>
 80154f2:	4b8d      	ldr	r3, [pc, #564]	; (8015728 <tcp_slowtmr+0x26c>)
 80154f4:	f240 42be 	movw	r2, #1214	; 0x4be
 80154f8:	498c      	ldr	r1, [pc, #560]	; (801572c <tcp_slowtmr+0x270>)
 80154fa:	488d      	ldr	r0, [pc, #564]	; (8015730 <tcp_slowtmr+0x274>)
 80154fc:	f008 ff3a 	bl	801e374 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015502:	7d1b      	ldrb	r3, [r3, #20]
 8015504:	2b01      	cmp	r3, #1
 8015506:	d106      	bne.n	8015516 <tcp_slowtmr+0x5a>
 8015508:	4b87      	ldr	r3, [pc, #540]	; (8015728 <tcp_slowtmr+0x26c>)
 801550a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801550e:	4989      	ldr	r1, [pc, #548]	; (8015734 <tcp_slowtmr+0x278>)
 8015510:	4887      	ldr	r0, [pc, #540]	; (8015730 <tcp_slowtmr+0x274>)
 8015512:	f008 ff2f 	bl	801e374 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015518:	7d1b      	ldrb	r3, [r3, #20]
 801551a:	2b0a      	cmp	r3, #10
 801551c:	d106      	bne.n	801552c <tcp_slowtmr+0x70>
 801551e:	4b82      	ldr	r3, [pc, #520]	; (8015728 <tcp_slowtmr+0x26c>)
 8015520:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8015524:	4984      	ldr	r1, [pc, #528]	; (8015738 <tcp_slowtmr+0x27c>)
 8015526:	4882      	ldr	r0, [pc, #520]	; (8015730 <tcp_slowtmr+0x274>)
 8015528:	f008 ff24 	bl	801e374 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801552e:	7f9a      	ldrb	r2, [r3, #30]
 8015530:	4b7b      	ldr	r3, [pc, #492]	; (8015720 <tcp_slowtmr+0x264>)
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	429a      	cmp	r2, r3
 8015536:	d105      	bne.n	8015544 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8015538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801553a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801553e:	68db      	ldr	r3, [r3, #12]
 8015540:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8015542:	e270      	b.n	8015a26 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8015544:	4b76      	ldr	r3, [pc, #472]	; (8015720 <tcp_slowtmr+0x264>)
 8015546:	781a      	ldrb	r2, [r3, #0]
 8015548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801554a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801554c:	2300      	movs	r3, #0
 801554e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8015552:	2300      	movs	r3, #0
 8015554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801555a:	7d1b      	ldrb	r3, [r3, #20]
 801555c:	2b02      	cmp	r3, #2
 801555e:	d10a      	bne.n	8015576 <tcp_slowtmr+0xba>
 8015560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015562:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015566:	2b05      	cmp	r3, #5
 8015568:	d905      	bls.n	8015576 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801556a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801556e:	3301      	adds	r3, #1
 8015570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015574:	e11e      	b.n	80157b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015578:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801557c:	2b0b      	cmp	r3, #11
 801557e:	d905      	bls.n	801558c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8015580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015584:	3301      	adds	r3, #1
 8015586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801558a:	e113      	b.n	80157b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801558e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015592:	2b00      	cmp	r3, #0
 8015594:	d075      	beq.n	8015682 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801559a:	2b00      	cmp	r3, #0
 801559c:	d006      	beq.n	80155ac <tcp_slowtmr+0xf0>
 801559e:	4b62      	ldr	r3, [pc, #392]	; (8015728 <tcp_slowtmr+0x26c>)
 80155a0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80155a4:	4965      	ldr	r1, [pc, #404]	; (801573c <tcp_slowtmr+0x280>)
 80155a6:	4862      	ldr	r0, [pc, #392]	; (8015730 <tcp_slowtmr+0x274>)
 80155a8:	f008 fee4 	bl	801e374 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80155ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d106      	bne.n	80155c2 <tcp_slowtmr+0x106>
 80155b4:	4b5c      	ldr	r3, [pc, #368]	; (8015728 <tcp_slowtmr+0x26c>)
 80155b6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80155ba:	4961      	ldr	r1, [pc, #388]	; (8015740 <tcp_slowtmr+0x284>)
 80155bc:	485c      	ldr	r0, [pc, #368]	; (8015730 <tcp_slowtmr+0x274>)
 80155be:	f008 fed9 	bl	801e374 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80155c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80155c8:	2b0b      	cmp	r3, #11
 80155ca:	d905      	bls.n	80155d8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80155cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155d0:	3301      	adds	r3, #1
 80155d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80155d6:	e0ed      	b.n	80157b4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80155d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80155de:	3b01      	subs	r3, #1
 80155e0:	4a58      	ldr	r2, [pc, #352]	; (8015744 <tcp_slowtmr+0x288>)
 80155e2:	5cd3      	ldrb	r3, [r2, r3]
 80155e4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80155e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80155ec:	7c7a      	ldrb	r2, [r7, #17]
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d907      	bls.n	8015602 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80155f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80155f8:	3301      	adds	r3, #1
 80155fa:	b2da      	uxtb	r2, r3
 80155fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8015602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015604:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015608:	7c7a      	ldrb	r2, [r7, #17]
 801560a:	429a      	cmp	r2, r3
 801560c:	f200 80d2 	bhi.w	80157b4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8015610:	2301      	movs	r3, #1
 8015612:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8015614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015616:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801561a:	2b00      	cmp	r3, #0
 801561c:	d108      	bne.n	8015630 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801561e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015620:	f005 f950 	bl	801a8c4 <tcp_zero_window_probe>
 8015624:	4603      	mov	r3, r0
 8015626:	2b00      	cmp	r3, #0
 8015628:	d014      	beq.n	8015654 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801562a:	2300      	movs	r3, #0
 801562c:	623b      	str	r3, [r7, #32]
 801562e:	e011      	b.n	8015654 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015636:	4619      	mov	r1, r3
 8015638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801563a:	f004 f815 	bl	8019668 <tcp_split_unsent_seg>
 801563e:	4603      	mov	r3, r0
 8015640:	2b00      	cmp	r3, #0
 8015642:	d107      	bne.n	8015654 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8015644:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015646:	f004 fa95 	bl	8019b74 <tcp_output>
 801564a:	4603      	mov	r3, r0
 801564c:	2b00      	cmp	r3, #0
 801564e:	d101      	bne.n	8015654 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8015650:	2300      	movs	r3, #0
 8015652:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8015654:	6a3b      	ldr	r3, [r7, #32]
 8015656:	2b00      	cmp	r3, #0
 8015658:	f000 80ac 	beq.w	80157b4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565e:	2200      	movs	r2, #0
 8015660:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015666:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801566a:	2b06      	cmp	r3, #6
 801566c:	f200 80a2 	bhi.w	80157b4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8015670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015672:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015676:	3301      	adds	r3, #1
 8015678:	b2da      	uxtb	r2, r3
 801567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801567c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8015680:	e098      	b.n	80157b4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015684:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015688:	2b00      	cmp	r3, #0
 801568a:	db0f      	blt.n	80156ac <tcp_slowtmr+0x1f0>
 801568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801568e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015692:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015696:	4293      	cmp	r3, r2
 8015698:	d008      	beq.n	80156ac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801569c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80156a0:	b29b      	uxth	r3, r3
 80156a2:	3301      	adds	r3, #1
 80156a4:	b29b      	uxth	r3, r3
 80156a6:	b21a      	sxth	r2, r3
 80156a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156aa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80156ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80156b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80156b8:	429a      	cmp	r2, r3
 80156ba:	db7b      	blt.n	80157b4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80156bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156be:	f004 fd4b 	bl	801a158 <tcp_rexmit_rto_prepare>
 80156c2:	4603      	mov	r3, r0
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d007      	beq.n	80156d8 <tcp_slowtmr+0x21c>
 80156c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d171      	bne.n	80157b4 <tcp_slowtmr+0x2f8>
 80156d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d06d      	beq.n	80157b4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80156d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156da:	7d1b      	ldrb	r3, [r3, #20]
 80156dc:	2b02      	cmp	r3, #2
 80156de:	d03a      	beq.n	8015756 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80156e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80156e6:	2b0c      	cmp	r3, #12
 80156e8:	bf28      	it	cs
 80156ea:	230c      	movcs	r3, #12
 80156ec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80156ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80156f4:	10db      	asrs	r3, r3, #3
 80156f6:	b21b      	sxth	r3, r3
 80156f8:	461a      	mov	r2, r3
 80156fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015700:	4413      	add	r3, r2
 8015702:	7efa      	ldrb	r2, [r7, #27]
 8015704:	4910      	ldr	r1, [pc, #64]	; (8015748 <tcp_slowtmr+0x28c>)
 8015706:	5c8a      	ldrb	r2, [r1, r2]
 8015708:	4093      	lsls	r3, r2
 801570a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8015712:	4293      	cmp	r3, r2
 8015714:	dc1a      	bgt.n	801574c <tcp_slowtmr+0x290>
 8015716:	697b      	ldr	r3, [r7, #20]
 8015718:	b21a      	sxth	r2, r3
 801571a:	e019      	b.n	8015750 <tcp_slowtmr+0x294>
 801571c:	2000f9b4 	.word	0x2000f9b4
 8015720:	2000f9ca 	.word	0x2000f9ca
 8015724:	2000f9c0 	.word	0x2000f9c0
 8015728:	080213c4 	.word	0x080213c4
 801572c:	08021708 	.word	0x08021708
 8015730:	08021408 	.word	0x08021408
 8015734:	08021734 	.word	0x08021734
 8015738:	08021760 	.word	0x08021760
 801573c:	08021790 	.word	0x08021790
 8015740:	080217c4 	.word	0x080217c4
 8015744:	080234ac 	.word	0x080234ac
 8015748:	0802349c 	.word	0x0802349c
 801574c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015752:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8015756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015758:	2200      	movs	r2, #0
 801575a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801575e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015764:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015768:	4293      	cmp	r3, r2
 801576a:	bf28      	it	cs
 801576c:	4613      	movcs	r3, r2
 801576e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015770:	8a7b      	ldrh	r3, [r7, #18]
 8015772:	085b      	lsrs	r3, r3, #1
 8015774:	b29a      	uxth	r2, r3
 8015776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015778:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801577c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801577e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015786:	005b      	lsls	r3, r3, #1
 8015788:	b29b      	uxth	r3, r3
 801578a:	429a      	cmp	r2, r3
 801578c:	d206      	bcs.n	801579c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015792:	005b      	lsls	r3, r3, #1
 8015794:	b29a      	uxth	r2, r3
 8015796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015798:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801579e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80157a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80157a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a8:	2200      	movs	r2, #0
 80157aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80157ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80157b0:	f004 fd42 	bl	801a238 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80157b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b6:	7d1b      	ldrb	r3, [r3, #20]
 80157b8:	2b06      	cmp	r3, #6
 80157ba:	d111      	bne.n	80157e0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80157bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157be:	8b5b      	ldrh	r3, [r3, #26]
 80157c0:	f003 0310 	and.w	r3, r3, #16
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d00b      	beq.n	80157e0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80157c8:	4b9c      	ldr	r3, [pc, #624]	; (8015a3c <tcp_slowtmr+0x580>)
 80157ca:	681a      	ldr	r2, [r3, #0]
 80157cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ce:	6a1b      	ldr	r3, [r3, #32]
 80157d0:	1ad3      	subs	r3, r2, r3
 80157d2:	2b28      	cmp	r3, #40	; 0x28
 80157d4:	d904      	bls.n	80157e0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80157d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157da:	3301      	adds	r3, #1
 80157dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80157e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e2:	7a5b      	ldrb	r3, [r3, #9]
 80157e4:	f003 0308 	and.w	r3, r3, #8
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d04a      	beq.n	8015882 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80157ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80157f0:	2b04      	cmp	r3, #4
 80157f2:	d003      	beq.n	80157fc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80157f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80157f8:	2b07      	cmp	r3, #7
 80157fa:	d142      	bne.n	8015882 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80157fc:	4b8f      	ldr	r3, [pc, #572]	; (8015a3c <tcp_slowtmr+0x580>)
 80157fe:	681a      	ldr	r2, [r3, #0]
 8015800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015802:	6a1b      	ldr	r3, [r3, #32]
 8015804:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015808:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801580c:	4b8c      	ldr	r3, [pc, #560]	; (8015a40 <tcp_slowtmr+0x584>)
 801580e:	440b      	add	r3, r1
 8015810:	498c      	ldr	r1, [pc, #560]	; (8015a44 <tcp_slowtmr+0x588>)
 8015812:	fba1 1303 	umull	r1, r3, r1, r3
 8015816:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015818:	429a      	cmp	r2, r3
 801581a:	d90a      	bls.n	8015832 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801581c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015820:	3301      	adds	r3, #1
 8015822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8015826:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801582a:	3301      	adds	r3, #1
 801582c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015830:	e027      	b.n	8015882 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015832:	4b82      	ldr	r3, [pc, #520]	; (8015a3c <tcp_slowtmr+0x580>)
 8015834:	681a      	ldr	r2, [r3, #0]
 8015836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015838:	6a1b      	ldr	r3, [r3, #32]
 801583a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801583e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015844:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8015848:	4618      	mov	r0, r3
 801584a:	4b7f      	ldr	r3, [pc, #508]	; (8015a48 <tcp_slowtmr+0x58c>)
 801584c:	fb00 f303 	mul.w	r3, r0, r3
 8015850:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8015852:	497c      	ldr	r1, [pc, #496]	; (8015a44 <tcp_slowtmr+0x588>)
 8015854:	fba1 1303 	umull	r1, r3, r1, r3
 8015858:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801585a:	429a      	cmp	r2, r3
 801585c:	d911      	bls.n	8015882 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801585e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015860:	f004 fff0 	bl	801a844 <tcp_keepalive>
 8015864:	4603      	mov	r3, r0
 8015866:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801586a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801586e:	2b00      	cmp	r3, #0
 8015870:	d107      	bne.n	8015882 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8015872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015874:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8015878:	3301      	adds	r3, #1
 801587a:	b2da      	uxtb	r2, r3
 801587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8015882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015886:	2b00      	cmp	r3, #0
 8015888:	d011      	beq.n	80158ae <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801588a:	4b6c      	ldr	r3, [pc, #432]	; (8015a3c <tcp_slowtmr+0x580>)
 801588c:	681a      	ldr	r2, [r3, #0]
 801588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015890:	6a1b      	ldr	r3, [r3, #32]
 8015892:	1ad2      	subs	r2, r2, r3
 8015894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015896:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801589a:	4619      	mov	r1, r3
 801589c:	460b      	mov	r3, r1
 801589e:	005b      	lsls	r3, r3, #1
 80158a0:	440b      	add	r3, r1
 80158a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80158a4:	429a      	cmp	r2, r3
 80158a6:	d302      	bcc.n	80158ae <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80158a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80158aa:	f000 feab 	bl	8016604 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80158ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b0:	7d1b      	ldrb	r3, [r3, #20]
 80158b2:	2b03      	cmp	r3, #3
 80158b4:	d10b      	bne.n	80158ce <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80158b6:	4b61      	ldr	r3, [pc, #388]	; (8015a3c <tcp_slowtmr+0x580>)
 80158b8:	681a      	ldr	r2, [r3, #0]
 80158ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158bc:	6a1b      	ldr	r3, [r3, #32]
 80158be:	1ad3      	subs	r3, r2, r3
 80158c0:	2b28      	cmp	r3, #40	; 0x28
 80158c2:	d904      	bls.n	80158ce <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80158c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158c8:	3301      	adds	r3, #1
 80158ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80158ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d0:	7d1b      	ldrb	r3, [r3, #20]
 80158d2:	2b09      	cmp	r3, #9
 80158d4:	d10b      	bne.n	80158ee <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80158d6:	4b59      	ldr	r3, [pc, #356]	; (8015a3c <tcp_slowtmr+0x580>)
 80158d8:	681a      	ldr	r2, [r3, #0]
 80158da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158dc:	6a1b      	ldr	r3, [r3, #32]
 80158de:	1ad3      	subs	r3, r2, r3
 80158e0:	2bf0      	cmp	r3, #240	; 0xf0
 80158e2:	d904      	bls.n	80158ee <tcp_slowtmr+0x432>
        ++pcb_remove;
 80158e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158e8:	3301      	adds	r3, #1
 80158ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80158ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d060      	beq.n	80159b8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80158f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80158fc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80158fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015900:	f000 fccc 	bl	801629c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8015904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015906:	2b00      	cmp	r3, #0
 8015908:	d010      	beq.n	801592c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801590a:	4b50      	ldr	r3, [pc, #320]	; (8015a4c <tcp_slowtmr+0x590>)
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015910:	429a      	cmp	r2, r3
 8015912:	d106      	bne.n	8015922 <tcp_slowtmr+0x466>
 8015914:	4b4e      	ldr	r3, [pc, #312]	; (8015a50 <tcp_slowtmr+0x594>)
 8015916:	f240 526d 	movw	r2, #1389	; 0x56d
 801591a:	494e      	ldr	r1, [pc, #312]	; (8015a54 <tcp_slowtmr+0x598>)
 801591c:	484e      	ldr	r0, [pc, #312]	; (8015a58 <tcp_slowtmr+0x59c>)
 801591e:	f008 fd29 	bl	801e374 <iprintf>
        prev->next = pcb->next;
 8015922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015924:	68da      	ldr	r2, [r3, #12]
 8015926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015928:	60da      	str	r2, [r3, #12]
 801592a:	e00f      	b.n	801594c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801592c:	4b47      	ldr	r3, [pc, #284]	; (8015a4c <tcp_slowtmr+0x590>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015932:	429a      	cmp	r2, r3
 8015934:	d006      	beq.n	8015944 <tcp_slowtmr+0x488>
 8015936:	4b46      	ldr	r3, [pc, #280]	; (8015a50 <tcp_slowtmr+0x594>)
 8015938:	f240 5271 	movw	r2, #1393	; 0x571
 801593c:	4947      	ldr	r1, [pc, #284]	; (8015a5c <tcp_slowtmr+0x5a0>)
 801593e:	4846      	ldr	r0, [pc, #280]	; (8015a58 <tcp_slowtmr+0x59c>)
 8015940:	f008 fd18 	bl	801e374 <iprintf>
        tcp_active_pcbs = pcb->next;
 8015944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015946:	68db      	ldr	r3, [r3, #12]
 8015948:	4a40      	ldr	r2, [pc, #256]	; (8015a4c <tcp_slowtmr+0x590>)
 801594a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801594c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015950:	2b00      	cmp	r3, #0
 8015952:	d013      	beq.n	801597c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015956:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801595a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801595c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015960:	3304      	adds	r3, #4
 8015962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015964:	8ad2      	ldrh	r2, [r2, #22]
 8015966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015968:	8b09      	ldrh	r1, [r1, #24]
 801596a:	9102      	str	r1, [sp, #8]
 801596c:	9201      	str	r2, [sp, #4]
 801596e:	9300      	str	r3, [sp, #0]
 8015970:	462b      	mov	r3, r5
 8015972:	4622      	mov	r2, r4
 8015974:	4601      	mov	r1, r0
 8015976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015978:	f004 feb0 	bl	801a6dc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801597c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801597e:	691b      	ldr	r3, [r3, #16]
 8015980:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8015982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015984:	7d1b      	ldrb	r3, [r3, #20]
 8015986:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801598a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801598e:	68db      	ldr	r3, [r3, #12]
 8015990:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015992:	6838      	ldr	r0, [r7, #0]
 8015994:	f7fe fff0 	bl	8014978 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8015998:	4b31      	ldr	r3, [pc, #196]	; (8015a60 <tcp_slowtmr+0x5a4>)
 801599a:	2200      	movs	r2, #0
 801599c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d004      	beq.n	80159ae <tcp_slowtmr+0x4f2>
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	f06f 010c 	mvn.w	r1, #12
 80159aa:	68b8      	ldr	r0, [r7, #8]
 80159ac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80159ae:	4b2c      	ldr	r3, [pc, #176]	; (8015a60 <tcp_slowtmr+0x5a4>)
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d037      	beq.n	8015a26 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80159b6:	e592      	b.n	80154de <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80159b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80159bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159be:	68db      	ldr	r3, [r3, #12]
 80159c0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80159c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159c4:	7f1b      	ldrb	r3, [r3, #28]
 80159c6:	3301      	adds	r3, #1
 80159c8:	b2da      	uxtb	r2, r3
 80159ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159cc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80159ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d0:	7f1a      	ldrb	r2, [r3, #28]
 80159d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d4:	7f5b      	ldrb	r3, [r3, #29]
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d325      	bcc.n	8015a26 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80159da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159dc:	2200      	movs	r2, #0
 80159de:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80159e0:	4b1f      	ldr	r3, [pc, #124]	; (8015a60 <tcp_slowtmr+0x5a4>)
 80159e2:	2200      	movs	r2, #0
 80159e4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80159e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d00b      	beq.n	8015a08 <tcp_slowtmr+0x54c>
 80159f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80159f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159f8:	6912      	ldr	r2, [r2, #16]
 80159fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80159fc:	4610      	mov	r0, r2
 80159fe:	4798      	blx	r3
 8015a00:	4603      	mov	r3, r0
 8015a02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8015a06:	e002      	b.n	8015a0e <tcp_slowtmr+0x552>
 8015a08:	2300      	movs	r3, #0
 8015a0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8015a0e:	4b14      	ldr	r3, [pc, #80]	; (8015a60 <tcp_slowtmr+0x5a4>)
 8015a10:	781b      	ldrb	r3, [r3, #0]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d000      	beq.n	8015a18 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8015a16:	e562      	b.n	80154de <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015a18:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d102      	bne.n	8015a26 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8015a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a22:	f004 f8a7 	bl	8019b74 <tcp_output>
  while (pcb != NULL) {
 8015a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	f47f ad5e 	bne.w	80154ea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8015a32:	4b0c      	ldr	r3, [pc, #48]	; (8015a64 <tcp_slowtmr+0x5a8>)
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015a38:	e069      	b.n	8015b0e <tcp_slowtmr+0x652>
 8015a3a:	bf00      	nop
 8015a3c:	2000f9b4 	.word	0x2000f9b4
 8015a40:	000a4cb8 	.word	0x000a4cb8
 8015a44:	10624dd3 	.word	0x10624dd3
 8015a48:	000124f8 	.word	0x000124f8
 8015a4c:	2000f9c0 	.word	0x2000f9c0
 8015a50:	080213c4 	.word	0x080213c4
 8015a54:	080217fc 	.word	0x080217fc
 8015a58:	08021408 	.word	0x08021408
 8015a5c:	08021828 	.word	0x08021828
 8015a60:	2000f9c8 	.word	0x2000f9c8
 8015a64:	2000f9c4 	.word	0x2000f9c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a6a:	7d1b      	ldrb	r3, [r3, #20]
 8015a6c:	2b0a      	cmp	r3, #10
 8015a6e:	d006      	beq.n	8015a7e <tcp_slowtmr+0x5c2>
 8015a70:	4b2b      	ldr	r3, [pc, #172]	; (8015b20 <tcp_slowtmr+0x664>)
 8015a72:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015a76:	492b      	ldr	r1, [pc, #172]	; (8015b24 <tcp_slowtmr+0x668>)
 8015a78:	482b      	ldr	r0, [pc, #172]	; (8015b28 <tcp_slowtmr+0x66c>)
 8015a7a:	f008 fc7b 	bl	801e374 <iprintf>
    pcb_remove = 0;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015a84:	4b29      	ldr	r3, [pc, #164]	; (8015b2c <tcp_slowtmr+0x670>)
 8015a86:	681a      	ldr	r2, [r3, #0]
 8015a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a8a:	6a1b      	ldr	r3, [r3, #32]
 8015a8c:	1ad3      	subs	r3, r2, r3
 8015a8e:	2bf0      	cmp	r3, #240	; 0xf0
 8015a90:	d904      	bls.n	8015a9c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8015a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a96:	3301      	adds	r3, #1
 8015a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d02f      	beq.n	8015b04 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015aa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015aa6:	f000 fbf9 	bl	801629c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d010      	beq.n	8015ad2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015ab0:	4b1f      	ldr	r3, [pc, #124]	; (8015b30 <tcp_slowtmr+0x674>)
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	d106      	bne.n	8015ac8 <tcp_slowtmr+0x60c>
 8015aba:	4b19      	ldr	r3, [pc, #100]	; (8015b20 <tcp_slowtmr+0x664>)
 8015abc:	f240 52af 	movw	r2, #1455	; 0x5af
 8015ac0:	491c      	ldr	r1, [pc, #112]	; (8015b34 <tcp_slowtmr+0x678>)
 8015ac2:	4819      	ldr	r0, [pc, #100]	; (8015b28 <tcp_slowtmr+0x66c>)
 8015ac4:	f008 fc56 	bl	801e374 <iprintf>
        prev->next = pcb->next;
 8015ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aca:	68da      	ldr	r2, [r3, #12]
 8015acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ace:	60da      	str	r2, [r3, #12]
 8015ad0:	e00f      	b.n	8015af2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015ad2:	4b17      	ldr	r3, [pc, #92]	; (8015b30 <tcp_slowtmr+0x674>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	d006      	beq.n	8015aea <tcp_slowtmr+0x62e>
 8015adc:	4b10      	ldr	r3, [pc, #64]	; (8015b20 <tcp_slowtmr+0x664>)
 8015ade:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015ae2:	4915      	ldr	r1, [pc, #84]	; (8015b38 <tcp_slowtmr+0x67c>)
 8015ae4:	4810      	ldr	r0, [pc, #64]	; (8015b28 <tcp_slowtmr+0x66c>)
 8015ae6:	f008 fc45 	bl	801e374 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aec:	68db      	ldr	r3, [r3, #12]
 8015aee:	4a10      	ldr	r2, [pc, #64]	; (8015b30 <tcp_slowtmr+0x674>)
 8015af0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015af4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015af8:	68db      	ldr	r3, [r3, #12]
 8015afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015afc:	69f8      	ldr	r0, [r7, #28]
 8015afe:	f7fe ff3b 	bl	8014978 <tcp_free>
 8015b02:	e004      	b.n	8015b0e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8015b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b0a:	68db      	ldr	r3, [r3, #12]
 8015b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d1a9      	bne.n	8015a68 <tcp_slowtmr+0x5ac>
    }
  }
}
 8015b14:	bf00      	nop
 8015b16:	bf00      	nop
 8015b18:	3730      	adds	r7, #48	; 0x30
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8015b1e:	bf00      	nop
 8015b20:	080213c4 	.word	0x080213c4
 8015b24:	08021854 	.word	0x08021854
 8015b28:	08021408 	.word	0x08021408
 8015b2c:	2000f9b4 	.word	0x2000f9b4
 8015b30:	2000f9c4 	.word	0x2000f9c4
 8015b34:	08021884 	.word	0x08021884
 8015b38:	080218ac 	.word	0x080218ac

08015b3c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b082      	sub	sp, #8
 8015b40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015b42:	4b2d      	ldr	r3, [pc, #180]	; (8015bf8 <tcp_fasttmr+0xbc>)
 8015b44:	781b      	ldrb	r3, [r3, #0]
 8015b46:	3301      	adds	r3, #1
 8015b48:	b2da      	uxtb	r2, r3
 8015b4a:	4b2b      	ldr	r3, [pc, #172]	; (8015bf8 <tcp_fasttmr+0xbc>)
 8015b4c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015b4e:	4b2b      	ldr	r3, [pc, #172]	; (8015bfc <tcp_fasttmr+0xc0>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015b54:	e048      	b.n	8015be8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	7f9a      	ldrb	r2, [r3, #30]
 8015b5a:	4b27      	ldr	r3, [pc, #156]	; (8015bf8 <tcp_fasttmr+0xbc>)
 8015b5c:	781b      	ldrb	r3, [r3, #0]
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d03f      	beq.n	8015be2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015b62:	4b25      	ldr	r3, [pc, #148]	; (8015bf8 <tcp_fasttmr+0xbc>)
 8015b64:	781a      	ldrb	r2, [r3, #0]
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	8b5b      	ldrh	r3, [r3, #26]
 8015b6e:	f003 0301 	and.w	r3, r3, #1
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d010      	beq.n	8015b98 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	8b5b      	ldrh	r3, [r3, #26]
 8015b7a:	f043 0302 	orr.w	r3, r3, #2
 8015b7e:	b29a      	uxth	r2, r3
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015b84:	6878      	ldr	r0, [r7, #4]
 8015b86:	f003 fff5 	bl	8019b74 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	8b5b      	ldrh	r3, [r3, #26]
 8015b8e:	f023 0303 	bic.w	r3, r3, #3
 8015b92:	b29a      	uxth	r2, r3
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	8b5b      	ldrh	r3, [r3, #26]
 8015b9c:	f003 0308 	and.w	r3, r3, #8
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d009      	beq.n	8015bb8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	8b5b      	ldrh	r3, [r3, #26]
 8015ba8:	f023 0308 	bic.w	r3, r3, #8
 8015bac:	b29a      	uxth	r2, r3
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015bb2:	6878      	ldr	r0, [r7, #4]
 8015bb4:	f7ff f874 	bl	8014ca0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	68db      	ldr	r3, [r3, #12]
 8015bbc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d00a      	beq.n	8015bdc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015bc6:	4b0e      	ldr	r3, [pc, #56]	; (8015c00 <tcp_fasttmr+0xc4>)
 8015bc8:	2200      	movs	r2, #0
 8015bca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	f000 f819 	bl	8015c04 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015bd2:	4b0b      	ldr	r3, [pc, #44]	; (8015c00 <tcp_fasttmr+0xc4>)
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d000      	beq.n	8015bdc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015bda:	e7b8      	b.n	8015b4e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	607b      	str	r3, [r7, #4]
 8015be0:	e002      	b.n	8015be8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	68db      	ldr	r3, [r3, #12]
 8015be6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d1b3      	bne.n	8015b56 <tcp_fasttmr+0x1a>
    }
  }
}
 8015bee:	bf00      	nop
 8015bf0:	bf00      	nop
 8015bf2:	3708      	adds	r7, #8
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}
 8015bf8:	2000f9ca 	.word	0x2000f9ca
 8015bfc:	2000f9c0 	.word	0x2000f9c0
 8015c00:	2000f9c8 	.word	0x2000f9c8

08015c04 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015c04:	b590      	push	{r4, r7, lr}
 8015c06:	b085      	sub	sp, #20
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d109      	bne.n	8015c26 <tcp_process_refused_data+0x22>
 8015c12:	4b37      	ldr	r3, [pc, #220]	; (8015cf0 <tcp_process_refused_data+0xec>)
 8015c14:	f240 6209 	movw	r2, #1545	; 0x609
 8015c18:	4936      	ldr	r1, [pc, #216]	; (8015cf4 <tcp_process_refused_data+0xf0>)
 8015c1a:	4837      	ldr	r0, [pc, #220]	; (8015cf8 <tcp_process_refused_data+0xf4>)
 8015c1c:	f008 fbaa 	bl	801e374 <iprintf>
 8015c20:	f06f 030f 	mvn.w	r3, #15
 8015c24:	e060      	b.n	8015ce8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015c2a:	7b5b      	ldrb	r3, [r3, #13]
 8015c2c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015c32:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	2200      	movs	r2, #0
 8015c38:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d00b      	beq.n	8015c5c <tcp_process_refused_data+0x58>
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	6918      	ldr	r0, [r3, #16]
 8015c4e:	2300      	movs	r3, #0
 8015c50:	68ba      	ldr	r2, [r7, #8]
 8015c52:	6879      	ldr	r1, [r7, #4]
 8015c54:	47a0      	blx	r4
 8015c56:	4603      	mov	r3, r0
 8015c58:	73fb      	strb	r3, [r7, #15]
 8015c5a:	e007      	b.n	8015c6c <tcp_process_refused_data+0x68>
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	68ba      	ldr	r2, [r7, #8]
 8015c60:	6879      	ldr	r1, [r7, #4]
 8015c62:	2000      	movs	r0, #0
 8015c64:	f000 f8a4 	bl	8015db0 <tcp_recv_null>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d12a      	bne.n	8015cca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015c74:	7bbb      	ldrb	r3, [r7, #14]
 8015c76:	f003 0320 	and.w	r3, r3, #32
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d033      	beq.n	8015ce6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015c86:	d005      	beq.n	8015c94 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c8c:	3301      	adds	r3, #1
 8015c8e:	b29a      	uxth	r2, r3
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d00b      	beq.n	8015cb6 <tcp_process_refused_data+0xb2>
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	6918      	ldr	r0, [r3, #16]
 8015ca8:	2300      	movs	r3, #0
 8015caa:	2200      	movs	r2, #0
 8015cac:	6879      	ldr	r1, [r7, #4]
 8015cae:	47a0      	blx	r4
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	73fb      	strb	r3, [r7, #15]
 8015cb4:	e001      	b.n	8015cba <tcp_process_refused_data+0xb6>
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cbe:	f113 0f0d 	cmn.w	r3, #13
 8015cc2:	d110      	bne.n	8015ce6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015cc4:	f06f 030c 	mvn.w	r3, #12
 8015cc8:	e00e      	b.n	8015ce8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cce:	f113 0f0d 	cmn.w	r3, #13
 8015cd2:	d102      	bne.n	8015cda <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015cd4:	f06f 030c 	mvn.w	r3, #12
 8015cd8:	e006      	b.n	8015ce8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	68ba      	ldr	r2, [r7, #8]
 8015cde:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8015ce0:	f06f 0304 	mvn.w	r3, #4
 8015ce4:	e000      	b.n	8015ce8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015ce6:	2300      	movs	r3, #0
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3714      	adds	r7, #20
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd90      	pop	{r4, r7, pc}
 8015cf0:	080213c4 	.word	0x080213c4
 8015cf4:	080218d4 	.word	0x080218d4
 8015cf8:	08021408 	.word	0x08021408

08015cfc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b084      	sub	sp, #16
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015d04:	e007      	b.n	8015d16 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015d0c:	6878      	ldr	r0, [r7, #4]
 8015d0e:	f000 f80a 	bl	8015d26 <tcp_seg_free>
    seg = next;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d1f4      	bne.n	8015d06 <tcp_segs_free+0xa>
  }
}
 8015d1c:	bf00      	nop
 8015d1e:	bf00      	nop
 8015d20:	3710      	adds	r7, #16
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}

08015d26 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015d26:	b580      	push	{r7, lr}
 8015d28:	b082      	sub	sp, #8
 8015d2a:	af00      	add	r7, sp, #0
 8015d2c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d00c      	beq.n	8015d4e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d004      	beq.n	8015d46 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	685b      	ldr	r3, [r3, #4]
 8015d40:	4618      	mov	r0, r3
 8015d42:	f7fe fb6d 	bl	8014420 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015d46:	6879      	ldr	r1, [r7, #4]
 8015d48:	2003      	movs	r0, #3
 8015d4a:	f7fd fb51 	bl	80133f0 <memp_free>
  }
}
 8015d4e:	bf00      	nop
 8015d50:	3708      	adds	r7, #8
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}
	...

08015d58 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b084      	sub	sp, #16
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d106      	bne.n	8015d74 <tcp_seg_copy+0x1c>
 8015d66:	4b0f      	ldr	r3, [pc, #60]	; (8015da4 <tcp_seg_copy+0x4c>)
 8015d68:	f240 6282 	movw	r2, #1666	; 0x682
 8015d6c:	490e      	ldr	r1, [pc, #56]	; (8015da8 <tcp_seg_copy+0x50>)
 8015d6e:	480f      	ldr	r0, [pc, #60]	; (8015dac <tcp_seg_copy+0x54>)
 8015d70:	f008 fb00 	bl	801e374 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015d74:	2003      	movs	r0, #3
 8015d76:	f7fd fac5 	bl	8013304 <memp_malloc>
 8015d7a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d101      	bne.n	8015d86 <tcp_seg_copy+0x2e>
    return NULL;
 8015d82:	2300      	movs	r3, #0
 8015d84:	e00a      	b.n	8015d9c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015d86:	2210      	movs	r2, #16
 8015d88:	6879      	ldr	r1, [r7, #4]
 8015d8a:	68f8      	ldr	r0, [r7, #12]
 8015d8c:	f008 f9e2 	bl	801e154 <memcpy>
  pbuf_ref(cseg->p);
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	685b      	ldr	r3, [r3, #4]
 8015d94:	4618      	mov	r0, r3
 8015d96:	f7fe fbe9 	bl	801456c <pbuf_ref>
  return cseg;
 8015d9a:	68fb      	ldr	r3, [r7, #12]
}
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	3710      	adds	r7, #16
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}
 8015da4:	080213c4 	.word	0x080213c4
 8015da8:	08021918 	.word	0x08021918
 8015dac:	08021408 	.word	0x08021408

08015db0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b084      	sub	sp, #16
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	60f8      	str	r0, [r7, #12]
 8015db8:	60b9      	str	r1, [r7, #8]
 8015dba:	607a      	str	r2, [r7, #4]
 8015dbc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015dbe:	68bb      	ldr	r3, [r7, #8]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d109      	bne.n	8015dd8 <tcp_recv_null+0x28>
 8015dc4:	4b12      	ldr	r3, [pc, #72]	; (8015e10 <tcp_recv_null+0x60>)
 8015dc6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015dca:	4912      	ldr	r1, [pc, #72]	; (8015e14 <tcp_recv_null+0x64>)
 8015dcc:	4812      	ldr	r0, [pc, #72]	; (8015e18 <tcp_recv_null+0x68>)
 8015dce:	f008 fad1 	bl	801e374 <iprintf>
 8015dd2:	f06f 030f 	mvn.w	r3, #15
 8015dd6:	e016      	b.n	8015e06 <tcp_recv_null+0x56>

  if (p != NULL) {
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d009      	beq.n	8015df2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	891b      	ldrh	r3, [r3, #8]
 8015de2:	4619      	mov	r1, r3
 8015de4:	68b8      	ldr	r0, [r7, #8]
 8015de6:	f7ff fad3 	bl	8015390 <tcp_recved>
    pbuf_free(p);
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f7fe fb18 	bl	8014420 <pbuf_free>
 8015df0:	e008      	b.n	8015e04 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d104      	bne.n	8015e04 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015dfa:	68b8      	ldr	r0, [r7, #8]
 8015dfc:	f7fe ffba 	bl	8014d74 <tcp_close>
 8015e00:	4603      	mov	r3, r0
 8015e02:	e000      	b.n	8015e06 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015e04:	2300      	movs	r3, #0
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3710      	adds	r7, #16
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}
 8015e0e:	bf00      	nop
 8015e10:	080213c4 	.word	0x080213c4
 8015e14:	08021934 	.word	0x08021934
 8015e18:	08021408 	.word	0x08021408

08015e1c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b086      	sub	sp, #24
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	4603      	mov	r3, r0
 8015e24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	db01      	blt.n	8015e32 <tcp_kill_prio+0x16>
 8015e2e:	79fb      	ldrb	r3, [r7, #7]
 8015e30:	e000      	b.n	8015e34 <tcp_kill_prio+0x18>
 8015e32:	237f      	movs	r3, #127	; 0x7f
 8015e34:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015e36:	7afb      	ldrb	r3, [r7, #11]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d034      	beq.n	8015ea6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015e3c:	7afb      	ldrb	r3, [r7, #11]
 8015e3e:	3b01      	subs	r3, #1
 8015e40:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015e42:	2300      	movs	r3, #0
 8015e44:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015e46:	2300      	movs	r3, #0
 8015e48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e4a:	4b19      	ldr	r3, [pc, #100]	; (8015eb0 <tcp_kill_prio+0x94>)
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	617b      	str	r3, [r7, #20]
 8015e50:	e01f      	b.n	8015e92 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015e52:	697b      	ldr	r3, [r7, #20]
 8015e54:	7d5b      	ldrb	r3, [r3, #21]
 8015e56:	7afa      	ldrb	r2, [r7, #11]
 8015e58:	429a      	cmp	r2, r3
 8015e5a:	d80c      	bhi.n	8015e76 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015e5c:	697b      	ldr	r3, [r7, #20]
 8015e5e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015e60:	7afa      	ldrb	r2, [r7, #11]
 8015e62:	429a      	cmp	r2, r3
 8015e64:	d112      	bne.n	8015e8c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015e66:	4b13      	ldr	r3, [pc, #76]	; (8015eb4 <tcp_kill_prio+0x98>)
 8015e68:	681a      	ldr	r2, [r3, #0]
 8015e6a:	697b      	ldr	r3, [r7, #20]
 8015e6c:	6a1b      	ldr	r3, [r3, #32]
 8015e6e:	1ad3      	subs	r3, r2, r3
 8015e70:	68fa      	ldr	r2, [r7, #12]
 8015e72:	429a      	cmp	r2, r3
 8015e74:	d80a      	bhi.n	8015e8c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015e76:	4b0f      	ldr	r3, [pc, #60]	; (8015eb4 <tcp_kill_prio+0x98>)
 8015e78:	681a      	ldr	r2, [r3, #0]
 8015e7a:	697b      	ldr	r3, [r7, #20]
 8015e7c:	6a1b      	ldr	r3, [r3, #32]
 8015e7e:	1ad3      	subs	r3, r2, r3
 8015e80:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015e82:	697b      	ldr	r3, [r7, #20]
 8015e84:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015e86:	697b      	ldr	r3, [r7, #20]
 8015e88:	7d5b      	ldrb	r3, [r3, #21]
 8015e8a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	68db      	ldr	r3, [r3, #12]
 8015e90:	617b      	str	r3, [r7, #20]
 8015e92:	697b      	ldr	r3, [r7, #20]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d1dc      	bne.n	8015e52 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d004      	beq.n	8015ea8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015e9e:	6938      	ldr	r0, [r7, #16]
 8015ea0:	f7ff f8ae 	bl	8015000 <tcp_abort>
 8015ea4:	e000      	b.n	8015ea8 <tcp_kill_prio+0x8c>
    return;
 8015ea6:	bf00      	nop
  }
}
 8015ea8:	3718      	adds	r7, #24
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	bd80      	pop	{r7, pc}
 8015eae:	bf00      	nop
 8015eb0:	2000f9c0 	.word	0x2000f9c0
 8015eb4:	2000f9b4 	.word	0x2000f9b4

08015eb8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b086      	sub	sp, #24
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015ec2:	79fb      	ldrb	r3, [r7, #7]
 8015ec4:	2b08      	cmp	r3, #8
 8015ec6:	d009      	beq.n	8015edc <tcp_kill_state+0x24>
 8015ec8:	79fb      	ldrb	r3, [r7, #7]
 8015eca:	2b09      	cmp	r3, #9
 8015ecc:	d006      	beq.n	8015edc <tcp_kill_state+0x24>
 8015ece:	4b1a      	ldr	r3, [pc, #104]	; (8015f38 <tcp_kill_state+0x80>)
 8015ed0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8015ed4:	4919      	ldr	r1, [pc, #100]	; (8015f3c <tcp_kill_state+0x84>)
 8015ed6:	481a      	ldr	r0, [pc, #104]	; (8015f40 <tcp_kill_state+0x88>)
 8015ed8:	f008 fa4c 	bl	801e374 <iprintf>

  inactivity = 0;
 8015edc:	2300      	movs	r3, #0
 8015ede:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ee4:	4b17      	ldr	r3, [pc, #92]	; (8015f44 <tcp_kill_state+0x8c>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	617b      	str	r3, [r7, #20]
 8015eea:	e017      	b.n	8015f1c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015eec:	697b      	ldr	r3, [r7, #20]
 8015eee:	7d1b      	ldrb	r3, [r3, #20]
 8015ef0:	79fa      	ldrb	r2, [r7, #7]
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	d10f      	bne.n	8015f16 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015ef6:	4b14      	ldr	r3, [pc, #80]	; (8015f48 <tcp_kill_state+0x90>)
 8015ef8:	681a      	ldr	r2, [r3, #0]
 8015efa:	697b      	ldr	r3, [r7, #20]
 8015efc:	6a1b      	ldr	r3, [r3, #32]
 8015efe:	1ad3      	subs	r3, r2, r3
 8015f00:	68fa      	ldr	r2, [r7, #12]
 8015f02:	429a      	cmp	r2, r3
 8015f04:	d807      	bhi.n	8015f16 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015f06:	4b10      	ldr	r3, [pc, #64]	; (8015f48 <tcp_kill_state+0x90>)
 8015f08:	681a      	ldr	r2, [r3, #0]
 8015f0a:	697b      	ldr	r3, [r7, #20]
 8015f0c:	6a1b      	ldr	r3, [r3, #32]
 8015f0e:	1ad3      	subs	r3, r2, r3
 8015f10:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015f12:	697b      	ldr	r3, [r7, #20]
 8015f14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f16:	697b      	ldr	r3, [r7, #20]
 8015f18:	68db      	ldr	r3, [r3, #12]
 8015f1a:	617b      	str	r3, [r7, #20]
 8015f1c:	697b      	ldr	r3, [r7, #20]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d1e4      	bne.n	8015eec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015f22:	693b      	ldr	r3, [r7, #16]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d003      	beq.n	8015f30 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015f28:	2100      	movs	r1, #0
 8015f2a:	6938      	ldr	r0, [r7, #16]
 8015f2c:	f7fe ffaa 	bl	8014e84 <tcp_abandon>
  }
}
 8015f30:	bf00      	nop
 8015f32:	3718      	adds	r7, #24
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	080213c4 	.word	0x080213c4
 8015f3c:	08021950 	.word	0x08021950
 8015f40:	08021408 	.word	0x08021408
 8015f44:	2000f9c0 	.word	0x2000f9c0
 8015f48:	2000f9b4 	.word	0x2000f9b4

08015f4c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b084      	sub	sp, #16
 8015f50:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015f52:	2300      	movs	r3, #0
 8015f54:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015f56:	2300      	movs	r3, #0
 8015f58:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f5a:	4b12      	ldr	r3, [pc, #72]	; (8015fa4 <tcp_kill_timewait+0x58>)
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	60fb      	str	r3, [r7, #12]
 8015f60:	e012      	b.n	8015f88 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015f62:	4b11      	ldr	r3, [pc, #68]	; (8015fa8 <tcp_kill_timewait+0x5c>)
 8015f64:	681a      	ldr	r2, [r3, #0]
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	6a1b      	ldr	r3, [r3, #32]
 8015f6a:	1ad3      	subs	r3, r2, r3
 8015f6c:	687a      	ldr	r2, [r7, #4]
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d807      	bhi.n	8015f82 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015f72:	4b0d      	ldr	r3, [pc, #52]	; (8015fa8 <tcp_kill_timewait+0x5c>)
 8015f74:	681a      	ldr	r2, [r3, #0]
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	6a1b      	ldr	r3, [r3, #32]
 8015f7a:	1ad3      	subs	r3, r2, r3
 8015f7c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	68db      	ldr	r3, [r3, #12]
 8015f86:	60fb      	str	r3, [r7, #12]
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d1e9      	bne.n	8015f62 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015f8e:	68bb      	ldr	r3, [r7, #8]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d002      	beq.n	8015f9a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015f94:	68b8      	ldr	r0, [r7, #8]
 8015f96:	f7ff f833 	bl	8015000 <tcp_abort>
  }
}
 8015f9a:	bf00      	nop
 8015f9c:	3710      	adds	r7, #16
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bd80      	pop	{r7, pc}
 8015fa2:	bf00      	nop
 8015fa4:	2000f9c4 	.word	0x2000f9c4
 8015fa8:	2000f9b4 	.word	0x2000f9b4

08015fac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b082      	sub	sp, #8
 8015fb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8015fb2:	4b10      	ldr	r3, [pc, #64]	; (8015ff4 <tcp_handle_closepend+0x48>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015fb8:	e014      	b.n	8015fe4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	68db      	ldr	r3, [r3, #12]
 8015fbe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	8b5b      	ldrh	r3, [r3, #26]
 8015fc4:	f003 0308 	and.w	r3, r3, #8
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d009      	beq.n	8015fe0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	8b5b      	ldrh	r3, [r3, #26]
 8015fd0:	f023 0308 	bic.w	r3, r3, #8
 8015fd4:	b29a      	uxth	r2, r3
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015fda:	6878      	ldr	r0, [r7, #4]
 8015fdc:	f7fe fe60 	bl	8014ca0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015fe0:	683b      	ldr	r3, [r7, #0]
 8015fe2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d1e7      	bne.n	8015fba <tcp_handle_closepend+0xe>
  }
}
 8015fea:	bf00      	nop
 8015fec:	bf00      	nop
 8015fee:	3708      	adds	r7, #8
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	bd80      	pop	{r7, pc}
 8015ff4:	2000f9c0 	.word	0x2000f9c0

08015ff8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	4603      	mov	r3, r0
 8016000:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016002:	2001      	movs	r0, #1
 8016004:	f7fd f97e 	bl	8013304 <memp_malloc>
 8016008:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d126      	bne.n	801605e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016010:	f7ff ffcc 	bl	8015fac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016014:	f7ff ff9a 	bl	8015f4c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016018:	2001      	movs	r0, #1
 801601a:	f7fd f973 	bl	8013304 <memp_malloc>
 801601e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d11b      	bne.n	801605e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016026:	2009      	movs	r0, #9
 8016028:	f7ff ff46 	bl	8015eb8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801602c:	2001      	movs	r0, #1
 801602e:	f7fd f969 	bl	8013304 <memp_malloc>
 8016032:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d111      	bne.n	801605e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801603a:	2008      	movs	r0, #8
 801603c:	f7ff ff3c 	bl	8015eb8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016040:	2001      	movs	r0, #1
 8016042:	f7fd f95f 	bl	8013304 <memp_malloc>
 8016046:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d107      	bne.n	801605e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801604e:	79fb      	ldrb	r3, [r7, #7]
 8016050:	4618      	mov	r0, r3
 8016052:	f7ff fee3 	bl	8015e1c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016056:	2001      	movs	r0, #1
 8016058:	f7fd f954 	bl	8013304 <memp_malloc>
 801605c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d03f      	beq.n	80160e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016064:	229c      	movs	r2, #156	; 0x9c
 8016066:	2100      	movs	r1, #0
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f008 f89b 	bl	801e1a4 <memset>
    pcb->prio = prio;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	79fa      	ldrb	r2, [r7, #7]
 8016072:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801607a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8016084:	855a      	strh	r2, [r3, #42]	; 0x2a
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	22ff      	movs	r2, #255	; 0xff
 8016092:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f44f 7206 	mov.w	r2, #536	; 0x218
 801609a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	2206      	movs	r2, #6
 80160a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	2206      	movs	r2, #6
 80160a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80160b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	2201      	movs	r2, #1
 80160b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80160ba:	4b0d      	ldr	r3, [pc, #52]	; (80160f0 <tcp_alloc+0xf8>)
 80160bc:	681a      	ldr	r2, [r3, #0]
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80160c2:	4b0c      	ldr	r3, [pc, #48]	; (80160f4 <tcp_alloc+0xfc>)
 80160c4:	781a      	ldrb	r2, [r3, #0]
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80160d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	4a08      	ldr	r2, [pc, #32]	; (80160f8 <tcp_alloc+0x100>)
 80160d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	4a07      	ldr	r2, [pc, #28]	; (80160fc <tcp_alloc+0x104>)
 80160e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80160e4:	68fb      	ldr	r3, [r7, #12]
}
 80160e6:	4618      	mov	r0, r3
 80160e8:	3710      	adds	r7, #16
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	2000f9b4 	.word	0x2000f9b4
 80160f4:	2000f9ca 	.word	0x2000f9ca
 80160f8:	08015db1 	.word	0x08015db1
 80160fc:	006ddd00 	.word	0x006ddd00

08016100 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b084      	sub	sp, #16
 8016104:	af00      	add	r7, sp, #0
 8016106:	4603      	mov	r3, r0
 8016108:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801610a:	2040      	movs	r0, #64	; 0x40
 801610c:	f7ff ff74 	bl	8015ff8 <tcp_alloc>
 8016110:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016112:	68fb      	ldr	r3, [r7, #12]
}
 8016114:	4618      	mov	r0, r3
 8016116:	3710      	adds	r7, #16
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}

0801611c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801611c:	b480      	push	{r7}
 801611e:	b083      	sub	sp, #12
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
 8016124:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d002      	beq.n	8016132 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	683a      	ldr	r2, [r7, #0]
 8016130:	611a      	str	r2, [r3, #16]
  }
}
 8016132:	bf00      	nop
 8016134:	370c      	adds	r7, #12
 8016136:	46bd      	mov	sp, r7
 8016138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613c:	4770      	bx	lr
	...

08016140 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b082      	sub	sp, #8
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
 8016148:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d00e      	beq.n	801616e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	7d1b      	ldrb	r3, [r3, #20]
 8016154:	2b01      	cmp	r3, #1
 8016156:	d106      	bne.n	8016166 <tcp_recv+0x26>
 8016158:	4b07      	ldr	r3, [pc, #28]	; (8016178 <tcp_recv+0x38>)
 801615a:	f240 72df 	movw	r2, #2015	; 0x7df
 801615e:	4907      	ldr	r1, [pc, #28]	; (801617c <tcp_recv+0x3c>)
 8016160:	4807      	ldr	r0, [pc, #28]	; (8016180 <tcp_recv+0x40>)
 8016162:	f008 f907 	bl	801e374 <iprintf>
    pcb->recv = recv;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	683a      	ldr	r2, [r7, #0]
 801616a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801616e:	bf00      	nop
 8016170:	3708      	adds	r7, #8
 8016172:	46bd      	mov	sp, r7
 8016174:	bd80      	pop	{r7, pc}
 8016176:	bf00      	nop
 8016178:	080213c4 	.word	0x080213c4
 801617c:	08021960 	.word	0x08021960
 8016180:	08021408 	.word	0x08021408

08016184 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b082      	sub	sp, #8
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
 801618c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d00e      	beq.n	80161b2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	7d1b      	ldrb	r3, [r3, #20]
 8016198:	2b01      	cmp	r3, #1
 801619a:	d106      	bne.n	80161aa <tcp_sent+0x26>
 801619c:	4b07      	ldr	r3, [pc, #28]	; (80161bc <tcp_sent+0x38>)
 801619e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80161a2:	4907      	ldr	r1, [pc, #28]	; (80161c0 <tcp_sent+0x3c>)
 80161a4:	4807      	ldr	r0, [pc, #28]	; (80161c4 <tcp_sent+0x40>)
 80161a6:	f008 f8e5 	bl	801e374 <iprintf>
    pcb->sent = sent;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	683a      	ldr	r2, [r7, #0]
 80161ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80161b2:	bf00      	nop
 80161b4:	3708      	adds	r7, #8
 80161b6:	46bd      	mov	sp, r7
 80161b8:	bd80      	pop	{r7, pc}
 80161ba:	bf00      	nop
 80161bc:	080213c4 	.word	0x080213c4
 80161c0:	08021988 	.word	0x08021988
 80161c4:	08021408 	.word	0x08021408

080161c8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b082      	sub	sp, #8
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
 80161d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d00e      	beq.n	80161f6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	7d1b      	ldrb	r3, [r3, #20]
 80161dc:	2b01      	cmp	r3, #1
 80161de:	d106      	bne.n	80161ee <tcp_err+0x26>
 80161e0:	4b07      	ldr	r3, [pc, #28]	; (8016200 <tcp_err+0x38>)
 80161e2:	f640 020d 	movw	r2, #2061	; 0x80d
 80161e6:	4907      	ldr	r1, [pc, #28]	; (8016204 <tcp_err+0x3c>)
 80161e8:	4807      	ldr	r0, [pc, #28]	; (8016208 <tcp_err+0x40>)
 80161ea:	f008 f8c3 	bl	801e374 <iprintf>
    pcb->errf = err;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	683a      	ldr	r2, [r7, #0]
 80161f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80161f6:	bf00      	nop
 80161f8:	3708      	adds	r7, #8
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}
 80161fe:	bf00      	nop
 8016200:	080213c4 	.word	0x080213c4
 8016204:	080219b0 	.word	0x080219b0
 8016208:	08021408 	.word	0x08021408

0801620c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801620c:	b480      	push	{r7}
 801620e:	b085      	sub	sp, #20
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
 8016214:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d008      	beq.n	801622e <tcp_accept+0x22>
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	7d1b      	ldrb	r3, [r3, #20]
 8016220:	2b01      	cmp	r3, #1
 8016222:	d104      	bne.n	801622e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	683a      	ldr	r2, [r7, #0]
 801622c:	619a      	str	r2, [r3, #24]
  }
}
 801622e:	bf00      	nop
 8016230:	3714      	adds	r7, #20
 8016232:	46bd      	mov	sp, r7
 8016234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016238:	4770      	bx	lr
	...

0801623c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b084      	sub	sp, #16
 8016240:	af00      	add	r7, sp, #0
 8016242:	60f8      	str	r0, [r7, #12]
 8016244:	60b9      	str	r1, [r7, #8]
 8016246:	4613      	mov	r3, r2
 8016248:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d107      	bne.n	8016260 <tcp_poll+0x24>
 8016250:	4b0e      	ldr	r3, [pc, #56]	; (801628c <tcp_poll+0x50>)
 8016252:	f640 023d 	movw	r2, #2109	; 0x83d
 8016256:	490e      	ldr	r1, [pc, #56]	; (8016290 <tcp_poll+0x54>)
 8016258:	480e      	ldr	r0, [pc, #56]	; (8016294 <tcp_poll+0x58>)
 801625a:	f008 f88b 	bl	801e374 <iprintf>
 801625e:	e011      	b.n	8016284 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	7d1b      	ldrb	r3, [r3, #20]
 8016264:	2b01      	cmp	r3, #1
 8016266:	d106      	bne.n	8016276 <tcp_poll+0x3a>
 8016268:	4b08      	ldr	r3, [pc, #32]	; (801628c <tcp_poll+0x50>)
 801626a:	f640 023e 	movw	r2, #2110	; 0x83e
 801626e:	490a      	ldr	r1, [pc, #40]	; (8016298 <tcp_poll+0x5c>)
 8016270:	4808      	ldr	r0, [pc, #32]	; (8016294 <tcp_poll+0x58>)
 8016272:	f008 f87f 	bl	801e374 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	68ba      	ldr	r2, [r7, #8]
 801627a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	79fa      	ldrb	r2, [r7, #7]
 8016282:	775a      	strb	r2, [r3, #29]
}
 8016284:	3710      	adds	r7, #16
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}
 801628a:	bf00      	nop
 801628c:	080213c4 	.word	0x080213c4
 8016290:	080219d8 	.word	0x080219d8
 8016294:	08021408 	.word	0x08021408
 8016298:	080219f0 	.word	0x080219f0

0801629c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b082      	sub	sp, #8
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d107      	bne.n	80162ba <tcp_pcb_purge+0x1e>
 80162aa:	4b21      	ldr	r3, [pc, #132]	; (8016330 <tcp_pcb_purge+0x94>)
 80162ac:	f640 0251 	movw	r2, #2129	; 0x851
 80162b0:	4920      	ldr	r1, [pc, #128]	; (8016334 <tcp_pcb_purge+0x98>)
 80162b2:	4821      	ldr	r0, [pc, #132]	; (8016338 <tcp_pcb_purge+0x9c>)
 80162b4:	f008 f85e 	bl	801e374 <iprintf>
 80162b8:	e037      	b.n	801632a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	7d1b      	ldrb	r3, [r3, #20]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d033      	beq.n	801632a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80162c6:	2b0a      	cmp	r3, #10
 80162c8:	d02f      	beq.n	801632a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80162ce:	2b01      	cmp	r3, #1
 80162d0:	d02b      	beq.n	801632a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d007      	beq.n	80162ea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80162de:	4618      	mov	r0, r3
 80162e0:	f7fe f89e 	bl	8014420 <pbuf_free>
      pcb->refused_data = NULL;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2200      	movs	r2, #0
 80162e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d002      	beq.n	80162f8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	f000 f986 	bl	8016604 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80162fe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016304:	4618      	mov	r0, r3
 8016306:	f7ff fcf9 	bl	8015cfc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801630e:	4618      	mov	r0, r3
 8016310:	f7ff fcf4 	bl	8015cfc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2200      	movs	r2, #0
 8016318:	66da      	str	r2, [r3, #108]	; 0x6c
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	2200      	movs	r2, #0
 8016326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801632a:	3708      	adds	r7, #8
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}
 8016330:	080213c4 	.word	0x080213c4
 8016334:	08021a10 	.word	0x08021a10
 8016338:	08021408 	.word	0x08021408

0801633c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b084      	sub	sp, #16
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016346:	683b      	ldr	r3, [r7, #0]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d106      	bne.n	801635a <tcp_pcb_remove+0x1e>
 801634c:	4b3e      	ldr	r3, [pc, #248]	; (8016448 <tcp_pcb_remove+0x10c>)
 801634e:	f640 0283 	movw	r2, #2179	; 0x883
 8016352:	493e      	ldr	r1, [pc, #248]	; (801644c <tcp_pcb_remove+0x110>)
 8016354:	483e      	ldr	r0, [pc, #248]	; (8016450 <tcp_pcb_remove+0x114>)
 8016356:	f008 f80d 	bl	801e374 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d106      	bne.n	801636e <tcp_pcb_remove+0x32>
 8016360:	4b39      	ldr	r3, [pc, #228]	; (8016448 <tcp_pcb_remove+0x10c>)
 8016362:	f640 0284 	movw	r2, #2180	; 0x884
 8016366:	493b      	ldr	r1, [pc, #236]	; (8016454 <tcp_pcb_remove+0x118>)
 8016368:	4839      	ldr	r0, [pc, #228]	; (8016450 <tcp_pcb_remove+0x114>)
 801636a:	f008 f803 	bl	801e374 <iprintf>

  TCP_RMV(pcblist, pcb);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	683a      	ldr	r2, [r7, #0]
 8016374:	429a      	cmp	r2, r3
 8016376:	d105      	bne.n	8016384 <tcp_pcb_remove+0x48>
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	68da      	ldr	r2, [r3, #12]
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	601a      	str	r2, [r3, #0]
 8016382:	e013      	b.n	80163ac <tcp_pcb_remove+0x70>
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	60fb      	str	r3, [r7, #12]
 801638a:	e00c      	b.n	80163a6 <tcp_pcb_remove+0x6a>
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	68db      	ldr	r3, [r3, #12]
 8016390:	683a      	ldr	r2, [r7, #0]
 8016392:	429a      	cmp	r2, r3
 8016394:	d104      	bne.n	80163a0 <tcp_pcb_remove+0x64>
 8016396:	683b      	ldr	r3, [r7, #0]
 8016398:	68da      	ldr	r2, [r3, #12]
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	60da      	str	r2, [r3, #12]
 801639e:	e005      	b.n	80163ac <tcp_pcb_remove+0x70>
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	68db      	ldr	r3, [r3, #12]
 80163a4:	60fb      	str	r3, [r7, #12]
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d1ef      	bne.n	801638c <tcp_pcb_remove+0x50>
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	2200      	movs	r2, #0
 80163b0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80163b2:	6838      	ldr	r0, [r7, #0]
 80163b4:	f7ff ff72 	bl	801629c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80163b8:	683b      	ldr	r3, [r7, #0]
 80163ba:	7d1b      	ldrb	r3, [r3, #20]
 80163bc:	2b0a      	cmp	r3, #10
 80163be:	d013      	beq.n	80163e8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80163c0:	683b      	ldr	r3, [r7, #0]
 80163c2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80163c4:	2b01      	cmp	r3, #1
 80163c6:	d00f      	beq.n	80163e8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80163c8:	683b      	ldr	r3, [r7, #0]
 80163ca:	8b5b      	ldrh	r3, [r3, #26]
 80163cc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d009      	beq.n	80163e8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	8b5b      	ldrh	r3, [r3, #26]
 80163d8:	f043 0302 	orr.w	r3, r3, #2
 80163dc:	b29a      	uxth	r2, r3
 80163de:	683b      	ldr	r3, [r7, #0]
 80163e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80163e2:	6838      	ldr	r0, [r7, #0]
 80163e4:	f003 fbc6 	bl	8019b74 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	7d1b      	ldrb	r3, [r3, #20]
 80163ec:	2b01      	cmp	r3, #1
 80163ee:	d020      	beq.n	8016432 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80163f0:	683b      	ldr	r3, [r7, #0]
 80163f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d006      	beq.n	8016406 <tcp_pcb_remove+0xca>
 80163f8:	4b13      	ldr	r3, [pc, #76]	; (8016448 <tcp_pcb_remove+0x10c>)
 80163fa:	f640 0293 	movw	r2, #2195	; 0x893
 80163fe:	4916      	ldr	r1, [pc, #88]	; (8016458 <tcp_pcb_remove+0x11c>)
 8016400:	4813      	ldr	r0, [pc, #76]	; (8016450 <tcp_pcb_remove+0x114>)
 8016402:	f007 ffb7 	bl	801e374 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801640a:	2b00      	cmp	r3, #0
 801640c:	d006      	beq.n	801641c <tcp_pcb_remove+0xe0>
 801640e:	4b0e      	ldr	r3, [pc, #56]	; (8016448 <tcp_pcb_remove+0x10c>)
 8016410:	f640 0294 	movw	r2, #2196	; 0x894
 8016414:	4911      	ldr	r1, [pc, #68]	; (801645c <tcp_pcb_remove+0x120>)
 8016416:	480e      	ldr	r0, [pc, #56]	; (8016450 <tcp_pcb_remove+0x114>)
 8016418:	f007 ffac 	bl	801e374 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801641c:	683b      	ldr	r3, [r7, #0]
 801641e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016420:	2b00      	cmp	r3, #0
 8016422:	d006      	beq.n	8016432 <tcp_pcb_remove+0xf6>
 8016424:	4b08      	ldr	r3, [pc, #32]	; (8016448 <tcp_pcb_remove+0x10c>)
 8016426:	f640 0296 	movw	r2, #2198	; 0x896
 801642a:	490d      	ldr	r1, [pc, #52]	; (8016460 <tcp_pcb_remove+0x124>)
 801642c:	4808      	ldr	r0, [pc, #32]	; (8016450 <tcp_pcb_remove+0x114>)
 801642e:	f007 ffa1 	bl	801e374 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016432:	683b      	ldr	r3, [r7, #0]
 8016434:	2200      	movs	r2, #0
 8016436:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016438:	683b      	ldr	r3, [r7, #0]
 801643a:	2200      	movs	r2, #0
 801643c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801643e:	bf00      	nop
 8016440:	3710      	adds	r7, #16
 8016442:	46bd      	mov	sp, r7
 8016444:	bd80      	pop	{r7, pc}
 8016446:	bf00      	nop
 8016448:	080213c4 	.word	0x080213c4
 801644c:	08021a2c 	.word	0x08021a2c
 8016450:	08021408 	.word	0x08021408
 8016454:	08021a48 	.word	0x08021a48
 8016458:	08021a68 	.word	0x08021a68
 801645c:	08021a80 	.word	0x08021a80
 8016460:	08021a9c 	.word	0x08021a9c

08016464 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b082      	sub	sp, #8
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d106      	bne.n	8016480 <tcp_next_iss+0x1c>
 8016472:	4b0a      	ldr	r3, [pc, #40]	; (801649c <tcp_next_iss+0x38>)
 8016474:	f640 02af 	movw	r2, #2223	; 0x8af
 8016478:	4909      	ldr	r1, [pc, #36]	; (80164a0 <tcp_next_iss+0x3c>)
 801647a:	480a      	ldr	r0, [pc, #40]	; (80164a4 <tcp_next_iss+0x40>)
 801647c:	f007 ff7a 	bl	801e374 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016480:	4b09      	ldr	r3, [pc, #36]	; (80164a8 <tcp_next_iss+0x44>)
 8016482:	681a      	ldr	r2, [r3, #0]
 8016484:	4b09      	ldr	r3, [pc, #36]	; (80164ac <tcp_next_iss+0x48>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	4413      	add	r3, r2
 801648a:	4a07      	ldr	r2, [pc, #28]	; (80164a8 <tcp_next_iss+0x44>)
 801648c:	6013      	str	r3, [r2, #0]
  return iss;
 801648e:	4b06      	ldr	r3, [pc, #24]	; (80164a8 <tcp_next_iss+0x44>)
 8016490:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016492:	4618      	mov	r0, r3
 8016494:	3708      	adds	r7, #8
 8016496:	46bd      	mov	sp, r7
 8016498:	bd80      	pop	{r7, pc}
 801649a:	bf00      	nop
 801649c:	080213c4 	.word	0x080213c4
 80164a0:	08021ab4 	.word	0x08021ab4
 80164a4:	08021408 	.word	0x08021408
 80164a8:	20000028 	.word	0x20000028
 80164ac:	2000f9b4 	.word	0x2000f9b4

080164b0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b086      	sub	sp, #24
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	4603      	mov	r3, r0
 80164b8:	60b9      	str	r1, [r7, #8]
 80164ba:	607a      	str	r2, [r7, #4]
 80164bc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d106      	bne.n	80164d2 <tcp_eff_send_mss_netif+0x22>
 80164c4:	4b14      	ldr	r3, [pc, #80]	; (8016518 <tcp_eff_send_mss_netif+0x68>)
 80164c6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80164ca:	4914      	ldr	r1, [pc, #80]	; (801651c <tcp_eff_send_mss_netif+0x6c>)
 80164cc:	4814      	ldr	r0, [pc, #80]	; (8016520 <tcp_eff_send_mss_netif+0x70>)
 80164ce:	f007 ff51 	bl	801e374 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80164d2:	68bb      	ldr	r3, [r7, #8]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d101      	bne.n	80164dc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80164d8:	89fb      	ldrh	r3, [r7, #14]
 80164da:	e019      	b.n	8016510 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80164dc:	68bb      	ldr	r3, [r7, #8]
 80164de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80164e0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80164e2:	8afb      	ldrh	r3, [r7, #22]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d012      	beq.n	801650e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80164e8:	2328      	movs	r3, #40	; 0x28
 80164ea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80164ec:	8afa      	ldrh	r2, [r7, #22]
 80164ee:	8abb      	ldrh	r3, [r7, #20]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	d904      	bls.n	80164fe <tcp_eff_send_mss_netif+0x4e>
 80164f4:	8afa      	ldrh	r2, [r7, #22]
 80164f6:	8abb      	ldrh	r3, [r7, #20]
 80164f8:	1ad3      	subs	r3, r2, r3
 80164fa:	b29b      	uxth	r3, r3
 80164fc:	e000      	b.n	8016500 <tcp_eff_send_mss_netif+0x50>
 80164fe:	2300      	movs	r3, #0
 8016500:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016502:	8a7a      	ldrh	r2, [r7, #18]
 8016504:	89fb      	ldrh	r3, [r7, #14]
 8016506:	4293      	cmp	r3, r2
 8016508:	bf28      	it	cs
 801650a:	4613      	movcs	r3, r2
 801650c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801650e:	89fb      	ldrh	r3, [r7, #14]
}
 8016510:	4618      	mov	r0, r3
 8016512:	3718      	adds	r7, #24
 8016514:	46bd      	mov	sp, r7
 8016516:	bd80      	pop	{r7, pc}
 8016518:	080213c4 	.word	0x080213c4
 801651c:	08021ad0 	.word	0x08021ad0
 8016520:	08021408 	.word	0x08021408

08016524 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b084      	sub	sp, #16
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
 801652c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801652e:	683b      	ldr	r3, [r7, #0]
 8016530:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d119      	bne.n	801656c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016538:	4b10      	ldr	r3, [pc, #64]	; (801657c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801653a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801653e:	4910      	ldr	r1, [pc, #64]	; (8016580 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016540:	4810      	ldr	r0, [pc, #64]	; (8016584 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016542:	f007 ff17 	bl	801e374 <iprintf>

  while (pcb != NULL) {
 8016546:	e011      	b.n	801656c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	681a      	ldr	r2, [r3, #0]
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	429a      	cmp	r2, r3
 8016552:	d108      	bne.n	8016566 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	68db      	ldr	r3, [r3, #12]
 8016558:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801655a:	68f8      	ldr	r0, [r7, #12]
 801655c:	f7fe fd50 	bl	8015000 <tcp_abort>
      pcb = next;
 8016560:	68bb      	ldr	r3, [r7, #8]
 8016562:	60fb      	str	r3, [r7, #12]
 8016564:	e002      	b.n	801656c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	68db      	ldr	r3, [r3, #12]
 801656a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d1ea      	bne.n	8016548 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016572:	bf00      	nop
 8016574:	bf00      	nop
 8016576:	3710      	adds	r7, #16
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}
 801657c:	080213c4 	.word	0x080213c4
 8016580:	08021af8 	.word	0x08021af8
 8016584:	08021408 	.word	0x08021408

08016588 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b084      	sub	sp, #16
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
 8016590:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d02a      	beq.n	80165ee <tcp_netif_ip_addr_changed+0x66>
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d026      	beq.n	80165ee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80165a0:	4b15      	ldr	r3, [pc, #84]	; (80165f8 <tcp_netif_ip_addr_changed+0x70>)
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	4619      	mov	r1, r3
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f7ff ffbc 	bl	8016524 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80165ac:	4b13      	ldr	r3, [pc, #76]	; (80165fc <tcp_netif_ip_addr_changed+0x74>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	4619      	mov	r1, r3
 80165b2:	6878      	ldr	r0, [r7, #4]
 80165b4:	f7ff ffb6 	bl	8016524 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80165b8:	683b      	ldr	r3, [r7, #0]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d017      	beq.n	80165ee <tcp_netif_ip_addr_changed+0x66>
 80165be:	683b      	ldr	r3, [r7, #0]
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d013      	beq.n	80165ee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80165c6:	4b0e      	ldr	r3, [pc, #56]	; (8016600 <tcp_netif_ip_addr_changed+0x78>)
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	60fb      	str	r3, [r7, #12]
 80165cc:	e00c      	b.n	80165e8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	681a      	ldr	r2, [r3, #0]
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	429a      	cmp	r2, r3
 80165d8:	d103      	bne.n	80165e2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	681a      	ldr	r2, [r3, #0]
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	68db      	ldr	r3, [r3, #12]
 80165e6:	60fb      	str	r3, [r7, #12]
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d1ef      	bne.n	80165ce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80165ee:	bf00      	nop
 80165f0:	3710      	adds	r7, #16
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}
 80165f6:	bf00      	nop
 80165f8:	2000f9c0 	.word	0x2000f9c0
 80165fc:	2000f9b8 	.word	0x2000f9b8
 8016600:	2000f9bc 	.word	0x2000f9bc

08016604 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b082      	sub	sp, #8
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016610:	2b00      	cmp	r3, #0
 8016612:	d007      	beq.n	8016624 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016618:	4618      	mov	r0, r3
 801661a:	f7ff fb6f 	bl	8015cfc <tcp_segs_free>
    pcb->ooseq = NULL;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2200      	movs	r2, #0
 8016622:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016624:	bf00      	nop
 8016626:	3708      	adds	r7, #8
 8016628:	46bd      	mov	sp, r7
 801662a:	bd80      	pop	{r7, pc}

0801662c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801662c:	b590      	push	{r4, r7, lr}
 801662e:	b08d      	sub	sp, #52	; 0x34
 8016630:	af04      	add	r7, sp, #16
 8016632:	6078      	str	r0, [r7, #4]
 8016634:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d105      	bne.n	8016648 <tcp_input+0x1c>
 801663c:	4b9b      	ldr	r3, [pc, #620]	; (80168ac <tcp_input+0x280>)
 801663e:	2283      	movs	r2, #131	; 0x83
 8016640:	499b      	ldr	r1, [pc, #620]	; (80168b0 <tcp_input+0x284>)
 8016642:	489c      	ldr	r0, [pc, #624]	; (80168b4 <tcp_input+0x288>)
 8016644:	f007 fe96 	bl	801e374 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	685b      	ldr	r3, [r3, #4]
 801664c:	4a9a      	ldr	r2, [pc, #616]	; (80168b8 <tcp_input+0x28c>)
 801664e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	895b      	ldrh	r3, [r3, #10]
 8016654:	2b13      	cmp	r3, #19
 8016656:	f240 83d1 	bls.w	8016dfc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801665a:	4b98      	ldr	r3, [pc, #608]	; (80168bc <tcp_input+0x290>)
 801665c:	695b      	ldr	r3, [r3, #20]
 801665e:	4a97      	ldr	r2, [pc, #604]	; (80168bc <tcp_input+0x290>)
 8016660:	6812      	ldr	r2, [r2, #0]
 8016662:	4611      	mov	r1, r2
 8016664:	4618      	mov	r0, r3
 8016666:	f006 f9f3 	bl	801ca50 <ip4_addr_isbroadcast_u32>
 801666a:	4603      	mov	r3, r0
 801666c:	2b00      	cmp	r3, #0
 801666e:	f040 83c7 	bne.w	8016e00 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016672:	4b92      	ldr	r3, [pc, #584]	; (80168bc <tcp_input+0x290>)
 8016674:	695b      	ldr	r3, [r3, #20]
 8016676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801667a:	2be0      	cmp	r3, #224	; 0xe0
 801667c:	f000 83c0 	beq.w	8016e00 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016680:	4b8d      	ldr	r3, [pc, #564]	; (80168b8 <tcp_input+0x28c>)
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	899b      	ldrh	r3, [r3, #12]
 8016686:	b29b      	uxth	r3, r3
 8016688:	4618      	mov	r0, r3
 801668a:	f7fc f963 	bl	8012954 <lwip_htons>
 801668e:	4603      	mov	r3, r0
 8016690:	0b1b      	lsrs	r3, r3, #12
 8016692:	b29b      	uxth	r3, r3
 8016694:	b2db      	uxtb	r3, r3
 8016696:	009b      	lsls	r3, r3, #2
 8016698:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801669a:	7cbb      	ldrb	r3, [r7, #18]
 801669c:	2b13      	cmp	r3, #19
 801669e:	f240 83b1 	bls.w	8016e04 <tcp_input+0x7d8>
 80166a2:	7cbb      	ldrb	r3, [r7, #18]
 80166a4:	b29a      	uxth	r2, r3
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	891b      	ldrh	r3, [r3, #8]
 80166aa:	429a      	cmp	r2, r3
 80166ac:	f200 83aa 	bhi.w	8016e04 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80166b0:	7cbb      	ldrb	r3, [r7, #18]
 80166b2:	b29b      	uxth	r3, r3
 80166b4:	3b14      	subs	r3, #20
 80166b6:	b29a      	uxth	r2, r3
 80166b8:	4b81      	ldr	r3, [pc, #516]	; (80168c0 <tcp_input+0x294>)
 80166ba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80166bc:	4b81      	ldr	r3, [pc, #516]	; (80168c4 <tcp_input+0x298>)
 80166be:	2200      	movs	r2, #0
 80166c0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	895a      	ldrh	r2, [r3, #10]
 80166c6:	7cbb      	ldrb	r3, [r7, #18]
 80166c8:	b29b      	uxth	r3, r3
 80166ca:	429a      	cmp	r2, r3
 80166cc:	d309      	bcc.n	80166e2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80166ce:	4b7c      	ldr	r3, [pc, #496]	; (80168c0 <tcp_input+0x294>)
 80166d0:	881a      	ldrh	r2, [r3, #0]
 80166d2:	4b7d      	ldr	r3, [pc, #500]	; (80168c8 <tcp_input+0x29c>)
 80166d4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80166d6:	7cbb      	ldrb	r3, [r7, #18]
 80166d8:	4619      	mov	r1, r3
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	f7fd fe1a 	bl	8014314 <pbuf_remove_header>
 80166e0:	e04e      	b.n	8016780 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d105      	bne.n	80166f6 <tcp_input+0xca>
 80166ea:	4b70      	ldr	r3, [pc, #448]	; (80168ac <tcp_input+0x280>)
 80166ec:	22c2      	movs	r2, #194	; 0xc2
 80166ee:	4977      	ldr	r1, [pc, #476]	; (80168cc <tcp_input+0x2a0>)
 80166f0:	4870      	ldr	r0, [pc, #448]	; (80168b4 <tcp_input+0x288>)
 80166f2:	f007 fe3f 	bl	801e374 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80166f6:	2114      	movs	r1, #20
 80166f8:	6878      	ldr	r0, [r7, #4]
 80166fa:	f7fd fe0b 	bl	8014314 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	895a      	ldrh	r2, [r3, #10]
 8016702:	4b71      	ldr	r3, [pc, #452]	; (80168c8 <tcp_input+0x29c>)
 8016704:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016706:	4b6e      	ldr	r3, [pc, #440]	; (80168c0 <tcp_input+0x294>)
 8016708:	881a      	ldrh	r2, [r3, #0]
 801670a:	4b6f      	ldr	r3, [pc, #444]	; (80168c8 <tcp_input+0x29c>)
 801670c:	881b      	ldrh	r3, [r3, #0]
 801670e:	1ad3      	subs	r3, r2, r3
 8016710:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016712:	4b6d      	ldr	r3, [pc, #436]	; (80168c8 <tcp_input+0x29c>)
 8016714:	881b      	ldrh	r3, [r3, #0]
 8016716:	4619      	mov	r1, r3
 8016718:	6878      	ldr	r0, [r7, #4]
 801671a:	f7fd fdfb 	bl	8014314 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	895b      	ldrh	r3, [r3, #10]
 8016724:	8a3a      	ldrh	r2, [r7, #16]
 8016726:	429a      	cmp	r2, r3
 8016728:	f200 836e 	bhi.w	8016e08 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	685b      	ldr	r3, [r3, #4]
 8016732:	4a64      	ldr	r2, [pc, #400]	; (80168c4 <tcp_input+0x298>)
 8016734:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	8a3a      	ldrh	r2, [r7, #16]
 801673c:	4611      	mov	r1, r2
 801673e:	4618      	mov	r0, r3
 8016740:	f7fd fde8 	bl	8014314 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	891a      	ldrh	r2, [r3, #8]
 8016748:	8a3b      	ldrh	r3, [r7, #16]
 801674a:	1ad3      	subs	r3, r2, r3
 801674c:	b29a      	uxth	r2, r3
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	895b      	ldrh	r3, [r3, #10]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d005      	beq.n	8016766 <tcp_input+0x13a>
 801675a:	4b54      	ldr	r3, [pc, #336]	; (80168ac <tcp_input+0x280>)
 801675c:	22df      	movs	r2, #223	; 0xdf
 801675e:	495c      	ldr	r1, [pc, #368]	; (80168d0 <tcp_input+0x2a4>)
 8016760:	4854      	ldr	r0, [pc, #336]	; (80168b4 <tcp_input+0x288>)
 8016762:	f007 fe07 	bl	801e374 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	891a      	ldrh	r2, [r3, #8]
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	891b      	ldrh	r3, [r3, #8]
 8016770:	429a      	cmp	r2, r3
 8016772:	d005      	beq.n	8016780 <tcp_input+0x154>
 8016774:	4b4d      	ldr	r3, [pc, #308]	; (80168ac <tcp_input+0x280>)
 8016776:	22e0      	movs	r2, #224	; 0xe0
 8016778:	4956      	ldr	r1, [pc, #344]	; (80168d4 <tcp_input+0x2a8>)
 801677a:	484e      	ldr	r0, [pc, #312]	; (80168b4 <tcp_input+0x288>)
 801677c:	f007 fdfa 	bl	801e374 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016780:	4b4d      	ldr	r3, [pc, #308]	; (80168b8 <tcp_input+0x28c>)
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	881b      	ldrh	r3, [r3, #0]
 8016786:	b29b      	uxth	r3, r3
 8016788:	4a4b      	ldr	r2, [pc, #300]	; (80168b8 <tcp_input+0x28c>)
 801678a:	6814      	ldr	r4, [r2, #0]
 801678c:	4618      	mov	r0, r3
 801678e:	f7fc f8e1 	bl	8012954 <lwip_htons>
 8016792:	4603      	mov	r3, r0
 8016794:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016796:	4b48      	ldr	r3, [pc, #288]	; (80168b8 <tcp_input+0x28c>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	885b      	ldrh	r3, [r3, #2]
 801679c:	b29b      	uxth	r3, r3
 801679e:	4a46      	ldr	r2, [pc, #280]	; (80168b8 <tcp_input+0x28c>)
 80167a0:	6814      	ldr	r4, [r2, #0]
 80167a2:	4618      	mov	r0, r3
 80167a4:	f7fc f8d6 	bl	8012954 <lwip_htons>
 80167a8:	4603      	mov	r3, r0
 80167aa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80167ac:	4b42      	ldr	r3, [pc, #264]	; (80168b8 <tcp_input+0x28c>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	685b      	ldr	r3, [r3, #4]
 80167b2:	4a41      	ldr	r2, [pc, #260]	; (80168b8 <tcp_input+0x28c>)
 80167b4:	6814      	ldr	r4, [r2, #0]
 80167b6:	4618      	mov	r0, r3
 80167b8:	f7fc f8e1 	bl	801297e <lwip_htonl>
 80167bc:	4603      	mov	r3, r0
 80167be:	6063      	str	r3, [r4, #4]
 80167c0:	6863      	ldr	r3, [r4, #4]
 80167c2:	4a45      	ldr	r2, [pc, #276]	; (80168d8 <tcp_input+0x2ac>)
 80167c4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80167c6:	4b3c      	ldr	r3, [pc, #240]	; (80168b8 <tcp_input+0x28c>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	689b      	ldr	r3, [r3, #8]
 80167cc:	4a3a      	ldr	r2, [pc, #232]	; (80168b8 <tcp_input+0x28c>)
 80167ce:	6814      	ldr	r4, [r2, #0]
 80167d0:	4618      	mov	r0, r3
 80167d2:	f7fc f8d4 	bl	801297e <lwip_htonl>
 80167d6:	4603      	mov	r3, r0
 80167d8:	60a3      	str	r3, [r4, #8]
 80167da:	68a3      	ldr	r3, [r4, #8]
 80167dc:	4a3f      	ldr	r2, [pc, #252]	; (80168dc <tcp_input+0x2b0>)
 80167de:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80167e0:	4b35      	ldr	r3, [pc, #212]	; (80168b8 <tcp_input+0x28c>)
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	89db      	ldrh	r3, [r3, #14]
 80167e6:	b29b      	uxth	r3, r3
 80167e8:	4a33      	ldr	r2, [pc, #204]	; (80168b8 <tcp_input+0x28c>)
 80167ea:	6814      	ldr	r4, [r2, #0]
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7fc f8b1 	bl	8012954 <lwip_htons>
 80167f2:	4603      	mov	r3, r0
 80167f4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80167f6:	4b30      	ldr	r3, [pc, #192]	; (80168b8 <tcp_input+0x28c>)
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	899b      	ldrh	r3, [r3, #12]
 80167fc:	b29b      	uxth	r3, r3
 80167fe:	4618      	mov	r0, r3
 8016800:	f7fc f8a8 	bl	8012954 <lwip_htons>
 8016804:	4603      	mov	r3, r0
 8016806:	b2db      	uxtb	r3, r3
 8016808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801680c:	b2da      	uxtb	r2, r3
 801680e:	4b34      	ldr	r3, [pc, #208]	; (80168e0 <tcp_input+0x2b4>)
 8016810:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	891a      	ldrh	r2, [r3, #8]
 8016816:	4b33      	ldr	r3, [pc, #204]	; (80168e4 <tcp_input+0x2b8>)
 8016818:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801681a:	4b31      	ldr	r3, [pc, #196]	; (80168e0 <tcp_input+0x2b4>)
 801681c:	781b      	ldrb	r3, [r3, #0]
 801681e:	f003 0303 	and.w	r3, r3, #3
 8016822:	2b00      	cmp	r3, #0
 8016824:	d00c      	beq.n	8016840 <tcp_input+0x214>
    tcplen++;
 8016826:	4b2f      	ldr	r3, [pc, #188]	; (80168e4 <tcp_input+0x2b8>)
 8016828:	881b      	ldrh	r3, [r3, #0]
 801682a:	3301      	adds	r3, #1
 801682c:	b29a      	uxth	r2, r3
 801682e:	4b2d      	ldr	r3, [pc, #180]	; (80168e4 <tcp_input+0x2b8>)
 8016830:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	891a      	ldrh	r2, [r3, #8]
 8016836:	4b2b      	ldr	r3, [pc, #172]	; (80168e4 <tcp_input+0x2b8>)
 8016838:	881b      	ldrh	r3, [r3, #0]
 801683a:	429a      	cmp	r2, r3
 801683c:	f200 82e6 	bhi.w	8016e0c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016840:	2300      	movs	r3, #0
 8016842:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016844:	4b28      	ldr	r3, [pc, #160]	; (80168e8 <tcp_input+0x2bc>)
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	61fb      	str	r3, [r7, #28]
 801684a:	e09d      	b.n	8016988 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	7d1b      	ldrb	r3, [r3, #20]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d105      	bne.n	8016860 <tcp_input+0x234>
 8016854:	4b15      	ldr	r3, [pc, #84]	; (80168ac <tcp_input+0x280>)
 8016856:	22fb      	movs	r2, #251	; 0xfb
 8016858:	4924      	ldr	r1, [pc, #144]	; (80168ec <tcp_input+0x2c0>)
 801685a:	4816      	ldr	r0, [pc, #88]	; (80168b4 <tcp_input+0x288>)
 801685c:	f007 fd8a 	bl	801e374 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016860:	69fb      	ldr	r3, [r7, #28]
 8016862:	7d1b      	ldrb	r3, [r3, #20]
 8016864:	2b0a      	cmp	r3, #10
 8016866:	d105      	bne.n	8016874 <tcp_input+0x248>
 8016868:	4b10      	ldr	r3, [pc, #64]	; (80168ac <tcp_input+0x280>)
 801686a:	22fc      	movs	r2, #252	; 0xfc
 801686c:	4920      	ldr	r1, [pc, #128]	; (80168f0 <tcp_input+0x2c4>)
 801686e:	4811      	ldr	r0, [pc, #68]	; (80168b4 <tcp_input+0x288>)
 8016870:	f007 fd80 	bl	801e374 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016874:	69fb      	ldr	r3, [r7, #28]
 8016876:	7d1b      	ldrb	r3, [r3, #20]
 8016878:	2b01      	cmp	r3, #1
 801687a:	d105      	bne.n	8016888 <tcp_input+0x25c>
 801687c:	4b0b      	ldr	r3, [pc, #44]	; (80168ac <tcp_input+0x280>)
 801687e:	22fd      	movs	r2, #253	; 0xfd
 8016880:	491c      	ldr	r1, [pc, #112]	; (80168f4 <tcp_input+0x2c8>)
 8016882:	480c      	ldr	r0, [pc, #48]	; (80168b4 <tcp_input+0x288>)
 8016884:	f007 fd76 	bl	801e374 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016888:	69fb      	ldr	r3, [r7, #28]
 801688a:	7a1b      	ldrb	r3, [r3, #8]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d033      	beq.n	80168f8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016890:	69fb      	ldr	r3, [r7, #28]
 8016892:	7a1a      	ldrb	r2, [r3, #8]
 8016894:	4b09      	ldr	r3, [pc, #36]	; (80168bc <tcp_input+0x290>)
 8016896:	685b      	ldr	r3, [r3, #4]
 8016898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801689c:	3301      	adds	r3, #1
 801689e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80168a0:	429a      	cmp	r2, r3
 80168a2:	d029      	beq.n	80168f8 <tcp_input+0x2cc>
      prev = pcb;
 80168a4:	69fb      	ldr	r3, [r7, #28]
 80168a6:	61bb      	str	r3, [r7, #24]
      continue;
 80168a8:	e06b      	b.n	8016982 <tcp_input+0x356>
 80168aa:	bf00      	nop
 80168ac:	08021b2c 	.word	0x08021b2c
 80168b0:	08021b60 	.word	0x08021b60
 80168b4:	08021b78 	.word	0x08021b78
 80168b8:	2000f9dc 	.word	0x2000f9dc
 80168bc:	2000a06c 	.word	0x2000a06c
 80168c0:	2000f9e0 	.word	0x2000f9e0
 80168c4:	2000f9e4 	.word	0x2000f9e4
 80168c8:	2000f9e2 	.word	0x2000f9e2
 80168cc:	08021ba0 	.word	0x08021ba0
 80168d0:	08021bb0 	.word	0x08021bb0
 80168d4:	08021bbc 	.word	0x08021bbc
 80168d8:	2000f9ec 	.word	0x2000f9ec
 80168dc:	2000f9f0 	.word	0x2000f9f0
 80168e0:	2000f9f8 	.word	0x2000f9f8
 80168e4:	2000f9f6 	.word	0x2000f9f6
 80168e8:	2000f9c0 	.word	0x2000f9c0
 80168ec:	08021bdc 	.word	0x08021bdc
 80168f0:	08021c04 	.word	0x08021c04
 80168f4:	08021c30 	.word	0x08021c30
    }

    if (pcb->remote_port == tcphdr->src &&
 80168f8:	69fb      	ldr	r3, [r7, #28]
 80168fa:	8b1a      	ldrh	r2, [r3, #24]
 80168fc:	4b72      	ldr	r3, [pc, #456]	; (8016ac8 <tcp_input+0x49c>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	881b      	ldrh	r3, [r3, #0]
 8016902:	b29b      	uxth	r3, r3
 8016904:	429a      	cmp	r2, r3
 8016906:	d13a      	bne.n	801697e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016908:	69fb      	ldr	r3, [r7, #28]
 801690a:	8ada      	ldrh	r2, [r3, #22]
 801690c:	4b6e      	ldr	r3, [pc, #440]	; (8016ac8 <tcp_input+0x49c>)
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	885b      	ldrh	r3, [r3, #2]
 8016912:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016914:	429a      	cmp	r2, r3
 8016916:	d132      	bne.n	801697e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016918:	69fb      	ldr	r3, [r7, #28]
 801691a:	685a      	ldr	r2, [r3, #4]
 801691c:	4b6b      	ldr	r3, [pc, #428]	; (8016acc <tcp_input+0x4a0>)
 801691e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016920:	429a      	cmp	r2, r3
 8016922:	d12c      	bne.n	801697e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016924:	69fb      	ldr	r3, [r7, #28]
 8016926:	681a      	ldr	r2, [r3, #0]
 8016928:	4b68      	ldr	r3, [pc, #416]	; (8016acc <tcp_input+0x4a0>)
 801692a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801692c:	429a      	cmp	r2, r3
 801692e:	d126      	bne.n	801697e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016930:	69fb      	ldr	r3, [r7, #28]
 8016932:	68db      	ldr	r3, [r3, #12]
 8016934:	69fa      	ldr	r2, [r7, #28]
 8016936:	429a      	cmp	r2, r3
 8016938:	d106      	bne.n	8016948 <tcp_input+0x31c>
 801693a:	4b65      	ldr	r3, [pc, #404]	; (8016ad0 <tcp_input+0x4a4>)
 801693c:	f240 120d 	movw	r2, #269	; 0x10d
 8016940:	4964      	ldr	r1, [pc, #400]	; (8016ad4 <tcp_input+0x4a8>)
 8016942:	4865      	ldr	r0, [pc, #404]	; (8016ad8 <tcp_input+0x4ac>)
 8016944:	f007 fd16 	bl	801e374 <iprintf>
      if (prev != NULL) {
 8016948:	69bb      	ldr	r3, [r7, #24]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d00a      	beq.n	8016964 <tcp_input+0x338>
        prev->next = pcb->next;
 801694e:	69fb      	ldr	r3, [r7, #28]
 8016950:	68da      	ldr	r2, [r3, #12]
 8016952:	69bb      	ldr	r3, [r7, #24]
 8016954:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016956:	4b61      	ldr	r3, [pc, #388]	; (8016adc <tcp_input+0x4b0>)
 8016958:	681a      	ldr	r2, [r3, #0]
 801695a:	69fb      	ldr	r3, [r7, #28]
 801695c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801695e:	4a5f      	ldr	r2, [pc, #380]	; (8016adc <tcp_input+0x4b0>)
 8016960:	69fb      	ldr	r3, [r7, #28]
 8016962:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016964:	69fb      	ldr	r3, [r7, #28]
 8016966:	68db      	ldr	r3, [r3, #12]
 8016968:	69fa      	ldr	r2, [r7, #28]
 801696a:	429a      	cmp	r2, r3
 801696c:	d111      	bne.n	8016992 <tcp_input+0x366>
 801696e:	4b58      	ldr	r3, [pc, #352]	; (8016ad0 <tcp_input+0x4a4>)
 8016970:	f240 1215 	movw	r2, #277	; 0x115
 8016974:	495a      	ldr	r1, [pc, #360]	; (8016ae0 <tcp_input+0x4b4>)
 8016976:	4858      	ldr	r0, [pc, #352]	; (8016ad8 <tcp_input+0x4ac>)
 8016978:	f007 fcfc 	bl	801e374 <iprintf>
      break;
 801697c:	e009      	b.n	8016992 <tcp_input+0x366>
    }
    prev = pcb;
 801697e:	69fb      	ldr	r3, [r7, #28]
 8016980:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016982:	69fb      	ldr	r3, [r7, #28]
 8016984:	68db      	ldr	r3, [r3, #12]
 8016986:	61fb      	str	r3, [r7, #28]
 8016988:	69fb      	ldr	r3, [r7, #28]
 801698a:	2b00      	cmp	r3, #0
 801698c:	f47f af5e 	bne.w	801684c <tcp_input+0x220>
 8016990:	e000      	b.n	8016994 <tcp_input+0x368>
      break;
 8016992:	bf00      	nop
  }

  if (pcb == NULL) {
 8016994:	69fb      	ldr	r3, [r7, #28]
 8016996:	2b00      	cmp	r3, #0
 8016998:	f040 80aa 	bne.w	8016af0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801699c:	4b51      	ldr	r3, [pc, #324]	; (8016ae4 <tcp_input+0x4b8>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	61fb      	str	r3, [r7, #28]
 80169a2:	e03f      	b.n	8016a24 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80169a4:	69fb      	ldr	r3, [r7, #28]
 80169a6:	7d1b      	ldrb	r3, [r3, #20]
 80169a8:	2b0a      	cmp	r3, #10
 80169aa:	d006      	beq.n	80169ba <tcp_input+0x38e>
 80169ac:	4b48      	ldr	r3, [pc, #288]	; (8016ad0 <tcp_input+0x4a4>)
 80169ae:	f240 121f 	movw	r2, #287	; 0x11f
 80169b2:	494d      	ldr	r1, [pc, #308]	; (8016ae8 <tcp_input+0x4bc>)
 80169b4:	4848      	ldr	r0, [pc, #288]	; (8016ad8 <tcp_input+0x4ac>)
 80169b6:	f007 fcdd 	bl	801e374 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80169ba:	69fb      	ldr	r3, [r7, #28]
 80169bc:	7a1b      	ldrb	r3, [r3, #8]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d009      	beq.n	80169d6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80169c2:	69fb      	ldr	r3, [r7, #28]
 80169c4:	7a1a      	ldrb	r2, [r3, #8]
 80169c6:	4b41      	ldr	r3, [pc, #260]	; (8016acc <tcp_input+0x4a0>)
 80169c8:	685b      	ldr	r3, [r3, #4]
 80169ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80169ce:	3301      	adds	r3, #1
 80169d0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80169d2:	429a      	cmp	r2, r3
 80169d4:	d122      	bne.n	8016a1c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80169d6:	69fb      	ldr	r3, [r7, #28]
 80169d8:	8b1a      	ldrh	r2, [r3, #24]
 80169da:	4b3b      	ldr	r3, [pc, #236]	; (8016ac8 <tcp_input+0x49c>)
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	881b      	ldrh	r3, [r3, #0]
 80169e0:	b29b      	uxth	r3, r3
 80169e2:	429a      	cmp	r2, r3
 80169e4:	d11b      	bne.n	8016a1e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80169e6:	69fb      	ldr	r3, [r7, #28]
 80169e8:	8ada      	ldrh	r2, [r3, #22]
 80169ea:	4b37      	ldr	r3, [pc, #220]	; (8016ac8 <tcp_input+0x49c>)
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	885b      	ldrh	r3, [r3, #2]
 80169f0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80169f2:	429a      	cmp	r2, r3
 80169f4:	d113      	bne.n	8016a1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80169f6:	69fb      	ldr	r3, [r7, #28]
 80169f8:	685a      	ldr	r2, [r3, #4]
 80169fa:	4b34      	ldr	r3, [pc, #208]	; (8016acc <tcp_input+0x4a0>)
 80169fc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80169fe:	429a      	cmp	r2, r3
 8016a00:	d10d      	bne.n	8016a1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016a02:	69fb      	ldr	r3, [r7, #28]
 8016a04:	681a      	ldr	r2, [r3, #0]
 8016a06:	4b31      	ldr	r3, [pc, #196]	; (8016acc <tcp_input+0x4a0>)
 8016a08:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016a0a:	429a      	cmp	r2, r3
 8016a0c:	d107      	bne.n	8016a1e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016a0e:	69f8      	ldr	r0, [r7, #28]
 8016a10:	f000 fb56 	bl	80170c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8016a14:	6878      	ldr	r0, [r7, #4]
 8016a16:	f7fd fd03 	bl	8014420 <pbuf_free>
        return;
 8016a1a:	e1fd      	b.n	8016e18 <tcp_input+0x7ec>
        continue;
 8016a1c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a1e:	69fb      	ldr	r3, [r7, #28]
 8016a20:	68db      	ldr	r3, [r3, #12]
 8016a22:	61fb      	str	r3, [r7, #28]
 8016a24:	69fb      	ldr	r3, [r7, #28]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d1bc      	bne.n	80169a4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016a2e:	4b2f      	ldr	r3, [pc, #188]	; (8016aec <tcp_input+0x4c0>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	617b      	str	r3, [r7, #20]
 8016a34:	e02a      	b.n	8016a8c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016a36:	697b      	ldr	r3, [r7, #20]
 8016a38:	7a1b      	ldrb	r3, [r3, #8]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d00c      	beq.n	8016a58 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016a3e:	697b      	ldr	r3, [r7, #20]
 8016a40:	7a1a      	ldrb	r2, [r3, #8]
 8016a42:	4b22      	ldr	r3, [pc, #136]	; (8016acc <tcp_input+0x4a0>)
 8016a44:	685b      	ldr	r3, [r3, #4]
 8016a46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016a4a:	3301      	adds	r3, #1
 8016a4c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016a4e:	429a      	cmp	r2, r3
 8016a50:	d002      	beq.n	8016a58 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8016a52:	697b      	ldr	r3, [r7, #20]
 8016a54:	61bb      	str	r3, [r7, #24]
        continue;
 8016a56:	e016      	b.n	8016a86 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016a58:	697b      	ldr	r3, [r7, #20]
 8016a5a:	8ada      	ldrh	r2, [r3, #22]
 8016a5c:	4b1a      	ldr	r3, [pc, #104]	; (8016ac8 <tcp_input+0x49c>)
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	885b      	ldrh	r3, [r3, #2]
 8016a62:	b29b      	uxth	r3, r3
 8016a64:	429a      	cmp	r2, r3
 8016a66:	d10c      	bne.n	8016a82 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016a68:	697b      	ldr	r3, [r7, #20]
 8016a6a:	681a      	ldr	r2, [r3, #0]
 8016a6c:	4b17      	ldr	r3, [pc, #92]	; (8016acc <tcp_input+0x4a0>)
 8016a6e:	695b      	ldr	r3, [r3, #20]
 8016a70:	429a      	cmp	r2, r3
 8016a72:	d00f      	beq.n	8016a94 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016a74:	697b      	ldr	r3, [r7, #20]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d00d      	beq.n	8016a96 <tcp_input+0x46a>
 8016a7a:	697b      	ldr	r3, [r7, #20]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d009      	beq.n	8016a96 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016a82:	697b      	ldr	r3, [r7, #20]
 8016a84:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016a86:	697b      	ldr	r3, [r7, #20]
 8016a88:	68db      	ldr	r3, [r3, #12]
 8016a8a:	617b      	str	r3, [r7, #20]
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d1d1      	bne.n	8016a36 <tcp_input+0x40a>
 8016a92:	e000      	b.n	8016a96 <tcp_input+0x46a>
            break;
 8016a94:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016a96:	697b      	ldr	r3, [r7, #20]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d029      	beq.n	8016af0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016a9c:	69bb      	ldr	r3, [r7, #24]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d00a      	beq.n	8016ab8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016aa2:	697b      	ldr	r3, [r7, #20]
 8016aa4:	68da      	ldr	r2, [r3, #12]
 8016aa6:	69bb      	ldr	r3, [r7, #24]
 8016aa8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016aaa:	4b10      	ldr	r3, [pc, #64]	; (8016aec <tcp_input+0x4c0>)
 8016aac:	681a      	ldr	r2, [r3, #0]
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016ab2:	4a0e      	ldr	r2, [pc, #56]	; (8016aec <tcp_input+0x4c0>)
 8016ab4:	697b      	ldr	r3, [r7, #20]
 8016ab6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016ab8:	6978      	ldr	r0, [r7, #20]
 8016aba:	f000 fa03 	bl	8016ec4 <tcp_listen_input>
      }
      pbuf_free(p);
 8016abe:	6878      	ldr	r0, [r7, #4]
 8016ac0:	f7fd fcae 	bl	8014420 <pbuf_free>
      return;
 8016ac4:	e1a8      	b.n	8016e18 <tcp_input+0x7ec>
 8016ac6:	bf00      	nop
 8016ac8:	2000f9dc 	.word	0x2000f9dc
 8016acc:	2000a06c 	.word	0x2000a06c
 8016ad0:	08021b2c 	.word	0x08021b2c
 8016ad4:	08021c58 	.word	0x08021c58
 8016ad8:	08021b78 	.word	0x08021b78
 8016adc:	2000f9c0 	.word	0x2000f9c0
 8016ae0:	08021c84 	.word	0x08021c84
 8016ae4:	2000f9c4 	.word	0x2000f9c4
 8016ae8:	08021cb0 	.word	0x08021cb0
 8016aec:	2000f9bc 	.word	0x2000f9bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016af0:	69fb      	ldr	r3, [r7, #28]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	f000 8158 	beq.w	8016da8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016af8:	4b95      	ldr	r3, [pc, #596]	; (8016d50 <tcp_input+0x724>)
 8016afa:	2200      	movs	r2, #0
 8016afc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	891a      	ldrh	r2, [r3, #8]
 8016b02:	4b93      	ldr	r3, [pc, #588]	; (8016d50 <tcp_input+0x724>)
 8016b04:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016b06:	4a92      	ldr	r2, [pc, #584]	; (8016d50 <tcp_input+0x724>)
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016b0c:	4b91      	ldr	r3, [pc, #580]	; (8016d54 <tcp_input+0x728>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	4a8f      	ldr	r2, [pc, #572]	; (8016d50 <tcp_input+0x724>)
 8016b12:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016b14:	4b90      	ldr	r3, [pc, #576]	; (8016d58 <tcp_input+0x72c>)
 8016b16:	2200      	movs	r2, #0
 8016b18:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016b1a:	4b90      	ldr	r3, [pc, #576]	; (8016d5c <tcp_input+0x730>)
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016b20:	4b8f      	ldr	r3, [pc, #572]	; (8016d60 <tcp_input+0x734>)
 8016b22:	2200      	movs	r2, #0
 8016b24:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016b26:	4b8f      	ldr	r3, [pc, #572]	; (8016d64 <tcp_input+0x738>)
 8016b28:	781b      	ldrb	r3, [r3, #0]
 8016b2a:	f003 0308 	and.w	r3, r3, #8
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d006      	beq.n	8016b40 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	7b5b      	ldrb	r3, [r3, #13]
 8016b36:	f043 0301 	orr.w	r3, r3, #1
 8016b3a:	b2da      	uxtb	r2, r3
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016b40:	69fb      	ldr	r3, [r7, #28]
 8016b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d017      	beq.n	8016b78 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016b48:	69f8      	ldr	r0, [r7, #28]
 8016b4a:	f7ff f85b 	bl	8015c04 <tcp_process_refused_data>
 8016b4e:	4603      	mov	r3, r0
 8016b50:	f113 0f0d 	cmn.w	r3, #13
 8016b54:	d007      	beq.n	8016b66 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016b56:	69fb      	ldr	r3, [r7, #28]
 8016b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d00c      	beq.n	8016b78 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016b5e:	4b82      	ldr	r3, [pc, #520]	; (8016d68 <tcp_input+0x73c>)
 8016b60:	881b      	ldrh	r3, [r3, #0]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d008      	beq.n	8016b78 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016b66:	69fb      	ldr	r3, [r7, #28]
 8016b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	f040 80e3 	bne.w	8016d36 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016b70:	69f8      	ldr	r0, [r7, #28]
 8016b72:	f003 fe05 	bl	801a780 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016b76:	e0de      	b.n	8016d36 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8016b78:	4a7c      	ldr	r2, [pc, #496]	; (8016d6c <tcp_input+0x740>)
 8016b7a:	69fb      	ldr	r3, [r7, #28]
 8016b7c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016b7e:	69f8      	ldr	r0, [r7, #28]
 8016b80:	f000 fb18 	bl	80171b4 <tcp_process>
 8016b84:	4603      	mov	r3, r0
 8016b86:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016b88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016b8c:	f113 0f0d 	cmn.w	r3, #13
 8016b90:	f000 80d3 	beq.w	8016d3a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8016b94:	4b71      	ldr	r3, [pc, #452]	; (8016d5c <tcp_input+0x730>)
 8016b96:	781b      	ldrb	r3, [r3, #0]
 8016b98:	f003 0308 	and.w	r3, r3, #8
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d015      	beq.n	8016bcc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016ba0:	69fb      	ldr	r3, [r7, #28]
 8016ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d008      	beq.n	8016bbc <tcp_input+0x590>
 8016baa:	69fb      	ldr	r3, [r7, #28]
 8016bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016bb0:	69fa      	ldr	r2, [r7, #28]
 8016bb2:	6912      	ldr	r2, [r2, #16]
 8016bb4:	f06f 010d 	mvn.w	r1, #13
 8016bb8:	4610      	mov	r0, r2
 8016bba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016bbc:	69f9      	ldr	r1, [r7, #28]
 8016bbe:	486c      	ldr	r0, [pc, #432]	; (8016d70 <tcp_input+0x744>)
 8016bc0:	f7ff fbbc 	bl	801633c <tcp_pcb_remove>
        tcp_free(pcb);
 8016bc4:	69f8      	ldr	r0, [r7, #28]
 8016bc6:	f7fd fed7 	bl	8014978 <tcp_free>
 8016bca:	e0da      	b.n	8016d82 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8016bcc:	2300      	movs	r3, #0
 8016bce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016bd0:	4b63      	ldr	r3, [pc, #396]	; (8016d60 <tcp_input+0x734>)
 8016bd2:	881b      	ldrh	r3, [r3, #0]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d01d      	beq.n	8016c14 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016bd8:	4b61      	ldr	r3, [pc, #388]	; (8016d60 <tcp_input+0x734>)
 8016bda:	881b      	ldrh	r3, [r3, #0]
 8016bdc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016bde:	69fb      	ldr	r3, [r7, #28]
 8016be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d00a      	beq.n	8016bfe <tcp_input+0x5d2>
 8016be8:	69fb      	ldr	r3, [r7, #28]
 8016bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016bee:	69fa      	ldr	r2, [r7, #28]
 8016bf0:	6910      	ldr	r0, [r2, #16]
 8016bf2:	89fa      	ldrh	r2, [r7, #14]
 8016bf4:	69f9      	ldr	r1, [r7, #28]
 8016bf6:	4798      	blx	r3
 8016bf8:	4603      	mov	r3, r0
 8016bfa:	74fb      	strb	r3, [r7, #19]
 8016bfc:	e001      	b.n	8016c02 <tcp_input+0x5d6>
 8016bfe:	2300      	movs	r3, #0
 8016c00:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016c02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016c06:	f113 0f0d 	cmn.w	r3, #13
 8016c0a:	f000 8098 	beq.w	8016d3e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016c0e:	4b54      	ldr	r3, [pc, #336]	; (8016d60 <tcp_input+0x734>)
 8016c10:	2200      	movs	r2, #0
 8016c12:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016c14:	69f8      	ldr	r0, [r7, #28]
 8016c16:	f000 f915 	bl	8016e44 <tcp_input_delayed_close>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	f040 8090 	bne.w	8016d42 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016c22:	4b4d      	ldr	r3, [pc, #308]	; (8016d58 <tcp_input+0x72c>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d041      	beq.n	8016cae <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016c2a:	69fb      	ldr	r3, [r7, #28]
 8016c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d006      	beq.n	8016c40 <tcp_input+0x614>
 8016c32:	4b50      	ldr	r3, [pc, #320]	; (8016d74 <tcp_input+0x748>)
 8016c34:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016c38:	494f      	ldr	r1, [pc, #316]	; (8016d78 <tcp_input+0x74c>)
 8016c3a:	4850      	ldr	r0, [pc, #320]	; (8016d7c <tcp_input+0x750>)
 8016c3c:	f007 fb9a 	bl	801e374 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016c40:	69fb      	ldr	r3, [r7, #28]
 8016c42:	8b5b      	ldrh	r3, [r3, #26]
 8016c44:	f003 0310 	and.w	r3, r3, #16
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d008      	beq.n	8016c5e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016c4c:	4b42      	ldr	r3, [pc, #264]	; (8016d58 <tcp_input+0x72c>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	4618      	mov	r0, r3
 8016c52:	f7fd fbe5 	bl	8014420 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016c56:	69f8      	ldr	r0, [r7, #28]
 8016c58:	f7fe f9d2 	bl	8015000 <tcp_abort>
            goto aborted;
 8016c5c:	e091      	b.n	8016d82 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016c5e:	69fb      	ldr	r3, [r7, #28]
 8016c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d00c      	beq.n	8016c82 <tcp_input+0x656>
 8016c68:	69fb      	ldr	r3, [r7, #28]
 8016c6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016c6e:	69fb      	ldr	r3, [r7, #28]
 8016c70:	6918      	ldr	r0, [r3, #16]
 8016c72:	4b39      	ldr	r3, [pc, #228]	; (8016d58 <tcp_input+0x72c>)
 8016c74:	681a      	ldr	r2, [r3, #0]
 8016c76:	2300      	movs	r3, #0
 8016c78:	69f9      	ldr	r1, [r7, #28]
 8016c7a:	47a0      	blx	r4
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	74fb      	strb	r3, [r7, #19]
 8016c80:	e008      	b.n	8016c94 <tcp_input+0x668>
 8016c82:	4b35      	ldr	r3, [pc, #212]	; (8016d58 <tcp_input+0x72c>)
 8016c84:	681a      	ldr	r2, [r3, #0]
 8016c86:	2300      	movs	r3, #0
 8016c88:	69f9      	ldr	r1, [r7, #28]
 8016c8a:	2000      	movs	r0, #0
 8016c8c:	f7ff f890 	bl	8015db0 <tcp_recv_null>
 8016c90:	4603      	mov	r3, r0
 8016c92:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016c94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016c98:	f113 0f0d 	cmn.w	r3, #13
 8016c9c:	d053      	beq.n	8016d46 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016c9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d003      	beq.n	8016cae <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016ca6:	4b2c      	ldr	r3, [pc, #176]	; (8016d58 <tcp_input+0x72c>)
 8016ca8:	681a      	ldr	r2, [r3, #0]
 8016caa:	69fb      	ldr	r3, [r7, #28]
 8016cac:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016cae:	4b2b      	ldr	r3, [pc, #172]	; (8016d5c <tcp_input+0x730>)
 8016cb0:	781b      	ldrb	r3, [r3, #0]
 8016cb2:	f003 0320 	and.w	r3, r3, #32
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d030      	beq.n	8016d1c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8016cba:	69fb      	ldr	r3, [r7, #28]
 8016cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d009      	beq.n	8016cd6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016cc2:	69fb      	ldr	r3, [r7, #28]
 8016cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016cc6:	7b5a      	ldrb	r2, [r3, #13]
 8016cc8:	69fb      	ldr	r3, [r7, #28]
 8016cca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016ccc:	f042 0220 	orr.w	r2, r2, #32
 8016cd0:	b2d2      	uxtb	r2, r2
 8016cd2:	735a      	strb	r2, [r3, #13]
 8016cd4:	e022      	b.n	8016d1c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016cd6:	69fb      	ldr	r3, [r7, #28]
 8016cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016cda:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016cde:	d005      	beq.n	8016cec <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8016ce0:	69fb      	ldr	r3, [r7, #28]
 8016ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ce4:	3301      	adds	r3, #1
 8016ce6:	b29a      	uxth	r2, r3
 8016ce8:	69fb      	ldr	r3, [r7, #28]
 8016cea:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016cec:	69fb      	ldr	r3, [r7, #28]
 8016cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d00b      	beq.n	8016d0e <tcp_input+0x6e2>
 8016cf6:	69fb      	ldr	r3, [r7, #28]
 8016cf8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016cfc:	69fb      	ldr	r3, [r7, #28]
 8016cfe:	6918      	ldr	r0, [r3, #16]
 8016d00:	2300      	movs	r3, #0
 8016d02:	2200      	movs	r2, #0
 8016d04:	69f9      	ldr	r1, [r7, #28]
 8016d06:	47a0      	blx	r4
 8016d08:	4603      	mov	r3, r0
 8016d0a:	74fb      	strb	r3, [r7, #19]
 8016d0c:	e001      	b.n	8016d12 <tcp_input+0x6e6>
 8016d0e:	2300      	movs	r3, #0
 8016d10:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016d12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d16:	f113 0f0d 	cmn.w	r3, #13
 8016d1a:	d016      	beq.n	8016d4a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016d1c:	4b13      	ldr	r3, [pc, #76]	; (8016d6c <tcp_input+0x740>)
 8016d1e:	2200      	movs	r2, #0
 8016d20:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016d22:	69f8      	ldr	r0, [r7, #28]
 8016d24:	f000 f88e 	bl	8016e44 <tcp_input_delayed_close>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d128      	bne.n	8016d80 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016d2e:	69f8      	ldr	r0, [r7, #28]
 8016d30:	f002 ff20 	bl	8019b74 <tcp_output>
 8016d34:	e025      	b.n	8016d82 <tcp_input+0x756>
        goto aborted;
 8016d36:	bf00      	nop
 8016d38:	e023      	b.n	8016d82 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016d3a:	bf00      	nop
 8016d3c:	e021      	b.n	8016d82 <tcp_input+0x756>
              goto aborted;
 8016d3e:	bf00      	nop
 8016d40:	e01f      	b.n	8016d82 <tcp_input+0x756>
          goto aborted;
 8016d42:	bf00      	nop
 8016d44:	e01d      	b.n	8016d82 <tcp_input+0x756>
            goto aborted;
 8016d46:	bf00      	nop
 8016d48:	e01b      	b.n	8016d82 <tcp_input+0x756>
              goto aborted;
 8016d4a:	bf00      	nop
 8016d4c:	e019      	b.n	8016d82 <tcp_input+0x756>
 8016d4e:	bf00      	nop
 8016d50:	2000f9cc 	.word	0x2000f9cc
 8016d54:	2000f9dc 	.word	0x2000f9dc
 8016d58:	2000f9fc 	.word	0x2000f9fc
 8016d5c:	2000f9f9 	.word	0x2000f9f9
 8016d60:	2000f9f4 	.word	0x2000f9f4
 8016d64:	2000f9f8 	.word	0x2000f9f8
 8016d68:	2000f9f6 	.word	0x2000f9f6
 8016d6c:	2000fa00 	.word	0x2000fa00
 8016d70:	2000f9c0 	.word	0x2000f9c0
 8016d74:	08021b2c 	.word	0x08021b2c
 8016d78:	08021ce0 	.word	0x08021ce0
 8016d7c:	08021b78 	.word	0x08021b78
          goto aborted;
 8016d80:	bf00      	nop
    tcp_input_pcb = NULL;
 8016d82:	4b27      	ldr	r3, [pc, #156]	; (8016e20 <tcp_input+0x7f4>)
 8016d84:	2200      	movs	r2, #0
 8016d86:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016d88:	4b26      	ldr	r3, [pc, #152]	; (8016e24 <tcp_input+0x7f8>)
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016d8e:	4b26      	ldr	r3, [pc, #152]	; (8016e28 <tcp_input+0x7fc>)
 8016d90:	685b      	ldr	r3, [r3, #4]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d03f      	beq.n	8016e16 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8016d96:	4b24      	ldr	r3, [pc, #144]	; (8016e28 <tcp_input+0x7fc>)
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f7fd fb40 	bl	8014420 <pbuf_free>
      inseg.p = NULL;
 8016da0:	4b21      	ldr	r3, [pc, #132]	; (8016e28 <tcp_input+0x7fc>)
 8016da2:	2200      	movs	r2, #0
 8016da4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016da6:	e036      	b.n	8016e16 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016da8:	4b20      	ldr	r3, [pc, #128]	; (8016e2c <tcp_input+0x800>)
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	899b      	ldrh	r3, [r3, #12]
 8016dae:	b29b      	uxth	r3, r3
 8016db0:	4618      	mov	r0, r3
 8016db2:	f7fb fdcf 	bl	8012954 <lwip_htons>
 8016db6:	4603      	mov	r3, r0
 8016db8:	b2db      	uxtb	r3, r3
 8016dba:	f003 0304 	and.w	r3, r3, #4
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d118      	bne.n	8016df4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016dc2:	4b1b      	ldr	r3, [pc, #108]	; (8016e30 <tcp_input+0x804>)
 8016dc4:	6819      	ldr	r1, [r3, #0]
 8016dc6:	4b1b      	ldr	r3, [pc, #108]	; (8016e34 <tcp_input+0x808>)
 8016dc8:	881b      	ldrh	r3, [r3, #0]
 8016dca:	461a      	mov	r2, r3
 8016dcc:	4b1a      	ldr	r3, [pc, #104]	; (8016e38 <tcp_input+0x80c>)
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016dd2:	4b16      	ldr	r3, [pc, #88]	; (8016e2c <tcp_input+0x800>)
 8016dd4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016dd6:	885b      	ldrh	r3, [r3, #2]
 8016dd8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016dda:	4a14      	ldr	r2, [pc, #80]	; (8016e2c <tcp_input+0x800>)
 8016ddc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016dde:	8812      	ldrh	r2, [r2, #0]
 8016de0:	b292      	uxth	r2, r2
 8016de2:	9202      	str	r2, [sp, #8]
 8016de4:	9301      	str	r3, [sp, #4]
 8016de6:	4b15      	ldr	r3, [pc, #84]	; (8016e3c <tcp_input+0x810>)
 8016de8:	9300      	str	r3, [sp, #0]
 8016dea:	4b15      	ldr	r3, [pc, #84]	; (8016e40 <tcp_input+0x814>)
 8016dec:	4602      	mov	r2, r0
 8016dee:	2000      	movs	r0, #0
 8016df0:	f003 fc74 	bl	801a6dc <tcp_rst>
    pbuf_free(p);
 8016df4:	6878      	ldr	r0, [r7, #4]
 8016df6:	f7fd fb13 	bl	8014420 <pbuf_free>
  return;
 8016dfa:	e00c      	b.n	8016e16 <tcp_input+0x7ea>
    goto dropped;
 8016dfc:	bf00      	nop
 8016dfe:	e006      	b.n	8016e0e <tcp_input+0x7e2>
    goto dropped;
 8016e00:	bf00      	nop
 8016e02:	e004      	b.n	8016e0e <tcp_input+0x7e2>
    goto dropped;
 8016e04:	bf00      	nop
 8016e06:	e002      	b.n	8016e0e <tcp_input+0x7e2>
      goto dropped;
 8016e08:	bf00      	nop
 8016e0a:	e000      	b.n	8016e0e <tcp_input+0x7e2>
      goto dropped;
 8016e0c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f7fd fb06 	bl	8014420 <pbuf_free>
 8016e14:	e000      	b.n	8016e18 <tcp_input+0x7ec>
  return;
 8016e16:	bf00      	nop
}
 8016e18:	3724      	adds	r7, #36	; 0x24
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd90      	pop	{r4, r7, pc}
 8016e1e:	bf00      	nop
 8016e20:	2000fa00 	.word	0x2000fa00
 8016e24:	2000f9fc 	.word	0x2000f9fc
 8016e28:	2000f9cc 	.word	0x2000f9cc
 8016e2c:	2000f9dc 	.word	0x2000f9dc
 8016e30:	2000f9f0 	.word	0x2000f9f0
 8016e34:	2000f9f6 	.word	0x2000f9f6
 8016e38:	2000f9ec 	.word	0x2000f9ec
 8016e3c:	2000a07c 	.word	0x2000a07c
 8016e40:	2000a080 	.word	0x2000a080

08016e44 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b082      	sub	sp, #8
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d106      	bne.n	8016e60 <tcp_input_delayed_close+0x1c>
 8016e52:	4b17      	ldr	r3, [pc, #92]	; (8016eb0 <tcp_input_delayed_close+0x6c>)
 8016e54:	f240 225a 	movw	r2, #602	; 0x25a
 8016e58:	4916      	ldr	r1, [pc, #88]	; (8016eb4 <tcp_input_delayed_close+0x70>)
 8016e5a:	4817      	ldr	r0, [pc, #92]	; (8016eb8 <tcp_input_delayed_close+0x74>)
 8016e5c:	f007 fa8a 	bl	801e374 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016e60:	4b16      	ldr	r3, [pc, #88]	; (8016ebc <tcp_input_delayed_close+0x78>)
 8016e62:	781b      	ldrb	r3, [r3, #0]
 8016e64:	f003 0310 	and.w	r3, r3, #16
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d01c      	beq.n	8016ea6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	8b5b      	ldrh	r3, [r3, #26]
 8016e70:	f003 0310 	and.w	r3, r3, #16
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d10d      	bne.n	8016e94 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d008      	beq.n	8016e94 <tcp_input_delayed_close+0x50>
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016e88:	687a      	ldr	r2, [r7, #4]
 8016e8a:	6912      	ldr	r2, [r2, #16]
 8016e8c:	f06f 010e 	mvn.w	r1, #14
 8016e90:	4610      	mov	r0, r2
 8016e92:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016e94:	6879      	ldr	r1, [r7, #4]
 8016e96:	480a      	ldr	r0, [pc, #40]	; (8016ec0 <tcp_input_delayed_close+0x7c>)
 8016e98:	f7ff fa50 	bl	801633c <tcp_pcb_remove>
    tcp_free(pcb);
 8016e9c:	6878      	ldr	r0, [r7, #4]
 8016e9e:	f7fd fd6b 	bl	8014978 <tcp_free>
    return 1;
 8016ea2:	2301      	movs	r3, #1
 8016ea4:	e000      	b.n	8016ea8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016ea6:	2300      	movs	r3, #0
}
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	3708      	adds	r7, #8
 8016eac:	46bd      	mov	sp, r7
 8016eae:	bd80      	pop	{r7, pc}
 8016eb0:	08021b2c 	.word	0x08021b2c
 8016eb4:	08021cfc 	.word	0x08021cfc
 8016eb8:	08021b78 	.word	0x08021b78
 8016ebc:	2000f9f9 	.word	0x2000f9f9
 8016ec0:	2000f9c0 	.word	0x2000f9c0

08016ec4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016ec4:	b590      	push	{r4, r7, lr}
 8016ec6:	b08b      	sub	sp, #44	; 0x2c
 8016ec8:	af04      	add	r7, sp, #16
 8016eca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016ecc:	4b6f      	ldr	r3, [pc, #444]	; (801708c <tcp_listen_input+0x1c8>)
 8016ece:	781b      	ldrb	r3, [r3, #0]
 8016ed0:	f003 0304 	and.w	r3, r3, #4
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	f040 80d2 	bne.w	801707e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d106      	bne.n	8016eee <tcp_listen_input+0x2a>
 8016ee0:	4b6b      	ldr	r3, [pc, #428]	; (8017090 <tcp_listen_input+0x1cc>)
 8016ee2:	f240 2281 	movw	r2, #641	; 0x281
 8016ee6:	496b      	ldr	r1, [pc, #428]	; (8017094 <tcp_listen_input+0x1d0>)
 8016ee8:	486b      	ldr	r0, [pc, #428]	; (8017098 <tcp_listen_input+0x1d4>)
 8016eea:	f007 fa43 	bl	801e374 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016eee:	4b67      	ldr	r3, [pc, #412]	; (801708c <tcp_listen_input+0x1c8>)
 8016ef0:	781b      	ldrb	r3, [r3, #0]
 8016ef2:	f003 0310 	and.w	r3, r3, #16
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d019      	beq.n	8016f2e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016efa:	4b68      	ldr	r3, [pc, #416]	; (801709c <tcp_listen_input+0x1d8>)
 8016efc:	6819      	ldr	r1, [r3, #0]
 8016efe:	4b68      	ldr	r3, [pc, #416]	; (80170a0 <tcp_listen_input+0x1dc>)
 8016f00:	881b      	ldrh	r3, [r3, #0]
 8016f02:	461a      	mov	r2, r3
 8016f04:	4b67      	ldr	r3, [pc, #412]	; (80170a4 <tcp_listen_input+0x1e0>)
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f0a:	4b67      	ldr	r3, [pc, #412]	; (80170a8 <tcp_listen_input+0x1e4>)
 8016f0c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f0e:	885b      	ldrh	r3, [r3, #2]
 8016f10:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f12:	4a65      	ldr	r2, [pc, #404]	; (80170a8 <tcp_listen_input+0x1e4>)
 8016f14:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f16:	8812      	ldrh	r2, [r2, #0]
 8016f18:	b292      	uxth	r2, r2
 8016f1a:	9202      	str	r2, [sp, #8]
 8016f1c:	9301      	str	r3, [sp, #4]
 8016f1e:	4b63      	ldr	r3, [pc, #396]	; (80170ac <tcp_listen_input+0x1e8>)
 8016f20:	9300      	str	r3, [sp, #0]
 8016f22:	4b63      	ldr	r3, [pc, #396]	; (80170b0 <tcp_listen_input+0x1ec>)
 8016f24:	4602      	mov	r2, r0
 8016f26:	6878      	ldr	r0, [r7, #4]
 8016f28:	f003 fbd8 	bl	801a6dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016f2c:	e0a9      	b.n	8017082 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016f2e:	4b57      	ldr	r3, [pc, #348]	; (801708c <tcp_listen_input+0x1c8>)
 8016f30:	781b      	ldrb	r3, [r3, #0]
 8016f32:	f003 0302 	and.w	r3, r3, #2
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	f000 80a3 	beq.w	8017082 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	7d5b      	ldrb	r3, [r3, #21]
 8016f40:	4618      	mov	r0, r3
 8016f42:	f7ff f859 	bl	8015ff8 <tcp_alloc>
 8016f46:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016f48:	697b      	ldr	r3, [r7, #20]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d111      	bne.n	8016f72 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	699b      	ldr	r3, [r3, #24]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d00a      	beq.n	8016f6c <tcp_listen_input+0xa8>
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	699b      	ldr	r3, [r3, #24]
 8016f5a:	687a      	ldr	r2, [r7, #4]
 8016f5c:	6910      	ldr	r0, [r2, #16]
 8016f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8016f62:	2100      	movs	r1, #0
 8016f64:	4798      	blx	r3
 8016f66:	4603      	mov	r3, r0
 8016f68:	73bb      	strb	r3, [r7, #14]
      return;
 8016f6a:	e08b      	b.n	8017084 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016f6c:	23f0      	movs	r3, #240	; 0xf0
 8016f6e:	73bb      	strb	r3, [r7, #14]
      return;
 8016f70:	e088      	b.n	8017084 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016f72:	4b50      	ldr	r3, [pc, #320]	; (80170b4 <tcp_listen_input+0x1f0>)
 8016f74:	695a      	ldr	r2, [r3, #20]
 8016f76:	697b      	ldr	r3, [r7, #20]
 8016f78:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016f7a:	4b4e      	ldr	r3, [pc, #312]	; (80170b4 <tcp_listen_input+0x1f0>)
 8016f7c:	691a      	ldr	r2, [r3, #16]
 8016f7e:	697b      	ldr	r3, [r7, #20]
 8016f80:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	8ada      	ldrh	r2, [r3, #22]
 8016f86:	697b      	ldr	r3, [r7, #20]
 8016f88:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016f8a:	4b47      	ldr	r3, [pc, #284]	; (80170a8 <tcp_listen_input+0x1e4>)
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	881b      	ldrh	r3, [r3, #0]
 8016f90:	b29a      	uxth	r2, r3
 8016f92:	697b      	ldr	r3, [r7, #20]
 8016f94:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016f96:	697b      	ldr	r3, [r7, #20]
 8016f98:	2203      	movs	r2, #3
 8016f9a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016f9c:	4b41      	ldr	r3, [pc, #260]	; (80170a4 <tcp_listen_input+0x1e0>)
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	1c5a      	adds	r2, r3, #1
 8016fa2:	697b      	ldr	r3, [r7, #20]
 8016fa4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016fa6:	697b      	ldr	r3, [r7, #20]
 8016fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016faa:	697b      	ldr	r3, [r7, #20]
 8016fac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8016fae:	6978      	ldr	r0, [r7, #20]
 8016fb0:	f7ff fa58 	bl	8016464 <tcp_next_iss>
 8016fb4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016fb6:	697b      	ldr	r3, [r7, #20]
 8016fb8:	693a      	ldr	r2, [r7, #16]
 8016fba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8016fbc:	697b      	ldr	r3, [r7, #20]
 8016fbe:	693a      	ldr	r2, [r7, #16]
 8016fc0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8016fc2:	697b      	ldr	r3, [r7, #20]
 8016fc4:	693a      	ldr	r2, [r7, #16]
 8016fc6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8016fc8:	697b      	ldr	r3, [r7, #20]
 8016fca:	693a      	ldr	r2, [r7, #16]
 8016fcc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016fce:	4b35      	ldr	r3, [pc, #212]	; (80170a4 <tcp_listen_input+0x1e0>)
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	1e5a      	subs	r2, r3, #1
 8016fd4:	697b      	ldr	r3, [r7, #20]
 8016fd6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	691a      	ldr	r2, [r3, #16]
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016fe0:	697b      	ldr	r3, [r7, #20]
 8016fe2:	687a      	ldr	r2, [r7, #4]
 8016fe4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	7a5b      	ldrb	r3, [r3, #9]
 8016fea:	f003 030c 	and.w	r3, r3, #12
 8016fee:	b2da      	uxtb	r2, r3
 8016ff0:	697b      	ldr	r3, [r7, #20]
 8016ff2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	7a1a      	ldrb	r2, [r3, #8]
 8016ff8:	697b      	ldr	r3, [r7, #20]
 8016ffa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016ffc:	4b2e      	ldr	r3, [pc, #184]	; (80170b8 <tcp_listen_input+0x1f4>)
 8016ffe:	681a      	ldr	r2, [r3, #0]
 8017000:	697b      	ldr	r3, [r7, #20]
 8017002:	60da      	str	r2, [r3, #12]
 8017004:	4a2c      	ldr	r2, [pc, #176]	; (80170b8 <tcp_listen_input+0x1f4>)
 8017006:	697b      	ldr	r3, [r7, #20]
 8017008:	6013      	str	r3, [r2, #0]
 801700a:	f003 fd29 	bl	801aa60 <tcp_timer_needed>
 801700e:	4b2b      	ldr	r3, [pc, #172]	; (80170bc <tcp_listen_input+0x1f8>)
 8017010:	2201      	movs	r2, #1
 8017012:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017014:	6978      	ldr	r0, [r7, #20]
 8017016:	f001 fd8f 	bl	8018b38 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801701a:	4b23      	ldr	r3, [pc, #140]	; (80170a8 <tcp_listen_input+0x1e4>)
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	89db      	ldrh	r3, [r3, #14]
 8017020:	b29a      	uxth	r2, r3
 8017022:	697b      	ldr	r3, [r7, #20]
 8017024:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017028:	697b      	ldr	r3, [r7, #20]
 801702a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017034:	697b      	ldr	r3, [r7, #20]
 8017036:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	3304      	adds	r3, #4
 801703c:	4618      	mov	r0, r3
 801703e:	f005 fa63 	bl	801c508 <ip4_route>
 8017042:	4601      	mov	r1, r0
 8017044:	697b      	ldr	r3, [r7, #20]
 8017046:	3304      	adds	r3, #4
 8017048:	461a      	mov	r2, r3
 801704a:	4620      	mov	r0, r4
 801704c:	f7ff fa30 	bl	80164b0 <tcp_eff_send_mss_netif>
 8017050:	4603      	mov	r3, r0
 8017052:	461a      	mov	r2, r3
 8017054:	697b      	ldr	r3, [r7, #20]
 8017056:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017058:	2112      	movs	r1, #18
 801705a:	6978      	ldr	r0, [r7, #20]
 801705c:	f002 fc9c 	bl	8019998 <tcp_enqueue_flags>
 8017060:	4603      	mov	r3, r0
 8017062:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d004      	beq.n	8017076 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801706c:	2100      	movs	r1, #0
 801706e:	6978      	ldr	r0, [r7, #20]
 8017070:	f7fd ff08 	bl	8014e84 <tcp_abandon>
      return;
 8017074:	e006      	b.n	8017084 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8017076:	6978      	ldr	r0, [r7, #20]
 8017078:	f002 fd7c 	bl	8019b74 <tcp_output>
  return;
 801707c:	e001      	b.n	8017082 <tcp_listen_input+0x1be>
    return;
 801707e:	bf00      	nop
 8017080:	e000      	b.n	8017084 <tcp_listen_input+0x1c0>
  return;
 8017082:	bf00      	nop
}
 8017084:	371c      	adds	r7, #28
 8017086:	46bd      	mov	sp, r7
 8017088:	bd90      	pop	{r4, r7, pc}
 801708a:	bf00      	nop
 801708c:	2000f9f8 	.word	0x2000f9f8
 8017090:	08021b2c 	.word	0x08021b2c
 8017094:	08021d24 	.word	0x08021d24
 8017098:	08021b78 	.word	0x08021b78
 801709c:	2000f9f0 	.word	0x2000f9f0
 80170a0:	2000f9f6 	.word	0x2000f9f6
 80170a4:	2000f9ec 	.word	0x2000f9ec
 80170a8:	2000f9dc 	.word	0x2000f9dc
 80170ac:	2000a07c 	.word	0x2000a07c
 80170b0:	2000a080 	.word	0x2000a080
 80170b4:	2000a06c 	.word	0x2000a06c
 80170b8:	2000f9c0 	.word	0x2000f9c0
 80170bc:	2000f9c8 	.word	0x2000f9c8

080170c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b086      	sub	sp, #24
 80170c4:	af04      	add	r7, sp, #16
 80170c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80170c8:	4b2f      	ldr	r3, [pc, #188]	; (8017188 <tcp_timewait_input+0xc8>)
 80170ca:	781b      	ldrb	r3, [r3, #0]
 80170cc:	f003 0304 	and.w	r3, r3, #4
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d153      	bne.n	801717c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d106      	bne.n	80170e8 <tcp_timewait_input+0x28>
 80170da:	4b2c      	ldr	r3, [pc, #176]	; (801718c <tcp_timewait_input+0xcc>)
 80170dc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80170e0:	492b      	ldr	r1, [pc, #172]	; (8017190 <tcp_timewait_input+0xd0>)
 80170e2:	482c      	ldr	r0, [pc, #176]	; (8017194 <tcp_timewait_input+0xd4>)
 80170e4:	f007 f946 	bl	801e374 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80170e8:	4b27      	ldr	r3, [pc, #156]	; (8017188 <tcp_timewait_input+0xc8>)
 80170ea:	781b      	ldrb	r3, [r3, #0]
 80170ec:	f003 0302 	and.w	r3, r3, #2
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d02a      	beq.n	801714a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80170f4:	4b28      	ldr	r3, [pc, #160]	; (8017198 <tcp_timewait_input+0xd8>)
 80170f6:	681a      	ldr	r2, [r3, #0]
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170fc:	1ad3      	subs	r3, r2, r3
 80170fe:	2b00      	cmp	r3, #0
 8017100:	db2d      	blt.n	801715e <tcp_timewait_input+0x9e>
 8017102:	4b25      	ldr	r3, [pc, #148]	; (8017198 <tcp_timewait_input+0xd8>)
 8017104:	681a      	ldr	r2, [r3, #0]
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801710a:	6879      	ldr	r1, [r7, #4]
 801710c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801710e:	440b      	add	r3, r1
 8017110:	1ad3      	subs	r3, r2, r3
 8017112:	2b00      	cmp	r3, #0
 8017114:	dc23      	bgt.n	801715e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017116:	4b21      	ldr	r3, [pc, #132]	; (801719c <tcp_timewait_input+0xdc>)
 8017118:	6819      	ldr	r1, [r3, #0]
 801711a:	4b21      	ldr	r3, [pc, #132]	; (80171a0 <tcp_timewait_input+0xe0>)
 801711c:	881b      	ldrh	r3, [r3, #0]
 801711e:	461a      	mov	r2, r3
 8017120:	4b1d      	ldr	r3, [pc, #116]	; (8017198 <tcp_timewait_input+0xd8>)
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017126:	4b1f      	ldr	r3, [pc, #124]	; (80171a4 <tcp_timewait_input+0xe4>)
 8017128:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801712a:	885b      	ldrh	r3, [r3, #2]
 801712c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801712e:	4a1d      	ldr	r2, [pc, #116]	; (80171a4 <tcp_timewait_input+0xe4>)
 8017130:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017132:	8812      	ldrh	r2, [r2, #0]
 8017134:	b292      	uxth	r2, r2
 8017136:	9202      	str	r2, [sp, #8]
 8017138:	9301      	str	r3, [sp, #4]
 801713a:	4b1b      	ldr	r3, [pc, #108]	; (80171a8 <tcp_timewait_input+0xe8>)
 801713c:	9300      	str	r3, [sp, #0]
 801713e:	4b1b      	ldr	r3, [pc, #108]	; (80171ac <tcp_timewait_input+0xec>)
 8017140:	4602      	mov	r2, r0
 8017142:	6878      	ldr	r0, [r7, #4]
 8017144:	f003 faca 	bl	801a6dc <tcp_rst>
      return;
 8017148:	e01b      	b.n	8017182 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801714a:	4b0f      	ldr	r3, [pc, #60]	; (8017188 <tcp_timewait_input+0xc8>)
 801714c:	781b      	ldrb	r3, [r3, #0]
 801714e:	f003 0301 	and.w	r3, r3, #1
 8017152:	2b00      	cmp	r3, #0
 8017154:	d003      	beq.n	801715e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017156:	4b16      	ldr	r3, [pc, #88]	; (80171b0 <tcp_timewait_input+0xf0>)
 8017158:	681a      	ldr	r2, [r3, #0]
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801715e:	4b10      	ldr	r3, [pc, #64]	; (80171a0 <tcp_timewait_input+0xe0>)
 8017160:	881b      	ldrh	r3, [r3, #0]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d00c      	beq.n	8017180 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	8b5b      	ldrh	r3, [r3, #26]
 801716a:	f043 0302 	orr.w	r3, r3, #2
 801716e:	b29a      	uxth	r2, r3
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017174:	6878      	ldr	r0, [r7, #4]
 8017176:	f002 fcfd 	bl	8019b74 <tcp_output>
  }
  return;
 801717a:	e001      	b.n	8017180 <tcp_timewait_input+0xc0>
    return;
 801717c:	bf00      	nop
 801717e:	e000      	b.n	8017182 <tcp_timewait_input+0xc2>
  return;
 8017180:	bf00      	nop
}
 8017182:	3708      	adds	r7, #8
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}
 8017188:	2000f9f8 	.word	0x2000f9f8
 801718c:	08021b2c 	.word	0x08021b2c
 8017190:	08021d44 	.word	0x08021d44
 8017194:	08021b78 	.word	0x08021b78
 8017198:	2000f9ec 	.word	0x2000f9ec
 801719c:	2000f9f0 	.word	0x2000f9f0
 80171a0:	2000f9f6 	.word	0x2000f9f6
 80171a4:	2000f9dc 	.word	0x2000f9dc
 80171a8:	2000a07c 	.word	0x2000a07c
 80171ac:	2000a080 	.word	0x2000a080
 80171b0:	2000f9b4 	.word	0x2000f9b4

080171b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80171b4:	b590      	push	{r4, r7, lr}
 80171b6:	b08d      	sub	sp, #52	; 0x34
 80171b8:	af04      	add	r7, sp, #16
 80171ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80171bc:	2300      	movs	r3, #0
 80171be:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80171c0:	2300      	movs	r3, #0
 80171c2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d106      	bne.n	80171d8 <tcp_process+0x24>
 80171ca:	4b9d      	ldr	r3, [pc, #628]	; (8017440 <tcp_process+0x28c>)
 80171cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80171d0:	499c      	ldr	r1, [pc, #624]	; (8017444 <tcp_process+0x290>)
 80171d2:	489d      	ldr	r0, [pc, #628]	; (8017448 <tcp_process+0x294>)
 80171d4:	f007 f8ce 	bl	801e374 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80171d8:	4b9c      	ldr	r3, [pc, #624]	; (801744c <tcp_process+0x298>)
 80171da:	781b      	ldrb	r3, [r3, #0]
 80171dc:	f003 0304 	and.w	r3, r3, #4
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d04e      	beq.n	8017282 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	7d1b      	ldrb	r3, [r3, #20]
 80171e8:	2b02      	cmp	r3, #2
 80171ea:	d108      	bne.n	80171fe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80171f0:	4b97      	ldr	r3, [pc, #604]	; (8017450 <tcp_process+0x29c>)
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	429a      	cmp	r2, r3
 80171f6:	d123      	bne.n	8017240 <tcp_process+0x8c>
        acceptable = 1;
 80171f8:	2301      	movs	r3, #1
 80171fa:	76fb      	strb	r3, [r7, #27]
 80171fc:	e020      	b.n	8017240 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017202:	4b94      	ldr	r3, [pc, #592]	; (8017454 <tcp_process+0x2a0>)
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	429a      	cmp	r2, r3
 8017208:	d102      	bne.n	8017210 <tcp_process+0x5c>
        acceptable = 1;
 801720a:	2301      	movs	r3, #1
 801720c:	76fb      	strb	r3, [r7, #27]
 801720e:	e017      	b.n	8017240 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017210:	4b90      	ldr	r3, [pc, #576]	; (8017454 <tcp_process+0x2a0>)
 8017212:	681a      	ldr	r2, [r3, #0]
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017218:	1ad3      	subs	r3, r2, r3
 801721a:	2b00      	cmp	r3, #0
 801721c:	db10      	blt.n	8017240 <tcp_process+0x8c>
 801721e:	4b8d      	ldr	r3, [pc, #564]	; (8017454 <tcp_process+0x2a0>)
 8017220:	681a      	ldr	r2, [r3, #0]
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017226:	6879      	ldr	r1, [r7, #4]
 8017228:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801722a:	440b      	add	r3, r1
 801722c:	1ad3      	subs	r3, r2, r3
 801722e:	2b00      	cmp	r3, #0
 8017230:	dc06      	bgt.n	8017240 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	8b5b      	ldrh	r3, [r3, #26]
 8017236:	f043 0302 	orr.w	r3, r3, #2
 801723a:	b29a      	uxth	r2, r3
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017240:	7efb      	ldrb	r3, [r7, #27]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d01b      	beq.n	801727e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	7d1b      	ldrb	r3, [r3, #20]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d106      	bne.n	801725c <tcp_process+0xa8>
 801724e:	4b7c      	ldr	r3, [pc, #496]	; (8017440 <tcp_process+0x28c>)
 8017250:	f44f 724e 	mov.w	r2, #824	; 0x338
 8017254:	4980      	ldr	r1, [pc, #512]	; (8017458 <tcp_process+0x2a4>)
 8017256:	487c      	ldr	r0, [pc, #496]	; (8017448 <tcp_process+0x294>)
 8017258:	f007 f88c 	bl	801e374 <iprintf>
      recv_flags |= TF_RESET;
 801725c:	4b7f      	ldr	r3, [pc, #508]	; (801745c <tcp_process+0x2a8>)
 801725e:	781b      	ldrb	r3, [r3, #0]
 8017260:	f043 0308 	orr.w	r3, r3, #8
 8017264:	b2da      	uxtb	r2, r3
 8017266:	4b7d      	ldr	r3, [pc, #500]	; (801745c <tcp_process+0x2a8>)
 8017268:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	8b5b      	ldrh	r3, [r3, #26]
 801726e:	f023 0301 	bic.w	r3, r3, #1
 8017272:	b29a      	uxth	r2, r3
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017278:	f06f 030d 	mvn.w	r3, #13
 801727c:	e37a      	b.n	8017974 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801727e:	2300      	movs	r3, #0
 8017280:	e378      	b.n	8017974 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017282:	4b72      	ldr	r3, [pc, #456]	; (801744c <tcp_process+0x298>)
 8017284:	781b      	ldrb	r3, [r3, #0]
 8017286:	f003 0302 	and.w	r3, r3, #2
 801728a:	2b00      	cmp	r3, #0
 801728c:	d010      	beq.n	80172b0 <tcp_process+0xfc>
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	7d1b      	ldrb	r3, [r3, #20]
 8017292:	2b02      	cmp	r3, #2
 8017294:	d00c      	beq.n	80172b0 <tcp_process+0xfc>
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	7d1b      	ldrb	r3, [r3, #20]
 801729a:	2b03      	cmp	r3, #3
 801729c:	d008      	beq.n	80172b0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	8b5b      	ldrh	r3, [r3, #26]
 80172a2:	f043 0302 	orr.w	r3, r3, #2
 80172a6:	b29a      	uxth	r2, r3
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80172ac:	2300      	movs	r3, #0
 80172ae:	e361      	b.n	8017974 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	8b5b      	ldrh	r3, [r3, #26]
 80172b4:	f003 0310 	and.w	r3, r3, #16
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d103      	bne.n	80172c4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80172bc:	4b68      	ldr	r3, [pc, #416]	; (8017460 <tcp_process+0x2ac>)
 80172be:	681a      	ldr	r2, [r3, #0]
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	2200      	movs	r2, #0
 80172c8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	2200      	movs	r2, #0
 80172d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80172d4:	6878      	ldr	r0, [r7, #4]
 80172d6:	f001 fc2f 	bl	8018b38 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	7d1b      	ldrb	r3, [r3, #20]
 80172de:	3b02      	subs	r3, #2
 80172e0:	2b07      	cmp	r3, #7
 80172e2:	f200 8337 	bhi.w	8017954 <tcp_process+0x7a0>
 80172e6:	a201      	add	r2, pc, #4	; (adr r2, 80172ec <tcp_process+0x138>)
 80172e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172ec:	0801730d 	.word	0x0801730d
 80172f0:	0801753d 	.word	0x0801753d
 80172f4:	080176b5 	.word	0x080176b5
 80172f8:	080176df 	.word	0x080176df
 80172fc:	08017803 	.word	0x08017803
 8017300:	080176b5 	.word	0x080176b5
 8017304:	0801788f 	.word	0x0801788f
 8017308:	0801791f 	.word	0x0801791f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801730c:	4b4f      	ldr	r3, [pc, #316]	; (801744c <tcp_process+0x298>)
 801730e:	781b      	ldrb	r3, [r3, #0]
 8017310:	f003 0310 	and.w	r3, r3, #16
 8017314:	2b00      	cmp	r3, #0
 8017316:	f000 80e4 	beq.w	80174e2 <tcp_process+0x32e>
 801731a:	4b4c      	ldr	r3, [pc, #304]	; (801744c <tcp_process+0x298>)
 801731c:	781b      	ldrb	r3, [r3, #0]
 801731e:	f003 0302 	and.w	r3, r3, #2
 8017322:	2b00      	cmp	r3, #0
 8017324:	f000 80dd 	beq.w	80174e2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801732c:	1c5a      	adds	r2, r3, #1
 801732e:	4b48      	ldr	r3, [pc, #288]	; (8017450 <tcp_process+0x29c>)
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	429a      	cmp	r2, r3
 8017334:	f040 80d5 	bne.w	80174e2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017338:	4b46      	ldr	r3, [pc, #280]	; (8017454 <tcp_process+0x2a0>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	1c5a      	adds	r2, r3, #1
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801734a:	4b41      	ldr	r3, [pc, #260]	; (8017450 <tcp_process+0x29c>)
 801734c:	681a      	ldr	r2, [r3, #0]
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017352:	4b44      	ldr	r3, [pc, #272]	; (8017464 <tcp_process+0x2b0>)
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	89db      	ldrh	r3, [r3, #14]
 8017358:	b29a      	uxth	r2, r3
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801736c:	4b39      	ldr	r3, [pc, #228]	; (8017454 <tcp_process+0x2a0>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	1e5a      	subs	r2, r3, #1
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	2204      	movs	r2, #4
 801737a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	3304      	adds	r3, #4
 8017384:	4618      	mov	r0, r3
 8017386:	f005 f8bf 	bl	801c508 <ip4_route>
 801738a:	4601      	mov	r1, r0
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	3304      	adds	r3, #4
 8017390:	461a      	mov	r2, r3
 8017392:	4620      	mov	r0, r4
 8017394:	f7ff f88c 	bl	80164b0 <tcp_eff_send_mss_netif>
 8017398:	4603      	mov	r3, r0
 801739a:	461a      	mov	r2, r3
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173a4:	009a      	lsls	r2, r3, #2
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173aa:	005b      	lsls	r3, r3, #1
 80173ac:	f241 111c 	movw	r1, #4380	; 0x111c
 80173b0:	428b      	cmp	r3, r1
 80173b2:	bf38      	it	cc
 80173b4:	460b      	movcc	r3, r1
 80173b6:	429a      	cmp	r2, r3
 80173b8:	d204      	bcs.n	80173c4 <tcp_process+0x210>
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173be:	009b      	lsls	r3, r3, #2
 80173c0:	b29b      	uxth	r3, r3
 80173c2:	e00d      	b.n	80173e0 <tcp_process+0x22c>
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173c8:	005b      	lsls	r3, r3, #1
 80173ca:	f241 121c 	movw	r2, #4380	; 0x111c
 80173ce:	4293      	cmp	r3, r2
 80173d0:	d904      	bls.n	80173dc <tcp_process+0x228>
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173d6:	005b      	lsls	r3, r3, #1
 80173d8:	b29b      	uxth	r3, r3
 80173da:	e001      	b.n	80173e0 <tcp_process+0x22c>
 80173dc:	f241 131c 	movw	r3, #4380	; 0x111c
 80173e0:	687a      	ldr	r2, [r7, #4]
 80173e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d106      	bne.n	80173fe <tcp_process+0x24a>
 80173f0:	4b13      	ldr	r3, [pc, #76]	; (8017440 <tcp_process+0x28c>)
 80173f2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80173f6:	491c      	ldr	r1, [pc, #112]	; (8017468 <tcp_process+0x2b4>)
 80173f8:	4813      	ldr	r0, [pc, #76]	; (8017448 <tcp_process+0x294>)
 80173fa:	f006 ffbb 	bl	801e374 <iprintf>
        --pcb->snd_queuelen;
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017404:	3b01      	subs	r3, #1
 8017406:	b29a      	uxth	r2, r3
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017412:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017414:	69fb      	ldr	r3, [r7, #28]
 8017416:	2b00      	cmp	r3, #0
 8017418:	d12a      	bne.n	8017470 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801741e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017420:	69fb      	ldr	r3, [r7, #28]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d106      	bne.n	8017434 <tcp_process+0x280>
 8017426:	4b06      	ldr	r3, [pc, #24]	; (8017440 <tcp_process+0x28c>)
 8017428:	f44f 725d 	mov.w	r2, #884	; 0x374
 801742c:	490f      	ldr	r1, [pc, #60]	; (801746c <tcp_process+0x2b8>)
 801742e:	4806      	ldr	r0, [pc, #24]	; (8017448 <tcp_process+0x294>)
 8017430:	f006 ffa0 	bl	801e374 <iprintf>
          pcb->unsent = rseg->next;
 8017434:	69fb      	ldr	r3, [r7, #28]
 8017436:	681a      	ldr	r2, [r3, #0]
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	66da      	str	r2, [r3, #108]	; 0x6c
 801743c:	e01c      	b.n	8017478 <tcp_process+0x2c4>
 801743e:	bf00      	nop
 8017440:	08021b2c 	.word	0x08021b2c
 8017444:	08021d64 	.word	0x08021d64
 8017448:	08021b78 	.word	0x08021b78
 801744c:	2000f9f8 	.word	0x2000f9f8
 8017450:	2000f9f0 	.word	0x2000f9f0
 8017454:	2000f9ec 	.word	0x2000f9ec
 8017458:	08021d80 	.word	0x08021d80
 801745c:	2000f9f9 	.word	0x2000f9f9
 8017460:	2000f9b4 	.word	0x2000f9b4
 8017464:	2000f9dc 	.word	0x2000f9dc
 8017468:	08021da0 	.word	0x08021da0
 801746c:	08021db8 	.word	0x08021db8
        } else {
          pcb->unacked = rseg->next;
 8017470:	69fb      	ldr	r3, [r7, #28]
 8017472:	681a      	ldr	r2, [r3, #0]
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8017478:	69f8      	ldr	r0, [r7, #28]
 801747a:	f7fe fc54 	bl	8015d26 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017482:	2b00      	cmp	r3, #0
 8017484:	d104      	bne.n	8017490 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801748c:	861a      	strh	r2, [r3, #48]	; 0x30
 801748e:	e006      	b.n	801749e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	2200      	movs	r2, #0
 8017494:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	2200      	movs	r2, #0
 801749a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d00a      	beq.n	80174be <tcp_process+0x30a>
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80174ae:	687a      	ldr	r2, [r7, #4]
 80174b0:	6910      	ldr	r0, [r2, #16]
 80174b2:	2200      	movs	r2, #0
 80174b4:	6879      	ldr	r1, [r7, #4]
 80174b6:	4798      	blx	r3
 80174b8:	4603      	mov	r3, r0
 80174ba:	76bb      	strb	r3, [r7, #26]
 80174bc:	e001      	b.n	80174c2 <tcp_process+0x30e>
 80174be:	2300      	movs	r3, #0
 80174c0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80174c2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80174c6:	f113 0f0d 	cmn.w	r3, #13
 80174ca:	d102      	bne.n	80174d2 <tcp_process+0x31e>
          return ERR_ABRT;
 80174cc:	f06f 030c 	mvn.w	r3, #12
 80174d0:	e250      	b.n	8017974 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	8b5b      	ldrh	r3, [r3, #26]
 80174d6:	f043 0302 	orr.w	r3, r3, #2
 80174da:	b29a      	uxth	r2, r3
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80174e0:	e23a      	b.n	8017958 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80174e2:	4b98      	ldr	r3, [pc, #608]	; (8017744 <tcp_process+0x590>)
 80174e4:	781b      	ldrb	r3, [r3, #0]
 80174e6:	f003 0310 	and.w	r3, r3, #16
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	f000 8234 	beq.w	8017958 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80174f0:	4b95      	ldr	r3, [pc, #596]	; (8017748 <tcp_process+0x594>)
 80174f2:	6819      	ldr	r1, [r3, #0]
 80174f4:	4b95      	ldr	r3, [pc, #596]	; (801774c <tcp_process+0x598>)
 80174f6:	881b      	ldrh	r3, [r3, #0]
 80174f8:	461a      	mov	r2, r3
 80174fa:	4b95      	ldr	r3, [pc, #596]	; (8017750 <tcp_process+0x59c>)
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017500:	4b94      	ldr	r3, [pc, #592]	; (8017754 <tcp_process+0x5a0>)
 8017502:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017504:	885b      	ldrh	r3, [r3, #2]
 8017506:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017508:	4a92      	ldr	r2, [pc, #584]	; (8017754 <tcp_process+0x5a0>)
 801750a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801750c:	8812      	ldrh	r2, [r2, #0]
 801750e:	b292      	uxth	r2, r2
 8017510:	9202      	str	r2, [sp, #8]
 8017512:	9301      	str	r3, [sp, #4]
 8017514:	4b90      	ldr	r3, [pc, #576]	; (8017758 <tcp_process+0x5a4>)
 8017516:	9300      	str	r3, [sp, #0]
 8017518:	4b90      	ldr	r3, [pc, #576]	; (801775c <tcp_process+0x5a8>)
 801751a:	4602      	mov	r2, r0
 801751c:	6878      	ldr	r0, [r7, #4]
 801751e:	f003 f8dd 	bl	801a6dc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017528:	2b05      	cmp	r3, #5
 801752a:	f200 8215 	bhi.w	8017958 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	2200      	movs	r2, #0
 8017532:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8017534:	6878      	ldr	r0, [r7, #4]
 8017536:	f002 fea7 	bl	801a288 <tcp_rexmit_rto>
      break;
 801753a:	e20d      	b.n	8017958 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801753c:	4b81      	ldr	r3, [pc, #516]	; (8017744 <tcp_process+0x590>)
 801753e:	781b      	ldrb	r3, [r3, #0]
 8017540:	f003 0310 	and.w	r3, r3, #16
 8017544:	2b00      	cmp	r3, #0
 8017546:	f000 80a1 	beq.w	801768c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801754a:	4b7f      	ldr	r3, [pc, #508]	; (8017748 <tcp_process+0x594>)
 801754c:	681a      	ldr	r2, [r3, #0]
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017552:	1ad3      	subs	r3, r2, r3
 8017554:	3b01      	subs	r3, #1
 8017556:	2b00      	cmp	r3, #0
 8017558:	db7e      	blt.n	8017658 <tcp_process+0x4a4>
 801755a:	4b7b      	ldr	r3, [pc, #492]	; (8017748 <tcp_process+0x594>)
 801755c:	681a      	ldr	r2, [r3, #0]
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017562:	1ad3      	subs	r3, r2, r3
 8017564:	2b00      	cmp	r3, #0
 8017566:	dc77      	bgt.n	8017658 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	2204      	movs	r2, #4
 801756c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017572:	2b00      	cmp	r3, #0
 8017574:	d102      	bne.n	801757c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017576:	23fa      	movs	r3, #250	; 0xfa
 8017578:	76bb      	strb	r3, [r7, #26]
 801757a:	e01d      	b.n	80175b8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017580:	699b      	ldr	r3, [r3, #24]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d106      	bne.n	8017594 <tcp_process+0x3e0>
 8017586:	4b76      	ldr	r3, [pc, #472]	; (8017760 <tcp_process+0x5ac>)
 8017588:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801758c:	4975      	ldr	r1, [pc, #468]	; (8017764 <tcp_process+0x5b0>)
 801758e:	4876      	ldr	r0, [pc, #472]	; (8017768 <tcp_process+0x5b4>)
 8017590:	f006 fef0 	bl	801e374 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017598:	699b      	ldr	r3, [r3, #24]
 801759a:	2b00      	cmp	r3, #0
 801759c:	d00a      	beq.n	80175b4 <tcp_process+0x400>
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80175a2:	699b      	ldr	r3, [r3, #24]
 80175a4:	687a      	ldr	r2, [r7, #4]
 80175a6:	6910      	ldr	r0, [r2, #16]
 80175a8:	2200      	movs	r2, #0
 80175aa:	6879      	ldr	r1, [r7, #4]
 80175ac:	4798      	blx	r3
 80175ae:	4603      	mov	r3, r0
 80175b0:	76bb      	strb	r3, [r7, #26]
 80175b2:	e001      	b.n	80175b8 <tcp_process+0x404>
 80175b4:	23f0      	movs	r3, #240	; 0xf0
 80175b6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80175b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d00a      	beq.n	80175d6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80175c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80175c4:	f113 0f0d 	cmn.w	r3, #13
 80175c8:	d002      	beq.n	80175d0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80175ca:	6878      	ldr	r0, [r7, #4]
 80175cc:	f7fd fd18 	bl	8015000 <tcp_abort>
            }
            return ERR_ABRT;
 80175d0:	f06f 030c 	mvn.w	r3, #12
 80175d4:	e1ce      	b.n	8017974 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80175d6:	6878      	ldr	r0, [r7, #4]
 80175d8:	f000 fae0 	bl	8017b9c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80175dc:	4b63      	ldr	r3, [pc, #396]	; (801776c <tcp_process+0x5b8>)
 80175de:	881b      	ldrh	r3, [r3, #0]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d005      	beq.n	80175f0 <tcp_process+0x43c>
            recv_acked--;
 80175e4:	4b61      	ldr	r3, [pc, #388]	; (801776c <tcp_process+0x5b8>)
 80175e6:	881b      	ldrh	r3, [r3, #0]
 80175e8:	3b01      	subs	r3, #1
 80175ea:	b29a      	uxth	r2, r3
 80175ec:	4b5f      	ldr	r3, [pc, #380]	; (801776c <tcp_process+0x5b8>)
 80175ee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175f4:	009a      	lsls	r2, r3, #2
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80175fa:	005b      	lsls	r3, r3, #1
 80175fc:	f241 111c 	movw	r1, #4380	; 0x111c
 8017600:	428b      	cmp	r3, r1
 8017602:	bf38      	it	cc
 8017604:	460b      	movcc	r3, r1
 8017606:	429a      	cmp	r2, r3
 8017608:	d204      	bcs.n	8017614 <tcp_process+0x460>
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801760e:	009b      	lsls	r3, r3, #2
 8017610:	b29b      	uxth	r3, r3
 8017612:	e00d      	b.n	8017630 <tcp_process+0x47c>
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017618:	005b      	lsls	r3, r3, #1
 801761a:	f241 121c 	movw	r2, #4380	; 0x111c
 801761e:	4293      	cmp	r3, r2
 8017620:	d904      	bls.n	801762c <tcp_process+0x478>
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017626:	005b      	lsls	r3, r3, #1
 8017628:	b29b      	uxth	r3, r3
 801762a:	e001      	b.n	8017630 <tcp_process+0x47c>
 801762c:	f241 131c 	movw	r3, #4380	; 0x111c
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017636:	4b4e      	ldr	r3, [pc, #312]	; (8017770 <tcp_process+0x5bc>)
 8017638:	781b      	ldrb	r3, [r3, #0]
 801763a:	f003 0320 	and.w	r3, r3, #32
 801763e:	2b00      	cmp	r3, #0
 8017640:	d037      	beq.n	80176b2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	8b5b      	ldrh	r3, [r3, #26]
 8017646:	f043 0302 	orr.w	r3, r3, #2
 801764a:	b29a      	uxth	r2, r3
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	2207      	movs	r2, #7
 8017654:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017656:	e02c      	b.n	80176b2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017658:	4b3b      	ldr	r3, [pc, #236]	; (8017748 <tcp_process+0x594>)
 801765a:	6819      	ldr	r1, [r3, #0]
 801765c:	4b3b      	ldr	r3, [pc, #236]	; (801774c <tcp_process+0x598>)
 801765e:	881b      	ldrh	r3, [r3, #0]
 8017660:	461a      	mov	r2, r3
 8017662:	4b3b      	ldr	r3, [pc, #236]	; (8017750 <tcp_process+0x59c>)
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017668:	4b3a      	ldr	r3, [pc, #232]	; (8017754 <tcp_process+0x5a0>)
 801766a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801766c:	885b      	ldrh	r3, [r3, #2]
 801766e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017670:	4a38      	ldr	r2, [pc, #224]	; (8017754 <tcp_process+0x5a0>)
 8017672:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017674:	8812      	ldrh	r2, [r2, #0]
 8017676:	b292      	uxth	r2, r2
 8017678:	9202      	str	r2, [sp, #8]
 801767a:	9301      	str	r3, [sp, #4]
 801767c:	4b36      	ldr	r3, [pc, #216]	; (8017758 <tcp_process+0x5a4>)
 801767e:	9300      	str	r3, [sp, #0]
 8017680:	4b36      	ldr	r3, [pc, #216]	; (801775c <tcp_process+0x5a8>)
 8017682:	4602      	mov	r2, r0
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f003 f829 	bl	801a6dc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801768a:	e167      	b.n	801795c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801768c:	4b2d      	ldr	r3, [pc, #180]	; (8017744 <tcp_process+0x590>)
 801768e:	781b      	ldrb	r3, [r3, #0]
 8017690:	f003 0302 	and.w	r3, r3, #2
 8017694:	2b00      	cmp	r3, #0
 8017696:	f000 8161 	beq.w	801795c <tcp_process+0x7a8>
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801769e:	1e5a      	subs	r2, r3, #1
 80176a0:	4b2b      	ldr	r3, [pc, #172]	; (8017750 <tcp_process+0x59c>)
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	429a      	cmp	r2, r3
 80176a6:	f040 8159 	bne.w	801795c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80176aa:	6878      	ldr	r0, [r7, #4]
 80176ac:	f002 fe0e 	bl	801a2cc <tcp_rexmit>
      break;
 80176b0:	e154      	b.n	801795c <tcp_process+0x7a8>
 80176b2:	e153      	b.n	801795c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80176b4:	6878      	ldr	r0, [r7, #4]
 80176b6:	f000 fa71 	bl	8017b9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80176ba:	4b2d      	ldr	r3, [pc, #180]	; (8017770 <tcp_process+0x5bc>)
 80176bc:	781b      	ldrb	r3, [r3, #0]
 80176be:	f003 0320 	and.w	r3, r3, #32
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	f000 814c 	beq.w	8017960 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	8b5b      	ldrh	r3, [r3, #26]
 80176cc:	f043 0302 	orr.w	r3, r3, #2
 80176d0:	b29a      	uxth	r2, r3
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	2207      	movs	r2, #7
 80176da:	751a      	strb	r2, [r3, #20]
      }
      break;
 80176dc:	e140      	b.n	8017960 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80176de:	6878      	ldr	r0, [r7, #4]
 80176e0:	f000 fa5c 	bl	8017b9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80176e4:	4b22      	ldr	r3, [pc, #136]	; (8017770 <tcp_process+0x5bc>)
 80176e6:	781b      	ldrb	r3, [r3, #0]
 80176e8:	f003 0320 	and.w	r3, r3, #32
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d071      	beq.n	80177d4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80176f0:	4b14      	ldr	r3, [pc, #80]	; (8017744 <tcp_process+0x590>)
 80176f2:	781b      	ldrb	r3, [r3, #0]
 80176f4:	f003 0310 	and.w	r3, r3, #16
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d060      	beq.n	80177be <tcp_process+0x60a>
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017700:	4b11      	ldr	r3, [pc, #68]	; (8017748 <tcp_process+0x594>)
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	429a      	cmp	r2, r3
 8017706:	d15a      	bne.n	80177be <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801770c:	2b00      	cmp	r3, #0
 801770e:	d156      	bne.n	80177be <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	8b5b      	ldrh	r3, [r3, #26]
 8017714:	f043 0302 	orr.w	r3, r3, #2
 8017718:	b29a      	uxth	r2, r3
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801771e:	6878      	ldr	r0, [r7, #4]
 8017720:	f7fe fdbc 	bl	801629c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017724:	4b13      	ldr	r3, [pc, #76]	; (8017774 <tcp_process+0x5c0>)
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	687a      	ldr	r2, [r7, #4]
 801772a:	429a      	cmp	r2, r3
 801772c:	d105      	bne.n	801773a <tcp_process+0x586>
 801772e:	4b11      	ldr	r3, [pc, #68]	; (8017774 <tcp_process+0x5c0>)
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	68db      	ldr	r3, [r3, #12]
 8017734:	4a0f      	ldr	r2, [pc, #60]	; (8017774 <tcp_process+0x5c0>)
 8017736:	6013      	str	r3, [r2, #0]
 8017738:	e02e      	b.n	8017798 <tcp_process+0x5e4>
 801773a:	4b0e      	ldr	r3, [pc, #56]	; (8017774 <tcp_process+0x5c0>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	617b      	str	r3, [r7, #20]
 8017740:	e027      	b.n	8017792 <tcp_process+0x5de>
 8017742:	bf00      	nop
 8017744:	2000f9f8 	.word	0x2000f9f8
 8017748:	2000f9f0 	.word	0x2000f9f0
 801774c:	2000f9f6 	.word	0x2000f9f6
 8017750:	2000f9ec 	.word	0x2000f9ec
 8017754:	2000f9dc 	.word	0x2000f9dc
 8017758:	2000a07c 	.word	0x2000a07c
 801775c:	2000a080 	.word	0x2000a080
 8017760:	08021b2c 	.word	0x08021b2c
 8017764:	08021dcc 	.word	0x08021dcc
 8017768:	08021b78 	.word	0x08021b78
 801776c:	2000f9f4 	.word	0x2000f9f4
 8017770:	2000f9f9 	.word	0x2000f9f9
 8017774:	2000f9c0 	.word	0x2000f9c0
 8017778:	697b      	ldr	r3, [r7, #20]
 801777a:	68db      	ldr	r3, [r3, #12]
 801777c:	687a      	ldr	r2, [r7, #4]
 801777e:	429a      	cmp	r2, r3
 8017780:	d104      	bne.n	801778c <tcp_process+0x5d8>
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	68da      	ldr	r2, [r3, #12]
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	60da      	str	r2, [r3, #12]
 801778a:	e005      	b.n	8017798 <tcp_process+0x5e4>
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	68db      	ldr	r3, [r3, #12]
 8017790:	617b      	str	r3, [r7, #20]
 8017792:	697b      	ldr	r3, [r7, #20]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d1ef      	bne.n	8017778 <tcp_process+0x5c4>
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	2200      	movs	r2, #0
 801779c:	60da      	str	r2, [r3, #12]
 801779e:	4b77      	ldr	r3, [pc, #476]	; (801797c <tcp_process+0x7c8>)
 80177a0:	2201      	movs	r2, #1
 80177a2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	220a      	movs	r2, #10
 80177a8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80177aa:	4b75      	ldr	r3, [pc, #468]	; (8017980 <tcp_process+0x7cc>)
 80177ac:	681a      	ldr	r2, [r3, #0]
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	60da      	str	r2, [r3, #12]
 80177b2:	4a73      	ldr	r2, [pc, #460]	; (8017980 <tcp_process+0x7cc>)
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	6013      	str	r3, [r2, #0]
 80177b8:	f003 f952 	bl	801aa60 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80177bc:	e0d2      	b.n	8017964 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	8b5b      	ldrh	r3, [r3, #26]
 80177c2:	f043 0302 	orr.w	r3, r3, #2
 80177c6:	b29a      	uxth	r2, r3
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	2208      	movs	r2, #8
 80177d0:	751a      	strb	r2, [r3, #20]
      break;
 80177d2:	e0c7      	b.n	8017964 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80177d4:	4b6b      	ldr	r3, [pc, #428]	; (8017984 <tcp_process+0x7d0>)
 80177d6:	781b      	ldrb	r3, [r3, #0]
 80177d8:	f003 0310 	and.w	r3, r3, #16
 80177dc:	2b00      	cmp	r3, #0
 80177de:	f000 80c1 	beq.w	8017964 <tcp_process+0x7b0>
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80177e6:	4b68      	ldr	r3, [pc, #416]	; (8017988 <tcp_process+0x7d4>)
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	429a      	cmp	r2, r3
 80177ec:	f040 80ba 	bne.w	8017964 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	f040 80b5 	bne.w	8017964 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	2206      	movs	r2, #6
 80177fe:	751a      	strb	r2, [r3, #20]
      break;
 8017800:	e0b0      	b.n	8017964 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017802:	6878      	ldr	r0, [r7, #4]
 8017804:	f000 f9ca 	bl	8017b9c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017808:	4b60      	ldr	r3, [pc, #384]	; (801798c <tcp_process+0x7d8>)
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	f003 0320 	and.w	r3, r3, #32
 8017810:	2b00      	cmp	r3, #0
 8017812:	f000 80a9 	beq.w	8017968 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	8b5b      	ldrh	r3, [r3, #26]
 801781a:	f043 0302 	orr.w	r3, r3, #2
 801781e:	b29a      	uxth	r2, r3
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017824:	6878      	ldr	r0, [r7, #4]
 8017826:	f7fe fd39 	bl	801629c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801782a:	4b59      	ldr	r3, [pc, #356]	; (8017990 <tcp_process+0x7dc>)
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	687a      	ldr	r2, [r7, #4]
 8017830:	429a      	cmp	r2, r3
 8017832:	d105      	bne.n	8017840 <tcp_process+0x68c>
 8017834:	4b56      	ldr	r3, [pc, #344]	; (8017990 <tcp_process+0x7dc>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	68db      	ldr	r3, [r3, #12]
 801783a:	4a55      	ldr	r2, [pc, #340]	; (8017990 <tcp_process+0x7dc>)
 801783c:	6013      	str	r3, [r2, #0]
 801783e:	e013      	b.n	8017868 <tcp_process+0x6b4>
 8017840:	4b53      	ldr	r3, [pc, #332]	; (8017990 <tcp_process+0x7dc>)
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	613b      	str	r3, [r7, #16]
 8017846:	e00c      	b.n	8017862 <tcp_process+0x6ae>
 8017848:	693b      	ldr	r3, [r7, #16]
 801784a:	68db      	ldr	r3, [r3, #12]
 801784c:	687a      	ldr	r2, [r7, #4]
 801784e:	429a      	cmp	r2, r3
 8017850:	d104      	bne.n	801785c <tcp_process+0x6a8>
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	68da      	ldr	r2, [r3, #12]
 8017856:	693b      	ldr	r3, [r7, #16]
 8017858:	60da      	str	r2, [r3, #12]
 801785a:	e005      	b.n	8017868 <tcp_process+0x6b4>
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	68db      	ldr	r3, [r3, #12]
 8017860:	613b      	str	r3, [r7, #16]
 8017862:	693b      	ldr	r3, [r7, #16]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d1ef      	bne.n	8017848 <tcp_process+0x694>
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	2200      	movs	r2, #0
 801786c:	60da      	str	r2, [r3, #12]
 801786e:	4b43      	ldr	r3, [pc, #268]	; (801797c <tcp_process+0x7c8>)
 8017870:	2201      	movs	r2, #1
 8017872:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	220a      	movs	r2, #10
 8017878:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801787a:	4b41      	ldr	r3, [pc, #260]	; (8017980 <tcp_process+0x7cc>)
 801787c:	681a      	ldr	r2, [r3, #0]
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	60da      	str	r2, [r3, #12]
 8017882:	4a3f      	ldr	r2, [pc, #252]	; (8017980 <tcp_process+0x7cc>)
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	6013      	str	r3, [r2, #0]
 8017888:	f003 f8ea 	bl	801aa60 <tcp_timer_needed>
      }
      break;
 801788c:	e06c      	b.n	8017968 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801788e:	6878      	ldr	r0, [r7, #4]
 8017890:	f000 f984 	bl	8017b9c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017894:	4b3b      	ldr	r3, [pc, #236]	; (8017984 <tcp_process+0x7d0>)
 8017896:	781b      	ldrb	r3, [r3, #0]
 8017898:	f003 0310 	and.w	r3, r3, #16
 801789c:	2b00      	cmp	r3, #0
 801789e:	d065      	beq.n	801796c <tcp_process+0x7b8>
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80178a4:	4b38      	ldr	r3, [pc, #224]	; (8017988 <tcp_process+0x7d4>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	429a      	cmp	r2, r3
 80178aa:	d15f      	bne.n	801796c <tcp_process+0x7b8>
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d15b      	bne.n	801796c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80178b4:	6878      	ldr	r0, [r7, #4]
 80178b6:	f7fe fcf1 	bl	801629c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80178ba:	4b35      	ldr	r3, [pc, #212]	; (8017990 <tcp_process+0x7dc>)
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	687a      	ldr	r2, [r7, #4]
 80178c0:	429a      	cmp	r2, r3
 80178c2:	d105      	bne.n	80178d0 <tcp_process+0x71c>
 80178c4:	4b32      	ldr	r3, [pc, #200]	; (8017990 <tcp_process+0x7dc>)
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	68db      	ldr	r3, [r3, #12]
 80178ca:	4a31      	ldr	r2, [pc, #196]	; (8017990 <tcp_process+0x7dc>)
 80178cc:	6013      	str	r3, [r2, #0]
 80178ce:	e013      	b.n	80178f8 <tcp_process+0x744>
 80178d0:	4b2f      	ldr	r3, [pc, #188]	; (8017990 <tcp_process+0x7dc>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	60fb      	str	r3, [r7, #12]
 80178d6:	e00c      	b.n	80178f2 <tcp_process+0x73e>
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	68db      	ldr	r3, [r3, #12]
 80178dc:	687a      	ldr	r2, [r7, #4]
 80178de:	429a      	cmp	r2, r3
 80178e0:	d104      	bne.n	80178ec <tcp_process+0x738>
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	68da      	ldr	r2, [r3, #12]
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	60da      	str	r2, [r3, #12]
 80178ea:	e005      	b.n	80178f8 <tcp_process+0x744>
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	68db      	ldr	r3, [r3, #12]
 80178f0:	60fb      	str	r3, [r7, #12]
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d1ef      	bne.n	80178d8 <tcp_process+0x724>
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2200      	movs	r2, #0
 80178fc:	60da      	str	r2, [r3, #12]
 80178fe:	4b1f      	ldr	r3, [pc, #124]	; (801797c <tcp_process+0x7c8>)
 8017900:	2201      	movs	r2, #1
 8017902:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	220a      	movs	r2, #10
 8017908:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801790a:	4b1d      	ldr	r3, [pc, #116]	; (8017980 <tcp_process+0x7cc>)
 801790c:	681a      	ldr	r2, [r3, #0]
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	60da      	str	r2, [r3, #12]
 8017912:	4a1b      	ldr	r2, [pc, #108]	; (8017980 <tcp_process+0x7cc>)
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	6013      	str	r3, [r2, #0]
 8017918:	f003 f8a2 	bl	801aa60 <tcp_timer_needed>
      }
      break;
 801791c:	e026      	b.n	801796c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801791e:	6878      	ldr	r0, [r7, #4]
 8017920:	f000 f93c 	bl	8017b9c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017924:	4b17      	ldr	r3, [pc, #92]	; (8017984 <tcp_process+0x7d0>)
 8017926:	781b      	ldrb	r3, [r3, #0]
 8017928:	f003 0310 	and.w	r3, r3, #16
 801792c:	2b00      	cmp	r3, #0
 801792e:	d01f      	beq.n	8017970 <tcp_process+0x7bc>
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017934:	4b14      	ldr	r3, [pc, #80]	; (8017988 <tcp_process+0x7d4>)
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	429a      	cmp	r2, r3
 801793a:	d119      	bne.n	8017970 <tcp_process+0x7bc>
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017940:	2b00      	cmp	r3, #0
 8017942:	d115      	bne.n	8017970 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017944:	4b11      	ldr	r3, [pc, #68]	; (801798c <tcp_process+0x7d8>)
 8017946:	781b      	ldrb	r3, [r3, #0]
 8017948:	f043 0310 	orr.w	r3, r3, #16
 801794c:	b2da      	uxtb	r2, r3
 801794e:	4b0f      	ldr	r3, [pc, #60]	; (801798c <tcp_process+0x7d8>)
 8017950:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017952:	e00d      	b.n	8017970 <tcp_process+0x7bc>
    default:
      break;
 8017954:	bf00      	nop
 8017956:	e00c      	b.n	8017972 <tcp_process+0x7be>
      break;
 8017958:	bf00      	nop
 801795a:	e00a      	b.n	8017972 <tcp_process+0x7be>
      break;
 801795c:	bf00      	nop
 801795e:	e008      	b.n	8017972 <tcp_process+0x7be>
      break;
 8017960:	bf00      	nop
 8017962:	e006      	b.n	8017972 <tcp_process+0x7be>
      break;
 8017964:	bf00      	nop
 8017966:	e004      	b.n	8017972 <tcp_process+0x7be>
      break;
 8017968:	bf00      	nop
 801796a:	e002      	b.n	8017972 <tcp_process+0x7be>
      break;
 801796c:	bf00      	nop
 801796e:	e000      	b.n	8017972 <tcp_process+0x7be>
      break;
 8017970:	bf00      	nop
  }
  return ERR_OK;
 8017972:	2300      	movs	r3, #0
}
 8017974:	4618      	mov	r0, r3
 8017976:	3724      	adds	r7, #36	; 0x24
 8017978:	46bd      	mov	sp, r7
 801797a:	bd90      	pop	{r4, r7, pc}
 801797c:	2000f9c8 	.word	0x2000f9c8
 8017980:	2000f9c4 	.word	0x2000f9c4
 8017984:	2000f9f8 	.word	0x2000f9f8
 8017988:	2000f9f0 	.word	0x2000f9f0
 801798c:	2000f9f9 	.word	0x2000f9f9
 8017990:	2000f9c0 	.word	0x2000f9c0

08017994 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017994:	b590      	push	{r4, r7, lr}
 8017996:	b085      	sub	sp, #20
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
 801799c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d106      	bne.n	80179b2 <tcp_oos_insert_segment+0x1e>
 80179a4:	4b3b      	ldr	r3, [pc, #236]	; (8017a94 <tcp_oos_insert_segment+0x100>)
 80179a6:	f240 421f 	movw	r2, #1055	; 0x41f
 80179aa:	493b      	ldr	r1, [pc, #236]	; (8017a98 <tcp_oos_insert_segment+0x104>)
 80179ac:	483b      	ldr	r0, [pc, #236]	; (8017a9c <tcp_oos_insert_segment+0x108>)
 80179ae:	f006 fce1 	bl	801e374 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	68db      	ldr	r3, [r3, #12]
 80179b6:	899b      	ldrh	r3, [r3, #12]
 80179b8:	b29b      	uxth	r3, r3
 80179ba:	4618      	mov	r0, r3
 80179bc:	f7fa ffca 	bl	8012954 <lwip_htons>
 80179c0:	4603      	mov	r3, r0
 80179c2:	b2db      	uxtb	r3, r3
 80179c4:	f003 0301 	and.w	r3, r3, #1
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d028      	beq.n	8017a1e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80179cc:	6838      	ldr	r0, [r7, #0]
 80179ce:	f7fe f995 	bl	8015cfc <tcp_segs_free>
    next = NULL;
 80179d2:	2300      	movs	r3, #0
 80179d4:	603b      	str	r3, [r7, #0]
 80179d6:	e056      	b.n	8017a86 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	68db      	ldr	r3, [r3, #12]
 80179dc:	899b      	ldrh	r3, [r3, #12]
 80179de:	b29b      	uxth	r3, r3
 80179e0:	4618      	mov	r0, r3
 80179e2:	f7fa ffb7 	bl	8012954 <lwip_htons>
 80179e6:	4603      	mov	r3, r0
 80179e8:	b2db      	uxtb	r3, r3
 80179ea:	f003 0301 	and.w	r3, r3, #1
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d00d      	beq.n	8017a0e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	68db      	ldr	r3, [r3, #12]
 80179f6:	899b      	ldrh	r3, [r3, #12]
 80179f8:	b29c      	uxth	r4, r3
 80179fa:	2001      	movs	r0, #1
 80179fc:	f7fa ffaa 	bl	8012954 <lwip_htons>
 8017a00:	4603      	mov	r3, r0
 8017a02:	461a      	mov	r2, r3
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	68db      	ldr	r3, [r3, #12]
 8017a08:	4322      	orrs	r2, r4
 8017a0a:	b292      	uxth	r2, r2
 8017a0c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017a0e:	683b      	ldr	r3, [r7, #0]
 8017a10:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017a12:	683b      	ldr	r3, [r7, #0]
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017a18:	68f8      	ldr	r0, [r7, #12]
 8017a1a:	f7fe f984 	bl	8015d26 <tcp_seg_free>
    while (next &&
 8017a1e:	683b      	ldr	r3, [r7, #0]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d00e      	beq.n	8017a42 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	891b      	ldrh	r3, [r3, #8]
 8017a28:	461a      	mov	r2, r3
 8017a2a:	4b1d      	ldr	r3, [pc, #116]	; (8017aa0 <tcp_oos_insert_segment+0x10c>)
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	441a      	add	r2, r3
 8017a30:	683b      	ldr	r3, [r7, #0]
 8017a32:	68db      	ldr	r3, [r3, #12]
 8017a34:	685b      	ldr	r3, [r3, #4]
 8017a36:	6839      	ldr	r1, [r7, #0]
 8017a38:	8909      	ldrh	r1, [r1, #8]
 8017a3a:	440b      	add	r3, r1
 8017a3c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	daca      	bge.n	80179d8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017a42:	683b      	ldr	r3, [r7, #0]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d01e      	beq.n	8017a86 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	891b      	ldrh	r3, [r3, #8]
 8017a4c:	461a      	mov	r2, r3
 8017a4e:	4b14      	ldr	r3, [pc, #80]	; (8017aa0 <tcp_oos_insert_segment+0x10c>)
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	441a      	add	r2, r3
 8017a54:	683b      	ldr	r3, [r7, #0]
 8017a56:	68db      	ldr	r3, [r3, #12]
 8017a58:	685b      	ldr	r3, [r3, #4]
 8017a5a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	dd12      	ble.n	8017a86 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017a60:	683b      	ldr	r3, [r7, #0]
 8017a62:	68db      	ldr	r3, [r3, #12]
 8017a64:	685b      	ldr	r3, [r3, #4]
 8017a66:	b29a      	uxth	r2, r3
 8017a68:	4b0d      	ldr	r3, [pc, #52]	; (8017aa0 <tcp_oos_insert_segment+0x10c>)
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	b29b      	uxth	r3, r3
 8017a6e:	1ad3      	subs	r3, r2, r3
 8017a70:	b29a      	uxth	r2, r3
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	685a      	ldr	r2, [r3, #4]
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	891b      	ldrh	r3, [r3, #8]
 8017a7e:	4619      	mov	r1, r3
 8017a80:	4610      	mov	r0, r2
 8017a82:	f7fc fb47 	bl	8014114 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	683a      	ldr	r2, [r7, #0]
 8017a8a:	601a      	str	r2, [r3, #0]
}
 8017a8c:	bf00      	nop
 8017a8e:	3714      	adds	r7, #20
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd90      	pop	{r4, r7, pc}
 8017a94:	08021b2c 	.word	0x08021b2c
 8017a98:	08021dec 	.word	0x08021dec
 8017a9c:	08021b78 	.word	0x08021b78
 8017aa0:	2000f9ec 	.word	0x2000f9ec

08017aa4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017aa4:	b5b0      	push	{r4, r5, r7, lr}
 8017aa6:	b086      	sub	sp, #24
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	60f8      	str	r0, [r7, #12]
 8017aac:	60b9      	str	r1, [r7, #8]
 8017aae:	607a      	str	r2, [r7, #4]
 8017ab0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8017ab2:	e03e      	b.n	8017b32 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017ab4:	68bb      	ldr	r3, [r7, #8]
 8017ab6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017ab8:	68bb      	ldr	r3, [r7, #8]
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017abe:	697b      	ldr	r3, [r7, #20]
 8017ac0:	685b      	ldr	r3, [r3, #4]
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	f7fc fd3a 	bl	801453c <pbuf_clen>
 8017ac8:	4603      	mov	r3, r0
 8017aca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017ad2:	8a7a      	ldrh	r2, [r7, #18]
 8017ad4:	429a      	cmp	r2, r3
 8017ad6:	d906      	bls.n	8017ae6 <tcp_free_acked_segments+0x42>
 8017ad8:	4b2a      	ldr	r3, [pc, #168]	; (8017b84 <tcp_free_acked_segments+0xe0>)
 8017ada:	f240 4257 	movw	r2, #1111	; 0x457
 8017ade:	492a      	ldr	r1, [pc, #168]	; (8017b88 <tcp_free_acked_segments+0xe4>)
 8017ae0:	482a      	ldr	r0, [pc, #168]	; (8017b8c <tcp_free_acked_segments+0xe8>)
 8017ae2:	f006 fc47 	bl	801e374 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8017aec:	8a7b      	ldrh	r3, [r7, #18]
 8017aee:	1ad3      	subs	r3, r2, r3
 8017af0:	b29a      	uxth	r2, r3
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017af8:	697b      	ldr	r3, [r7, #20]
 8017afa:	891a      	ldrh	r2, [r3, #8]
 8017afc:	4b24      	ldr	r3, [pc, #144]	; (8017b90 <tcp_free_acked_segments+0xec>)
 8017afe:	881b      	ldrh	r3, [r3, #0]
 8017b00:	4413      	add	r3, r2
 8017b02:	b29a      	uxth	r2, r3
 8017b04:	4b22      	ldr	r3, [pc, #136]	; (8017b90 <tcp_free_acked_segments+0xec>)
 8017b06:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017b08:	6978      	ldr	r0, [r7, #20]
 8017b0a:	f7fe f90c 	bl	8015d26 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d00c      	beq.n	8017b32 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017b18:	68bb      	ldr	r3, [r7, #8]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d109      	bne.n	8017b32 <tcp_free_acked_segments+0x8e>
 8017b1e:	683b      	ldr	r3, [r7, #0]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d106      	bne.n	8017b32 <tcp_free_acked_segments+0x8e>
 8017b24:	4b17      	ldr	r3, [pc, #92]	; (8017b84 <tcp_free_acked_segments+0xe0>)
 8017b26:	f240 4261 	movw	r2, #1121	; 0x461
 8017b2a:	491a      	ldr	r1, [pc, #104]	; (8017b94 <tcp_free_acked_segments+0xf0>)
 8017b2c:	4817      	ldr	r0, [pc, #92]	; (8017b8c <tcp_free_acked_segments+0xe8>)
 8017b2e:	f006 fc21 	bl	801e374 <iprintf>
  while (seg_list != NULL &&
 8017b32:	68bb      	ldr	r3, [r7, #8]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d020      	beq.n	8017b7a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017b38:	68bb      	ldr	r3, [r7, #8]
 8017b3a:	68db      	ldr	r3, [r3, #12]
 8017b3c:	685b      	ldr	r3, [r3, #4]
 8017b3e:	4618      	mov	r0, r3
 8017b40:	f7fa ff1d 	bl	801297e <lwip_htonl>
 8017b44:	4604      	mov	r4, r0
 8017b46:	68bb      	ldr	r3, [r7, #8]
 8017b48:	891b      	ldrh	r3, [r3, #8]
 8017b4a:	461d      	mov	r5, r3
 8017b4c:	68bb      	ldr	r3, [r7, #8]
 8017b4e:	68db      	ldr	r3, [r3, #12]
 8017b50:	899b      	ldrh	r3, [r3, #12]
 8017b52:	b29b      	uxth	r3, r3
 8017b54:	4618      	mov	r0, r3
 8017b56:	f7fa fefd 	bl	8012954 <lwip_htons>
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	b2db      	uxtb	r3, r3
 8017b5e:	f003 0303 	and.w	r3, r3, #3
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d001      	beq.n	8017b6a <tcp_free_acked_segments+0xc6>
 8017b66:	2301      	movs	r3, #1
 8017b68:	e000      	b.n	8017b6c <tcp_free_acked_segments+0xc8>
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	442b      	add	r3, r5
 8017b6e:	18e2      	adds	r2, r4, r3
 8017b70:	4b09      	ldr	r3, [pc, #36]	; (8017b98 <tcp_free_acked_segments+0xf4>)
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	dd9c      	ble.n	8017ab4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017b7a:	68bb      	ldr	r3, [r7, #8]
}
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	3718      	adds	r7, #24
 8017b80:	46bd      	mov	sp, r7
 8017b82:	bdb0      	pop	{r4, r5, r7, pc}
 8017b84:	08021b2c 	.word	0x08021b2c
 8017b88:	08021e14 	.word	0x08021e14
 8017b8c:	08021b78 	.word	0x08021b78
 8017b90:	2000f9f4 	.word	0x2000f9f4
 8017b94:	08021e3c 	.word	0x08021e3c
 8017b98:	2000f9f0 	.word	0x2000f9f0

08017b9c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017b9c:	b5b0      	push	{r4, r5, r7, lr}
 8017b9e:	b094      	sub	sp, #80	; 0x50
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d106      	bne.n	8017bbc <tcp_receive+0x20>
 8017bae:	4b91      	ldr	r3, [pc, #580]	; (8017df4 <tcp_receive+0x258>)
 8017bb0:	f240 427b 	movw	r2, #1147	; 0x47b
 8017bb4:	4990      	ldr	r1, [pc, #576]	; (8017df8 <tcp_receive+0x25c>)
 8017bb6:	4891      	ldr	r0, [pc, #580]	; (8017dfc <tcp_receive+0x260>)
 8017bb8:	f006 fbdc 	bl	801e374 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	7d1b      	ldrb	r3, [r3, #20]
 8017bc0:	2b03      	cmp	r3, #3
 8017bc2:	d806      	bhi.n	8017bd2 <tcp_receive+0x36>
 8017bc4:	4b8b      	ldr	r3, [pc, #556]	; (8017df4 <tcp_receive+0x258>)
 8017bc6:	f240 427c 	movw	r2, #1148	; 0x47c
 8017bca:	498d      	ldr	r1, [pc, #564]	; (8017e00 <tcp_receive+0x264>)
 8017bcc:	488b      	ldr	r0, [pc, #556]	; (8017dfc <tcp_receive+0x260>)
 8017bce:	f006 fbd1 	bl	801e374 <iprintf>

  if (flags & TCP_ACK) {
 8017bd2:	4b8c      	ldr	r3, [pc, #560]	; (8017e04 <tcp_receive+0x268>)
 8017bd4:	781b      	ldrb	r3, [r3, #0]
 8017bd6:	f003 0310 	and.w	r3, r3, #16
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	f000 8264 	beq.w	80180a8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017be6:	461a      	mov	r2, r3
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017bec:	4413      	add	r3, r2
 8017bee:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017bf4:	4b84      	ldr	r3, [pc, #528]	; (8017e08 <tcp_receive+0x26c>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	1ad3      	subs	r3, r2, r3
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	db1b      	blt.n	8017c36 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017c02:	4b81      	ldr	r3, [pc, #516]	; (8017e08 <tcp_receive+0x26c>)
 8017c04:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017c06:	429a      	cmp	r2, r3
 8017c08:	d106      	bne.n	8017c18 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017c0e:	4b7f      	ldr	r3, [pc, #508]	; (8017e0c <tcp_receive+0x270>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	1ad3      	subs	r3, r2, r3
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	db0e      	blt.n	8017c36 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017c1c:	4b7b      	ldr	r3, [pc, #492]	; (8017e0c <tcp_receive+0x270>)
 8017c1e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d125      	bne.n	8017c70 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017c24:	4b7a      	ldr	r3, [pc, #488]	; (8017e10 <tcp_receive+0x274>)
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	89db      	ldrh	r3, [r3, #14]
 8017c2a:	b29a      	uxth	r2, r3
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017c32:	429a      	cmp	r2, r3
 8017c34:	d91c      	bls.n	8017c70 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017c36:	4b76      	ldr	r3, [pc, #472]	; (8017e10 <tcp_receive+0x274>)
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	89db      	ldrh	r3, [r3, #14]
 8017c3c:	b29a      	uxth	r2, r3
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d205      	bcs.n	8017c60 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8017c60:	4b69      	ldr	r3, [pc, #420]	; (8017e08 <tcp_receive+0x26c>)
 8017c62:	681a      	ldr	r2, [r3, #0]
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8017c68:	4b68      	ldr	r3, [pc, #416]	; (8017e0c <tcp_receive+0x270>)
 8017c6a:	681a      	ldr	r2, [r3, #0]
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017c70:	4b66      	ldr	r3, [pc, #408]	; (8017e0c <tcp_receive+0x270>)
 8017c72:	681a      	ldr	r2, [r3, #0]
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c78:	1ad3      	subs	r3, r2, r3
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	dc58      	bgt.n	8017d30 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017c7e:	4b65      	ldr	r3, [pc, #404]	; (8017e14 <tcp_receive+0x278>)
 8017c80:	881b      	ldrh	r3, [r3, #0]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d14b      	bne.n	8017d1e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c8a:	687a      	ldr	r2, [r7, #4]
 8017c8c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8017c90:	4413      	add	r3, r2
 8017c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c94:	429a      	cmp	r2, r3
 8017c96:	d142      	bne.n	8017d1e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	db3d      	blt.n	8017d1e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017ca6:	4b59      	ldr	r3, [pc, #356]	; (8017e0c <tcp_receive+0x270>)
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	429a      	cmp	r2, r3
 8017cac:	d137      	bne.n	8017d1e <tcp_receive+0x182>
              found_dupack = 1;
 8017cae:	2301      	movs	r3, #1
 8017cb0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017cb8:	2bff      	cmp	r3, #255	; 0xff
 8017cba:	d007      	beq.n	8017ccc <tcp_receive+0x130>
                ++pcb->dupacks;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	b2da      	uxtb	r2, r3
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017cd2:	2b03      	cmp	r3, #3
 8017cd4:	d91b      	bls.n	8017d0e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017ce0:	4413      	add	r3, r2
 8017ce2:	b29a      	uxth	r2, r3
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d30a      	bcc.n	8017d04 <tcp_receive+0x168>
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017cf8:	4413      	add	r3, r2
 8017cfa:	b29a      	uxth	r2, r3
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017d02:	e004      	b.n	8017d0e <tcp_receive+0x172>
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017d14:	2b02      	cmp	r3, #2
 8017d16:	d902      	bls.n	8017d1e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017d18:	6878      	ldr	r0, [r7, #4]
 8017d1a:	f002 fb43 	bl	801a3a4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	f040 8161 	bne.w	8017fe8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	2200      	movs	r2, #0
 8017d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017d2e:	e15b      	b.n	8017fe8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017d30:	4b36      	ldr	r3, [pc, #216]	; (8017e0c <tcp_receive+0x270>)
 8017d32:	681a      	ldr	r2, [r3, #0]
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d38:	1ad3      	subs	r3, r2, r3
 8017d3a:	3b01      	subs	r3, #1
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	f2c0 814e 	blt.w	8017fde <tcp_receive+0x442>
 8017d42:	4b32      	ldr	r3, [pc, #200]	; (8017e0c <tcp_receive+0x270>)
 8017d44:	681a      	ldr	r2, [r3, #0]
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d4a:	1ad3      	subs	r3, r2, r3
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	f300 8146 	bgt.w	8017fde <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	8b5b      	ldrh	r3, [r3, #26]
 8017d56:	f003 0304 	and.w	r3, r3, #4
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d010      	beq.n	8017d80 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	8b5b      	ldrh	r3, [r3, #26]
 8017d62:	f023 0304 	bic.w	r3, r3, #4
 8017d66:	b29a      	uxth	r2, r3
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	2200      	movs	r2, #0
 8017d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017d8e:	10db      	asrs	r3, r3, #3
 8017d90:	b21b      	sxth	r3, r3
 8017d92:	b29a      	uxth	r2, r3
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017d9a:	b29b      	uxth	r3, r3
 8017d9c:	4413      	add	r3, r2
 8017d9e:	b29b      	uxth	r3, r3
 8017da0:	b21a      	sxth	r2, r3
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017da8:	4b18      	ldr	r3, [pc, #96]	; (8017e0c <tcp_receive+0x270>)
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	b29a      	uxth	r2, r3
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017db2:	b29b      	uxth	r3, r3
 8017db4:	1ad3      	subs	r3, r2, r3
 8017db6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	2200      	movs	r2, #0
 8017dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8017dc0:	4b12      	ldr	r3, [pc, #72]	; (8017e0c <tcp_receive+0x270>)
 8017dc2:	681a      	ldr	r2, [r3, #0]
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	7d1b      	ldrb	r3, [r3, #20]
 8017dcc:	2b03      	cmp	r3, #3
 8017dce:	f240 8097 	bls.w	8017f00 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d245      	bcs.n	8017e6e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	8b5b      	ldrh	r3, [r3, #26]
 8017de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d014      	beq.n	8017e18 <tcp_receive+0x27c>
 8017dee:	2301      	movs	r3, #1
 8017df0:	e013      	b.n	8017e1a <tcp_receive+0x27e>
 8017df2:	bf00      	nop
 8017df4:	08021b2c 	.word	0x08021b2c
 8017df8:	08021e5c 	.word	0x08021e5c
 8017dfc:	08021b78 	.word	0x08021b78
 8017e00:	08021e78 	.word	0x08021e78
 8017e04:	2000f9f8 	.word	0x2000f9f8
 8017e08:	2000f9ec 	.word	0x2000f9ec
 8017e0c:	2000f9f0 	.word	0x2000f9f0
 8017e10:	2000f9dc 	.word	0x2000f9dc
 8017e14:	2000f9f6 	.word	0x2000f9f6
 8017e18:	2302      	movs	r3, #2
 8017e1a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017e1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8017e22:	b29a      	uxth	r2, r3
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e28:	fb12 f303 	smulbb	r3, r2, r3
 8017e2c:	b29b      	uxth	r3, r3
 8017e2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017e30:	4293      	cmp	r3, r2
 8017e32:	bf28      	it	cs
 8017e34:	4613      	movcs	r3, r2
 8017e36:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e40:	4413      	add	r3, r2
 8017e42:	b29a      	uxth	r2, r3
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	d309      	bcc.n	8017e62 <tcp_receive+0x2c6>
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e56:	4413      	add	r3, r2
 8017e58:	b29a      	uxth	r2, r3
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017e60:	e04e      	b.n	8017f00 <tcp_receive+0x364>
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017e6c:	e048      	b.n	8017f00 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017e74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017e76:	4413      	add	r3, r2
 8017e78:	b29a      	uxth	r2, r3
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8017e80:	429a      	cmp	r2, r3
 8017e82:	d309      	bcc.n	8017e98 <tcp_receive+0x2fc>
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017e8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017e8c:	4413      	add	r3, r2
 8017e8e:	b29a      	uxth	r2, r3
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8017e96:	e004      	b.n	8017ea2 <tcp_receive+0x306>
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017eae:	429a      	cmp	r2, r3
 8017eb0:	d326      	bcc.n	8017f00 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017ebe:	1ad3      	subs	r3, r2, r3
 8017ec0:	b29a      	uxth	r2, r3
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017ed2:	4413      	add	r3, r2
 8017ed4:	b29a      	uxth	r2, r3
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017edc:	429a      	cmp	r2, r3
 8017ede:	d30a      	bcc.n	8017ef6 <tcp_receive+0x35a>
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017eea:	4413      	add	r3, r2
 8017eec:	b29a      	uxth	r2, r3
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017ef4:	e004      	b.n	8017f00 <tcp_receive+0x364>
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017efc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f08:	4a98      	ldr	r2, [pc, #608]	; (801816c <tcp_receive+0x5d0>)
 8017f0a:	6878      	ldr	r0, [r7, #4]
 8017f0c:	f7ff fdca 	bl	8017aa4 <tcp_free_acked_segments>
 8017f10:	4602      	mov	r2, r0
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f1e:	4a94      	ldr	r2, [pc, #592]	; (8018170 <tcp_receive+0x5d4>)
 8017f20:	6878      	ldr	r0, [r7, #4]
 8017f22:	f7ff fdbf 	bl	8017aa4 <tcp_free_acked_segments>
 8017f26:	4602      	mov	r2, r0
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d104      	bne.n	8017f3e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f3a:	861a      	strh	r2, [r3, #48]	; 0x30
 8017f3c:	e002      	b.n	8017f44 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	2200      	movs	r2, #0
 8017f42:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	2200      	movs	r2, #0
 8017f48:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d103      	bne.n	8017f5a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	2200      	movs	r2, #0
 8017f56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017f60:	4b84      	ldr	r3, [pc, #528]	; (8018174 <tcp_receive+0x5d8>)
 8017f62:	881b      	ldrh	r3, [r3, #0]
 8017f64:	4413      	add	r3, r2
 8017f66:	b29a      	uxth	r2, r3
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	8b5b      	ldrh	r3, [r3, #26]
 8017f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d035      	beq.n	8017fe6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d118      	bne.n	8017fb4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d00c      	beq.n	8017fa4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f92:	68db      	ldr	r3, [r3, #12]
 8017f94:	685b      	ldr	r3, [r3, #4]
 8017f96:	4618      	mov	r0, r3
 8017f98:	f7fa fcf1 	bl	801297e <lwip_htonl>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	dc20      	bgt.n	8017fe6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	8b5b      	ldrh	r3, [r3, #26]
 8017fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017fac:	b29a      	uxth	r2, r3
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017fb2:	e018      	b.n	8017fe6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fbc:	68db      	ldr	r3, [r3, #12]
 8017fbe:	685b      	ldr	r3, [r3, #4]
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7fa fcdc 	bl	801297e <lwip_htonl>
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	1ae3      	subs	r3, r4, r3
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	dc0b      	bgt.n	8017fe6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	8b5b      	ldrh	r3, [r3, #26]
 8017fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017fd6:	b29a      	uxth	r2, r3
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017fdc:	e003      	b.n	8017fe6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017fde:	6878      	ldr	r0, [r7, #4]
 8017fe0:	f002 fbce 	bl	801a780 <tcp_send_empty_ack>
 8017fe4:	e000      	b.n	8017fe8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017fe6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d05b      	beq.n	80180a8 <tcp_receive+0x50c>
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017ff4:	4b60      	ldr	r3, [pc, #384]	; (8018178 <tcp_receive+0x5dc>)
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	1ad3      	subs	r3, r2, r3
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	da54      	bge.n	80180a8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017ffe:	4b5f      	ldr	r3, [pc, #380]	; (801817c <tcp_receive+0x5e0>)
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	b29a      	uxth	r2, r3
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018008:	b29b      	uxth	r3, r3
 801800a:	1ad3      	subs	r3, r2, r3
 801800c:	b29b      	uxth	r3, r3
 801800e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8018012:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801801c:	10db      	asrs	r3, r3, #3
 801801e:	b21b      	sxth	r3, r3
 8018020:	b29b      	uxth	r3, r3
 8018022:	1ad3      	subs	r3, r2, r3
 8018024:	b29b      	uxth	r3, r3
 8018026:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018030:	b29a      	uxth	r2, r3
 8018032:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018036:	4413      	add	r3, r2
 8018038:	b29b      	uxth	r3, r3
 801803a:	b21a      	sxth	r2, r3
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8018040:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8018044:	2b00      	cmp	r3, #0
 8018046:	da05      	bge.n	8018054 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8018048:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801804c:	425b      	negs	r3, r3
 801804e:	b29b      	uxth	r3, r3
 8018050:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018054:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801805e:	109b      	asrs	r3, r3, #2
 8018060:	b21b      	sxth	r3, r3
 8018062:	b29b      	uxth	r3, r3
 8018064:	1ad3      	subs	r3, r2, r3
 8018066:	b29b      	uxth	r3, r3
 8018068:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018072:	b29a      	uxth	r2, r3
 8018074:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018078:	4413      	add	r3, r2
 801807a:	b29b      	uxth	r3, r3
 801807c:	b21a      	sxth	r2, r3
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018088:	10db      	asrs	r3, r3, #3
 801808a:	b21b      	sxth	r3, r3
 801808c:	b29a      	uxth	r2, r3
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018094:	b29b      	uxth	r3, r3
 8018096:	4413      	add	r3, r2
 8018098:	b29b      	uxth	r3, r3
 801809a:	b21a      	sxth	r2, r3
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	2200      	movs	r2, #0
 80180a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80180a8:	4b35      	ldr	r3, [pc, #212]	; (8018180 <tcp_receive+0x5e4>)
 80180aa:	881b      	ldrh	r3, [r3, #0]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	f000 84e2 	beq.w	8018a76 <tcp_receive+0xeda>
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	7d1b      	ldrb	r3, [r3, #20]
 80180b6:	2b06      	cmp	r3, #6
 80180b8:	f200 84dd 	bhi.w	8018a76 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80180c0:	4b30      	ldr	r3, [pc, #192]	; (8018184 <tcp_receive+0x5e8>)
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	1ad3      	subs	r3, r2, r3
 80180c6:	3b01      	subs	r3, #1
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	f2c0 808f 	blt.w	80181ec <tcp_receive+0x650>
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80180d2:	4b2b      	ldr	r3, [pc, #172]	; (8018180 <tcp_receive+0x5e4>)
 80180d4:	881b      	ldrh	r3, [r3, #0]
 80180d6:	4619      	mov	r1, r3
 80180d8:	4b2a      	ldr	r3, [pc, #168]	; (8018184 <tcp_receive+0x5e8>)
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	440b      	add	r3, r1
 80180de:	1ad3      	subs	r3, r2, r3
 80180e0:	3301      	adds	r3, #1
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	f300 8082 	bgt.w	80181ec <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80180e8:	4b27      	ldr	r3, [pc, #156]	; (8018188 <tcp_receive+0x5ec>)
 80180ea:	685b      	ldr	r3, [r3, #4]
 80180ec:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80180f2:	4b24      	ldr	r3, [pc, #144]	; (8018184 <tcp_receive+0x5e8>)
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	1ad3      	subs	r3, r2, r3
 80180f8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80180fa:	4b23      	ldr	r3, [pc, #140]	; (8018188 <tcp_receive+0x5ec>)
 80180fc:	685b      	ldr	r3, [r3, #4]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d106      	bne.n	8018110 <tcp_receive+0x574>
 8018102:	4b22      	ldr	r3, [pc, #136]	; (801818c <tcp_receive+0x5f0>)
 8018104:	f240 5294 	movw	r2, #1428	; 0x594
 8018108:	4921      	ldr	r1, [pc, #132]	; (8018190 <tcp_receive+0x5f4>)
 801810a:	4822      	ldr	r0, [pc, #136]	; (8018194 <tcp_receive+0x5f8>)
 801810c:	f006 f932 	bl	801e374 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018112:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018116:	4293      	cmp	r3, r2
 8018118:	d906      	bls.n	8018128 <tcp_receive+0x58c>
 801811a:	4b1c      	ldr	r3, [pc, #112]	; (801818c <tcp_receive+0x5f0>)
 801811c:	f240 5295 	movw	r2, #1429	; 0x595
 8018120:	491d      	ldr	r1, [pc, #116]	; (8018198 <tcp_receive+0x5fc>)
 8018122:	481c      	ldr	r0, [pc, #112]	; (8018194 <tcp_receive+0x5f8>)
 8018124:	f006 f926 	bl	801e374 <iprintf>
      off = (u16_t)off32;
 8018128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801812a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801812e:	4b16      	ldr	r3, [pc, #88]	; (8018188 <tcp_receive+0x5ec>)
 8018130:	685b      	ldr	r3, [r3, #4]
 8018132:	891b      	ldrh	r3, [r3, #8]
 8018134:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018138:	429a      	cmp	r2, r3
 801813a:	d906      	bls.n	801814a <tcp_receive+0x5ae>
 801813c:	4b13      	ldr	r3, [pc, #76]	; (801818c <tcp_receive+0x5f0>)
 801813e:	f240 5297 	movw	r2, #1431	; 0x597
 8018142:	4916      	ldr	r1, [pc, #88]	; (801819c <tcp_receive+0x600>)
 8018144:	4813      	ldr	r0, [pc, #76]	; (8018194 <tcp_receive+0x5f8>)
 8018146:	f006 f915 	bl	801e374 <iprintf>
      inseg.len -= off;
 801814a:	4b0f      	ldr	r3, [pc, #60]	; (8018188 <tcp_receive+0x5ec>)
 801814c:	891a      	ldrh	r2, [r3, #8]
 801814e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018152:	1ad3      	subs	r3, r2, r3
 8018154:	b29a      	uxth	r2, r3
 8018156:	4b0c      	ldr	r3, [pc, #48]	; (8018188 <tcp_receive+0x5ec>)
 8018158:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801815a:	4b0b      	ldr	r3, [pc, #44]	; (8018188 <tcp_receive+0x5ec>)
 801815c:	685b      	ldr	r3, [r3, #4]
 801815e:	891a      	ldrh	r2, [r3, #8]
 8018160:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018164:	1ad3      	subs	r3, r2, r3
 8018166:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8018168:	e02a      	b.n	80181c0 <tcp_receive+0x624>
 801816a:	bf00      	nop
 801816c:	08021e94 	.word	0x08021e94
 8018170:	08021e9c 	.word	0x08021e9c
 8018174:	2000f9f4 	.word	0x2000f9f4
 8018178:	2000f9f0 	.word	0x2000f9f0
 801817c:	2000f9b4 	.word	0x2000f9b4
 8018180:	2000f9f6 	.word	0x2000f9f6
 8018184:	2000f9ec 	.word	0x2000f9ec
 8018188:	2000f9cc 	.word	0x2000f9cc
 801818c:	08021b2c 	.word	0x08021b2c
 8018190:	08021ea4 	.word	0x08021ea4
 8018194:	08021b78 	.word	0x08021b78
 8018198:	08021eb4 	.word	0x08021eb4
 801819c:	08021ec4 	.word	0x08021ec4
        off -= p->len;
 80181a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181a2:	895b      	ldrh	r3, [r3, #10]
 80181a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80181a8:	1ad3      	subs	r3, r2, r3
 80181aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80181ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80181b2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80181b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181b6:	2200      	movs	r2, #0
 80181b8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80181ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80181c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181c2:	895b      	ldrh	r3, [r3, #10]
 80181c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80181c8:	429a      	cmp	r2, r3
 80181ca:	d8e9      	bhi.n	80181a0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80181cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80181d0:	4619      	mov	r1, r3
 80181d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80181d4:	f7fc f89e 	bl	8014314 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181dc:	4a91      	ldr	r2, [pc, #580]	; (8018424 <tcp_receive+0x888>)
 80181de:	6013      	str	r3, [r2, #0]
 80181e0:	4b91      	ldr	r3, [pc, #580]	; (8018428 <tcp_receive+0x88c>)
 80181e2:	68db      	ldr	r3, [r3, #12]
 80181e4:	4a8f      	ldr	r2, [pc, #572]	; (8018424 <tcp_receive+0x888>)
 80181e6:	6812      	ldr	r2, [r2, #0]
 80181e8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80181ea:	e00d      	b.n	8018208 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80181ec:	4b8d      	ldr	r3, [pc, #564]	; (8018424 <tcp_receive+0x888>)
 80181ee:	681a      	ldr	r2, [r3, #0]
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181f4:	1ad3      	subs	r3, r2, r3
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	da06      	bge.n	8018208 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	8b5b      	ldrh	r3, [r3, #26]
 80181fe:	f043 0302 	orr.w	r3, r3, #2
 8018202:	b29a      	uxth	r2, r3
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018208:	4b86      	ldr	r3, [pc, #536]	; (8018424 <tcp_receive+0x888>)
 801820a:	681a      	ldr	r2, [r3, #0]
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018210:	1ad3      	subs	r3, r2, r3
 8018212:	2b00      	cmp	r3, #0
 8018214:	f2c0 842a 	blt.w	8018a6c <tcp_receive+0xed0>
 8018218:	4b82      	ldr	r3, [pc, #520]	; (8018424 <tcp_receive+0x888>)
 801821a:	681a      	ldr	r2, [r3, #0]
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018220:	6879      	ldr	r1, [r7, #4]
 8018222:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018224:	440b      	add	r3, r1
 8018226:	1ad3      	subs	r3, r2, r3
 8018228:	3301      	adds	r3, #1
 801822a:	2b00      	cmp	r3, #0
 801822c:	f300 841e 	bgt.w	8018a6c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018234:	4b7b      	ldr	r3, [pc, #492]	; (8018424 <tcp_receive+0x888>)
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	429a      	cmp	r2, r3
 801823a:	f040 829a 	bne.w	8018772 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801823e:	4b7a      	ldr	r3, [pc, #488]	; (8018428 <tcp_receive+0x88c>)
 8018240:	891c      	ldrh	r4, [r3, #8]
 8018242:	4b79      	ldr	r3, [pc, #484]	; (8018428 <tcp_receive+0x88c>)
 8018244:	68db      	ldr	r3, [r3, #12]
 8018246:	899b      	ldrh	r3, [r3, #12]
 8018248:	b29b      	uxth	r3, r3
 801824a:	4618      	mov	r0, r3
 801824c:	f7fa fb82 	bl	8012954 <lwip_htons>
 8018250:	4603      	mov	r3, r0
 8018252:	b2db      	uxtb	r3, r3
 8018254:	f003 0303 	and.w	r3, r3, #3
 8018258:	2b00      	cmp	r3, #0
 801825a:	d001      	beq.n	8018260 <tcp_receive+0x6c4>
 801825c:	2301      	movs	r3, #1
 801825e:	e000      	b.n	8018262 <tcp_receive+0x6c6>
 8018260:	2300      	movs	r3, #0
 8018262:	4423      	add	r3, r4
 8018264:	b29a      	uxth	r2, r3
 8018266:	4b71      	ldr	r3, [pc, #452]	; (801842c <tcp_receive+0x890>)
 8018268:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801826e:	4b6f      	ldr	r3, [pc, #444]	; (801842c <tcp_receive+0x890>)
 8018270:	881b      	ldrh	r3, [r3, #0]
 8018272:	429a      	cmp	r2, r3
 8018274:	d275      	bcs.n	8018362 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018276:	4b6c      	ldr	r3, [pc, #432]	; (8018428 <tcp_receive+0x88c>)
 8018278:	68db      	ldr	r3, [r3, #12]
 801827a:	899b      	ldrh	r3, [r3, #12]
 801827c:	b29b      	uxth	r3, r3
 801827e:	4618      	mov	r0, r3
 8018280:	f7fa fb68 	bl	8012954 <lwip_htons>
 8018284:	4603      	mov	r3, r0
 8018286:	b2db      	uxtb	r3, r3
 8018288:	f003 0301 	and.w	r3, r3, #1
 801828c:	2b00      	cmp	r3, #0
 801828e:	d01f      	beq.n	80182d0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018290:	4b65      	ldr	r3, [pc, #404]	; (8018428 <tcp_receive+0x88c>)
 8018292:	68db      	ldr	r3, [r3, #12]
 8018294:	899b      	ldrh	r3, [r3, #12]
 8018296:	b29b      	uxth	r3, r3
 8018298:	b21b      	sxth	r3, r3
 801829a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801829e:	b21c      	sxth	r4, r3
 80182a0:	4b61      	ldr	r3, [pc, #388]	; (8018428 <tcp_receive+0x88c>)
 80182a2:	68db      	ldr	r3, [r3, #12]
 80182a4:	899b      	ldrh	r3, [r3, #12]
 80182a6:	b29b      	uxth	r3, r3
 80182a8:	4618      	mov	r0, r3
 80182aa:	f7fa fb53 	bl	8012954 <lwip_htons>
 80182ae:	4603      	mov	r3, r0
 80182b0:	b2db      	uxtb	r3, r3
 80182b2:	b29b      	uxth	r3, r3
 80182b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80182b8:	b29b      	uxth	r3, r3
 80182ba:	4618      	mov	r0, r3
 80182bc:	f7fa fb4a 	bl	8012954 <lwip_htons>
 80182c0:	4603      	mov	r3, r0
 80182c2:	b21b      	sxth	r3, r3
 80182c4:	4323      	orrs	r3, r4
 80182c6:	b21a      	sxth	r2, r3
 80182c8:	4b57      	ldr	r3, [pc, #348]	; (8018428 <tcp_receive+0x88c>)
 80182ca:	68db      	ldr	r3, [r3, #12]
 80182cc:	b292      	uxth	r2, r2
 80182ce:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80182d4:	4b54      	ldr	r3, [pc, #336]	; (8018428 <tcp_receive+0x88c>)
 80182d6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80182d8:	4b53      	ldr	r3, [pc, #332]	; (8018428 <tcp_receive+0x88c>)
 80182da:	68db      	ldr	r3, [r3, #12]
 80182dc:	899b      	ldrh	r3, [r3, #12]
 80182de:	b29b      	uxth	r3, r3
 80182e0:	4618      	mov	r0, r3
 80182e2:	f7fa fb37 	bl	8012954 <lwip_htons>
 80182e6:	4603      	mov	r3, r0
 80182e8:	b2db      	uxtb	r3, r3
 80182ea:	f003 0302 	and.w	r3, r3, #2
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d005      	beq.n	80182fe <tcp_receive+0x762>
            inseg.len -= 1;
 80182f2:	4b4d      	ldr	r3, [pc, #308]	; (8018428 <tcp_receive+0x88c>)
 80182f4:	891b      	ldrh	r3, [r3, #8]
 80182f6:	3b01      	subs	r3, #1
 80182f8:	b29a      	uxth	r2, r3
 80182fa:	4b4b      	ldr	r3, [pc, #300]	; (8018428 <tcp_receive+0x88c>)
 80182fc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80182fe:	4b4a      	ldr	r3, [pc, #296]	; (8018428 <tcp_receive+0x88c>)
 8018300:	685b      	ldr	r3, [r3, #4]
 8018302:	4a49      	ldr	r2, [pc, #292]	; (8018428 <tcp_receive+0x88c>)
 8018304:	8912      	ldrh	r2, [r2, #8]
 8018306:	4611      	mov	r1, r2
 8018308:	4618      	mov	r0, r3
 801830a:	f7fb ff03 	bl	8014114 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801830e:	4b46      	ldr	r3, [pc, #280]	; (8018428 <tcp_receive+0x88c>)
 8018310:	891c      	ldrh	r4, [r3, #8]
 8018312:	4b45      	ldr	r3, [pc, #276]	; (8018428 <tcp_receive+0x88c>)
 8018314:	68db      	ldr	r3, [r3, #12]
 8018316:	899b      	ldrh	r3, [r3, #12]
 8018318:	b29b      	uxth	r3, r3
 801831a:	4618      	mov	r0, r3
 801831c:	f7fa fb1a 	bl	8012954 <lwip_htons>
 8018320:	4603      	mov	r3, r0
 8018322:	b2db      	uxtb	r3, r3
 8018324:	f003 0303 	and.w	r3, r3, #3
 8018328:	2b00      	cmp	r3, #0
 801832a:	d001      	beq.n	8018330 <tcp_receive+0x794>
 801832c:	2301      	movs	r3, #1
 801832e:	e000      	b.n	8018332 <tcp_receive+0x796>
 8018330:	2300      	movs	r3, #0
 8018332:	4423      	add	r3, r4
 8018334:	b29a      	uxth	r2, r3
 8018336:	4b3d      	ldr	r3, [pc, #244]	; (801842c <tcp_receive+0x890>)
 8018338:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801833a:	4b3c      	ldr	r3, [pc, #240]	; (801842c <tcp_receive+0x890>)
 801833c:	881b      	ldrh	r3, [r3, #0]
 801833e:	461a      	mov	r2, r3
 8018340:	4b38      	ldr	r3, [pc, #224]	; (8018424 <tcp_receive+0x888>)
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	441a      	add	r2, r3
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801834a:	6879      	ldr	r1, [r7, #4]
 801834c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801834e:	440b      	add	r3, r1
 8018350:	429a      	cmp	r2, r3
 8018352:	d006      	beq.n	8018362 <tcp_receive+0x7c6>
 8018354:	4b36      	ldr	r3, [pc, #216]	; (8018430 <tcp_receive+0x894>)
 8018356:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801835a:	4936      	ldr	r1, [pc, #216]	; (8018434 <tcp_receive+0x898>)
 801835c:	4836      	ldr	r0, [pc, #216]	; (8018438 <tcp_receive+0x89c>)
 801835e:	f006 f809 	bl	801e374 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018366:	2b00      	cmp	r3, #0
 8018368:	f000 80e7 	beq.w	801853a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801836c:	4b2e      	ldr	r3, [pc, #184]	; (8018428 <tcp_receive+0x88c>)
 801836e:	68db      	ldr	r3, [r3, #12]
 8018370:	899b      	ldrh	r3, [r3, #12]
 8018372:	b29b      	uxth	r3, r3
 8018374:	4618      	mov	r0, r3
 8018376:	f7fa faed 	bl	8012954 <lwip_htons>
 801837a:	4603      	mov	r3, r0
 801837c:	b2db      	uxtb	r3, r3
 801837e:	f003 0301 	and.w	r3, r3, #1
 8018382:	2b00      	cmp	r3, #0
 8018384:	d010      	beq.n	80183a8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018386:	e00a      	b.n	801839e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801838c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018392:	681a      	ldr	r2, [r3, #0]
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8018398:	68f8      	ldr	r0, [r7, #12]
 801839a:	f7fd fcc4 	bl	8015d26 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d1f0      	bne.n	8018388 <tcp_receive+0x7ec>
 80183a6:	e0c8      	b.n	801853a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183ac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80183ae:	e052      	b.n	8018456 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80183b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80183b2:	68db      	ldr	r3, [r3, #12]
 80183b4:	899b      	ldrh	r3, [r3, #12]
 80183b6:	b29b      	uxth	r3, r3
 80183b8:	4618      	mov	r0, r3
 80183ba:	f7fa facb 	bl	8012954 <lwip_htons>
 80183be:	4603      	mov	r3, r0
 80183c0:	b2db      	uxtb	r3, r3
 80183c2:	f003 0301 	and.w	r3, r3, #1
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d03d      	beq.n	8018446 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80183ca:	4b17      	ldr	r3, [pc, #92]	; (8018428 <tcp_receive+0x88c>)
 80183cc:	68db      	ldr	r3, [r3, #12]
 80183ce:	899b      	ldrh	r3, [r3, #12]
 80183d0:	b29b      	uxth	r3, r3
 80183d2:	4618      	mov	r0, r3
 80183d4:	f7fa fabe 	bl	8012954 <lwip_htons>
 80183d8:	4603      	mov	r3, r0
 80183da:	b2db      	uxtb	r3, r3
 80183dc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d130      	bne.n	8018446 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80183e4:	4b10      	ldr	r3, [pc, #64]	; (8018428 <tcp_receive+0x88c>)
 80183e6:	68db      	ldr	r3, [r3, #12]
 80183e8:	899b      	ldrh	r3, [r3, #12]
 80183ea:	b29c      	uxth	r4, r3
 80183ec:	2001      	movs	r0, #1
 80183ee:	f7fa fab1 	bl	8012954 <lwip_htons>
 80183f2:	4603      	mov	r3, r0
 80183f4:	461a      	mov	r2, r3
 80183f6:	4b0c      	ldr	r3, [pc, #48]	; (8018428 <tcp_receive+0x88c>)
 80183f8:	68db      	ldr	r3, [r3, #12]
 80183fa:	4322      	orrs	r2, r4
 80183fc:	b292      	uxth	r2, r2
 80183fe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018400:	4b09      	ldr	r3, [pc, #36]	; (8018428 <tcp_receive+0x88c>)
 8018402:	891c      	ldrh	r4, [r3, #8]
 8018404:	4b08      	ldr	r3, [pc, #32]	; (8018428 <tcp_receive+0x88c>)
 8018406:	68db      	ldr	r3, [r3, #12]
 8018408:	899b      	ldrh	r3, [r3, #12]
 801840a:	b29b      	uxth	r3, r3
 801840c:	4618      	mov	r0, r3
 801840e:	f7fa faa1 	bl	8012954 <lwip_htons>
 8018412:	4603      	mov	r3, r0
 8018414:	b2db      	uxtb	r3, r3
 8018416:	f003 0303 	and.w	r3, r3, #3
 801841a:	2b00      	cmp	r3, #0
 801841c:	d00e      	beq.n	801843c <tcp_receive+0x8a0>
 801841e:	2301      	movs	r3, #1
 8018420:	e00d      	b.n	801843e <tcp_receive+0x8a2>
 8018422:	bf00      	nop
 8018424:	2000f9ec 	.word	0x2000f9ec
 8018428:	2000f9cc 	.word	0x2000f9cc
 801842c:	2000f9f6 	.word	0x2000f9f6
 8018430:	08021b2c 	.word	0x08021b2c
 8018434:	08021ed4 	.word	0x08021ed4
 8018438:	08021b78 	.word	0x08021b78
 801843c:	2300      	movs	r3, #0
 801843e:	4423      	add	r3, r4
 8018440:	b29a      	uxth	r2, r3
 8018442:	4b98      	ldr	r3, [pc, #608]	; (80186a4 <tcp_receive+0xb08>)
 8018444:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018448:	613b      	str	r3, [r7, #16]
              next = next->next;
 801844a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8018450:	6938      	ldr	r0, [r7, #16]
 8018452:	f7fd fc68 	bl	8015d26 <tcp_seg_free>
            while (next &&
 8018456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018458:	2b00      	cmp	r3, #0
 801845a:	d00e      	beq.n	801847a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801845c:	4b91      	ldr	r3, [pc, #580]	; (80186a4 <tcp_receive+0xb08>)
 801845e:	881b      	ldrh	r3, [r3, #0]
 8018460:	461a      	mov	r2, r3
 8018462:	4b91      	ldr	r3, [pc, #580]	; (80186a8 <tcp_receive+0xb0c>)
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	441a      	add	r2, r3
 8018468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801846a:	68db      	ldr	r3, [r3, #12]
 801846c:	685b      	ldr	r3, [r3, #4]
 801846e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018470:	8909      	ldrh	r1, [r1, #8]
 8018472:	440b      	add	r3, r1
 8018474:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018476:	2b00      	cmp	r3, #0
 8018478:	da9a      	bge.n	80183b0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801847a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801847c:	2b00      	cmp	r3, #0
 801847e:	d059      	beq.n	8018534 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8018480:	4b88      	ldr	r3, [pc, #544]	; (80186a4 <tcp_receive+0xb08>)
 8018482:	881b      	ldrh	r3, [r3, #0]
 8018484:	461a      	mov	r2, r3
 8018486:	4b88      	ldr	r3, [pc, #544]	; (80186a8 <tcp_receive+0xb0c>)
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	441a      	add	r2, r3
 801848c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801848e:	68db      	ldr	r3, [r3, #12]
 8018490:	685b      	ldr	r3, [r3, #4]
 8018492:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018494:	2b00      	cmp	r3, #0
 8018496:	dd4d      	ble.n	8018534 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801849a:	68db      	ldr	r3, [r3, #12]
 801849c:	685b      	ldr	r3, [r3, #4]
 801849e:	b29a      	uxth	r2, r3
 80184a0:	4b81      	ldr	r3, [pc, #516]	; (80186a8 <tcp_receive+0xb0c>)
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	b29b      	uxth	r3, r3
 80184a6:	1ad3      	subs	r3, r2, r3
 80184a8:	b29a      	uxth	r2, r3
 80184aa:	4b80      	ldr	r3, [pc, #512]	; (80186ac <tcp_receive+0xb10>)
 80184ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80184ae:	4b7f      	ldr	r3, [pc, #508]	; (80186ac <tcp_receive+0xb10>)
 80184b0:	68db      	ldr	r3, [r3, #12]
 80184b2:	899b      	ldrh	r3, [r3, #12]
 80184b4:	b29b      	uxth	r3, r3
 80184b6:	4618      	mov	r0, r3
 80184b8:	f7fa fa4c 	bl	8012954 <lwip_htons>
 80184bc:	4603      	mov	r3, r0
 80184be:	b2db      	uxtb	r3, r3
 80184c0:	f003 0302 	and.w	r3, r3, #2
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d005      	beq.n	80184d4 <tcp_receive+0x938>
                inseg.len -= 1;
 80184c8:	4b78      	ldr	r3, [pc, #480]	; (80186ac <tcp_receive+0xb10>)
 80184ca:	891b      	ldrh	r3, [r3, #8]
 80184cc:	3b01      	subs	r3, #1
 80184ce:	b29a      	uxth	r2, r3
 80184d0:	4b76      	ldr	r3, [pc, #472]	; (80186ac <tcp_receive+0xb10>)
 80184d2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80184d4:	4b75      	ldr	r3, [pc, #468]	; (80186ac <tcp_receive+0xb10>)
 80184d6:	685b      	ldr	r3, [r3, #4]
 80184d8:	4a74      	ldr	r2, [pc, #464]	; (80186ac <tcp_receive+0xb10>)
 80184da:	8912      	ldrh	r2, [r2, #8]
 80184dc:	4611      	mov	r1, r2
 80184de:	4618      	mov	r0, r3
 80184e0:	f7fb fe18 	bl	8014114 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80184e4:	4b71      	ldr	r3, [pc, #452]	; (80186ac <tcp_receive+0xb10>)
 80184e6:	891c      	ldrh	r4, [r3, #8]
 80184e8:	4b70      	ldr	r3, [pc, #448]	; (80186ac <tcp_receive+0xb10>)
 80184ea:	68db      	ldr	r3, [r3, #12]
 80184ec:	899b      	ldrh	r3, [r3, #12]
 80184ee:	b29b      	uxth	r3, r3
 80184f0:	4618      	mov	r0, r3
 80184f2:	f7fa fa2f 	bl	8012954 <lwip_htons>
 80184f6:	4603      	mov	r3, r0
 80184f8:	b2db      	uxtb	r3, r3
 80184fa:	f003 0303 	and.w	r3, r3, #3
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d001      	beq.n	8018506 <tcp_receive+0x96a>
 8018502:	2301      	movs	r3, #1
 8018504:	e000      	b.n	8018508 <tcp_receive+0x96c>
 8018506:	2300      	movs	r3, #0
 8018508:	4423      	add	r3, r4
 801850a:	b29a      	uxth	r2, r3
 801850c:	4b65      	ldr	r3, [pc, #404]	; (80186a4 <tcp_receive+0xb08>)
 801850e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018510:	4b64      	ldr	r3, [pc, #400]	; (80186a4 <tcp_receive+0xb08>)
 8018512:	881b      	ldrh	r3, [r3, #0]
 8018514:	461a      	mov	r2, r3
 8018516:	4b64      	ldr	r3, [pc, #400]	; (80186a8 <tcp_receive+0xb0c>)
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	441a      	add	r2, r3
 801851c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801851e:	68db      	ldr	r3, [r3, #12]
 8018520:	685b      	ldr	r3, [r3, #4]
 8018522:	429a      	cmp	r2, r3
 8018524:	d006      	beq.n	8018534 <tcp_receive+0x998>
 8018526:	4b62      	ldr	r3, [pc, #392]	; (80186b0 <tcp_receive+0xb14>)
 8018528:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801852c:	4961      	ldr	r1, [pc, #388]	; (80186b4 <tcp_receive+0xb18>)
 801852e:	4862      	ldr	r0, [pc, #392]	; (80186b8 <tcp_receive+0xb1c>)
 8018530:	f005 ff20 	bl	801e374 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018538:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801853a:	4b5a      	ldr	r3, [pc, #360]	; (80186a4 <tcp_receive+0xb08>)
 801853c:	881b      	ldrh	r3, [r3, #0]
 801853e:	461a      	mov	r2, r3
 8018540:	4b59      	ldr	r3, [pc, #356]	; (80186a8 <tcp_receive+0xb0c>)
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	441a      	add	r2, r3
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801854e:	4b55      	ldr	r3, [pc, #340]	; (80186a4 <tcp_receive+0xb08>)
 8018550:	881b      	ldrh	r3, [r3, #0]
 8018552:	429a      	cmp	r2, r3
 8018554:	d206      	bcs.n	8018564 <tcp_receive+0x9c8>
 8018556:	4b56      	ldr	r3, [pc, #344]	; (80186b0 <tcp_receive+0xb14>)
 8018558:	f240 6207 	movw	r2, #1543	; 0x607
 801855c:	4957      	ldr	r1, [pc, #348]	; (80186bc <tcp_receive+0xb20>)
 801855e:	4856      	ldr	r0, [pc, #344]	; (80186b8 <tcp_receive+0xb1c>)
 8018560:	f005 ff08 	bl	801e374 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018568:	4b4e      	ldr	r3, [pc, #312]	; (80186a4 <tcp_receive+0xb08>)
 801856a:	881b      	ldrh	r3, [r3, #0]
 801856c:	1ad3      	subs	r3, r2, r3
 801856e:	b29a      	uxth	r2, r3
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018574:	6878      	ldr	r0, [r7, #4]
 8018576:	f7fc feb1 	bl	80152dc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801857a:	4b4c      	ldr	r3, [pc, #304]	; (80186ac <tcp_receive+0xb10>)
 801857c:	685b      	ldr	r3, [r3, #4]
 801857e:	891b      	ldrh	r3, [r3, #8]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d006      	beq.n	8018592 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8018584:	4b49      	ldr	r3, [pc, #292]	; (80186ac <tcp_receive+0xb10>)
 8018586:	685b      	ldr	r3, [r3, #4]
 8018588:	4a4d      	ldr	r2, [pc, #308]	; (80186c0 <tcp_receive+0xb24>)
 801858a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801858c:	4b47      	ldr	r3, [pc, #284]	; (80186ac <tcp_receive+0xb10>)
 801858e:	2200      	movs	r2, #0
 8018590:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018592:	4b46      	ldr	r3, [pc, #280]	; (80186ac <tcp_receive+0xb10>)
 8018594:	68db      	ldr	r3, [r3, #12]
 8018596:	899b      	ldrh	r3, [r3, #12]
 8018598:	b29b      	uxth	r3, r3
 801859a:	4618      	mov	r0, r3
 801859c:	f7fa f9da 	bl	8012954 <lwip_htons>
 80185a0:	4603      	mov	r3, r0
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	f003 0301 	and.w	r3, r3, #1
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	f000 80b8 	beq.w	801871e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80185ae:	4b45      	ldr	r3, [pc, #276]	; (80186c4 <tcp_receive+0xb28>)
 80185b0:	781b      	ldrb	r3, [r3, #0]
 80185b2:	f043 0320 	orr.w	r3, r3, #32
 80185b6:	b2da      	uxtb	r2, r3
 80185b8:	4b42      	ldr	r3, [pc, #264]	; (80186c4 <tcp_receive+0xb28>)
 80185ba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80185bc:	e0af      	b.n	801871e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185c2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185c8:	68db      	ldr	r3, [r3, #12]
 80185ca:	685b      	ldr	r3, [r3, #4]
 80185cc:	4a36      	ldr	r2, [pc, #216]	; (80186a8 <tcp_receive+0xb0c>)
 80185ce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80185d0:	68bb      	ldr	r3, [r7, #8]
 80185d2:	891b      	ldrh	r3, [r3, #8]
 80185d4:	461c      	mov	r4, r3
 80185d6:	68bb      	ldr	r3, [r7, #8]
 80185d8:	68db      	ldr	r3, [r3, #12]
 80185da:	899b      	ldrh	r3, [r3, #12]
 80185dc:	b29b      	uxth	r3, r3
 80185de:	4618      	mov	r0, r3
 80185e0:	f7fa f9b8 	bl	8012954 <lwip_htons>
 80185e4:	4603      	mov	r3, r0
 80185e6:	b2db      	uxtb	r3, r3
 80185e8:	f003 0303 	and.w	r3, r3, #3
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d001      	beq.n	80185f4 <tcp_receive+0xa58>
 80185f0:	2301      	movs	r3, #1
 80185f2:	e000      	b.n	80185f6 <tcp_receive+0xa5a>
 80185f4:	2300      	movs	r3, #0
 80185f6:	191a      	adds	r2, r3, r4
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185fc:	441a      	add	r2, r3
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018606:	461c      	mov	r4, r3
 8018608:	68bb      	ldr	r3, [r7, #8]
 801860a:	891b      	ldrh	r3, [r3, #8]
 801860c:	461d      	mov	r5, r3
 801860e:	68bb      	ldr	r3, [r7, #8]
 8018610:	68db      	ldr	r3, [r3, #12]
 8018612:	899b      	ldrh	r3, [r3, #12]
 8018614:	b29b      	uxth	r3, r3
 8018616:	4618      	mov	r0, r3
 8018618:	f7fa f99c 	bl	8012954 <lwip_htons>
 801861c:	4603      	mov	r3, r0
 801861e:	b2db      	uxtb	r3, r3
 8018620:	f003 0303 	and.w	r3, r3, #3
 8018624:	2b00      	cmp	r3, #0
 8018626:	d001      	beq.n	801862c <tcp_receive+0xa90>
 8018628:	2301      	movs	r3, #1
 801862a:	e000      	b.n	801862e <tcp_receive+0xa92>
 801862c:	2300      	movs	r3, #0
 801862e:	442b      	add	r3, r5
 8018630:	429c      	cmp	r4, r3
 8018632:	d206      	bcs.n	8018642 <tcp_receive+0xaa6>
 8018634:	4b1e      	ldr	r3, [pc, #120]	; (80186b0 <tcp_receive+0xb14>)
 8018636:	f240 622b 	movw	r2, #1579	; 0x62b
 801863a:	4923      	ldr	r1, [pc, #140]	; (80186c8 <tcp_receive+0xb2c>)
 801863c:	481e      	ldr	r0, [pc, #120]	; (80186b8 <tcp_receive+0xb1c>)
 801863e:	f005 fe99 	bl	801e374 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018642:	68bb      	ldr	r3, [r7, #8]
 8018644:	891b      	ldrh	r3, [r3, #8]
 8018646:	461c      	mov	r4, r3
 8018648:	68bb      	ldr	r3, [r7, #8]
 801864a:	68db      	ldr	r3, [r3, #12]
 801864c:	899b      	ldrh	r3, [r3, #12]
 801864e:	b29b      	uxth	r3, r3
 8018650:	4618      	mov	r0, r3
 8018652:	f7fa f97f 	bl	8012954 <lwip_htons>
 8018656:	4603      	mov	r3, r0
 8018658:	b2db      	uxtb	r3, r3
 801865a:	f003 0303 	and.w	r3, r3, #3
 801865e:	2b00      	cmp	r3, #0
 8018660:	d001      	beq.n	8018666 <tcp_receive+0xaca>
 8018662:	2301      	movs	r3, #1
 8018664:	e000      	b.n	8018668 <tcp_receive+0xacc>
 8018666:	2300      	movs	r3, #0
 8018668:	1919      	adds	r1, r3, r4
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801866e:	b28b      	uxth	r3, r1
 8018670:	1ad3      	subs	r3, r2, r3
 8018672:	b29a      	uxth	r2, r3
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018678:	6878      	ldr	r0, [r7, #4]
 801867a:	f7fc fe2f 	bl	80152dc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801867e:	68bb      	ldr	r3, [r7, #8]
 8018680:	685b      	ldr	r3, [r3, #4]
 8018682:	891b      	ldrh	r3, [r3, #8]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d028      	beq.n	80186da <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018688:	4b0d      	ldr	r3, [pc, #52]	; (80186c0 <tcp_receive+0xb24>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d01d      	beq.n	80186cc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8018690:	4b0b      	ldr	r3, [pc, #44]	; (80186c0 <tcp_receive+0xb24>)
 8018692:	681a      	ldr	r2, [r3, #0]
 8018694:	68bb      	ldr	r3, [r7, #8]
 8018696:	685b      	ldr	r3, [r3, #4]
 8018698:	4619      	mov	r1, r3
 801869a:	4610      	mov	r0, r2
 801869c:	f7fb ff8e 	bl	80145bc <pbuf_cat>
 80186a0:	e018      	b.n	80186d4 <tcp_receive+0xb38>
 80186a2:	bf00      	nop
 80186a4:	2000f9f6 	.word	0x2000f9f6
 80186a8:	2000f9ec 	.word	0x2000f9ec
 80186ac:	2000f9cc 	.word	0x2000f9cc
 80186b0:	08021b2c 	.word	0x08021b2c
 80186b4:	08021f0c 	.word	0x08021f0c
 80186b8:	08021b78 	.word	0x08021b78
 80186bc:	08021f48 	.word	0x08021f48
 80186c0:	2000f9fc 	.word	0x2000f9fc
 80186c4:	2000f9f9 	.word	0x2000f9f9
 80186c8:	08021f68 	.word	0x08021f68
            } else {
              recv_data = cseg->p;
 80186cc:	68bb      	ldr	r3, [r7, #8]
 80186ce:	685b      	ldr	r3, [r3, #4]
 80186d0:	4a70      	ldr	r2, [pc, #448]	; (8018894 <tcp_receive+0xcf8>)
 80186d2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80186d4:	68bb      	ldr	r3, [r7, #8]
 80186d6:	2200      	movs	r2, #0
 80186d8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80186da:	68bb      	ldr	r3, [r7, #8]
 80186dc:	68db      	ldr	r3, [r3, #12]
 80186de:	899b      	ldrh	r3, [r3, #12]
 80186e0:	b29b      	uxth	r3, r3
 80186e2:	4618      	mov	r0, r3
 80186e4:	f7fa f936 	bl	8012954 <lwip_htons>
 80186e8:	4603      	mov	r3, r0
 80186ea:	b2db      	uxtb	r3, r3
 80186ec:	f003 0301 	and.w	r3, r3, #1
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d00d      	beq.n	8018710 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80186f4:	4b68      	ldr	r3, [pc, #416]	; (8018898 <tcp_receive+0xcfc>)
 80186f6:	781b      	ldrb	r3, [r3, #0]
 80186f8:	f043 0320 	orr.w	r3, r3, #32
 80186fc:	b2da      	uxtb	r2, r3
 80186fe:	4b66      	ldr	r3, [pc, #408]	; (8018898 <tcp_receive+0xcfc>)
 8018700:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	7d1b      	ldrb	r3, [r3, #20]
 8018706:	2b04      	cmp	r3, #4
 8018708:	d102      	bne.n	8018710 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	2207      	movs	r2, #7
 801870e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018710:	68bb      	ldr	r3, [r7, #8]
 8018712:	681a      	ldr	r2, [r3, #0]
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8018718:	68b8      	ldr	r0, [r7, #8]
 801871a:	f7fd fb04 	bl	8015d26 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018722:	2b00      	cmp	r3, #0
 8018724:	d008      	beq.n	8018738 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801872a:	68db      	ldr	r3, [r3, #12]
 801872c:	685a      	ldr	r2, [r3, #4]
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8018732:	429a      	cmp	r2, r3
 8018734:	f43f af43 	beq.w	80185be <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	8b5b      	ldrh	r3, [r3, #26]
 801873c:	f003 0301 	and.w	r3, r3, #1
 8018740:	2b00      	cmp	r3, #0
 8018742:	d00e      	beq.n	8018762 <tcp_receive+0xbc6>
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	8b5b      	ldrh	r3, [r3, #26]
 8018748:	f023 0301 	bic.w	r3, r3, #1
 801874c:	b29a      	uxth	r2, r3
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	835a      	strh	r2, [r3, #26]
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	8b5b      	ldrh	r3, [r3, #26]
 8018756:	f043 0302 	orr.w	r3, r3, #2
 801875a:	b29a      	uxth	r2, r3
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018760:	e188      	b.n	8018a74 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	8b5b      	ldrh	r3, [r3, #26]
 8018766:	f043 0301 	orr.w	r3, r3, #1
 801876a:	b29a      	uxth	r2, r3
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018770:	e180      	b.n	8018a74 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018776:	2b00      	cmp	r3, #0
 8018778:	d106      	bne.n	8018788 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801877a:	4848      	ldr	r0, [pc, #288]	; (801889c <tcp_receive+0xd00>)
 801877c:	f7fd faec 	bl	8015d58 <tcp_seg_copy>
 8018780:	4602      	mov	r2, r0
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	675a      	str	r2, [r3, #116]	; 0x74
 8018786:	e16d      	b.n	8018a64 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018788:	2300      	movs	r3, #0
 801878a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018790:	63bb      	str	r3, [r7, #56]	; 0x38
 8018792:	e157      	b.n	8018a44 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8018794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018796:	68db      	ldr	r3, [r3, #12]
 8018798:	685a      	ldr	r2, [r3, #4]
 801879a:	4b41      	ldr	r3, [pc, #260]	; (80188a0 <tcp_receive+0xd04>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	429a      	cmp	r2, r3
 80187a0:	d11d      	bne.n	80187de <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80187a2:	4b3e      	ldr	r3, [pc, #248]	; (801889c <tcp_receive+0xd00>)
 80187a4:	891a      	ldrh	r2, [r3, #8]
 80187a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187a8:	891b      	ldrh	r3, [r3, #8]
 80187aa:	429a      	cmp	r2, r3
 80187ac:	f240 814f 	bls.w	8018a4e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80187b0:	483a      	ldr	r0, [pc, #232]	; (801889c <tcp_receive+0xd00>)
 80187b2:	f7fd fad1 	bl	8015d58 <tcp_seg_copy>
 80187b6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80187b8:	697b      	ldr	r3, [r7, #20]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	f000 8149 	beq.w	8018a52 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80187c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d003      	beq.n	80187ce <tcp_receive+0xc32>
                    prev->next = cseg;
 80187c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187c8:	697a      	ldr	r2, [r7, #20]
 80187ca:	601a      	str	r2, [r3, #0]
 80187cc:	e002      	b.n	80187d4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	697a      	ldr	r2, [r7, #20]
 80187d2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80187d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80187d6:	6978      	ldr	r0, [r7, #20]
 80187d8:	f7ff f8dc 	bl	8017994 <tcp_oos_insert_segment>
                }
                break;
 80187dc:	e139      	b.n	8018a52 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80187de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d117      	bne.n	8018814 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80187e4:	4b2e      	ldr	r3, [pc, #184]	; (80188a0 <tcp_receive+0xd04>)
 80187e6:	681a      	ldr	r2, [r3, #0]
 80187e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187ea:	68db      	ldr	r3, [r3, #12]
 80187ec:	685b      	ldr	r3, [r3, #4]
 80187ee:	1ad3      	subs	r3, r2, r3
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	da57      	bge.n	80188a4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80187f4:	4829      	ldr	r0, [pc, #164]	; (801889c <tcp_receive+0xd00>)
 80187f6:	f7fd faaf 	bl	8015d58 <tcp_seg_copy>
 80187fa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80187fc:	69bb      	ldr	r3, [r7, #24]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	f000 8129 	beq.w	8018a56 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	69ba      	ldr	r2, [r7, #24]
 8018808:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801880a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801880c:	69b8      	ldr	r0, [r7, #24]
 801880e:	f7ff f8c1 	bl	8017994 <tcp_oos_insert_segment>
                  }
                  break;
 8018812:	e120      	b.n	8018a56 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018814:	4b22      	ldr	r3, [pc, #136]	; (80188a0 <tcp_receive+0xd04>)
 8018816:	681a      	ldr	r2, [r3, #0]
 8018818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801881a:	68db      	ldr	r3, [r3, #12]
 801881c:	685b      	ldr	r3, [r3, #4]
 801881e:	1ad3      	subs	r3, r2, r3
 8018820:	3b01      	subs	r3, #1
 8018822:	2b00      	cmp	r3, #0
 8018824:	db3e      	blt.n	80188a4 <tcp_receive+0xd08>
 8018826:	4b1e      	ldr	r3, [pc, #120]	; (80188a0 <tcp_receive+0xd04>)
 8018828:	681a      	ldr	r2, [r3, #0]
 801882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801882c:	68db      	ldr	r3, [r3, #12]
 801882e:	685b      	ldr	r3, [r3, #4]
 8018830:	1ad3      	subs	r3, r2, r3
 8018832:	3301      	adds	r3, #1
 8018834:	2b00      	cmp	r3, #0
 8018836:	dc35      	bgt.n	80188a4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018838:	4818      	ldr	r0, [pc, #96]	; (801889c <tcp_receive+0xd00>)
 801883a:	f7fd fa8d 	bl	8015d58 <tcp_seg_copy>
 801883e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018840:	69fb      	ldr	r3, [r7, #28]
 8018842:	2b00      	cmp	r3, #0
 8018844:	f000 8109 	beq.w	8018a5a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801884a:	68db      	ldr	r3, [r3, #12]
 801884c:	685b      	ldr	r3, [r3, #4]
 801884e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018850:	8912      	ldrh	r2, [r2, #8]
 8018852:	441a      	add	r2, r3
 8018854:	4b12      	ldr	r3, [pc, #72]	; (80188a0 <tcp_receive+0xd04>)
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	1ad3      	subs	r3, r2, r3
 801885a:	2b00      	cmp	r3, #0
 801885c:	dd12      	ble.n	8018884 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801885e:	4b10      	ldr	r3, [pc, #64]	; (80188a0 <tcp_receive+0xd04>)
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	b29a      	uxth	r2, r3
 8018864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018866:	68db      	ldr	r3, [r3, #12]
 8018868:	685b      	ldr	r3, [r3, #4]
 801886a:	b29b      	uxth	r3, r3
 801886c:	1ad3      	subs	r3, r2, r3
 801886e:	b29a      	uxth	r2, r3
 8018870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018872:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018876:	685a      	ldr	r2, [r3, #4]
 8018878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801887a:	891b      	ldrh	r3, [r3, #8]
 801887c:	4619      	mov	r1, r3
 801887e:	4610      	mov	r0, r2
 8018880:	f7fb fc48 	bl	8014114 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018886:	69fa      	ldr	r2, [r7, #28]
 8018888:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801888a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801888c:	69f8      	ldr	r0, [r7, #28]
 801888e:	f7ff f881 	bl	8017994 <tcp_oos_insert_segment>
                  }
                  break;
 8018892:	e0e2      	b.n	8018a5a <tcp_receive+0xebe>
 8018894:	2000f9fc 	.word	0x2000f9fc
 8018898:	2000f9f9 	.word	0x2000f9f9
 801889c:	2000f9cc 	.word	0x2000f9cc
 80188a0:	2000f9ec 	.word	0x2000f9ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80188a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188a6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80188a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	f040 80c6 	bne.w	8018a3e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80188b2:	4b80      	ldr	r3, [pc, #512]	; (8018ab4 <tcp_receive+0xf18>)
 80188b4:	681a      	ldr	r2, [r3, #0]
 80188b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188b8:	68db      	ldr	r3, [r3, #12]
 80188ba:	685b      	ldr	r3, [r3, #4]
 80188bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80188be:	2b00      	cmp	r3, #0
 80188c0:	f340 80bd 	ble.w	8018a3e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80188c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188c6:	68db      	ldr	r3, [r3, #12]
 80188c8:	899b      	ldrh	r3, [r3, #12]
 80188ca:	b29b      	uxth	r3, r3
 80188cc:	4618      	mov	r0, r3
 80188ce:	f7fa f841 	bl	8012954 <lwip_htons>
 80188d2:	4603      	mov	r3, r0
 80188d4:	b2db      	uxtb	r3, r3
 80188d6:	f003 0301 	and.w	r3, r3, #1
 80188da:	2b00      	cmp	r3, #0
 80188dc:	f040 80bf 	bne.w	8018a5e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80188e0:	4875      	ldr	r0, [pc, #468]	; (8018ab8 <tcp_receive+0xf1c>)
 80188e2:	f7fd fa39 	bl	8015d58 <tcp_seg_copy>
 80188e6:	4602      	mov	r2, r0
 80188e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80188ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	f000 80b6 	beq.w	8018a62 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80188f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188f8:	68db      	ldr	r3, [r3, #12]
 80188fa:	685b      	ldr	r3, [r3, #4]
 80188fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80188fe:	8912      	ldrh	r2, [r2, #8]
 8018900:	441a      	add	r2, r3
 8018902:	4b6c      	ldr	r3, [pc, #432]	; (8018ab4 <tcp_receive+0xf18>)
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	1ad3      	subs	r3, r2, r3
 8018908:	2b00      	cmp	r3, #0
 801890a:	dd12      	ble.n	8018932 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801890c:	4b69      	ldr	r3, [pc, #420]	; (8018ab4 <tcp_receive+0xf18>)
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	b29a      	uxth	r2, r3
 8018912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018914:	68db      	ldr	r3, [r3, #12]
 8018916:	685b      	ldr	r3, [r3, #4]
 8018918:	b29b      	uxth	r3, r3
 801891a:	1ad3      	subs	r3, r2, r3
 801891c:	b29a      	uxth	r2, r3
 801891e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018920:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018924:	685a      	ldr	r2, [r3, #4]
 8018926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018928:	891b      	ldrh	r3, [r3, #8]
 801892a:	4619      	mov	r1, r3
 801892c:	4610      	mov	r0, r2
 801892e:	f7fb fbf1 	bl	8014114 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018932:	4b62      	ldr	r3, [pc, #392]	; (8018abc <tcp_receive+0xf20>)
 8018934:	881b      	ldrh	r3, [r3, #0]
 8018936:	461a      	mov	r2, r3
 8018938:	4b5e      	ldr	r3, [pc, #376]	; (8018ab4 <tcp_receive+0xf18>)
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	441a      	add	r2, r3
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018942:	6879      	ldr	r1, [r7, #4]
 8018944:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018946:	440b      	add	r3, r1
 8018948:	1ad3      	subs	r3, r2, r3
 801894a:	2b00      	cmp	r3, #0
 801894c:	f340 8089 	ble.w	8018a62 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	68db      	ldr	r3, [r3, #12]
 8018956:	899b      	ldrh	r3, [r3, #12]
 8018958:	b29b      	uxth	r3, r3
 801895a:	4618      	mov	r0, r3
 801895c:	f7f9 fffa 	bl	8012954 <lwip_htons>
 8018960:	4603      	mov	r3, r0
 8018962:	b2db      	uxtb	r3, r3
 8018964:	f003 0301 	and.w	r3, r3, #1
 8018968:	2b00      	cmp	r3, #0
 801896a:	d022      	beq.n	80189b2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801896c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	68db      	ldr	r3, [r3, #12]
 8018972:	899b      	ldrh	r3, [r3, #12]
 8018974:	b29b      	uxth	r3, r3
 8018976:	b21b      	sxth	r3, r3
 8018978:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801897c:	b21c      	sxth	r4, r3
 801897e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	68db      	ldr	r3, [r3, #12]
 8018984:	899b      	ldrh	r3, [r3, #12]
 8018986:	b29b      	uxth	r3, r3
 8018988:	4618      	mov	r0, r3
 801898a:	f7f9 ffe3 	bl	8012954 <lwip_htons>
 801898e:	4603      	mov	r3, r0
 8018990:	b2db      	uxtb	r3, r3
 8018992:	b29b      	uxth	r3, r3
 8018994:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018998:	b29b      	uxth	r3, r3
 801899a:	4618      	mov	r0, r3
 801899c:	f7f9 ffda 	bl	8012954 <lwip_htons>
 80189a0:	4603      	mov	r3, r0
 80189a2:	b21b      	sxth	r3, r3
 80189a4:	4323      	orrs	r3, r4
 80189a6:	b21a      	sxth	r2, r3
 80189a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	68db      	ldr	r3, [r3, #12]
 80189ae:	b292      	uxth	r2, r2
 80189b0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189b6:	b29a      	uxth	r2, r3
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80189bc:	4413      	add	r3, r2
 80189be:	b299      	uxth	r1, r3
 80189c0:	4b3c      	ldr	r3, [pc, #240]	; (8018ab4 <tcp_receive+0xf18>)
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	b29a      	uxth	r2, r3
 80189c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	1a8a      	subs	r2, r1, r2
 80189cc:	b292      	uxth	r2, r2
 80189ce:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80189d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	685a      	ldr	r2, [r3, #4]
 80189d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	891b      	ldrh	r3, [r3, #8]
 80189dc:	4619      	mov	r1, r3
 80189de:	4610      	mov	r0, r2
 80189e0:	f7fb fb98 	bl	8014114 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80189e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	891c      	ldrh	r4, [r3, #8]
 80189ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	68db      	ldr	r3, [r3, #12]
 80189f0:	899b      	ldrh	r3, [r3, #12]
 80189f2:	b29b      	uxth	r3, r3
 80189f4:	4618      	mov	r0, r3
 80189f6:	f7f9 ffad 	bl	8012954 <lwip_htons>
 80189fa:	4603      	mov	r3, r0
 80189fc:	b2db      	uxtb	r3, r3
 80189fe:	f003 0303 	and.w	r3, r3, #3
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d001      	beq.n	8018a0a <tcp_receive+0xe6e>
 8018a06:	2301      	movs	r3, #1
 8018a08:	e000      	b.n	8018a0c <tcp_receive+0xe70>
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	4423      	add	r3, r4
 8018a0e:	b29a      	uxth	r2, r3
 8018a10:	4b2a      	ldr	r3, [pc, #168]	; (8018abc <tcp_receive+0xf20>)
 8018a12:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018a14:	4b29      	ldr	r3, [pc, #164]	; (8018abc <tcp_receive+0xf20>)
 8018a16:	881b      	ldrh	r3, [r3, #0]
 8018a18:	461a      	mov	r2, r3
 8018a1a:	4b26      	ldr	r3, [pc, #152]	; (8018ab4 <tcp_receive+0xf18>)
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	441a      	add	r2, r3
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a24:	6879      	ldr	r1, [r7, #4]
 8018a26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018a28:	440b      	add	r3, r1
 8018a2a:	429a      	cmp	r2, r3
 8018a2c:	d019      	beq.n	8018a62 <tcp_receive+0xec6>
 8018a2e:	4b24      	ldr	r3, [pc, #144]	; (8018ac0 <tcp_receive+0xf24>)
 8018a30:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8018a34:	4923      	ldr	r1, [pc, #140]	; (8018ac4 <tcp_receive+0xf28>)
 8018a36:	4824      	ldr	r0, [pc, #144]	; (8018ac8 <tcp_receive+0xf2c>)
 8018a38:	f005 fc9c 	bl	801e374 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018a3c:	e011      	b.n	8018a62 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	63bb      	str	r3, [r7, #56]	; 0x38
 8018a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	f47f aea4 	bne.w	8018794 <tcp_receive+0xbf8>
 8018a4c:	e00a      	b.n	8018a64 <tcp_receive+0xec8>
                break;
 8018a4e:	bf00      	nop
 8018a50:	e008      	b.n	8018a64 <tcp_receive+0xec8>
                break;
 8018a52:	bf00      	nop
 8018a54:	e006      	b.n	8018a64 <tcp_receive+0xec8>
                  break;
 8018a56:	bf00      	nop
 8018a58:	e004      	b.n	8018a64 <tcp_receive+0xec8>
                  break;
 8018a5a:	bf00      	nop
 8018a5c:	e002      	b.n	8018a64 <tcp_receive+0xec8>
                  break;
 8018a5e:	bf00      	nop
 8018a60:	e000      	b.n	8018a64 <tcp_receive+0xec8>
                break;
 8018a62:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018a64:	6878      	ldr	r0, [r7, #4]
 8018a66:	f001 fe8b 	bl	801a780 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018a6a:	e003      	b.n	8018a74 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018a6c:	6878      	ldr	r0, [r7, #4]
 8018a6e:	f001 fe87 	bl	801a780 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018a72:	e01a      	b.n	8018aaa <tcp_receive+0xf0e>
 8018a74:	e019      	b.n	8018aaa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018a76:	4b0f      	ldr	r3, [pc, #60]	; (8018ab4 <tcp_receive+0xf18>)
 8018a78:	681a      	ldr	r2, [r3, #0]
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a7e:	1ad3      	subs	r3, r2, r3
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	db0a      	blt.n	8018a9a <tcp_receive+0xefe>
 8018a84:	4b0b      	ldr	r3, [pc, #44]	; (8018ab4 <tcp_receive+0xf18>)
 8018a86:	681a      	ldr	r2, [r3, #0]
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a8c:	6879      	ldr	r1, [r7, #4]
 8018a8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018a90:	440b      	add	r3, r1
 8018a92:	1ad3      	subs	r3, r2, r3
 8018a94:	3301      	adds	r3, #1
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	dd07      	ble.n	8018aaa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	8b5b      	ldrh	r3, [r3, #26]
 8018a9e:	f043 0302 	orr.w	r3, r3, #2
 8018aa2:	b29a      	uxth	r2, r3
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018aa8:	e7ff      	b.n	8018aaa <tcp_receive+0xf0e>
 8018aaa:	bf00      	nop
 8018aac:	3750      	adds	r7, #80	; 0x50
 8018aae:	46bd      	mov	sp, r7
 8018ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8018ab2:	bf00      	nop
 8018ab4:	2000f9ec 	.word	0x2000f9ec
 8018ab8:	2000f9cc 	.word	0x2000f9cc
 8018abc:	2000f9f6 	.word	0x2000f9f6
 8018ac0:	08021b2c 	.word	0x08021b2c
 8018ac4:	08021ed4 	.word	0x08021ed4
 8018ac8:	08021b78 	.word	0x08021b78

08018acc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018acc:	b480      	push	{r7}
 8018ace:	b083      	sub	sp, #12
 8018ad0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018ad2:	4b15      	ldr	r3, [pc, #84]	; (8018b28 <tcp_get_next_optbyte+0x5c>)
 8018ad4:	881b      	ldrh	r3, [r3, #0]
 8018ad6:	1c5a      	adds	r2, r3, #1
 8018ad8:	b291      	uxth	r1, r2
 8018ada:	4a13      	ldr	r2, [pc, #76]	; (8018b28 <tcp_get_next_optbyte+0x5c>)
 8018adc:	8011      	strh	r1, [r2, #0]
 8018ade:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018ae0:	4b12      	ldr	r3, [pc, #72]	; (8018b2c <tcp_get_next_optbyte+0x60>)
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d004      	beq.n	8018af2 <tcp_get_next_optbyte+0x26>
 8018ae8:	4b11      	ldr	r3, [pc, #68]	; (8018b30 <tcp_get_next_optbyte+0x64>)
 8018aea:	881b      	ldrh	r3, [r3, #0]
 8018aec:	88fa      	ldrh	r2, [r7, #6]
 8018aee:	429a      	cmp	r2, r3
 8018af0:	d208      	bcs.n	8018b04 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018af2:	4b10      	ldr	r3, [pc, #64]	; (8018b34 <tcp_get_next_optbyte+0x68>)
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	3314      	adds	r3, #20
 8018af8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018afa:	88fb      	ldrh	r3, [r7, #6]
 8018afc:	683a      	ldr	r2, [r7, #0]
 8018afe:	4413      	add	r3, r2
 8018b00:	781b      	ldrb	r3, [r3, #0]
 8018b02:	e00b      	b.n	8018b1c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018b04:	88fb      	ldrh	r3, [r7, #6]
 8018b06:	b2da      	uxtb	r2, r3
 8018b08:	4b09      	ldr	r3, [pc, #36]	; (8018b30 <tcp_get_next_optbyte+0x64>)
 8018b0a:	881b      	ldrh	r3, [r3, #0]
 8018b0c:	b2db      	uxtb	r3, r3
 8018b0e:	1ad3      	subs	r3, r2, r3
 8018b10:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018b12:	4b06      	ldr	r3, [pc, #24]	; (8018b2c <tcp_get_next_optbyte+0x60>)
 8018b14:	681a      	ldr	r2, [r3, #0]
 8018b16:	797b      	ldrb	r3, [r7, #5]
 8018b18:	4413      	add	r3, r2
 8018b1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	370c      	adds	r7, #12
 8018b20:	46bd      	mov	sp, r7
 8018b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b26:	4770      	bx	lr
 8018b28:	2000f9e8 	.word	0x2000f9e8
 8018b2c:	2000f9e4 	.word	0x2000f9e4
 8018b30:	2000f9e2 	.word	0x2000f9e2
 8018b34:	2000f9dc 	.word	0x2000f9dc

08018b38 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b084      	sub	sp, #16
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d106      	bne.n	8018b54 <tcp_parseopt+0x1c>
 8018b46:	4b32      	ldr	r3, [pc, #200]	; (8018c10 <tcp_parseopt+0xd8>)
 8018b48:	f240 727d 	movw	r2, #1917	; 0x77d
 8018b4c:	4931      	ldr	r1, [pc, #196]	; (8018c14 <tcp_parseopt+0xdc>)
 8018b4e:	4832      	ldr	r0, [pc, #200]	; (8018c18 <tcp_parseopt+0xe0>)
 8018b50:	f005 fc10 	bl	801e374 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018b54:	4b31      	ldr	r3, [pc, #196]	; (8018c1c <tcp_parseopt+0xe4>)
 8018b56:	881b      	ldrh	r3, [r3, #0]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d055      	beq.n	8018c08 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018b5c:	4b30      	ldr	r3, [pc, #192]	; (8018c20 <tcp_parseopt+0xe8>)
 8018b5e:	2200      	movs	r2, #0
 8018b60:	801a      	strh	r2, [r3, #0]
 8018b62:	e045      	b.n	8018bf0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8018b64:	f7ff ffb2 	bl	8018acc <tcp_get_next_optbyte>
 8018b68:	4603      	mov	r3, r0
 8018b6a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018b6c:	7bfb      	ldrb	r3, [r7, #15]
 8018b6e:	2b02      	cmp	r3, #2
 8018b70:	d006      	beq.n	8018b80 <tcp_parseopt+0x48>
 8018b72:	2b02      	cmp	r3, #2
 8018b74:	dc2b      	bgt.n	8018bce <tcp_parseopt+0x96>
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d041      	beq.n	8018bfe <tcp_parseopt+0xc6>
 8018b7a:	2b01      	cmp	r3, #1
 8018b7c:	d127      	bne.n	8018bce <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8018b7e:	e037      	b.n	8018bf0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018b80:	f7ff ffa4 	bl	8018acc <tcp_get_next_optbyte>
 8018b84:	4603      	mov	r3, r0
 8018b86:	2b04      	cmp	r3, #4
 8018b88:	d13b      	bne.n	8018c02 <tcp_parseopt+0xca>
 8018b8a:	4b25      	ldr	r3, [pc, #148]	; (8018c20 <tcp_parseopt+0xe8>)
 8018b8c:	881b      	ldrh	r3, [r3, #0]
 8018b8e:	3301      	adds	r3, #1
 8018b90:	4a22      	ldr	r2, [pc, #136]	; (8018c1c <tcp_parseopt+0xe4>)
 8018b92:	8812      	ldrh	r2, [r2, #0]
 8018b94:	4293      	cmp	r3, r2
 8018b96:	da34      	bge.n	8018c02 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018b98:	f7ff ff98 	bl	8018acc <tcp_get_next_optbyte>
 8018b9c:	4603      	mov	r3, r0
 8018b9e:	b29b      	uxth	r3, r3
 8018ba0:	021b      	lsls	r3, r3, #8
 8018ba2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018ba4:	f7ff ff92 	bl	8018acc <tcp_get_next_optbyte>
 8018ba8:	4603      	mov	r3, r0
 8018baa:	b29a      	uxth	r2, r3
 8018bac:	89bb      	ldrh	r3, [r7, #12]
 8018bae:	4313      	orrs	r3, r2
 8018bb0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018bb2:	89bb      	ldrh	r3, [r7, #12]
 8018bb4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8018bb8:	d804      	bhi.n	8018bc4 <tcp_parseopt+0x8c>
 8018bba:	89bb      	ldrh	r3, [r7, #12]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d001      	beq.n	8018bc4 <tcp_parseopt+0x8c>
 8018bc0:	89ba      	ldrh	r2, [r7, #12]
 8018bc2:	e001      	b.n	8018bc8 <tcp_parseopt+0x90>
 8018bc4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8018bcc:	e010      	b.n	8018bf0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018bce:	f7ff ff7d 	bl	8018acc <tcp_get_next_optbyte>
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018bd6:	7afb      	ldrb	r3, [r7, #11]
 8018bd8:	2b01      	cmp	r3, #1
 8018bda:	d914      	bls.n	8018c06 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018bdc:	7afb      	ldrb	r3, [r7, #11]
 8018bde:	b29a      	uxth	r2, r3
 8018be0:	4b0f      	ldr	r3, [pc, #60]	; (8018c20 <tcp_parseopt+0xe8>)
 8018be2:	881b      	ldrh	r3, [r3, #0]
 8018be4:	4413      	add	r3, r2
 8018be6:	b29b      	uxth	r3, r3
 8018be8:	3b02      	subs	r3, #2
 8018bea:	b29a      	uxth	r2, r3
 8018bec:	4b0c      	ldr	r3, [pc, #48]	; (8018c20 <tcp_parseopt+0xe8>)
 8018bee:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018bf0:	4b0b      	ldr	r3, [pc, #44]	; (8018c20 <tcp_parseopt+0xe8>)
 8018bf2:	881a      	ldrh	r2, [r3, #0]
 8018bf4:	4b09      	ldr	r3, [pc, #36]	; (8018c1c <tcp_parseopt+0xe4>)
 8018bf6:	881b      	ldrh	r3, [r3, #0]
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d3b3      	bcc.n	8018b64 <tcp_parseopt+0x2c>
 8018bfc:	e004      	b.n	8018c08 <tcp_parseopt+0xd0>
          return;
 8018bfe:	bf00      	nop
 8018c00:	e002      	b.n	8018c08 <tcp_parseopt+0xd0>
            return;
 8018c02:	bf00      	nop
 8018c04:	e000      	b.n	8018c08 <tcp_parseopt+0xd0>
            return;
 8018c06:	bf00      	nop
      }
    }
  }
}
 8018c08:	3710      	adds	r7, #16
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}
 8018c0e:	bf00      	nop
 8018c10:	08021b2c 	.word	0x08021b2c
 8018c14:	08021f90 	.word	0x08021f90
 8018c18:	08021b78 	.word	0x08021b78
 8018c1c:	2000f9e0 	.word	0x2000f9e0
 8018c20:	2000f9e8 	.word	0x2000f9e8

08018c24 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018c24:	b480      	push	{r7}
 8018c26:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018c28:	4b05      	ldr	r3, [pc, #20]	; (8018c40 <tcp_trigger_input_pcb_close+0x1c>)
 8018c2a:	781b      	ldrb	r3, [r3, #0]
 8018c2c:	f043 0310 	orr.w	r3, r3, #16
 8018c30:	b2da      	uxtb	r2, r3
 8018c32:	4b03      	ldr	r3, [pc, #12]	; (8018c40 <tcp_trigger_input_pcb_close+0x1c>)
 8018c34:	701a      	strb	r2, [r3, #0]
}
 8018c36:	bf00      	nop
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c3e:	4770      	bx	lr
 8018c40:	2000f9f9 	.word	0x2000f9f9

08018c44 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b084      	sub	sp, #16
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	60f8      	str	r0, [r7, #12]
 8018c4c:	60b9      	str	r1, [r7, #8]
 8018c4e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d00a      	beq.n	8018c6c <tcp_route+0x28>
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	7a1b      	ldrb	r3, [r3, #8]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d006      	beq.n	8018c6c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	7a1b      	ldrb	r3, [r3, #8]
 8018c62:	4618      	mov	r0, r3
 8018c64:	f7fb f84e 	bl	8013d04 <netif_get_by_index>
 8018c68:	4603      	mov	r3, r0
 8018c6a:	e003      	b.n	8018c74 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018c6c:	6878      	ldr	r0, [r7, #4]
 8018c6e:	f003 fc4b 	bl	801c508 <ip4_route>
 8018c72:	4603      	mov	r3, r0
  }
}
 8018c74:	4618      	mov	r0, r3
 8018c76:	3710      	adds	r7, #16
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd80      	pop	{r7, pc}

08018c7c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018c7c:	b590      	push	{r4, r7, lr}
 8018c7e:	b087      	sub	sp, #28
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	60f8      	str	r0, [r7, #12]
 8018c84:	60b9      	str	r1, [r7, #8]
 8018c86:	603b      	str	r3, [r7, #0]
 8018c88:	4613      	mov	r3, r2
 8018c8a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d105      	bne.n	8018c9e <tcp_create_segment+0x22>
 8018c92:	4b44      	ldr	r3, [pc, #272]	; (8018da4 <tcp_create_segment+0x128>)
 8018c94:	22a3      	movs	r2, #163	; 0xa3
 8018c96:	4944      	ldr	r1, [pc, #272]	; (8018da8 <tcp_create_segment+0x12c>)
 8018c98:	4844      	ldr	r0, [pc, #272]	; (8018dac <tcp_create_segment+0x130>)
 8018c9a:	f005 fb6b 	bl	801e374 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018c9e:	68bb      	ldr	r3, [r7, #8]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d105      	bne.n	8018cb0 <tcp_create_segment+0x34>
 8018ca4:	4b3f      	ldr	r3, [pc, #252]	; (8018da4 <tcp_create_segment+0x128>)
 8018ca6:	22a4      	movs	r2, #164	; 0xa4
 8018ca8:	4941      	ldr	r1, [pc, #260]	; (8018db0 <tcp_create_segment+0x134>)
 8018caa:	4840      	ldr	r0, [pc, #256]	; (8018dac <tcp_create_segment+0x130>)
 8018cac:	f005 fb62 	bl	801e374 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018cb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018cb4:	009b      	lsls	r3, r3, #2
 8018cb6:	b2db      	uxtb	r3, r3
 8018cb8:	f003 0304 	and.w	r3, r3, #4
 8018cbc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018cbe:	2003      	movs	r0, #3
 8018cc0:	f7fa fb20 	bl	8013304 <memp_malloc>
 8018cc4:	6138      	str	r0, [r7, #16]
 8018cc6:	693b      	ldr	r3, [r7, #16]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d104      	bne.n	8018cd6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018ccc:	68b8      	ldr	r0, [r7, #8]
 8018cce:	f7fb fba7 	bl	8014420 <pbuf_free>
    return NULL;
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	e061      	b.n	8018d9a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8018cd6:	693b      	ldr	r3, [r7, #16]
 8018cd8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018cdc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018cde:	693b      	ldr	r3, [r7, #16]
 8018ce0:	2200      	movs	r2, #0
 8018ce2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018ce4:	693b      	ldr	r3, [r7, #16]
 8018ce6:	68ba      	ldr	r2, [r7, #8]
 8018ce8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018cea:	68bb      	ldr	r3, [r7, #8]
 8018cec:	891a      	ldrh	r2, [r3, #8]
 8018cee:	7dfb      	ldrb	r3, [r7, #23]
 8018cf0:	b29b      	uxth	r3, r3
 8018cf2:	429a      	cmp	r2, r3
 8018cf4:	d205      	bcs.n	8018d02 <tcp_create_segment+0x86>
 8018cf6:	4b2b      	ldr	r3, [pc, #172]	; (8018da4 <tcp_create_segment+0x128>)
 8018cf8:	22b0      	movs	r2, #176	; 0xb0
 8018cfa:	492e      	ldr	r1, [pc, #184]	; (8018db4 <tcp_create_segment+0x138>)
 8018cfc:	482b      	ldr	r0, [pc, #172]	; (8018dac <tcp_create_segment+0x130>)
 8018cfe:	f005 fb39 	bl	801e374 <iprintf>
  seg->len = p->tot_len - optlen;
 8018d02:	68bb      	ldr	r3, [r7, #8]
 8018d04:	891a      	ldrh	r2, [r3, #8]
 8018d06:	7dfb      	ldrb	r3, [r7, #23]
 8018d08:	b29b      	uxth	r3, r3
 8018d0a:	1ad3      	subs	r3, r2, r3
 8018d0c:	b29a      	uxth	r2, r3
 8018d0e:	693b      	ldr	r3, [r7, #16]
 8018d10:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018d12:	2114      	movs	r1, #20
 8018d14:	68b8      	ldr	r0, [r7, #8]
 8018d16:	f7fb faed 	bl	80142f4 <pbuf_add_header>
 8018d1a:	4603      	mov	r3, r0
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d004      	beq.n	8018d2a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018d20:	6938      	ldr	r0, [r7, #16]
 8018d22:	f7fd f800 	bl	8015d26 <tcp_seg_free>
    return NULL;
 8018d26:	2300      	movs	r3, #0
 8018d28:	e037      	b.n	8018d9a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018d2a:	693b      	ldr	r3, [r7, #16]
 8018d2c:	685b      	ldr	r3, [r3, #4]
 8018d2e:	685a      	ldr	r2, [r3, #4]
 8018d30:	693b      	ldr	r3, [r7, #16]
 8018d32:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	8ada      	ldrh	r2, [r3, #22]
 8018d38:	693b      	ldr	r3, [r7, #16]
 8018d3a:	68dc      	ldr	r4, [r3, #12]
 8018d3c:	4610      	mov	r0, r2
 8018d3e:	f7f9 fe09 	bl	8012954 <lwip_htons>
 8018d42:	4603      	mov	r3, r0
 8018d44:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	8b1a      	ldrh	r2, [r3, #24]
 8018d4a:	693b      	ldr	r3, [r7, #16]
 8018d4c:	68dc      	ldr	r4, [r3, #12]
 8018d4e:	4610      	mov	r0, r2
 8018d50:	f7f9 fe00 	bl	8012954 <lwip_htons>
 8018d54:	4603      	mov	r3, r0
 8018d56:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018d58:	693b      	ldr	r3, [r7, #16]
 8018d5a:	68dc      	ldr	r4, [r3, #12]
 8018d5c:	6838      	ldr	r0, [r7, #0]
 8018d5e:	f7f9 fe0e 	bl	801297e <lwip_htonl>
 8018d62:	4603      	mov	r3, r0
 8018d64:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018d66:	7dfb      	ldrb	r3, [r7, #23]
 8018d68:	089b      	lsrs	r3, r3, #2
 8018d6a:	b2db      	uxtb	r3, r3
 8018d6c:	b29b      	uxth	r3, r3
 8018d6e:	3305      	adds	r3, #5
 8018d70:	b29b      	uxth	r3, r3
 8018d72:	031b      	lsls	r3, r3, #12
 8018d74:	b29a      	uxth	r2, r3
 8018d76:	79fb      	ldrb	r3, [r7, #7]
 8018d78:	b29b      	uxth	r3, r3
 8018d7a:	4313      	orrs	r3, r2
 8018d7c:	b29a      	uxth	r2, r3
 8018d7e:	693b      	ldr	r3, [r7, #16]
 8018d80:	68dc      	ldr	r4, [r3, #12]
 8018d82:	4610      	mov	r0, r2
 8018d84:	f7f9 fde6 	bl	8012954 <lwip_htons>
 8018d88:	4603      	mov	r3, r0
 8018d8a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018d8c:	693b      	ldr	r3, [r7, #16]
 8018d8e:	68db      	ldr	r3, [r3, #12]
 8018d90:	2200      	movs	r2, #0
 8018d92:	749a      	strb	r2, [r3, #18]
 8018d94:	2200      	movs	r2, #0
 8018d96:	74da      	strb	r2, [r3, #19]
  return seg;
 8018d98:	693b      	ldr	r3, [r7, #16]
}
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	371c      	adds	r7, #28
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	bd90      	pop	{r4, r7, pc}
 8018da2:	bf00      	nop
 8018da4:	08021fac 	.word	0x08021fac
 8018da8:	08021fe0 	.word	0x08021fe0
 8018dac:	08022000 	.word	0x08022000
 8018db0:	08022028 	.word	0x08022028
 8018db4:	0802204c 	.word	0x0802204c

08018db8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b086      	sub	sp, #24
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	607b      	str	r3, [r7, #4]
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	73fb      	strb	r3, [r7, #15]
 8018dc4:	460b      	mov	r3, r1
 8018dc6:	81bb      	strh	r3, [r7, #12]
 8018dc8:	4613      	mov	r3, r2
 8018dca:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018dcc:	89bb      	ldrh	r3, [r7, #12]
 8018dce:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d105      	bne.n	8018de2 <tcp_pbuf_prealloc+0x2a>
 8018dd6:	4b30      	ldr	r3, [pc, #192]	; (8018e98 <tcp_pbuf_prealloc+0xe0>)
 8018dd8:	22e8      	movs	r2, #232	; 0xe8
 8018dda:	4930      	ldr	r1, [pc, #192]	; (8018e9c <tcp_pbuf_prealloc+0xe4>)
 8018ddc:	4830      	ldr	r0, [pc, #192]	; (8018ea0 <tcp_pbuf_prealloc+0xe8>)
 8018dde:	f005 fac9 	bl	801e374 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018de2:	6a3b      	ldr	r3, [r7, #32]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d105      	bne.n	8018df4 <tcp_pbuf_prealloc+0x3c>
 8018de8:	4b2b      	ldr	r3, [pc, #172]	; (8018e98 <tcp_pbuf_prealloc+0xe0>)
 8018dea:	22e9      	movs	r2, #233	; 0xe9
 8018dec:	492d      	ldr	r1, [pc, #180]	; (8018ea4 <tcp_pbuf_prealloc+0xec>)
 8018dee:	482c      	ldr	r0, [pc, #176]	; (8018ea0 <tcp_pbuf_prealloc+0xe8>)
 8018df0:	f005 fac0 	bl	801e374 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018df4:	89ba      	ldrh	r2, [r7, #12]
 8018df6:	897b      	ldrh	r3, [r7, #10]
 8018df8:	429a      	cmp	r2, r3
 8018dfa:	d221      	bcs.n	8018e40 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018dfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018e00:	f003 0302 	and.w	r3, r3, #2
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d111      	bne.n	8018e2c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018e08:	6a3b      	ldr	r3, [r7, #32]
 8018e0a:	8b5b      	ldrh	r3, [r3, #26]
 8018e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d115      	bne.n	8018e40 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018e14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d007      	beq.n	8018e2c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018e1c:	6a3b      	ldr	r3, [r7, #32]
 8018e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d103      	bne.n	8018e2c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018e24:	6a3b      	ldr	r3, [r7, #32]
 8018e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d009      	beq.n	8018e40 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018e2c:	89bb      	ldrh	r3, [r7, #12]
 8018e2e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8018e32:	f023 0203 	bic.w	r2, r3, #3
 8018e36:	897b      	ldrh	r3, [r7, #10]
 8018e38:	4293      	cmp	r3, r2
 8018e3a:	bf28      	it	cs
 8018e3c:	4613      	movcs	r3, r2
 8018e3e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018e40:	8af9      	ldrh	r1, [r7, #22]
 8018e42:	7bfb      	ldrb	r3, [r7, #15]
 8018e44:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e48:	4618      	mov	r0, r3
 8018e4a:	f7fb f805 	bl	8013e58 <pbuf_alloc>
 8018e4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018e50:	693b      	ldr	r3, [r7, #16]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d101      	bne.n	8018e5a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018e56:	2300      	movs	r3, #0
 8018e58:	e019      	b.n	8018e8e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018e5a:	693b      	ldr	r3, [r7, #16]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d006      	beq.n	8018e70 <tcp_pbuf_prealloc+0xb8>
 8018e62:	4b0d      	ldr	r3, [pc, #52]	; (8018e98 <tcp_pbuf_prealloc+0xe0>)
 8018e64:	f240 120b 	movw	r2, #267	; 0x10b
 8018e68:	490f      	ldr	r1, [pc, #60]	; (8018ea8 <tcp_pbuf_prealloc+0xf0>)
 8018e6a:	480d      	ldr	r0, [pc, #52]	; (8018ea0 <tcp_pbuf_prealloc+0xe8>)
 8018e6c:	f005 fa82 	bl	801e374 <iprintf>
  *oversize = p->len - length;
 8018e70:	693b      	ldr	r3, [r7, #16]
 8018e72:	895a      	ldrh	r2, [r3, #10]
 8018e74:	89bb      	ldrh	r3, [r7, #12]
 8018e76:	1ad3      	subs	r3, r2, r3
 8018e78:	b29a      	uxth	r2, r3
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018e7e:	693b      	ldr	r3, [r7, #16]
 8018e80:	89ba      	ldrh	r2, [r7, #12]
 8018e82:	811a      	strh	r2, [r3, #8]
 8018e84:	693b      	ldr	r3, [r7, #16]
 8018e86:	891a      	ldrh	r2, [r3, #8]
 8018e88:	693b      	ldr	r3, [r7, #16]
 8018e8a:	815a      	strh	r2, [r3, #10]
  return p;
 8018e8c:	693b      	ldr	r3, [r7, #16]
}
 8018e8e:	4618      	mov	r0, r3
 8018e90:	3718      	adds	r7, #24
 8018e92:	46bd      	mov	sp, r7
 8018e94:	bd80      	pop	{r7, pc}
 8018e96:	bf00      	nop
 8018e98:	08021fac 	.word	0x08021fac
 8018e9c:	08022064 	.word	0x08022064
 8018ea0:	08022000 	.word	0x08022000
 8018ea4:	08022088 	.word	0x08022088
 8018ea8:	080220a8 	.word	0x080220a8

08018eac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b082      	sub	sp, #8
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	460b      	mov	r3, r1
 8018eb6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d106      	bne.n	8018ecc <tcp_write_checks+0x20>
 8018ebe:	4b33      	ldr	r3, [pc, #204]	; (8018f8c <tcp_write_checks+0xe0>)
 8018ec0:	f240 1233 	movw	r2, #307	; 0x133
 8018ec4:	4932      	ldr	r1, [pc, #200]	; (8018f90 <tcp_write_checks+0xe4>)
 8018ec6:	4833      	ldr	r0, [pc, #204]	; (8018f94 <tcp_write_checks+0xe8>)
 8018ec8:	f005 fa54 	bl	801e374 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	7d1b      	ldrb	r3, [r3, #20]
 8018ed0:	2b04      	cmp	r3, #4
 8018ed2:	d00e      	beq.n	8018ef2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8018ed8:	2b07      	cmp	r3, #7
 8018eda:	d00a      	beq.n	8018ef2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8018ee0:	2b02      	cmp	r3, #2
 8018ee2:	d006      	beq.n	8018ef2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8018ee8:	2b03      	cmp	r3, #3
 8018eea:	d002      	beq.n	8018ef2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018eec:	f06f 030a 	mvn.w	r3, #10
 8018ef0:	e048      	b.n	8018f84 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8018ef2:	887b      	ldrh	r3, [r7, #2]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d101      	bne.n	8018efc <tcp_write_checks+0x50>
    return ERR_OK;
 8018ef8:	2300      	movs	r3, #0
 8018efa:	e043      	b.n	8018f84 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018f02:	887a      	ldrh	r2, [r7, #2]
 8018f04:	429a      	cmp	r2, r3
 8018f06:	d909      	bls.n	8018f1c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	8b5b      	ldrh	r3, [r3, #26]
 8018f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f10:	b29a      	uxth	r2, r3
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018f16:	f04f 33ff 	mov.w	r3, #4294967295
 8018f1a:	e033      	b.n	8018f84 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018f22:	2b08      	cmp	r3, #8
 8018f24:	d909      	bls.n	8018f3a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	8b5b      	ldrh	r3, [r3, #26]
 8018f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f2e:	b29a      	uxth	r2, r3
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018f34:	f04f 33ff 	mov.w	r3, #4294967295
 8018f38:	e024      	b.n	8018f84 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d00f      	beq.n	8018f64 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d11a      	bne.n	8018f82 <tcp_write_checks+0xd6>
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d116      	bne.n	8018f82 <tcp_write_checks+0xd6>
 8018f54:	4b0d      	ldr	r3, [pc, #52]	; (8018f8c <tcp_write_checks+0xe0>)
 8018f56:	f240 1255 	movw	r2, #341	; 0x155
 8018f5a:	490f      	ldr	r1, [pc, #60]	; (8018f98 <tcp_write_checks+0xec>)
 8018f5c:	480d      	ldr	r0, [pc, #52]	; (8018f94 <tcp_write_checks+0xe8>)
 8018f5e:	f005 fa09 	bl	801e374 <iprintf>
 8018f62:	e00e      	b.n	8018f82 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d103      	bne.n	8018f74 <tcp_write_checks+0xc8>
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d006      	beq.n	8018f82 <tcp_write_checks+0xd6>
 8018f74:	4b05      	ldr	r3, [pc, #20]	; (8018f8c <tcp_write_checks+0xe0>)
 8018f76:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8018f7a:	4908      	ldr	r1, [pc, #32]	; (8018f9c <tcp_write_checks+0xf0>)
 8018f7c:	4805      	ldr	r0, [pc, #20]	; (8018f94 <tcp_write_checks+0xe8>)
 8018f7e:	f005 f9f9 	bl	801e374 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8018f82:	2300      	movs	r3, #0
}
 8018f84:	4618      	mov	r0, r3
 8018f86:	3708      	adds	r7, #8
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}
 8018f8c:	08021fac 	.word	0x08021fac
 8018f90:	080220bc 	.word	0x080220bc
 8018f94:	08022000 	.word	0x08022000
 8018f98:	080220dc 	.word	0x080220dc
 8018f9c:	08022118 	.word	0x08022118

08018fa0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8018fa0:	b590      	push	{r4, r7, lr}
 8018fa2:	b09b      	sub	sp, #108	; 0x6c
 8018fa4:	af04      	add	r7, sp, #16
 8018fa6:	60f8      	str	r0, [r7, #12]
 8018fa8:	60b9      	str	r1, [r7, #8]
 8018faa:	4611      	mov	r1, r2
 8018fac:	461a      	mov	r2, r3
 8018fae:	460b      	mov	r3, r1
 8018fb0:	80fb      	strh	r3, [r7, #6]
 8018fb2:	4613      	mov	r3, r2
 8018fb4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018fba:	2300      	movs	r3, #0
 8018fbc:	653b      	str	r3, [r7, #80]	; 0x50
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8018fca:	2300      	movs	r3, #0
 8018fcc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8018fda:	2300      	movs	r3, #0
 8018fdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8018fde:	2300      	movs	r3, #0
 8018fe0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d109      	bne.n	8018ffc <tcp_write+0x5c>
 8018fe8:	4ba4      	ldr	r3, [pc, #656]	; (801927c <tcp_write+0x2dc>)
 8018fea:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8018fee:	49a4      	ldr	r1, [pc, #656]	; (8019280 <tcp_write+0x2e0>)
 8018ff0:	48a4      	ldr	r0, [pc, #656]	; (8019284 <tcp_write+0x2e4>)
 8018ff2:	f005 f9bf 	bl	801e374 <iprintf>
 8018ff6:	f06f 030f 	mvn.w	r3, #15
 8018ffa:	e32a      	b.n	8019652 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8019002:	085b      	lsrs	r3, r3, #1
 8019004:	b29a      	uxth	r2, r3
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801900a:	4293      	cmp	r3, r2
 801900c:	bf28      	it	cs
 801900e:	4613      	movcs	r3, r2
 8019010:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8019012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019014:	2b00      	cmp	r3, #0
 8019016:	d102      	bne.n	801901e <tcp_write+0x7e>
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801901c:	e000      	b.n	8019020 <tcp_write+0x80>
 801901e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019020:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019022:	68bb      	ldr	r3, [r7, #8]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d109      	bne.n	801903c <tcp_write+0x9c>
 8019028:	4b94      	ldr	r3, [pc, #592]	; (801927c <tcp_write+0x2dc>)
 801902a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801902e:	4996      	ldr	r1, [pc, #600]	; (8019288 <tcp_write+0x2e8>)
 8019030:	4894      	ldr	r0, [pc, #592]	; (8019284 <tcp_write+0x2e4>)
 8019032:	f005 f99f 	bl	801e374 <iprintf>
 8019036:	f06f 030f 	mvn.w	r3, #15
 801903a:	e30a      	b.n	8019652 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801903c:	88fb      	ldrh	r3, [r7, #6]
 801903e:	4619      	mov	r1, r3
 8019040:	68f8      	ldr	r0, [r7, #12]
 8019042:	f7ff ff33 	bl	8018eac <tcp_write_checks>
 8019046:	4603      	mov	r3, r0
 8019048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801904c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019050:	2b00      	cmp	r3, #0
 8019052:	d002      	beq.n	801905a <tcp_write+0xba>
    return err;
 8019054:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019058:	e2fb      	b.n	8019652 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019060:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019064:	2300      	movs	r3, #0
 8019066:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801906e:	2b00      	cmp	r3, #0
 8019070:	f000 80f6 	beq.w	8019260 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019074:	68fb      	ldr	r3, [r7, #12]
 8019076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019078:	653b      	str	r3, [r7, #80]	; 0x50
 801907a:	e002      	b.n	8019082 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801907c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	2b00      	cmp	r3, #0
 8019088:	d1f8      	bne.n	801907c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801908a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801908c:	7a9b      	ldrb	r3, [r3, #10]
 801908e:	009b      	lsls	r3, r3, #2
 8019090:	b29b      	uxth	r3, r3
 8019092:	f003 0304 	and.w	r3, r3, #4
 8019096:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8019098:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801909a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801909c:	891b      	ldrh	r3, [r3, #8]
 801909e:	4619      	mov	r1, r3
 80190a0:	8c3b      	ldrh	r3, [r7, #32]
 80190a2:	440b      	add	r3, r1
 80190a4:	429a      	cmp	r2, r3
 80190a6:	da06      	bge.n	80190b6 <tcp_write+0x116>
 80190a8:	4b74      	ldr	r3, [pc, #464]	; (801927c <tcp_write+0x2dc>)
 80190aa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80190ae:	4977      	ldr	r1, [pc, #476]	; (801928c <tcp_write+0x2ec>)
 80190b0:	4874      	ldr	r0, [pc, #464]	; (8019284 <tcp_write+0x2e4>)
 80190b2:	f005 f95f 	bl	801e374 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80190b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190b8:	891a      	ldrh	r2, [r3, #8]
 80190ba:	8c3b      	ldrh	r3, [r7, #32]
 80190bc:	4413      	add	r3, r2
 80190be:	b29b      	uxth	r3, r3
 80190c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80190c2:	1ad3      	subs	r3, r2, r3
 80190c4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80190cc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80190ce:	8a7b      	ldrh	r3, [r7, #18]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d026      	beq.n	8019122 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80190d4:	8a7b      	ldrh	r3, [r7, #18]
 80190d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80190d8:	429a      	cmp	r2, r3
 80190da:	d206      	bcs.n	80190ea <tcp_write+0x14a>
 80190dc:	4b67      	ldr	r3, [pc, #412]	; (801927c <tcp_write+0x2dc>)
 80190de:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80190e2:	496b      	ldr	r1, [pc, #428]	; (8019290 <tcp_write+0x2f0>)
 80190e4:	4867      	ldr	r0, [pc, #412]	; (8019284 <tcp_write+0x2e4>)
 80190e6:	f005 f945 	bl	801e374 <iprintf>
      seg = last_unsent;
 80190ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190ec:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80190ee:	8a7b      	ldrh	r3, [r7, #18]
 80190f0:	88fa      	ldrh	r2, [r7, #6]
 80190f2:	4293      	cmp	r3, r2
 80190f4:	bf28      	it	cs
 80190f6:	4613      	movcs	r3, r2
 80190f8:	b29b      	uxth	r3, r3
 80190fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80190fc:	4293      	cmp	r3, r2
 80190fe:	bf28      	it	cs
 8019100:	4613      	movcs	r3, r2
 8019102:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8019104:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019108:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801910a:	4413      	add	r3, r2
 801910c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8019110:	8a7a      	ldrh	r2, [r7, #18]
 8019112:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019114:	1ad3      	subs	r3, r2, r3
 8019116:	b29b      	uxth	r3, r3
 8019118:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801911a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801911c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801911e:	1ad3      	subs	r3, r2, r3
 8019120:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8019122:	8a7b      	ldrh	r3, [r7, #18]
 8019124:	2b00      	cmp	r3, #0
 8019126:	d00b      	beq.n	8019140 <tcp_write+0x1a0>
 8019128:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801912c:	88fb      	ldrh	r3, [r7, #6]
 801912e:	429a      	cmp	r2, r3
 8019130:	d006      	beq.n	8019140 <tcp_write+0x1a0>
 8019132:	4b52      	ldr	r3, [pc, #328]	; (801927c <tcp_write+0x2dc>)
 8019134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019138:	4956      	ldr	r1, [pc, #344]	; (8019294 <tcp_write+0x2f4>)
 801913a:	4852      	ldr	r0, [pc, #328]	; (8019284 <tcp_write+0x2e4>)
 801913c:	f005 f91a 	bl	801e374 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019140:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019144:	88fb      	ldrh	r3, [r7, #6]
 8019146:	429a      	cmp	r2, r3
 8019148:	f080 8167 	bcs.w	801941a <tcp_write+0x47a>
 801914c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801914e:	2b00      	cmp	r3, #0
 8019150:	f000 8163 	beq.w	801941a <tcp_write+0x47a>
 8019154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019156:	891b      	ldrh	r3, [r3, #8]
 8019158:	2b00      	cmp	r3, #0
 801915a:	f000 815e 	beq.w	801941a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801915e:	88fa      	ldrh	r2, [r7, #6]
 8019160:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019164:	1ad2      	subs	r2, r2, r3
 8019166:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019168:	4293      	cmp	r3, r2
 801916a:	bfa8      	it	ge
 801916c:	4613      	movge	r3, r2
 801916e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8019170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019172:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019174:	797b      	ldrb	r3, [r7, #5]
 8019176:	f003 0301 	and.w	r3, r3, #1
 801917a:	2b00      	cmp	r3, #0
 801917c:	d027      	beq.n	80191ce <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801917e:	f107 0012 	add.w	r0, r7, #18
 8019182:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019184:	8bf9      	ldrh	r1, [r7, #30]
 8019186:	2301      	movs	r3, #1
 8019188:	9302      	str	r3, [sp, #8]
 801918a:	797b      	ldrb	r3, [r7, #5]
 801918c:	9301      	str	r3, [sp, #4]
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	9300      	str	r3, [sp, #0]
 8019192:	4603      	mov	r3, r0
 8019194:	2000      	movs	r0, #0
 8019196:	f7ff fe0f 	bl	8018db8 <tcp_pbuf_prealloc>
 801919a:	6578      	str	r0, [r7, #84]	; 0x54
 801919c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801919e:	2b00      	cmp	r3, #0
 80191a0:	f000 8225 	beq.w	80195ee <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80191a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80191a6:	6858      	ldr	r0, [r3, #4]
 80191a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80191ac:	68ba      	ldr	r2, [r7, #8]
 80191ae:	4413      	add	r3, r2
 80191b0:	8bfa      	ldrh	r2, [r7, #30]
 80191b2:	4619      	mov	r1, r3
 80191b4:	f004 ffce 	bl	801e154 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80191b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80191ba:	f7fb f9bf 	bl	801453c <pbuf_clen>
 80191be:	4603      	mov	r3, r0
 80191c0:	461a      	mov	r2, r3
 80191c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80191c6:	4413      	add	r3, r2
 80191c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80191cc:	e041      	b.n	8019252 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80191ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191d0:	685b      	ldr	r3, [r3, #4]
 80191d2:	637b      	str	r3, [r7, #52]	; 0x34
 80191d4:	e002      	b.n	80191dc <tcp_write+0x23c>
 80191d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	637b      	str	r3, [r7, #52]	; 0x34
 80191dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d1f8      	bne.n	80191d6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80191e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191e6:	7b1b      	ldrb	r3, [r3, #12]
 80191e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d115      	bne.n	801921c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80191f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191f2:	685b      	ldr	r3, [r3, #4]
 80191f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80191f6:	8952      	ldrh	r2, [r2, #10]
 80191f8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80191fa:	68ba      	ldr	r2, [r7, #8]
 80191fc:	429a      	cmp	r2, r3
 80191fe:	d10d      	bne.n	801921c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019200:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019204:	2b00      	cmp	r3, #0
 8019206:	d006      	beq.n	8019216 <tcp_write+0x276>
 8019208:	4b1c      	ldr	r3, [pc, #112]	; (801927c <tcp_write+0x2dc>)
 801920a:	f240 2231 	movw	r2, #561	; 0x231
 801920e:	4922      	ldr	r1, [pc, #136]	; (8019298 <tcp_write+0x2f8>)
 8019210:	481c      	ldr	r0, [pc, #112]	; (8019284 <tcp_write+0x2e4>)
 8019212:	f005 f8af 	bl	801e374 <iprintf>
          extendlen = seglen;
 8019216:	8bfb      	ldrh	r3, [r7, #30]
 8019218:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801921a:	e01a      	b.n	8019252 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801921c:	8bfb      	ldrh	r3, [r7, #30]
 801921e:	2201      	movs	r2, #1
 8019220:	4619      	mov	r1, r3
 8019222:	2000      	movs	r0, #0
 8019224:	f7fa fe18 	bl	8013e58 <pbuf_alloc>
 8019228:	6578      	str	r0, [r7, #84]	; 0x54
 801922a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801922c:	2b00      	cmp	r3, #0
 801922e:	f000 81e0 	beq.w	80195f2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8019232:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019236:	68ba      	ldr	r2, [r7, #8]
 8019238:	441a      	add	r2, r3
 801923a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801923c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801923e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019240:	f7fb f97c 	bl	801453c <pbuf_clen>
 8019244:	4603      	mov	r3, r0
 8019246:	461a      	mov	r2, r3
 8019248:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801924c:	4413      	add	r3, r2
 801924e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019252:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019256:	8bfb      	ldrh	r3, [r7, #30]
 8019258:	4413      	add	r3, r2
 801925a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801925e:	e0dc      	b.n	801941a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019266:	2b00      	cmp	r3, #0
 8019268:	f000 80d7 	beq.w	801941a <tcp_write+0x47a>
 801926c:	4b03      	ldr	r3, [pc, #12]	; (801927c <tcp_write+0x2dc>)
 801926e:	f240 224a 	movw	r2, #586	; 0x24a
 8019272:	490a      	ldr	r1, [pc, #40]	; (801929c <tcp_write+0x2fc>)
 8019274:	4803      	ldr	r0, [pc, #12]	; (8019284 <tcp_write+0x2e4>)
 8019276:	f005 f87d 	bl	801e374 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801927a:	e0ce      	b.n	801941a <tcp_write+0x47a>
 801927c:	08021fac 	.word	0x08021fac
 8019280:	0802214c 	.word	0x0802214c
 8019284:	08022000 	.word	0x08022000
 8019288:	08022164 	.word	0x08022164
 801928c:	08022198 	.word	0x08022198
 8019290:	080221b0 	.word	0x080221b0
 8019294:	080221d0 	.word	0x080221d0
 8019298:	080221f0 	.word	0x080221f0
 801929c:	0802221c 	.word	0x0802221c
    struct pbuf *p;
    u16_t left = len - pos;
 80192a0:	88fa      	ldrh	r2, [r7, #6]
 80192a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80192a6:	1ad3      	subs	r3, r2, r3
 80192a8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80192aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80192ae:	b29b      	uxth	r3, r3
 80192b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80192b2:	1ad3      	subs	r3, r2, r3
 80192b4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80192b6:	8b7a      	ldrh	r2, [r7, #26]
 80192b8:	8bbb      	ldrh	r3, [r7, #28]
 80192ba:	4293      	cmp	r3, r2
 80192bc:	bf28      	it	cs
 80192be:	4613      	movcs	r3, r2
 80192c0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80192c2:	797b      	ldrb	r3, [r7, #5]
 80192c4:	f003 0301 	and.w	r3, r3, #1
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d036      	beq.n	801933a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80192cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80192d0:	b29a      	uxth	r2, r3
 80192d2:	8b3b      	ldrh	r3, [r7, #24]
 80192d4:	4413      	add	r3, r2
 80192d6:	b299      	uxth	r1, r3
 80192d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80192da:	2b00      	cmp	r3, #0
 80192dc:	bf0c      	ite	eq
 80192de:	2301      	moveq	r3, #1
 80192e0:	2300      	movne	r3, #0
 80192e2:	b2db      	uxtb	r3, r3
 80192e4:	f107 0012 	add.w	r0, r7, #18
 80192e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80192ea:	9302      	str	r3, [sp, #8]
 80192ec:	797b      	ldrb	r3, [r7, #5]
 80192ee:	9301      	str	r3, [sp, #4]
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	9300      	str	r3, [sp, #0]
 80192f4:	4603      	mov	r3, r0
 80192f6:	2036      	movs	r0, #54	; 0x36
 80192f8:	f7ff fd5e 	bl	8018db8 <tcp_pbuf_prealloc>
 80192fc:	6338      	str	r0, [r7, #48]	; 0x30
 80192fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019300:	2b00      	cmp	r3, #0
 8019302:	f000 8178 	beq.w	80195f6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019308:	895b      	ldrh	r3, [r3, #10]
 801930a:	8b3a      	ldrh	r2, [r7, #24]
 801930c:	429a      	cmp	r2, r3
 801930e:	d906      	bls.n	801931e <tcp_write+0x37e>
 8019310:	4b8c      	ldr	r3, [pc, #560]	; (8019544 <tcp_write+0x5a4>)
 8019312:	f240 2266 	movw	r2, #614	; 0x266
 8019316:	498c      	ldr	r1, [pc, #560]	; (8019548 <tcp_write+0x5a8>)
 8019318:	488c      	ldr	r0, [pc, #560]	; (801954c <tcp_write+0x5ac>)
 801931a:	f005 f82b 	bl	801e374 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019320:	685a      	ldr	r2, [r3, #4]
 8019322:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019326:	18d0      	adds	r0, r2, r3
 8019328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801932c:	68ba      	ldr	r2, [r7, #8]
 801932e:	4413      	add	r3, r2
 8019330:	8b3a      	ldrh	r2, [r7, #24]
 8019332:	4619      	mov	r1, r3
 8019334:	f004 ff0e 	bl	801e154 <memcpy>
 8019338:	e02f      	b.n	801939a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801933a:	8a7b      	ldrh	r3, [r7, #18]
 801933c:	2b00      	cmp	r3, #0
 801933e:	d006      	beq.n	801934e <tcp_write+0x3ae>
 8019340:	4b80      	ldr	r3, [pc, #512]	; (8019544 <tcp_write+0x5a4>)
 8019342:	f240 2271 	movw	r2, #625	; 0x271
 8019346:	4982      	ldr	r1, [pc, #520]	; (8019550 <tcp_write+0x5b0>)
 8019348:	4880      	ldr	r0, [pc, #512]	; (801954c <tcp_write+0x5ac>)
 801934a:	f005 f813 	bl	801e374 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801934e:	8b3b      	ldrh	r3, [r7, #24]
 8019350:	2201      	movs	r2, #1
 8019352:	4619      	mov	r1, r3
 8019354:	2036      	movs	r0, #54	; 0x36
 8019356:	f7fa fd7f 	bl	8013e58 <pbuf_alloc>
 801935a:	6178      	str	r0, [r7, #20]
 801935c:	697b      	ldr	r3, [r7, #20]
 801935e:	2b00      	cmp	r3, #0
 8019360:	f000 814b 	beq.w	80195fa <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019364:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019368:	68ba      	ldr	r2, [r7, #8]
 801936a:	441a      	add	r2, r3
 801936c:	697b      	ldr	r3, [r7, #20]
 801936e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019370:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019374:	b29b      	uxth	r3, r3
 8019376:	f44f 7220 	mov.w	r2, #640	; 0x280
 801937a:	4619      	mov	r1, r3
 801937c:	2036      	movs	r0, #54	; 0x36
 801937e:	f7fa fd6b 	bl	8013e58 <pbuf_alloc>
 8019382:	6338      	str	r0, [r7, #48]	; 0x30
 8019384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019386:	2b00      	cmp	r3, #0
 8019388:	d103      	bne.n	8019392 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801938a:	6978      	ldr	r0, [r7, #20]
 801938c:	f7fb f848 	bl	8014420 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019390:	e136      	b.n	8019600 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019392:	6979      	ldr	r1, [r7, #20]
 8019394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019396:	f7fb f911 	bl	80145bc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801939a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801939c:	f7fb f8ce 	bl	801453c <pbuf_clen>
 80193a0:	4603      	mov	r3, r0
 80193a2:	461a      	mov	r2, r3
 80193a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80193a8:	4413      	add	r3, r2
 80193aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80193ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80193b2:	2b09      	cmp	r3, #9
 80193b4:	d903      	bls.n	80193be <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80193b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80193b8:	f7fb f832 	bl	8014420 <pbuf_free>
      goto memerr;
 80193bc:	e120      	b.n	8019600 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80193c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80193c6:	441a      	add	r2, r3
 80193c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193cc:	9300      	str	r3, [sp, #0]
 80193ce:	4613      	mov	r3, r2
 80193d0:	2200      	movs	r2, #0
 80193d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80193d4:	68f8      	ldr	r0, [r7, #12]
 80193d6:	f7ff fc51 	bl	8018c7c <tcp_create_segment>
 80193da:	64f8      	str	r0, [r7, #76]	; 0x4c
 80193dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80193de:	2b00      	cmp	r3, #0
 80193e0:	f000 810d 	beq.w	80195fe <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80193e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d102      	bne.n	80193f0 <tcp_write+0x450>
      queue = seg;
 80193ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80193ec:	647b      	str	r3, [r7, #68]	; 0x44
 80193ee:	e00c      	b.n	801940a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80193f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d106      	bne.n	8019404 <tcp_write+0x464>
 80193f6:	4b53      	ldr	r3, [pc, #332]	; (8019544 <tcp_write+0x5a4>)
 80193f8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80193fc:	4955      	ldr	r1, [pc, #340]	; (8019554 <tcp_write+0x5b4>)
 80193fe:	4853      	ldr	r0, [pc, #332]	; (801954c <tcp_write+0x5ac>)
 8019400:	f004 ffb8 	bl	801e374 <iprintf>
      prev_seg->next = seg;
 8019404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019406:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019408:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801940a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801940c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801940e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019412:	8b3b      	ldrh	r3, [r7, #24]
 8019414:	4413      	add	r3, r2
 8019416:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801941a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801941e:	88fb      	ldrh	r3, [r7, #6]
 8019420:	429a      	cmp	r2, r3
 8019422:	f4ff af3d 	bcc.w	80192a0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019426:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019428:	2b00      	cmp	r3, #0
 801942a:	d02c      	beq.n	8019486 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801942c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801942e:	685b      	ldr	r3, [r3, #4]
 8019430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019432:	e01e      	b.n	8019472 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8019434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019436:	891a      	ldrh	r2, [r3, #8]
 8019438:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801943a:	4413      	add	r3, r2
 801943c:	b29a      	uxth	r2, r3
 801943e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019440:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	2b00      	cmp	r3, #0
 8019448:	d110      	bne.n	801946c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801944a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801944c:	685b      	ldr	r3, [r3, #4]
 801944e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019450:	8952      	ldrh	r2, [r2, #10]
 8019452:	4413      	add	r3, r2
 8019454:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019456:	68b9      	ldr	r1, [r7, #8]
 8019458:	4618      	mov	r0, r3
 801945a:	f004 fe7b 	bl	801e154 <memcpy>
        p->len += oversize_used;
 801945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019460:	895a      	ldrh	r2, [r3, #10]
 8019462:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019464:	4413      	add	r3, r2
 8019466:	b29a      	uxth	r2, r3
 8019468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801946a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801946c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019474:	2b00      	cmp	r3, #0
 8019476:	d1dd      	bne.n	8019434 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8019478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801947a:	891a      	ldrh	r2, [r3, #8]
 801947c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801947e:	4413      	add	r3, r2
 8019480:	b29a      	uxth	r2, r3
 8019482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019484:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019486:	8a7a      	ldrh	r2, [r7, #18]
 8019488:	68fb      	ldr	r3, [r7, #12]
 801948a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801948e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019490:	2b00      	cmp	r3, #0
 8019492:	d018      	beq.n	80194c6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019496:	2b00      	cmp	r3, #0
 8019498:	d106      	bne.n	80194a8 <tcp_write+0x508>
 801949a:	4b2a      	ldr	r3, [pc, #168]	; (8019544 <tcp_write+0x5a4>)
 801949c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80194a0:	492d      	ldr	r1, [pc, #180]	; (8019558 <tcp_write+0x5b8>)
 80194a2:	482a      	ldr	r0, [pc, #168]	; (801954c <tcp_write+0x5ac>)
 80194a4:	f004 ff66 	bl	801e374 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80194a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194aa:	685b      	ldr	r3, [r3, #4]
 80194ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80194ae:	4618      	mov	r0, r3
 80194b0:	f7fb f884 	bl	80145bc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80194b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194b6:	891a      	ldrh	r2, [r3, #8]
 80194b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194ba:	891b      	ldrh	r3, [r3, #8]
 80194bc:	4413      	add	r3, r2
 80194be:	b29a      	uxth	r2, r3
 80194c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194c2:	811a      	strh	r2, [r3, #8]
 80194c4:	e037      	b.n	8019536 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80194c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d034      	beq.n	8019536 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80194cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d003      	beq.n	80194da <tcp_write+0x53a>
 80194d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194d4:	685b      	ldr	r3, [r3, #4]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d106      	bne.n	80194e8 <tcp_write+0x548>
 80194da:	4b1a      	ldr	r3, [pc, #104]	; (8019544 <tcp_write+0x5a4>)
 80194dc:	f240 22e6 	movw	r2, #742	; 0x2e6
 80194e0:	491e      	ldr	r1, [pc, #120]	; (801955c <tcp_write+0x5bc>)
 80194e2:	481a      	ldr	r0, [pc, #104]	; (801954c <tcp_write+0x5ac>)
 80194e4:	f004 ff46 	bl	801e374 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80194e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194ea:	685b      	ldr	r3, [r3, #4]
 80194ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80194ee:	e009      	b.n	8019504 <tcp_write+0x564>
      p->tot_len += extendlen;
 80194f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194f2:	891a      	ldrh	r2, [r3, #8]
 80194f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80194f6:	4413      	add	r3, r2
 80194f8:	b29a      	uxth	r2, r3
 80194fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194fc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80194fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	62bb      	str	r3, [r7, #40]	; 0x28
 8019504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d1f1      	bne.n	80194f0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801950e:	891a      	ldrh	r2, [r3, #8]
 8019510:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019512:	4413      	add	r3, r2
 8019514:	b29a      	uxth	r2, r3
 8019516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019518:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801951c:	895a      	ldrh	r2, [r3, #10]
 801951e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019520:	4413      	add	r3, r2
 8019522:	b29a      	uxth	r2, r3
 8019524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019526:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801952a:	891a      	ldrh	r2, [r3, #8]
 801952c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801952e:	4413      	add	r3, r2
 8019530:	b29a      	uxth	r2, r3
 8019532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019534:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019538:	2b00      	cmp	r3, #0
 801953a:	d111      	bne.n	8019560 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801953c:	68fb      	ldr	r3, [r7, #12]
 801953e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019540:	66da      	str	r2, [r3, #108]	; 0x6c
 8019542:	e010      	b.n	8019566 <tcp_write+0x5c6>
 8019544:	08021fac 	.word	0x08021fac
 8019548:	0802224c 	.word	0x0802224c
 801954c:	08022000 	.word	0x08022000
 8019550:	0802228c 	.word	0x0802228c
 8019554:	0802229c 	.word	0x0802229c
 8019558:	080222b0 	.word	0x080222b0
 801955c:	080222e8 	.word	0x080222e8
  } else {
    last_unsent->next = queue;
 8019560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019564:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019566:	68fb      	ldr	r3, [r7, #12]
 8019568:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801956a:	88fb      	ldrh	r3, [r7, #6]
 801956c:	441a      	add	r2, r3
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8019578:	88fb      	ldrh	r3, [r7, #6]
 801957a:	1ad3      	subs	r3, r2, r3
 801957c:	b29a      	uxth	r2, r3
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801958a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801958e:	68fb      	ldr	r3, [r7, #12]
 8019590:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019594:	2b00      	cmp	r3, #0
 8019596:	d00e      	beq.n	80195b6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019598:	68fb      	ldr	r3, [r7, #12]
 801959a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801959c:	2b00      	cmp	r3, #0
 801959e:	d10a      	bne.n	80195b6 <tcp_write+0x616>
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d106      	bne.n	80195b6 <tcp_write+0x616>
 80195a8:	4b2c      	ldr	r3, [pc, #176]	; (801965c <tcp_write+0x6bc>)
 80195aa:	f240 3212 	movw	r2, #786	; 0x312
 80195ae:	492c      	ldr	r1, [pc, #176]	; (8019660 <tcp_write+0x6c0>)
 80195b0:	482c      	ldr	r0, [pc, #176]	; (8019664 <tcp_write+0x6c4>)
 80195b2:	f004 fedf 	bl	801e374 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80195b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d016      	beq.n	80195ea <tcp_write+0x64a>
 80195bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195be:	68db      	ldr	r3, [r3, #12]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d012      	beq.n	80195ea <tcp_write+0x64a>
 80195c4:	797b      	ldrb	r3, [r7, #5]
 80195c6:	f003 0302 	and.w	r3, r3, #2
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d10d      	bne.n	80195ea <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80195ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195d0:	68db      	ldr	r3, [r3, #12]
 80195d2:	899b      	ldrh	r3, [r3, #12]
 80195d4:	b29c      	uxth	r4, r3
 80195d6:	2008      	movs	r0, #8
 80195d8:	f7f9 f9bc 	bl	8012954 <lwip_htons>
 80195dc:	4603      	mov	r3, r0
 80195de:	461a      	mov	r2, r3
 80195e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195e2:	68db      	ldr	r3, [r3, #12]
 80195e4:	4322      	orrs	r2, r4
 80195e6:	b292      	uxth	r2, r2
 80195e8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80195ea:	2300      	movs	r3, #0
 80195ec:	e031      	b.n	8019652 <tcp_write+0x6b2>
          goto memerr;
 80195ee:	bf00      	nop
 80195f0:	e006      	b.n	8019600 <tcp_write+0x660>
            goto memerr;
 80195f2:	bf00      	nop
 80195f4:	e004      	b.n	8019600 <tcp_write+0x660>
        goto memerr;
 80195f6:	bf00      	nop
 80195f8:	e002      	b.n	8019600 <tcp_write+0x660>
        goto memerr;
 80195fa:	bf00      	nop
 80195fc:	e000      	b.n	8019600 <tcp_write+0x660>
      goto memerr;
 80195fe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	8b5b      	ldrh	r3, [r3, #26]
 8019604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019608:	b29a      	uxth	r2, r3
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801960e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019610:	2b00      	cmp	r3, #0
 8019612:	d002      	beq.n	801961a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8019614:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019616:	f7fa ff03 	bl	8014420 <pbuf_free>
  }
  if (queue != NULL) {
 801961a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801961c:	2b00      	cmp	r3, #0
 801961e:	d002      	beq.n	8019626 <tcp_write+0x686>
    tcp_segs_free(queue);
 8019620:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019622:	f7fc fb6b 	bl	8015cfc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801962c:	2b00      	cmp	r3, #0
 801962e:	d00e      	beq.n	801964e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019634:	2b00      	cmp	r3, #0
 8019636:	d10a      	bne.n	801964e <tcp_write+0x6ae>
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801963c:	2b00      	cmp	r3, #0
 801963e:	d106      	bne.n	801964e <tcp_write+0x6ae>
 8019640:	4b06      	ldr	r3, [pc, #24]	; (801965c <tcp_write+0x6bc>)
 8019642:	f240 3227 	movw	r2, #807	; 0x327
 8019646:	4906      	ldr	r1, [pc, #24]	; (8019660 <tcp_write+0x6c0>)
 8019648:	4806      	ldr	r0, [pc, #24]	; (8019664 <tcp_write+0x6c4>)
 801964a:	f004 fe93 	bl	801e374 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801964e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019652:	4618      	mov	r0, r3
 8019654:	375c      	adds	r7, #92	; 0x5c
 8019656:	46bd      	mov	sp, r7
 8019658:	bd90      	pop	{r4, r7, pc}
 801965a:	bf00      	nop
 801965c:	08021fac 	.word	0x08021fac
 8019660:	08022320 	.word	0x08022320
 8019664:	08022000 	.word	0x08022000

08019668 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019668:	b590      	push	{r4, r7, lr}
 801966a:	b08b      	sub	sp, #44	; 0x2c
 801966c:	af02      	add	r7, sp, #8
 801966e:	6078      	str	r0, [r7, #4]
 8019670:	460b      	mov	r3, r1
 8019672:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019674:	2300      	movs	r3, #0
 8019676:	61fb      	str	r3, [r7, #28]
 8019678:	2300      	movs	r3, #0
 801967a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801967c:	2300      	movs	r3, #0
 801967e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d106      	bne.n	8019694 <tcp_split_unsent_seg+0x2c>
 8019686:	4b95      	ldr	r3, [pc, #596]	; (80198dc <tcp_split_unsent_seg+0x274>)
 8019688:	f240 324b 	movw	r2, #843	; 0x34b
 801968c:	4994      	ldr	r1, [pc, #592]	; (80198e0 <tcp_split_unsent_seg+0x278>)
 801968e:	4895      	ldr	r0, [pc, #596]	; (80198e4 <tcp_split_unsent_seg+0x27c>)
 8019690:	f004 fe70 	bl	801e374 <iprintf>

  useg = pcb->unsent;
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019698:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801969a:	697b      	ldr	r3, [r7, #20]
 801969c:	2b00      	cmp	r3, #0
 801969e:	d102      	bne.n	80196a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80196a0:	f04f 33ff 	mov.w	r3, #4294967295
 80196a4:	e116      	b.n	80198d4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80196a6:	887b      	ldrh	r3, [r7, #2]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d109      	bne.n	80196c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80196ac:	4b8b      	ldr	r3, [pc, #556]	; (80198dc <tcp_split_unsent_seg+0x274>)
 80196ae:	f240 3253 	movw	r2, #851	; 0x353
 80196b2:	498d      	ldr	r1, [pc, #564]	; (80198e8 <tcp_split_unsent_seg+0x280>)
 80196b4:	488b      	ldr	r0, [pc, #556]	; (80198e4 <tcp_split_unsent_seg+0x27c>)
 80196b6:	f004 fe5d 	bl	801e374 <iprintf>
    return ERR_VAL;
 80196ba:	f06f 0305 	mvn.w	r3, #5
 80196be:	e109      	b.n	80198d4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80196c0:	697b      	ldr	r3, [r7, #20]
 80196c2:	891b      	ldrh	r3, [r3, #8]
 80196c4:	887a      	ldrh	r2, [r7, #2]
 80196c6:	429a      	cmp	r2, r3
 80196c8:	d301      	bcc.n	80196ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80196ca:	2300      	movs	r3, #0
 80196cc:	e102      	b.n	80198d4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80196d2:	887a      	ldrh	r2, [r7, #2]
 80196d4:	429a      	cmp	r2, r3
 80196d6:	d906      	bls.n	80196e6 <tcp_split_unsent_seg+0x7e>
 80196d8:	4b80      	ldr	r3, [pc, #512]	; (80198dc <tcp_split_unsent_seg+0x274>)
 80196da:	f240 325b 	movw	r2, #859	; 0x35b
 80196de:	4983      	ldr	r1, [pc, #524]	; (80198ec <tcp_split_unsent_seg+0x284>)
 80196e0:	4880      	ldr	r0, [pc, #512]	; (80198e4 <tcp_split_unsent_seg+0x27c>)
 80196e2:	f004 fe47 	bl	801e374 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80196e6:	697b      	ldr	r3, [r7, #20]
 80196e8:	891b      	ldrh	r3, [r3, #8]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d106      	bne.n	80196fc <tcp_split_unsent_seg+0x94>
 80196ee:	4b7b      	ldr	r3, [pc, #492]	; (80198dc <tcp_split_unsent_seg+0x274>)
 80196f0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80196f4:	497e      	ldr	r1, [pc, #504]	; (80198f0 <tcp_split_unsent_seg+0x288>)
 80196f6:	487b      	ldr	r0, [pc, #492]	; (80198e4 <tcp_split_unsent_seg+0x27c>)
 80196f8:	f004 fe3c 	bl	801e374 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80196fc:	697b      	ldr	r3, [r7, #20]
 80196fe:	7a9b      	ldrb	r3, [r3, #10]
 8019700:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8019702:	7bfb      	ldrb	r3, [r7, #15]
 8019704:	009b      	lsls	r3, r3, #2
 8019706:	b2db      	uxtb	r3, r3
 8019708:	f003 0304 	and.w	r3, r3, #4
 801970c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801970e:	697b      	ldr	r3, [r7, #20]
 8019710:	891a      	ldrh	r2, [r3, #8]
 8019712:	887b      	ldrh	r3, [r7, #2]
 8019714:	1ad3      	subs	r3, r2, r3
 8019716:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019718:	7bbb      	ldrb	r3, [r7, #14]
 801971a:	b29a      	uxth	r2, r3
 801971c:	89bb      	ldrh	r3, [r7, #12]
 801971e:	4413      	add	r3, r2
 8019720:	b29b      	uxth	r3, r3
 8019722:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019726:	4619      	mov	r1, r3
 8019728:	2036      	movs	r0, #54	; 0x36
 801972a:	f7fa fb95 	bl	8013e58 <pbuf_alloc>
 801972e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019730:	693b      	ldr	r3, [r7, #16]
 8019732:	2b00      	cmp	r3, #0
 8019734:	f000 80b7 	beq.w	80198a6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019738:	697b      	ldr	r3, [r7, #20]
 801973a:	685b      	ldr	r3, [r3, #4]
 801973c:	891a      	ldrh	r2, [r3, #8]
 801973e:	697b      	ldr	r3, [r7, #20]
 8019740:	891b      	ldrh	r3, [r3, #8]
 8019742:	1ad3      	subs	r3, r2, r3
 8019744:	b29a      	uxth	r2, r3
 8019746:	887b      	ldrh	r3, [r7, #2]
 8019748:	4413      	add	r3, r2
 801974a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801974c:	697b      	ldr	r3, [r7, #20]
 801974e:	6858      	ldr	r0, [r3, #4]
 8019750:	693b      	ldr	r3, [r7, #16]
 8019752:	685a      	ldr	r2, [r3, #4]
 8019754:	7bbb      	ldrb	r3, [r7, #14]
 8019756:	18d1      	adds	r1, r2, r3
 8019758:	897b      	ldrh	r3, [r7, #10]
 801975a:	89ba      	ldrh	r2, [r7, #12]
 801975c:	f7fb f856 	bl	801480c <pbuf_copy_partial>
 8019760:	4603      	mov	r3, r0
 8019762:	461a      	mov	r2, r3
 8019764:	89bb      	ldrh	r3, [r7, #12]
 8019766:	4293      	cmp	r3, r2
 8019768:	f040 809f 	bne.w	80198aa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801976c:	697b      	ldr	r3, [r7, #20]
 801976e:	68db      	ldr	r3, [r3, #12]
 8019770:	899b      	ldrh	r3, [r3, #12]
 8019772:	b29b      	uxth	r3, r3
 8019774:	4618      	mov	r0, r3
 8019776:	f7f9 f8ed 	bl	8012954 <lwip_htons>
 801977a:	4603      	mov	r3, r0
 801977c:	b2db      	uxtb	r3, r3
 801977e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019782:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019784:	2300      	movs	r3, #0
 8019786:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019788:	7efb      	ldrb	r3, [r7, #27]
 801978a:	f003 0308 	and.w	r3, r3, #8
 801978e:	2b00      	cmp	r3, #0
 8019790:	d007      	beq.n	80197a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8019792:	7efb      	ldrb	r3, [r7, #27]
 8019794:	f023 0308 	bic.w	r3, r3, #8
 8019798:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801979a:	7ebb      	ldrb	r3, [r7, #26]
 801979c:	f043 0308 	orr.w	r3, r3, #8
 80197a0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80197a2:	7efb      	ldrb	r3, [r7, #27]
 80197a4:	f003 0301 	and.w	r3, r3, #1
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d007      	beq.n	80197bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80197ac:	7efb      	ldrb	r3, [r7, #27]
 80197ae:	f023 0301 	bic.w	r3, r3, #1
 80197b2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80197b4:	7ebb      	ldrb	r3, [r7, #26]
 80197b6:	f043 0301 	orr.w	r3, r3, #1
 80197ba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80197bc:	697b      	ldr	r3, [r7, #20]
 80197be:	68db      	ldr	r3, [r3, #12]
 80197c0:	685b      	ldr	r3, [r3, #4]
 80197c2:	4618      	mov	r0, r3
 80197c4:	f7f9 f8db 	bl	801297e <lwip_htonl>
 80197c8:	4602      	mov	r2, r0
 80197ca:	887b      	ldrh	r3, [r7, #2]
 80197cc:	18d1      	adds	r1, r2, r3
 80197ce:	7eba      	ldrb	r2, [r7, #26]
 80197d0:	7bfb      	ldrb	r3, [r7, #15]
 80197d2:	9300      	str	r3, [sp, #0]
 80197d4:	460b      	mov	r3, r1
 80197d6:	6939      	ldr	r1, [r7, #16]
 80197d8:	6878      	ldr	r0, [r7, #4]
 80197da:	f7ff fa4f 	bl	8018c7c <tcp_create_segment>
 80197de:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80197e0:	69fb      	ldr	r3, [r7, #28]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d063      	beq.n	80198ae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80197e6:	697b      	ldr	r3, [r7, #20]
 80197e8:	685b      	ldr	r3, [r3, #4]
 80197ea:	4618      	mov	r0, r3
 80197ec:	f7fa fea6 	bl	801453c <pbuf_clen>
 80197f0:	4603      	mov	r3, r0
 80197f2:	461a      	mov	r2, r3
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80197fa:	1a9b      	subs	r3, r3, r2
 80197fc:	b29a      	uxth	r2, r3
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8019804:	697b      	ldr	r3, [r7, #20]
 8019806:	6858      	ldr	r0, [r3, #4]
 8019808:	697b      	ldr	r3, [r7, #20]
 801980a:	685b      	ldr	r3, [r3, #4]
 801980c:	891a      	ldrh	r2, [r3, #8]
 801980e:	89bb      	ldrh	r3, [r7, #12]
 8019810:	1ad3      	subs	r3, r2, r3
 8019812:	b29b      	uxth	r3, r3
 8019814:	4619      	mov	r1, r3
 8019816:	f7fa fc7d 	bl	8014114 <pbuf_realloc>
  useg->len -= remainder;
 801981a:	697b      	ldr	r3, [r7, #20]
 801981c:	891a      	ldrh	r2, [r3, #8]
 801981e:	89bb      	ldrh	r3, [r7, #12]
 8019820:	1ad3      	subs	r3, r2, r3
 8019822:	b29a      	uxth	r2, r3
 8019824:	697b      	ldr	r3, [r7, #20]
 8019826:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019828:	697b      	ldr	r3, [r7, #20]
 801982a:	68db      	ldr	r3, [r3, #12]
 801982c:	899b      	ldrh	r3, [r3, #12]
 801982e:	b29c      	uxth	r4, r3
 8019830:	7efb      	ldrb	r3, [r7, #27]
 8019832:	b29b      	uxth	r3, r3
 8019834:	4618      	mov	r0, r3
 8019836:	f7f9 f88d 	bl	8012954 <lwip_htons>
 801983a:	4603      	mov	r3, r0
 801983c:	461a      	mov	r2, r3
 801983e:	697b      	ldr	r3, [r7, #20]
 8019840:	68db      	ldr	r3, [r3, #12]
 8019842:	4322      	orrs	r2, r4
 8019844:	b292      	uxth	r2, r2
 8019846:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019848:	697b      	ldr	r3, [r7, #20]
 801984a:	685b      	ldr	r3, [r3, #4]
 801984c:	4618      	mov	r0, r3
 801984e:	f7fa fe75 	bl	801453c <pbuf_clen>
 8019852:	4603      	mov	r3, r0
 8019854:	461a      	mov	r2, r3
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801985c:	4413      	add	r3, r2
 801985e:	b29a      	uxth	r2, r3
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019866:	69fb      	ldr	r3, [r7, #28]
 8019868:	685b      	ldr	r3, [r3, #4]
 801986a:	4618      	mov	r0, r3
 801986c:	f7fa fe66 	bl	801453c <pbuf_clen>
 8019870:	4603      	mov	r3, r0
 8019872:	461a      	mov	r2, r3
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801987a:	4413      	add	r3, r2
 801987c:	b29a      	uxth	r2, r3
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019884:	697b      	ldr	r3, [r7, #20]
 8019886:	681a      	ldr	r2, [r3, #0]
 8019888:	69fb      	ldr	r3, [r7, #28]
 801988a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801988c:	697b      	ldr	r3, [r7, #20]
 801988e:	69fa      	ldr	r2, [r7, #28]
 8019890:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8019892:	69fb      	ldr	r3, [r7, #28]
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d103      	bne.n	80198a2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	2200      	movs	r2, #0
 801989e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80198a2:	2300      	movs	r3, #0
 80198a4:	e016      	b.n	80198d4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80198a6:	bf00      	nop
 80198a8:	e002      	b.n	80198b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80198aa:	bf00      	nop
 80198ac:	e000      	b.n	80198b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80198ae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80198b0:	69fb      	ldr	r3, [r7, #28]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d006      	beq.n	80198c4 <tcp_split_unsent_seg+0x25c>
 80198b6:	4b09      	ldr	r3, [pc, #36]	; (80198dc <tcp_split_unsent_seg+0x274>)
 80198b8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80198bc:	490d      	ldr	r1, [pc, #52]	; (80198f4 <tcp_split_unsent_seg+0x28c>)
 80198be:	4809      	ldr	r0, [pc, #36]	; (80198e4 <tcp_split_unsent_seg+0x27c>)
 80198c0:	f004 fd58 	bl	801e374 <iprintf>
  if (p != NULL) {
 80198c4:	693b      	ldr	r3, [r7, #16]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d002      	beq.n	80198d0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80198ca:	6938      	ldr	r0, [r7, #16]
 80198cc:	f7fa fda8 	bl	8014420 <pbuf_free>
  }

  return ERR_MEM;
 80198d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80198d4:	4618      	mov	r0, r3
 80198d6:	3724      	adds	r7, #36	; 0x24
 80198d8:	46bd      	mov	sp, r7
 80198da:	bd90      	pop	{r4, r7, pc}
 80198dc:	08021fac 	.word	0x08021fac
 80198e0:	08022340 	.word	0x08022340
 80198e4:	08022000 	.word	0x08022000
 80198e8:	08022364 	.word	0x08022364
 80198ec:	08022388 	.word	0x08022388
 80198f0:	08022398 	.word	0x08022398
 80198f4:	080223a8 	.word	0x080223a8

080198f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80198f8:	b590      	push	{r4, r7, lr}
 80198fa:	b085      	sub	sp, #20
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d106      	bne.n	8019914 <tcp_send_fin+0x1c>
 8019906:	4b21      	ldr	r3, [pc, #132]	; (801998c <tcp_send_fin+0x94>)
 8019908:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801990c:	4920      	ldr	r1, [pc, #128]	; (8019990 <tcp_send_fin+0x98>)
 801990e:	4821      	ldr	r0, [pc, #132]	; (8019994 <tcp_send_fin+0x9c>)
 8019910:	f004 fd30 	bl	801e374 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019918:	2b00      	cmp	r3, #0
 801991a:	d02e      	beq.n	801997a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019920:	60fb      	str	r3, [r7, #12]
 8019922:	e002      	b.n	801992a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	2b00      	cmp	r3, #0
 8019930:	d1f8      	bne.n	8019924 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	68db      	ldr	r3, [r3, #12]
 8019936:	899b      	ldrh	r3, [r3, #12]
 8019938:	b29b      	uxth	r3, r3
 801993a:	4618      	mov	r0, r3
 801993c:	f7f9 f80a 	bl	8012954 <lwip_htons>
 8019940:	4603      	mov	r3, r0
 8019942:	b2db      	uxtb	r3, r3
 8019944:	f003 0307 	and.w	r3, r3, #7
 8019948:	2b00      	cmp	r3, #0
 801994a:	d116      	bne.n	801997a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	68db      	ldr	r3, [r3, #12]
 8019950:	899b      	ldrh	r3, [r3, #12]
 8019952:	b29c      	uxth	r4, r3
 8019954:	2001      	movs	r0, #1
 8019956:	f7f8 fffd 	bl	8012954 <lwip_htons>
 801995a:	4603      	mov	r3, r0
 801995c:	461a      	mov	r2, r3
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	68db      	ldr	r3, [r3, #12]
 8019962:	4322      	orrs	r2, r4
 8019964:	b292      	uxth	r2, r2
 8019966:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	8b5b      	ldrh	r3, [r3, #26]
 801996c:	f043 0320 	orr.w	r3, r3, #32
 8019970:	b29a      	uxth	r2, r3
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019976:	2300      	movs	r3, #0
 8019978:	e004      	b.n	8019984 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801997a:	2101      	movs	r1, #1
 801997c:	6878      	ldr	r0, [r7, #4]
 801997e:	f000 f80b 	bl	8019998 <tcp_enqueue_flags>
 8019982:	4603      	mov	r3, r0
}
 8019984:	4618      	mov	r0, r3
 8019986:	3714      	adds	r7, #20
 8019988:	46bd      	mov	sp, r7
 801998a:	bd90      	pop	{r4, r7, pc}
 801998c:	08021fac 	.word	0x08021fac
 8019990:	080223b4 	.word	0x080223b4
 8019994:	08022000 	.word	0x08022000

08019998 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019998:	b580      	push	{r7, lr}
 801999a:	b08a      	sub	sp, #40	; 0x28
 801999c:	af02      	add	r7, sp, #8
 801999e:	6078      	str	r0, [r7, #4]
 80199a0:	460b      	mov	r3, r1
 80199a2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80199a4:	2300      	movs	r3, #0
 80199a6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80199a8:	2300      	movs	r3, #0
 80199aa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80199ac:	78fb      	ldrb	r3, [r7, #3]
 80199ae:	f003 0303 	and.w	r3, r3, #3
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	d106      	bne.n	80199c4 <tcp_enqueue_flags+0x2c>
 80199b6:	4b67      	ldr	r3, [pc, #412]	; (8019b54 <tcp_enqueue_flags+0x1bc>)
 80199b8:	f240 4211 	movw	r2, #1041	; 0x411
 80199bc:	4966      	ldr	r1, [pc, #408]	; (8019b58 <tcp_enqueue_flags+0x1c0>)
 80199be:	4867      	ldr	r0, [pc, #412]	; (8019b5c <tcp_enqueue_flags+0x1c4>)
 80199c0:	f004 fcd8 	bl	801e374 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d106      	bne.n	80199d8 <tcp_enqueue_flags+0x40>
 80199ca:	4b62      	ldr	r3, [pc, #392]	; (8019b54 <tcp_enqueue_flags+0x1bc>)
 80199cc:	f240 4213 	movw	r2, #1043	; 0x413
 80199d0:	4963      	ldr	r1, [pc, #396]	; (8019b60 <tcp_enqueue_flags+0x1c8>)
 80199d2:	4862      	ldr	r0, [pc, #392]	; (8019b5c <tcp_enqueue_flags+0x1c4>)
 80199d4:	f004 fcce 	bl	801e374 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80199d8:	78fb      	ldrb	r3, [r7, #3]
 80199da:	f003 0302 	and.w	r3, r3, #2
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d001      	beq.n	80199e6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80199e2:	2301      	movs	r3, #1
 80199e4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80199e6:	7ffb      	ldrb	r3, [r7, #31]
 80199e8:	009b      	lsls	r3, r3, #2
 80199ea:	b2db      	uxtb	r3, r3
 80199ec:	f003 0304 	and.w	r3, r3, #4
 80199f0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80199f2:	7dfb      	ldrb	r3, [r7, #23]
 80199f4:	b29b      	uxth	r3, r3
 80199f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80199fa:	4619      	mov	r1, r3
 80199fc:	2036      	movs	r0, #54	; 0x36
 80199fe:	f7fa fa2b 	bl	8013e58 <pbuf_alloc>
 8019a02:	6138      	str	r0, [r7, #16]
 8019a04:	693b      	ldr	r3, [r7, #16]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d109      	bne.n	8019a1e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	8b5b      	ldrh	r3, [r3, #26]
 8019a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a12:	b29a      	uxth	r2, r3
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019a18:	f04f 33ff 	mov.w	r3, #4294967295
 8019a1c:	e095      	b.n	8019b4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019a1e:	693b      	ldr	r3, [r7, #16]
 8019a20:	895a      	ldrh	r2, [r3, #10]
 8019a22:	7dfb      	ldrb	r3, [r7, #23]
 8019a24:	b29b      	uxth	r3, r3
 8019a26:	429a      	cmp	r2, r3
 8019a28:	d206      	bcs.n	8019a38 <tcp_enqueue_flags+0xa0>
 8019a2a:	4b4a      	ldr	r3, [pc, #296]	; (8019b54 <tcp_enqueue_flags+0x1bc>)
 8019a2c:	f240 4239 	movw	r2, #1081	; 0x439
 8019a30:	494c      	ldr	r1, [pc, #304]	; (8019b64 <tcp_enqueue_flags+0x1cc>)
 8019a32:	484a      	ldr	r0, [pc, #296]	; (8019b5c <tcp_enqueue_flags+0x1c4>)
 8019a34:	f004 fc9e 	bl	801e374 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8019a3c:	78fa      	ldrb	r2, [r7, #3]
 8019a3e:	7ffb      	ldrb	r3, [r7, #31]
 8019a40:	9300      	str	r3, [sp, #0]
 8019a42:	460b      	mov	r3, r1
 8019a44:	6939      	ldr	r1, [r7, #16]
 8019a46:	6878      	ldr	r0, [r7, #4]
 8019a48:	f7ff f918 	bl	8018c7c <tcp_create_segment>
 8019a4c:	60f8      	str	r0, [r7, #12]
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d109      	bne.n	8019a68 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	8b5b      	ldrh	r3, [r3, #26]
 8019a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a5c:	b29a      	uxth	r2, r3
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019a62:	f04f 33ff 	mov.w	r3, #4294967295
 8019a66:	e070      	b.n	8019b4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	68db      	ldr	r3, [r3, #12]
 8019a6c:	f003 0303 	and.w	r3, r3, #3
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d006      	beq.n	8019a82 <tcp_enqueue_flags+0xea>
 8019a74:	4b37      	ldr	r3, [pc, #220]	; (8019b54 <tcp_enqueue_flags+0x1bc>)
 8019a76:	f240 4242 	movw	r2, #1090	; 0x442
 8019a7a:	493b      	ldr	r1, [pc, #236]	; (8019b68 <tcp_enqueue_flags+0x1d0>)
 8019a7c:	4837      	ldr	r0, [pc, #220]	; (8019b5c <tcp_enqueue_flags+0x1c4>)
 8019a7e:	f004 fc79 	bl	801e374 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	891b      	ldrh	r3, [r3, #8]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d006      	beq.n	8019a98 <tcp_enqueue_flags+0x100>
 8019a8a:	4b32      	ldr	r3, [pc, #200]	; (8019b54 <tcp_enqueue_flags+0x1bc>)
 8019a8c:	f240 4243 	movw	r2, #1091	; 0x443
 8019a90:	4936      	ldr	r1, [pc, #216]	; (8019b6c <tcp_enqueue_flags+0x1d4>)
 8019a92:	4832      	ldr	r0, [pc, #200]	; (8019b5c <tcp_enqueue_flags+0x1c4>)
 8019a94:	f004 fc6e 	bl	801e374 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d103      	bne.n	8019aa8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	68fa      	ldr	r2, [r7, #12]
 8019aa4:	66da      	str	r2, [r3, #108]	; 0x6c
 8019aa6:	e00d      	b.n	8019ac4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019aac:	61bb      	str	r3, [r7, #24]
 8019aae:	e002      	b.n	8019ab6 <tcp_enqueue_flags+0x11e>
 8019ab0:	69bb      	ldr	r3, [r7, #24]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	61bb      	str	r3, [r7, #24]
 8019ab6:	69bb      	ldr	r3, [r7, #24]
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d1f8      	bne.n	8019ab0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8019abe:	69bb      	ldr	r3, [r7, #24]
 8019ac0:	68fa      	ldr	r2, [r7, #12]
 8019ac2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	2200      	movs	r2, #0
 8019ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019acc:	78fb      	ldrb	r3, [r7, #3]
 8019ace:	f003 0302 	and.w	r3, r3, #2
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d104      	bne.n	8019ae0 <tcp_enqueue_flags+0x148>
 8019ad6:	78fb      	ldrb	r3, [r7, #3]
 8019ad8:	f003 0301 	and.w	r3, r3, #1
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d004      	beq.n	8019aea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ae4:	1c5a      	adds	r2, r3, #1
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019aea:	78fb      	ldrb	r3, [r7, #3]
 8019aec:	f003 0301 	and.w	r3, r3, #1
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d006      	beq.n	8019b02 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	8b5b      	ldrh	r3, [r3, #26]
 8019af8:	f043 0320 	orr.w	r3, r3, #32
 8019afc:	b29a      	uxth	r2, r3
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	685b      	ldr	r3, [r3, #4]
 8019b06:	4618      	mov	r0, r3
 8019b08:	f7fa fd18 	bl	801453c <pbuf_clen>
 8019b0c:	4603      	mov	r3, r0
 8019b0e:	461a      	mov	r2, r3
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019b16:	4413      	add	r3, r2
 8019b18:	b29a      	uxth	r2, r3
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d00e      	beq.n	8019b48 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d10a      	bne.n	8019b48 <tcp_enqueue_flags+0x1b0>
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d106      	bne.n	8019b48 <tcp_enqueue_flags+0x1b0>
 8019b3a:	4b06      	ldr	r3, [pc, #24]	; (8019b54 <tcp_enqueue_flags+0x1bc>)
 8019b3c:	f240 4265 	movw	r2, #1125	; 0x465
 8019b40:	490b      	ldr	r1, [pc, #44]	; (8019b70 <tcp_enqueue_flags+0x1d8>)
 8019b42:	4806      	ldr	r0, [pc, #24]	; (8019b5c <tcp_enqueue_flags+0x1c4>)
 8019b44:	f004 fc16 	bl	801e374 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019b48:	2300      	movs	r3, #0
}
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	3720      	adds	r7, #32
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	bd80      	pop	{r7, pc}
 8019b52:	bf00      	nop
 8019b54:	08021fac 	.word	0x08021fac
 8019b58:	080223d0 	.word	0x080223d0
 8019b5c:	08022000 	.word	0x08022000
 8019b60:	08022428 	.word	0x08022428
 8019b64:	08022448 	.word	0x08022448
 8019b68:	08022484 	.word	0x08022484
 8019b6c:	0802249c 	.word	0x0802249c
 8019b70:	080224c8 	.word	0x080224c8

08019b74 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019b74:	b5b0      	push	{r4, r5, r7, lr}
 8019b76:	b08a      	sub	sp, #40	; 0x28
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d106      	bne.n	8019b90 <tcp_output+0x1c>
 8019b82:	4b8a      	ldr	r3, [pc, #552]	; (8019dac <tcp_output+0x238>)
 8019b84:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019b88:	4989      	ldr	r1, [pc, #548]	; (8019db0 <tcp_output+0x23c>)
 8019b8a:	488a      	ldr	r0, [pc, #552]	; (8019db4 <tcp_output+0x240>)
 8019b8c:	f004 fbf2 	bl	801e374 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	7d1b      	ldrb	r3, [r3, #20]
 8019b94:	2b01      	cmp	r3, #1
 8019b96:	d106      	bne.n	8019ba6 <tcp_output+0x32>
 8019b98:	4b84      	ldr	r3, [pc, #528]	; (8019dac <tcp_output+0x238>)
 8019b9a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8019b9e:	4986      	ldr	r1, [pc, #536]	; (8019db8 <tcp_output+0x244>)
 8019ba0:	4884      	ldr	r0, [pc, #528]	; (8019db4 <tcp_output+0x240>)
 8019ba2:	f004 fbe7 	bl	801e374 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019ba6:	4b85      	ldr	r3, [pc, #532]	; (8019dbc <tcp_output+0x248>)
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	687a      	ldr	r2, [r7, #4]
 8019bac:	429a      	cmp	r2, r3
 8019bae:	d101      	bne.n	8019bb4 <tcp_output+0x40>
    return ERR_OK;
 8019bb0:	2300      	movs	r3, #0
 8019bb2:	e1ce      	b.n	8019f52 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019bc0:	4293      	cmp	r3, r2
 8019bc2:	bf28      	it	cs
 8019bc4:	4613      	movcs	r3, r2
 8019bc6:	b29b      	uxth	r3, r3
 8019bc8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019bce:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8019bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d10b      	bne.n	8019bee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	8b5b      	ldrh	r3, [r3, #26]
 8019bda:	f003 0302 	and.w	r3, r3, #2
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	f000 81aa 	beq.w	8019f38 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8019be4:	6878      	ldr	r0, [r7, #4]
 8019be6:	f000 fdcb 	bl	801a780 <tcp_send_empty_ack>
 8019bea:	4603      	mov	r3, r0
 8019bec:	e1b1      	b.n	8019f52 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019bee:	6879      	ldr	r1, [r7, #4]
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	3304      	adds	r3, #4
 8019bf4:	461a      	mov	r2, r3
 8019bf6:	6878      	ldr	r0, [r7, #4]
 8019bf8:	f7ff f824 	bl	8018c44 <tcp_route>
 8019bfc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019bfe:	697b      	ldr	r3, [r7, #20]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d102      	bne.n	8019c0a <tcp_output+0x96>
    return ERR_RTE;
 8019c04:	f06f 0303 	mvn.w	r3, #3
 8019c08:	e1a3      	b.n	8019f52 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d003      	beq.n	8019c18 <tcp_output+0xa4>
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d111      	bne.n	8019c3c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019c18:	697b      	ldr	r3, [r7, #20]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d002      	beq.n	8019c24 <tcp_output+0xb0>
 8019c1e:	697b      	ldr	r3, [r7, #20]
 8019c20:	3304      	adds	r3, #4
 8019c22:	e000      	b.n	8019c26 <tcp_output+0xb2>
 8019c24:	2300      	movs	r3, #0
 8019c26:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019c28:	693b      	ldr	r3, [r7, #16]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d102      	bne.n	8019c34 <tcp_output+0xc0>
      return ERR_RTE;
 8019c2e:	f06f 0303 	mvn.w	r3, #3
 8019c32:	e18e      	b.n	8019f52 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019c34:	693b      	ldr	r3, [r7, #16]
 8019c36:	681a      	ldr	r2, [r3, #0]
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c3e:	68db      	ldr	r3, [r3, #12]
 8019c40:	685b      	ldr	r3, [r3, #4]
 8019c42:	4618      	mov	r0, r3
 8019c44:	f7f8 fe9b 	bl	801297e <lwip_htonl>
 8019c48:	4602      	mov	r2, r0
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c4e:	1ad3      	subs	r3, r2, r3
 8019c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c52:	8912      	ldrh	r2, [r2, #8]
 8019c54:	4413      	add	r3, r2
 8019c56:	69ba      	ldr	r2, [r7, #24]
 8019c58:	429a      	cmp	r2, r3
 8019c5a:	d227      	bcs.n	8019cac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019c62:	461a      	mov	r2, r3
 8019c64:	69bb      	ldr	r3, [r7, #24]
 8019c66:	4293      	cmp	r3, r2
 8019c68:	d114      	bne.n	8019c94 <tcp_output+0x120>
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d110      	bne.n	8019c94 <tcp_output+0x120>
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d10b      	bne.n	8019c94 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	2200      	movs	r2, #0
 8019c80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	2201      	movs	r2, #1
 8019c88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	2200      	movs	r2, #0
 8019c90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	8b5b      	ldrh	r3, [r3, #26]
 8019c98:	f003 0302 	and.w	r3, r3, #2
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	f000 814d 	beq.w	8019f3c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019ca2:	6878      	ldr	r0, [r7, #4]
 8019ca4:	f000 fd6c 	bl	801a780 <tcp_send_empty_ack>
 8019ca8:	4603      	mov	r3, r0
 8019caa:	e152      	b.n	8019f52 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	2200      	movs	r2, #0
 8019cb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019cb8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019cba:	6a3b      	ldr	r3, [r7, #32]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	f000 811c 	beq.w	8019efa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019cc2:	e002      	b.n	8019cca <tcp_output+0x156>
 8019cc4:	6a3b      	ldr	r3, [r7, #32]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	623b      	str	r3, [r7, #32]
 8019cca:	6a3b      	ldr	r3, [r7, #32]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d1f8      	bne.n	8019cc4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019cd2:	e112      	b.n	8019efa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cd6:	68db      	ldr	r3, [r3, #12]
 8019cd8:	899b      	ldrh	r3, [r3, #12]
 8019cda:	b29b      	uxth	r3, r3
 8019cdc:	4618      	mov	r0, r3
 8019cde:	f7f8 fe39 	bl	8012954 <lwip_htons>
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	b2db      	uxtb	r3, r3
 8019ce6:	f003 0304 	and.w	r3, r3, #4
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d006      	beq.n	8019cfc <tcp_output+0x188>
 8019cee:	4b2f      	ldr	r3, [pc, #188]	; (8019dac <tcp_output+0x238>)
 8019cf0:	f240 5236 	movw	r2, #1334	; 0x536
 8019cf4:	4932      	ldr	r1, [pc, #200]	; (8019dc0 <tcp_output+0x24c>)
 8019cf6:	482f      	ldr	r0, [pc, #188]	; (8019db4 <tcp_output+0x240>)
 8019cf8:	f004 fb3c 	bl	801e374 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d01f      	beq.n	8019d44 <tcp_output+0x1d0>
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	8b5b      	ldrh	r3, [r3, #26]
 8019d08:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d119      	bne.n	8019d44 <tcp_output+0x1d0>
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d00b      	beq.n	8019d30 <tcp_output+0x1bc>
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d110      	bne.n	8019d44 <tcp_output+0x1d0>
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d26:	891a      	ldrh	r2, [r3, #8]
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019d2c:	429a      	cmp	r2, r3
 8019d2e:	d209      	bcs.n	8019d44 <tcp_output+0x1d0>
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d004      	beq.n	8019d44 <tcp_output+0x1d0>
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019d40:	2b08      	cmp	r3, #8
 8019d42:	d901      	bls.n	8019d48 <tcp_output+0x1d4>
 8019d44:	2301      	movs	r3, #1
 8019d46:	e000      	b.n	8019d4a <tcp_output+0x1d6>
 8019d48:	2300      	movs	r3, #0
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d106      	bne.n	8019d5c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	8b5b      	ldrh	r3, [r3, #26]
 8019d52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	f000 80e4 	beq.w	8019f24 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	7d1b      	ldrb	r3, [r3, #20]
 8019d60:	2b02      	cmp	r3, #2
 8019d62:	d00d      	beq.n	8019d80 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d66:	68db      	ldr	r3, [r3, #12]
 8019d68:	899b      	ldrh	r3, [r3, #12]
 8019d6a:	b29c      	uxth	r4, r3
 8019d6c:	2010      	movs	r0, #16
 8019d6e:	f7f8 fdf1 	bl	8012954 <lwip_htons>
 8019d72:	4603      	mov	r3, r0
 8019d74:	461a      	mov	r2, r3
 8019d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d78:	68db      	ldr	r3, [r3, #12]
 8019d7a:	4322      	orrs	r2, r4
 8019d7c:	b292      	uxth	r2, r2
 8019d7e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019d80:	697a      	ldr	r2, [r7, #20]
 8019d82:	6879      	ldr	r1, [r7, #4]
 8019d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019d86:	f000 f909 	bl	8019f9c <tcp_output_segment>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d016      	beq.n	8019dc4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	8b5b      	ldrh	r3, [r3, #26]
 8019d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d9e:	b29a      	uxth	r2, r3
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	835a      	strh	r2, [r3, #26]
      return err;
 8019da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019da8:	e0d3      	b.n	8019f52 <tcp_output+0x3de>
 8019daa:	bf00      	nop
 8019dac:	08021fac 	.word	0x08021fac
 8019db0:	080224f0 	.word	0x080224f0
 8019db4:	08022000 	.word	0x08022000
 8019db8:	08022508 	.word	0x08022508
 8019dbc:	2000fa00 	.word	0x2000fa00
 8019dc0:	08022530 	.word	0x08022530
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dc6:	681a      	ldr	r2, [r3, #0]
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	7d1b      	ldrb	r3, [r3, #20]
 8019dd0:	2b02      	cmp	r3, #2
 8019dd2:	d006      	beq.n	8019de2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	8b5b      	ldrh	r3, [r3, #26]
 8019dd8:	f023 0303 	bic.w	r3, r3, #3
 8019ddc:	b29a      	uxth	r2, r3
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019de4:	68db      	ldr	r3, [r3, #12]
 8019de6:	685b      	ldr	r3, [r3, #4]
 8019de8:	4618      	mov	r0, r3
 8019dea:	f7f8 fdc8 	bl	801297e <lwip_htonl>
 8019dee:	4604      	mov	r4, r0
 8019df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019df2:	891b      	ldrh	r3, [r3, #8]
 8019df4:	461d      	mov	r5, r3
 8019df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019df8:	68db      	ldr	r3, [r3, #12]
 8019dfa:	899b      	ldrh	r3, [r3, #12]
 8019dfc:	b29b      	uxth	r3, r3
 8019dfe:	4618      	mov	r0, r3
 8019e00:	f7f8 fda8 	bl	8012954 <lwip_htons>
 8019e04:	4603      	mov	r3, r0
 8019e06:	b2db      	uxtb	r3, r3
 8019e08:	f003 0303 	and.w	r3, r3, #3
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d001      	beq.n	8019e14 <tcp_output+0x2a0>
 8019e10:	2301      	movs	r3, #1
 8019e12:	e000      	b.n	8019e16 <tcp_output+0x2a2>
 8019e14:	2300      	movs	r3, #0
 8019e16:	442b      	add	r3, r5
 8019e18:	4423      	add	r3, r4
 8019e1a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019e20:	68bb      	ldr	r3, [r7, #8]
 8019e22:	1ad3      	subs	r3, r2, r3
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	da02      	bge.n	8019e2e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	68ba      	ldr	r2, [r7, #8]
 8019e2c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e30:	891b      	ldrh	r3, [r3, #8]
 8019e32:	461c      	mov	r4, r3
 8019e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e36:	68db      	ldr	r3, [r3, #12]
 8019e38:	899b      	ldrh	r3, [r3, #12]
 8019e3a:	b29b      	uxth	r3, r3
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f7f8 fd89 	bl	8012954 <lwip_htons>
 8019e42:	4603      	mov	r3, r0
 8019e44:	b2db      	uxtb	r3, r3
 8019e46:	f003 0303 	and.w	r3, r3, #3
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d001      	beq.n	8019e52 <tcp_output+0x2de>
 8019e4e:	2301      	movs	r3, #1
 8019e50:	e000      	b.n	8019e54 <tcp_output+0x2e0>
 8019e52:	2300      	movs	r3, #0
 8019e54:	4423      	add	r3, r4
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d049      	beq.n	8019eee <tcp_output+0x37a>
      seg->next = NULL;
 8019e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e5c:	2200      	movs	r2, #0
 8019e5e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d105      	bne.n	8019e74 <tcp_output+0x300>
        pcb->unacked = seg;
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e6c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e70:	623b      	str	r3, [r7, #32]
 8019e72:	e03f      	b.n	8019ef4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e76:	68db      	ldr	r3, [r3, #12]
 8019e78:	685b      	ldr	r3, [r3, #4]
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	f7f8 fd7f 	bl	801297e <lwip_htonl>
 8019e80:	4604      	mov	r4, r0
 8019e82:	6a3b      	ldr	r3, [r7, #32]
 8019e84:	68db      	ldr	r3, [r3, #12]
 8019e86:	685b      	ldr	r3, [r3, #4]
 8019e88:	4618      	mov	r0, r3
 8019e8a:	f7f8 fd78 	bl	801297e <lwip_htonl>
 8019e8e:	4603      	mov	r3, r0
 8019e90:	1ae3      	subs	r3, r4, r3
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	da24      	bge.n	8019ee0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	3370      	adds	r3, #112	; 0x70
 8019e9a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019e9c:	e002      	b.n	8019ea4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019e9e:	69fb      	ldr	r3, [r7, #28]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019ea4:	69fb      	ldr	r3, [r7, #28]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d011      	beq.n	8019ed0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019eac:	69fb      	ldr	r3, [r7, #28]
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	68db      	ldr	r3, [r3, #12]
 8019eb2:	685b      	ldr	r3, [r3, #4]
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	f7f8 fd62 	bl	801297e <lwip_htonl>
 8019eba:	4604      	mov	r4, r0
 8019ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ebe:	68db      	ldr	r3, [r3, #12]
 8019ec0:	685b      	ldr	r3, [r3, #4]
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	f7f8 fd5b 	bl	801297e <lwip_htonl>
 8019ec8:	4603      	mov	r3, r0
 8019eca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	dbe6      	blt.n	8019e9e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019ed0:	69fb      	ldr	r3, [r7, #28]
 8019ed2:	681a      	ldr	r2, [r3, #0]
 8019ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ed6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019ed8:	69fb      	ldr	r3, [r7, #28]
 8019eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019edc:	601a      	str	r2, [r3, #0]
 8019ede:	e009      	b.n	8019ef4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019ee0:	6a3b      	ldr	r3, [r7, #32]
 8019ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ee4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019ee6:	6a3b      	ldr	r3, [r7, #32]
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	623b      	str	r3, [r7, #32]
 8019eec:	e002      	b.n	8019ef4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019eee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019ef0:	f7fb ff19 	bl	8015d26 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ef8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8019efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d012      	beq.n	8019f26 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f02:	68db      	ldr	r3, [r3, #12]
 8019f04:	685b      	ldr	r3, [r3, #4]
 8019f06:	4618      	mov	r0, r3
 8019f08:	f7f8 fd39 	bl	801297e <lwip_htonl>
 8019f0c:	4602      	mov	r2, r0
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f12:	1ad3      	subs	r3, r2, r3
 8019f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f16:	8912      	ldrh	r2, [r2, #8]
 8019f18:	4413      	add	r3, r2
  while (seg != NULL &&
 8019f1a:	69ba      	ldr	r2, [r7, #24]
 8019f1c:	429a      	cmp	r2, r3
 8019f1e:	f4bf aed9 	bcs.w	8019cd4 <tcp_output+0x160>
 8019f22:	e000      	b.n	8019f26 <tcp_output+0x3b2>
      break;
 8019f24:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d108      	bne.n	8019f40 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	2200      	movs	r2, #0
 8019f32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8019f36:	e004      	b.n	8019f42 <tcp_output+0x3ce>
    goto output_done;
 8019f38:	bf00      	nop
 8019f3a:	e002      	b.n	8019f42 <tcp_output+0x3ce>
    goto output_done;
 8019f3c:	bf00      	nop
 8019f3e:	e000      	b.n	8019f42 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019f40:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	8b5b      	ldrh	r3, [r3, #26]
 8019f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019f4a:	b29a      	uxth	r2, r3
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019f50:	2300      	movs	r3, #0
}
 8019f52:	4618      	mov	r0, r3
 8019f54:	3728      	adds	r7, #40	; 0x28
 8019f56:	46bd      	mov	sp, r7
 8019f58:	bdb0      	pop	{r4, r5, r7, pc}
 8019f5a:	bf00      	nop

08019f5c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019f5c:	b580      	push	{r7, lr}
 8019f5e:	b082      	sub	sp, #8
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d106      	bne.n	8019f78 <tcp_output_segment_busy+0x1c>
 8019f6a:	4b09      	ldr	r3, [pc, #36]	; (8019f90 <tcp_output_segment_busy+0x34>)
 8019f6c:	f240 529a 	movw	r2, #1434	; 0x59a
 8019f70:	4908      	ldr	r1, [pc, #32]	; (8019f94 <tcp_output_segment_busy+0x38>)
 8019f72:	4809      	ldr	r0, [pc, #36]	; (8019f98 <tcp_output_segment_busy+0x3c>)
 8019f74:	f004 f9fe 	bl	801e374 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	685b      	ldr	r3, [r3, #4]
 8019f7c:	7b9b      	ldrb	r3, [r3, #14]
 8019f7e:	2b01      	cmp	r3, #1
 8019f80:	d001      	beq.n	8019f86 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019f82:	2301      	movs	r3, #1
 8019f84:	e000      	b.n	8019f88 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019f86:	2300      	movs	r3, #0
}
 8019f88:	4618      	mov	r0, r3
 8019f8a:	3708      	adds	r7, #8
 8019f8c:	46bd      	mov	sp, r7
 8019f8e:	bd80      	pop	{r7, pc}
 8019f90:	08021fac 	.word	0x08021fac
 8019f94:	08022548 	.word	0x08022548
 8019f98:	08022000 	.word	0x08022000

08019f9c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019f9c:	b5b0      	push	{r4, r5, r7, lr}
 8019f9e:	b08c      	sub	sp, #48	; 0x30
 8019fa0:	af04      	add	r7, sp, #16
 8019fa2:	60f8      	str	r0, [r7, #12]
 8019fa4:	60b9      	str	r1, [r7, #8]
 8019fa6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d106      	bne.n	8019fbc <tcp_output_segment+0x20>
 8019fae:	4b63      	ldr	r3, [pc, #396]	; (801a13c <tcp_output_segment+0x1a0>)
 8019fb0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8019fb4:	4962      	ldr	r1, [pc, #392]	; (801a140 <tcp_output_segment+0x1a4>)
 8019fb6:	4863      	ldr	r0, [pc, #396]	; (801a144 <tcp_output_segment+0x1a8>)
 8019fb8:	f004 f9dc 	bl	801e374 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8019fbc:	68bb      	ldr	r3, [r7, #8]
 8019fbe:	2b00      	cmp	r3, #0
 8019fc0:	d106      	bne.n	8019fd0 <tcp_output_segment+0x34>
 8019fc2:	4b5e      	ldr	r3, [pc, #376]	; (801a13c <tcp_output_segment+0x1a0>)
 8019fc4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8019fc8:	495f      	ldr	r1, [pc, #380]	; (801a148 <tcp_output_segment+0x1ac>)
 8019fca:	485e      	ldr	r0, [pc, #376]	; (801a144 <tcp_output_segment+0x1a8>)
 8019fcc:	f004 f9d2 	bl	801e374 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	d106      	bne.n	8019fe4 <tcp_output_segment+0x48>
 8019fd6:	4b59      	ldr	r3, [pc, #356]	; (801a13c <tcp_output_segment+0x1a0>)
 8019fd8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8019fdc:	495b      	ldr	r1, [pc, #364]	; (801a14c <tcp_output_segment+0x1b0>)
 8019fde:	4859      	ldr	r0, [pc, #356]	; (801a144 <tcp_output_segment+0x1a8>)
 8019fe0:	f004 f9c8 	bl	801e374 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019fe4:	68f8      	ldr	r0, [r7, #12]
 8019fe6:	f7ff ffb9 	bl	8019f5c <tcp_output_segment_busy>
 8019fea:	4603      	mov	r3, r0
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d001      	beq.n	8019ff4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	e09f      	b.n	801a134 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019ff4:	68bb      	ldr	r3, [r7, #8]
 8019ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	68dc      	ldr	r4, [r3, #12]
 8019ffc:	4610      	mov	r0, r2
 8019ffe:	f7f8 fcbe 	bl	801297e <lwip_htonl>
 801a002:	4603      	mov	r3, r0
 801a004:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a006:	68bb      	ldr	r3, [r7, #8]
 801a008:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	68dc      	ldr	r4, [r3, #12]
 801a00e:	4610      	mov	r0, r2
 801a010:	f7f8 fca0 	bl	8012954 <lwip_htons>
 801a014:	4603      	mov	r3, r0
 801a016:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a018:	68bb      	ldr	r3, [r7, #8]
 801a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a01c:	68ba      	ldr	r2, [r7, #8]
 801a01e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a020:	441a      	add	r2, r3
 801a022:	68bb      	ldr	r3, [r7, #8]
 801a024:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	68db      	ldr	r3, [r3, #12]
 801a02a:	3314      	adds	r3, #20
 801a02c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	7a9b      	ldrb	r3, [r3, #10]
 801a032:	f003 0301 	and.w	r3, r3, #1
 801a036:	2b00      	cmp	r3, #0
 801a038:	d015      	beq.n	801a066 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a03a:	68bb      	ldr	r3, [r7, #8]
 801a03c:	3304      	adds	r3, #4
 801a03e:	461a      	mov	r2, r3
 801a040:	6879      	ldr	r1, [r7, #4]
 801a042:	f44f 7006 	mov.w	r0, #536	; 0x218
 801a046:	f7fc fa33 	bl	80164b0 <tcp_eff_send_mss_netif>
 801a04a:	4603      	mov	r3, r0
 801a04c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a04e:	8b7b      	ldrh	r3, [r7, #26]
 801a050:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801a054:	4618      	mov	r0, r3
 801a056:	f7f8 fc92 	bl	801297e <lwip_htonl>
 801a05a:	4602      	mov	r2, r0
 801a05c:	69fb      	ldr	r3, [r7, #28]
 801a05e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a060:	69fb      	ldr	r3, [r7, #28]
 801a062:	3304      	adds	r3, #4
 801a064:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a066:	68bb      	ldr	r3, [r7, #8]
 801a068:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	da02      	bge.n	801a076 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a070:	68bb      	ldr	r3, [r7, #8]
 801a072:	2200      	movs	r2, #0
 801a074:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801a076:	68bb      	ldr	r3, [r7, #8]
 801a078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d10c      	bne.n	801a098 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a07e:	4b34      	ldr	r3, [pc, #208]	; (801a150 <tcp_output_segment+0x1b4>)
 801a080:	681a      	ldr	r2, [r3, #0]
 801a082:	68bb      	ldr	r3, [r7, #8]
 801a084:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	68db      	ldr	r3, [r3, #12]
 801a08a:	685b      	ldr	r3, [r3, #4]
 801a08c:	4618      	mov	r0, r3
 801a08e:	f7f8 fc76 	bl	801297e <lwip_htonl>
 801a092:	4602      	mov	r2, r0
 801a094:	68bb      	ldr	r3, [r7, #8]
 801a096:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	68da      	ldr	r2, [r3, #12]
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	685b      	ldr	r3, [r3, #4]
 801a0a0:	685b      	ldr	r3, [r3, #4]
 801a0a2:	1ad3      	subs	r3, r2, r3
 801a0a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	685b      	ldr	r3, [r3, #4]
 801a0aa:	8959      	ldrh	r1, [r3, #10]
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	685b      	ldr	r3, [r3, #4]
 801a0b0:	8b3a      	ldrh	r2, [r7, #24]
 801a0b2:	1a8a      	subs	r2, r1, r2
 801a0b4:	b292      	uxth	r2, r2
 801a0b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	685b      	ldr	r3, [r3, #4]
 801a0bc:	8919      	ldrh	r1, [r3, #8]
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	685b      	ldr	r3, [r3, #4]
 801a0c2:	8b3a      	ldrh	r2, [r7, #24]
 801a0c4:	1a8a      	subs	r2, r1, r2
 801a0c6:	b292      	uxth	r2, r2
 801a0c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	685b      	ldr	r3, [r3, #4]
 801a0ce:	68fa      	ldr	r2, [r7, #12]
 801a0d0:	68d2      	ldr	r2, [r2, #12]
 801a0d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	68db      	ldr	r3, [r3, #12]
 801a0d8:	2200      	movs	r2, #0
 801a0da:	741a      	strb	r2, [r3, #16]
 801a0dc:	2200      	movs	r2, #0
 801a0de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	68db      	ldr	r3, [r3, #12]
 801a0e4:	f103 0214 	add.w	r2, r3, #20
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	7a9b      	ldrb	r3, [r3, #10]
 801a0ec:	009b      	lsls	r3, r3, #2
 801a0ee:	f003 0304 	and.w	r3, r3, #4
 801a0f2:	4413      	add	r3, r2
 801a0f4:	69fa      	ldr	r2, [r7, #28]
 801a0f6:	429a      	cmp	r2, r3
 801a0f8:	d006      	beq.n	801a108 <tcp_output_segment+0x16c>
 801a0fa:	4b10      	ldr	r3, [pc, #64]	; (801a13c <tcp_output_segment+0x1a0>)
 801a0fc:	f240 621c 	movw	r2, #1564	; 0x61c
 801a100:	4914      	ldr	r1, [pc, #80]	; (801a154 <tcp_output_segment+0x1b8>)
 801a102:	4810      	ldr	r0, [pc, #64]	; (801a144 <tcp_output_segment+0x1a8>)
 801a104:	f004 f936 	bl	801e374 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a108:	68fb      	ldr	r3, [r7, #12]
 801a10a:	6858      	ldr	r0, [r3, #4]
 801a10c:	68b9      	ldr	r1, [r7, #8]
 801a10e:	68bb      	ldr	r3, [r7, #8]
 801a110:	1d1c      	adds	r4, r3, #4
 801a112:	68bb      	ldr	r3, [r7, #8]
 801a114:	7add      	ldrb	r5, [r3, #11]
 801a116:	68bb      	ldr	r3, [r7, #8]
 801a118:	7a9b      	ldrb	r3, [r3, #10]
 801a11a:	687a      	ldr	r2, [r7, #4]
 801a11c:	9202      	str	r2, [sp, #8]
 801a11e:	2206      	movs	r2, #6
 801a120:	9201      	str	r2, [sp, #4]
 801a122:	9300      	str	r3, [sp, #0]
 801a124:	462b      	mov	r3, r5
 801a126:	4622      	mov	r2, r4
 801a128:	f002 fbac 	bl	801c884 <ip4_output_if>
 801a12c:	4603      	mov	r3, r0
 801a12e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a130:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a134:	4618      	mov	r0, r3
 801a136:	3720      	adds	r7, #32
 801a138:	46bd      	mov	sp, r7
 801a13a:	bdb0      	pop	{r4, r5, r7, pc}
 801a13c:	08021fac 	.word	0x08021fac
 801a140:	08022570 	.word	0x08022570
 801a144:	08022000 	.word	0x08022000
 801a148:	08022590 	.word	0x08022590
 801a14c:	080225b0 	.word	0x080225b0
 801a150:	2000f9b4 	.word	0x2000f9b4
 801a154:	080225d4 	.word	0x080225d4

0801a158 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a158:	b5b0      	push	{r4, r5, r7, lr}
 801a15a:	b084      	sub	sp, #16
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	2b00      	cmp	r3, #0
 801a164:	d106      	bne.n	801a174 <tcp_rexmit_rto_prepare+0x1c>
 801a166:	4b31      	ldr	r3, [pc, #196]	; (801a22c <tcp_rexmit_rto_prepare+0xd4>)
 801a168:	f240 6263 	movw	r2, #1635	; 0x663
 801a16c:	4930      	ldr	r1, [pc, #192]	; (801a230 <tcp_rexmit_rto_prepare+0xd8>)
 801a16e:	4831      	ldr	r0, [pc, #196]	; (801a234 <tcp_rexmit_rto_prepare+0xdc>)
 801a170:	f004 f900 	bl	801e374 <iprintf>

  if (pcb->unacked == NULL) {
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d102      	bne.n	801a182 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a17c:	f06f 0305 	mvn.w	r3, #5
 801a180:	e050      	b.n	801a224 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a186:	60fb      	str	r3, [r7, #12]
 801a188:	e00b      	b.n	801a1a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a18a:	68f8      	ldr	r0, [r7, #12]
 801a18c:	f7ff fee6 	bl	8019f5c <tcp_output_segment_busy>
 801a190:	4603      	mov	r3, r0
 801a192:	2b00      	cmp	r3, #0
 801a194:	d002      	beq.n	801a19c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a196:	f06f 0305 	mvn.w	r3, #5
 801a19a:	e043      	b.n	801a224 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	60fb      	str	r3, [r7, #12]
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d1ef      	bne.n	801a18a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a1aa:	68f8      	ldr	r0, [r7, #12]
 801a1ac:	f7ff fed6 	bl	8019f5c <tcp_output_segment_busy>
 801a1b0:	4603      	mov	r3, r0
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d002      	beq.n	801a1bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a1b6:	f06f 0305 	mvn.w	r3, #5
 801a1ba:	e033      	b.n	801a224 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	2200      	movs	r2, #0
 801a1d0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	8b5b      	ldrh	r3, [r3, #26]
 801a1d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a1da:	b29a      	uxth	r2, r3
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a1e0:	68fb      	ldr	r3, [r7, #12]
 801a1e2:	68db      	ldr	r3, [r3, #12]
 801a1e4:	685b      	ldr	r3, [r3, #4]
 801a1e6:	4618      	mov	r0, r3
 801a1e8:	f7f8 fbc9 	bl	801297e <lwip_htonl>
 801a1ec:	4604      	mov	r4, r0
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	891b      	ldrh	r3, [r3, #8]
 801a1f2:	461d      	mov	r5, r3
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	68db      	ldr	r3, [r3, #12]
 801a1f8:	899b      	ldrh	r3, [r3, #12]
 801a1fa:	b29b      	uxth	r3, r3
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	f7f8 fba9 	bl	8012954 <lwip_htons>
 801a202:	4603      	mov	r3, r0
 801a204:	b2db      	uxtb	r3, r3
 801a206:	f003 0303 	and.w	r3, r3, #3
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d001      	beq.n	801a212 <tcp_rexmit_rto_prepare+0xba>
 801a20e:	2301      	movs	r3, #1
 801a210:	e000      	b.n	801a214 <tcp_rexmit_rto_prepare+0xbc>
 801a212:	2300      	movs	r3, #0
 801a214:	442b      	add	r3, r5
 801a216:	18e2      	adds	r2, r4, r3
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	2200      	movs	r2, #0
 801a220:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801a222:	2300      	movs	r3, #0
}
 801a224:	4618      	mov	r0, r3
 801a226:	3710      	adds	r7, #16
 801a228:	46bd      	mov	sp, r7
 801a22a:	bdb0      	pop	{r4, r5, r7, pc}
 801a22c:	08021fac 	.word	0x08021fac
 801a230:	080225e8 	.word	0x080225e8
 801a234:	08022000 	.word	0x08022000

0801a238 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a238:	b580      	push	{r7, lr}
 801a23a:	b082      	sub	sp, #8
 801a23c:	af00      	add	r7, sp, #0
 801a23e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	2b00      	cmp	r3, #0
 801a244:	d106      	bne.n	801a254 <tcp_rexmit_rto_commit+0x1c>
 801a246:	4b0d      	ldr	r3, [pc, #52]	; (801a27c <tcp_rexmit_rto_commit+0x44>)
 801a248:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a24c:	490c      	ldr	r1, [pc, #48]	; (801a280 <tcp_rexmit_rto_commit+0x48>)
 801a24e:	480d      	ldr	r0, [pc, #52]	; (801a284 <tcp_rexmit_rto_commit+0x4c>)
 801a250:	f004 f890 	bl	801e374 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a25a:	2bff      	cmp	r3, #255	; 0xff
 801a25c:	d007      	beq.n	801a26e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a264:	3301      	adds	r3, #1
 801a266:	b2da      	uxtb	r2, r3
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a26e:	6878      	ldr	r0, [r7, #4]
 801a270:	f7ff fc80 	bl	8019b74 <tcp_output>
}
 801a274:	bf00      	nop
 801a276:	3708      	adds	r7, #8
 801a278:	46bd      	mov	sp, r7
 801a27a:	bd80      	pop	{r7, pc}
 801a27c:	08021fac 	.word	0x08021fac
 801a280:	0802260c 	.word	0x0802260c
 801a284:	08022000 	.word	0x08022000

0801a288 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a288:	b580      	push	{r7, lr}
 801a28a:	b082      	sub	sp, #8
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	2b00      	cmp	r3, #0
 801a294:	d106      	bne.n	801a2a4 <tcp_rexmit_rto+0x1c>
 801a296:	4b0a      	ldr	r3, [pc, #40]	; (801a2c0 <tcp_rexmit_rto+0x38>)
 801a298:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801a29c:	4909      	ldr	r1, [pc, #36]	; (801a2c4 <tcp_rexmit_rto+0x3c>)
 801a29e:	480a      	ldr	r0, [pc, #40]	; (801a2c8 <tcp_rexmit_rto+0x40>)
 801a2a0:	f004 f868 	bl	801e374 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a2a4:	6878      	ldr	r0, [r7, #4]
 801a2a6:	f7ff ff57 	bl	801a158 <tcp_rexmit_rto_prepare>
 801a2aa:	4603      	mov	r3, r0
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d102      	bne.n	801a2b6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a2b0:	6878      	ldr	r0, [r7, #4]
 801a2b2:	f7ff ffc1 	bl	801a238 <tcp_rexmit_rto_commit>
  }
}
 801a2b6:	bf00      	nop
 801a2b8:	3708      	adds	r7, #8
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	bd80      	pop	{r7, pc}
 801a2be:	bf00      	nop
 801a2c0:	08021fac 	.word	0x08021fac
 801a2c4:	08022630 	.word	0x08022630
 801a2c8:	08022000 	.word	0x08022000

0801a2cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a2cc:	b590      	push	{r4, r7, lr}
 801a2ce:	b085      	sub	sp, #20
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d106      	bne.n	801a2e8 <tcp_rexmit+0x1c>
 801a2da:	4b2f      	ldr	r3, [pc, #188]	; (801a398 <tcp_rexmit+0xcc>)
 801a2dc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801a2e0:	492e      	ldr	r1, [pc, #184]	; (801a39c <tcp_rexmit+0xd0>)
 801a2e2:	482f      	ldr	r0, [pc, #188]	; (801a3a0 <tcp_rexmit+0xd4>)
 801a2e4:	f004 f846 	bl	801e374 <iprintf>

  if (pcb->unacked == NULL) {
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d102      	bne.n	801a2f6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a2f0:	f06f 0305 	mvn.w	r3, #5
 801a2f4:	e04c      	b.n	801a390 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a2fa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a2fc:	68b8      	ldr	r0, [r7, #8]
 801a2fe:	f7ff fe2d 	bl	8019f5c <tcp_output_segment_busy>
 801a302:	4603      	mov	r3, r0
 801a304:	2b00      	cmp	r3, #0
 801a306:	d002      	beq.n	801a30e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a308:	f06f 0305 	mvn.w	r3, #5
 801a30c:	e040      	b.n	801a390 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a30e:	68bb      	ldr	r3, [r7, #8]
 801a310:	681a      	ldr	r2, [r3, #0]
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	336c      	adds	r3, #108	; 0x6c
 801a31a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a31c:	e002      	b.n	801a324 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d011      	beq.n	801a350 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	68db      	ldr	r3, [r3, #12]
 801a332:	685b      	ldr	r3, [r3, #4]
 801a334:	4618      	mov	r0, r3
 801a336:	f7f8 fb22 	bl	801297e <lwip_htonl>
 801a33a:	4604      	mov	r4, r0
 801a33c:	68bb      	ldr	r3, [r7, #8]
 801a33e:	68db      	ldr	r3, [r3, #12]
 801a340:	685b      	ldr	r3, [r3, #4]
 801a342:	4618      	mov	r0, r3
 801a344:	f7f8 fb1b 	bl	801297e <lwip_htonl>
 801a348:	4603      	mov	r3, r0
 801a34a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	dbe6      	blt.n	801a31e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a350:	68fb      	ldr	r3, [r7, #12]
 801a352:	681a      	ldr	r2, [r3, #0]
 801a354:	68bb      	ldr	r3, [r7, #8]
 801a356:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a358:	68fb      	ldr	r3, [r7, #12]
 801a35a:	68ba      	ldr	r2, [r7, #8]
 801a35c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a35e:	68bb      	ldr	r3, [r7, #8]
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d103      	bne.n	801a36e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	2200      	movs	r2, #0
 801a36a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a374:	2bff      	cmp	r3, #255	; 0xff
 801a376:	d007      	beq.n	801a388 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a37e:	3301      	adds	r3, #1
 801a380:	b2da      	uxtb	r2, r3
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	2200      	movs	r2, #0
 801a38c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a38e:	2300      	movs	r3, #0
}
 801a390:	4618      	mov	r0, r3
 801a392:	3714      	adds	r7, #20
 801a394:	46bd      	mov	sp, r7
 801a396:	bd90      	pop	{r4, r7, pc}
 801a398:	08021fac 	.word	0x08021fac
 801a39c:	0802264c 	.word	0x0802264c
 801a3a0:	08022000 	.word	0x08022000

0801a3a4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a3a4:	b580      	push	{r7, lr}
 801a3a6:	b082      	sub	sp, #8
 801a3a8:	af00      	add	r7, sp, #0
 801a3aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d106      	bne.n	801a3c0 <tcp_rexmit_fast+0x1c>
 801a3b2:	4b2a      	ldr	r3, [pc, #168]	; (801a45c <tcp_rexmit_fast+0xb8>)
 801a3b4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a3b8:	4929      	ldr	r1, [pc, #164]	; (801a460 <tcp_rexmit_fast+0xbc>)
 801a3ba:	482a      	ldr	r0, [pc, #168]	; (801a464 <tcp_rexmit_fast+0xc0>)
 801a3bc:	f003 ffda 	bl	801e374 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d045      	beq.n	801a454 <tcp_rexmit_fast+0xb0>
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	8b5b      	ldrh	r3, [r3, #26]
 801a3cc:	f003 0304 	and.w	r3, r3, #4
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d13f      	bne.n	801a454 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a3d4:	6878      	ldr	r0, [r7, #4]
 801a3d6:	f7ff ff79 	bl	801a2cc <tcp_rexmit>
 801a3da:	4603      	mov	r3, r0
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d139      	bne.n	801a454 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a3ec:	4293      	cmp	r3, r2
 801a3ee:	bf28      	it	cs
 801a3f0:	4613      	movcs	r3, r2
 801a3f2:	b29b      	uxth	r3, r3
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	da00      	bge.n	801a3fa <tcp_rexmit_fast+0x56>
 801a3f8:	3301      	adds	r3, #1
 801a3fa:	105b      	asrs	r3, r3, #1
 801a3fc:	b29a      	uxth	r2, r3
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a40a:	461a      	mov	r2, r3
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a410:	005b      	lsls	r3, r3, #1
 801a412:	429a      	cmp	r2, r3
 801a414:	d206      	bcs.n	801a424 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a41a:	005b      	lsls	r3, r3, #1
 801a41c:	b29a      	uxth	r2, r3
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a42e:	4619      	mov	r1, r3
 801a430:	0049      	lsls	r1, r1, #1
 801a432:	440b      	add	r3, r1
 801a434:	b29b      	uxth	r3, r3
 801a436:	4413      	add	r3, r2
 801a438:	b29a      	uxth	r2, r3
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	8b5b      	ldrh	r3, [r3, #26]
 801a444:	f043 0304 	orr.w	r3, r3, #4
 801a448:	b29a      	uxth	r2, r3
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	2200      	movs	r2, #0
 801a452:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801a454:	bf00      	nop
 801a456:	3708      	adds	r7, #8
 801a458:	46bd      	mov	sp, r7
 801a45a:	bd80      	pop	{r7, pc}
 801a45c:	08021fac 	.word	0x08021fac
 801a460:	08022664 	.word	0x08022664
 801a464:	08022000 	.word	0x08022000

0801a468 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b086      	sub	sp, #24
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	60f8      	str	r0, [r7, #12]
 801a470:	607b      	str	r3, [r7, #4]
 801a472:	460b      	mov	r3, r1
 801a474:	817b      	strh	r3, [r7, #10]
 801a476:	4613      	mov	r3, r2
 801a478:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a47a:	897a      	ldrh	r2, [r7, #10]
 801a47c:	893b      	ldrh	r3, [r7, #8]
 801a47e:	4413      	add	r3, r2
 801a480:	b29b      	uxth	r3, r3
 801a482:	3314      	adds	r3, #20
 801a484:	b29b      	uxth	r3, r3
 801a486:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a48a:	4619      	mov	r1, r3
 801a48c:	2022      	movs	r0, #34	; 0x22
 801a48e:	f7f9 fce3 	bl	8013e58 <pbuf_alloc>
 801a492:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a494:	697b      	ldr	r3, [r7, #20]
 801a496:	2b00      	cmp	r3, #0
 801a498:	d04d      	beq.n	801a536 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a49a:	897b      	ldrh	r3, [r7, #10]
 801a49c:	3313      	adds	r3, #19
 801a49e:	697a      	ldr	r2, [r7, #20]
 801a4a0:	8952      	ldrh	r2, [r2, #10]
 801a4a2:	4293      	cmp	r3, r2
 801a4a4:	db06      	blt.n	801a4b4 <tcp_output_alloc_header_common+0x4c>
 801a4a6:	4b26      	ldr	r3, [pc, #152]	; (801a540 <tcp_output_alloc_header_common+0xd8>)
 801a4a8:	f240 7223 	movw	r2, #1827	; 0x723
 801a4ac:	4925      	ldr	r1, [pc, #148]	; (801a544 <tcp_output_alloc_header_common+0xdc>)
 801a4ae:	4826      	ldr	r0, [pc, #152]	; (801a548 <tcp_output_alloc_header_common+0xe0>)
 801a4b0:	f003 ff60 	bl	801e374 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a4b4:	697b      	ldr	r3, [r7, #20]
 801a4b6:	685b      	ldr	r3, [r3, #4]
 801a4b8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a4ba:	8c3b      	ldrh	r3, [r7, #32]
 801a4bc:	4618      	mov	r0, r3
 801a4be:	f7f8 fa49 	bl	8012954 <lwip_htons>
 801a4c2:	4603      	mov	r3, r0
 801a4c4:	461a      	mov	r2, r3
 801a4c6:	693b      	ldr	r3, [r7, #16]
 801a4c8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a4ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a4cc:	4618      	mov	r0, r3
 801a4ce:	f7f8 fa41 	bl	8012954 <lwip_htons>
 801a4d2:	4603      	mov	r3, r0
 801a4d4:	461a      	mov	r2, r3
 801a4d6:	693b      	ldr	r3, [r7, #16]
 801a4d8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a4da:	693b      	ldr	r3, [r7, #16]
 801a4dc:	687a      	ldr	r2, [r7, #4]
 801a4de:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a4e0:	68f8      	ldr	r0, [r7, #12]
 801a4e2:	f7f8 fa4c 	bl	801297e <lwip_htonl>
 801a4e6:	4602      	mov	r2, r0
 801a4e8:	693b      	ldr	r3, [r7, #16]
 801a4ea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a4ec:	897b      	ldrh	r3, [r7, #10]
 801a4ee:	089b      	lsrs	r3, r3, #2
 801a4f0:	b29b      	uxth	r3, r3
 801a4f2:	3305      	adds	r3, #5
 801a4f4:	b29b      	uxth	r3, r3
 801a4f6:	031b      	lsls	r3, r3, #12
 801a4f8:	b29a      	uxth	r2, r3
 801a4fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a4fe:	b29b      	uxth	r3, r3
 801a500:	4313      	orrs	r3, r2
 801a502:	b29b      	uxth	r3, r3
 801a504:	4618      	mov	r0, r3
 801a506:	f7f8 fa25 	bl	8012954 <lwip_htons>
 801a50a:	4603      	mov	r3, r0
 801a50c:	461a      	mov	r2, r3
 801a50e:	693b      	ldr	r3, [r7, #16]
 801a510:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a512:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a514:	4618      	mov	r0, r3
 801a516:	f7f8 fa1d 	bl	8012954 <lwip_htons>
 801a51a:	4603      	mov	r3, r0
 801a51c:	461a      	mov	r2, r3
 801a51e:	693b      	ldr	r3, [r7, #16]
 801a520:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a522:	693b      	ldr	r3, [r7, #16]
 801a524:	2200      	movs	r2, #0
 801a526:	741a      	strb	r2, [r3, #16]
 801a528:	2200      	movs	r2, #0
 801a52a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a52c:	693b      	ldr	r3, [r7, #16]
 801a52e:	2200      	movs	r2, #0
 801a530:	749a      	strb	r2, [r3, #18]
 801a532:	2200      	movs	r2, #0
 801a534:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a536:	697b      	ldr	r3, [r7, #20]
}
 801a538:	4618      	mov	r0, r3
 801a53a:	3718      	adds	r7, #24
 801a53c:	46bd      	mov	sp, r7
 801a53e:	bd80      	pop	{r7, pc}
 801a540:	08021fac 	.word	0x08021fac
 801a544:	08022684 	.word	0x08022684
 801a548:	08022000 	.word	0x08022000

0801a54c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a54c:	b5b0      	push	{r4, r5, r7, lr}
 801a54e:	b08a      	sub	sp, #40	; 0x28
 801a550:	af04      	add	r7, sp, #16
 801a552:	60f8      	str	r0, [r7, #12]
 801a554:	607b      	str	r3, [r7, #4]
 801a556:	460b      	mov	r3, r1
 801a558:	817b      	strh	r3, [r7, #10]
 801a55a:	4613      	mov	r3, r2
 801a55c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	2b00      	cmp	r3, #0
 801a562:	d106      	bne.n	801a572 <tcp_output_alloc_header+0x26>
 801a564:	4b15      	ldr	r3, [pc, #84]	; (801a5bc <tcp_output_alloc_header+0x70>)
 801a566:	f240 7242 	movw	r2, #1858	; 0x742
 801a56a:	4915      	ldr	r1, [pc, #84]	; (801a5c0 <tcp_output_alloc_header+0x74>)
 801a56c:	4815      	ldr	r0, [pc, #84]	; (801a5c4 <tcp_output_alloc_header+0x78>)
 801a56e:	f003 ff01 	bl	801e374 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	8adb      	ldrh	r3, [r3, #22]
 801a57a:	68fa      	ldr	r2, [r7, #12]
 801a57c:	8b12      	ldrh	r2, [r2, #24]
 801a57e:	68f9      	ldr	r1, [r7, #12]
 801a580:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801a582:	893d      	ldrh	r5, [r7, #8]
 801a584:	897c      	ldrh	r4, [r7, #10]
 801a586:	9103      	str	r1, [sp, #12]
 801a588:	2110      	movs	r1, #16
 801a58a:	9102      	str	r1, [sp, #8]
 801a58c:	9201      	str	r2, [sp, #4]
 801a58e:	9300      	str	r3, [sp, #0]
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	462a      	mov	r2, r5
 801a594:	4621      	mov	r1, r4
 801a596:	f7ff ff67 	bl	801a468 <tcp_output_alloc_header_common>
 801a59a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a59c:	697b      	ldr	r3, [r7, #20]
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d006      	beq.n	801a5b0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5a6:	68fa      	ldr	r2, [r7, #12]
 801a5a8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a5aa:	441a      	add	r2, r3
 801a5ac:	68fb      	ldr	r3, [r7, #12]
 801a5ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801a5b0:	697b      	ldr	r3, [r7, #20]
}
 801a5b2:	4618      	mov	r0, r3
 801a5b4:	3718      	adds	r7, #24
 801a5b6:	46bd      	mov	sp, r7
 801a5b8:	bdb0      	pop	{r4, r5, r7, pc}
 801a5ba:	bf00      	nop
 801a5bc:	08021fac 	.word	0x08021fac
 801a5c0:	080226b4 	.word	0x080226b4
 801a5c4:	08022000 	.word	0x08022000

0801a5c8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b088      	sub	sp, #32
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	60f8      	str	r0, [r7, #12]
 801a5d0:	60b9      	str	r1, [r7, #8]
 801a5d2:	4611      	mov	r1, r2
 801a5d4:	461a      	mov	r2, r3
 801a5d6:	460b      	mov	r3, r1
 801a5d8:	71fb      	strb	r3, [r7, #7]
 801a5da:	4613      	mov	r3, r2
 801a5dc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a5de:	2300      	movs	r3, #0
 801a5e0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a5e2:	68bb      	ldr	r3, [r7, #8]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d106      	bne.n	801a5f6 <tcp_output_fill_options+0x2e>
 801a5e8:	4b13      	ldr	r3, [pc, #76]	; (801a638 <tcp_output_fill_options+0x70>)
 801a5ea:	f240 7256 	movw	r2, #1878	; 0x756
 801a5ee:	4913      	ldr	r1, [pc, #76]	; (801a63c <tcp_output_fill_options+0x74>)
 801a5f0:	4813      	ldr	r0, [pc, #76]	; (801a640 <tcp_output_fill_options+0x78>)
 801a5f2:	f003 febf 	bl	801e374 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a5f6:	68bb      	ldr	r3, [r7, #8]
 801a5f8:	685b      	ldr	r3, [r3, #4]
 801a5fa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a5fc:	69bb      	ldr	r3, [r7, #24]
 801a5fe:	3314      	adds	r3, #20
 801a600:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a602:	69bb      	ldr	r3, [r7, #24]
 801a604:	f103 0214 	add.w	r2, r3, #20
 801a608:	8bfb      	ldrh	r3, [r7, #30]
 801a60a:	009b      	lsls	r3, r3, #2
 801a60c:	4619      	mov	r1, r3
 801a60e:	79fb      	ldrb	r3, [r7, #7]
 801a610:	009b      	lsls	r3, r3, #2
 801a612:	f003 0304 	and.w	r3, r3, #4
 801a616:	440b      	add	r3, r1
 801a618:	4413      	add	r3, r2
 801a61a:	697a      	ldr	r2, [r7, #20]
 801a61c:	429a      	cmp	r2, r3
 801a61e:	d006      	beq.n	801a62e <tcp_output_fill_options+0x66>
 801a620:	4b05      	ldr	r3, [pc, #20]	; (801a638 <tcp_output_fill_options+0x70>)
 801a622:	f240 7275 	movw	r2, #1909	; 0x775
 801a626:	4907      	ldr	r1, [pc, #28]	; (801a644 <tcp_output_fill_options+0x7c>)
 801a628:	4805      	ldr	r0, [pc, #20]	; (801a640 <tcp_output_fill_options+0x78>)
 801a62a:	f003 fea3 	bl	801e374 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a62e:	bf00      	nop
 801a630:	3720      	adds	r7, #32
 801a632:	46bd      	mov	sp, r7
 801a634:	bd80      	pop	{r7, pc}
 801a636:	bf00      	nop
 801a638:	08021fac 	.word	0x08021fac
 801a63c:	080226dc 	.word	0x080226dc
 801a640:	08022000 	.word	0x08022000
 801a644:	080225d4 	.word	0x080225d4

0801a648 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a648:	b580      	push	{r7, lr}
 801a64a:	b08a      	sub	sp, #40	; 0x28
 801a64c:	af04      	add	r7, sp, #16
 801a64e:	60f8      	str	r0, [r7, #12]
 801a650:	60b9      	str	r1, [r7, #8]
 801a652:	607a      	str	r2, [r7, #4]
 801a654:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a656:	68bb      	ldr	r3, [r7, #8]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d106      	bne.n	801a66a <tcp_output_control_segment+0x22>
 801a65c:	4b1c      	ldr	r3, [pc, #112]	; (801a6d0 <tcp_output_control_segment+0x88>)
 801a65e:	f240 7287 	movw	r2, #1927	; 0x787
 801a662:	491c      	ldr	r1, [pc, #112]	; (801a6d4 <tcp_output_control_segment+0x8c>)
 801a664:	481c      	ldr	r0, [pc, #112]	; (801a6d8 <tcp_output_control_segment+0x90>)
 801a666:	f003 fe85 	bl	801e374 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a66a:	683a      	ldr	r2, [r7, #0]
 801a66c:	6879      	ldr	r1, [r7, #4]
 801a66e:	68f8      	ldr	r0, [r7, #12]
 801a670:	f7fe fae8 	bl	8018c44 <tcp_route>
 801a674:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a676:	693b      	ldr	r3, [r7, #16]
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d102      	bne.n	801a682 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a67c:	23fc      	movs	r3, #252	; 0xfc
 801a67e:	75fb      	strb	r3, [r7, #23]
 801a680:	e01c      	b.n	801a6bc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	2b00      	cmp	r3, #0
 801a686:	d006      	beq.n	801a696 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	7adb      	ldrb	r3, [r3, #11]
 801a68c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	7a9b      	ldrb	r3, [r3, #10]
 801a692:	757b      	strb	r3, [r7, #21]
 801a694:	e003      	b.n	801a69e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a696:	23ff      	movs	r3, #255	; 0xff
 801a698:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a69a:	2300      	movs	r3, #0
 801a69c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a69e:	7dba      	ldrb	r2, [r7, #22]
 801a6a0:	693b      	ldr	r3, [r7, #16]
 801a6a2:	9302      	str	r3, [sp, #8]
 801a6a4:	2306      	movs	r3, #6
 801a6a6:	9301      	str	r3, [sp, #4]
 801a6a8:	7d7b      	ldrb	r3, [r7, #21]
 801a6aa:	9300      	str	r3, [sp, #0]
 801a6ac:	4613      	mov	r3, r2
 801a6ae:	683a      	ldr	r2, [r7, #0]
 801a6b0:	6879      	ldr	r1, [r7, #4]
 801a6b2:	68b8      	ldr	r0, [r7, #8]
 801a6b4:	f002 f8e6 	bl	801c884 <ip4_output_if>
 801a6b8:	4603      	mov	r3, r0
 801a6ba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a6bc:	68b8      	ldr	r0, [r7, #8]
 801a6be:	f7f9 feaf 	bl	8014420 <pbuf_free>
  return err;
 801a6c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	3718      	adds	r7, #24
 801a6ca:	46bd      	mov	sp, r7
 801a6cc:	bd80      	pop	{r7, pc}
 801a6ce:	bf00      	nop
 801a6d0:	08021fac 	.word	0x08021fac
 801a6d4:	08022704 	.word	0x08022704
 801a6d8:	08022000 	.word	0x08022000

0801a6dc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a6dc:	b590      	push	{r4, r7, lr}
 801a6de:	b08b      	sub	sp, #44	; 0x2c
 801a6e0:	af04      	add	r7, sp, #16
 801a6e2:	60f8      	str	r0, [r7, #12]
 801a6e4:	60b9      	str	r1, [r7, #8]
 801a6e6:	607a      	str	r2, [r7, #4]
 801a6e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a6ea:	683b      	ldr	r3, [r7, #0]
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d106      	bne.n	801a6fe <tcp_rst+0x22>
 801a6f0:	4b1f      	ldr	r3, [pc, #124]	; (801a770 <tcp_rst+0x94>)
 801a6f2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a6f6:	491f      	ldr	r1, [pc, #124]	; (801a774 <tcp_rst+0x98>)
 801a6f8:	481f      	ldr	r0, [pc, #124]	; (801a778 <tcp_rst+0x9c>)
 801a6fa:	f003 fe3b 	bl	801e374 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a700:	2b00      	cmp	r3, #0
 801a702:	d106      	bne.n	801a712 <tcp_rst+0x36>
 801a704:	4b1a      	ldr	r3, [pc, #104]	; (801a770 <tcp_rst+0x94>)
 801a706:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a70a:	491c      	ldr	r1, [pc, #112]	; (801a77c <tcp_rst+0xa0>)
 801a70c:	481a      	ldr	r0, [pc, #104]	; (801a778 <tcp_rst+0x9c>)
 801a70e:	f003 fe31 	bl	801e374 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a712:	2300      	movs	r3, #0
 801a714:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a716:	f246 0308 	movw	r3, #24584	; 0x6008
 801a71a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a71c:	7dfb      	ldrb	r3, [r7, #23]
 801a71e:	b29c      	uxth	r4, r3
 801a720:	68b8      	ldr	r0, [r7, #8]
 801a722:	f7f8 f92c 	bl	801297e <lwip_htonl>
 801a726:	4602      	mov	r2, r0
 801a728:	8abb      	ldrh	r3, [r7, #20]
 801a72a:	9303      	str	r3, [sp, #12]
 801a72c:	2314      	movs	r3, #20
 801a72e:	9302      	str	r3, [sp, #8]
 801a730:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a732:	9301      	str	r3, [sp, #4]
 801a734:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a736:	9300      	str	r3, [sp, #0]
 801a738:	4613      	mov	r3, r2
 801a73a:	2200      	movs	r2, #0
 801a73c:	4621      	mov	r1, r4
 801a73e:	6878      	ldr	r0, [r7, #4]
 801a740:	f7ff fe92 	bl	801a468 <tcp_output_alloc_header_common>
 801a744:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a746:	693b      	ldr	r3, [r7, #16]
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d00c      	beq.n	801a766 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a74c:	7dfb      	ldrb	r3, [r7, #23]
 801a74e:	2200      	movs	r2, #0
 801a750:	6939      	ldr	r1, [r7, #16]
 801a752:	68f8      	ldr	r0, [r7, #12]
 801a754:	f7ff ff38 	bl	801a5c8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a75a:	683a      	ldr	r2, [r7, #0]
 801a75c:	6939      	ldr	r1, [r7, #16]
 801a75e:	68f8      	ldr	r0, [r7, #12]
 801a760:	f7ff ff72 	bl	801a648 <tcp_output_control_segment>
 801a764:	e000      	b.n	801a768 <tcp_rst+0x8c>
    return;
 801a766:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a768:	371c      	adds	r7, #28
 801a76a:	46bd      	mov	sp, r7
 801a76c:	bd90      	pop	{r4, r7, pc}
 801a76e:	bf00      	nop
 801a770:	08021fac 	.word	0x08021fac
 801a774:	08022730 	.word	0x08022730
 801a778:	08022000 	.word	0x08022000
 801a77c:	0802274c 	.word	0x0802274c

0801a780 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a780:	b590      	push	{r4, r7, lr}
 801a782:	b087      	sub	sp, #28
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a788:	2300      	movs	r3, #0
 801a78a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a78c:	2300      	movs	r3, #0
 801a78e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d106      	bne.n	801a7a4 <tcp_send_empty_ack+0x24>
 801a796:	4b28      	ldr	r3, [pc, #160]	; (801a838 <tcp_send_empty_ack+0xb8>)
 801a798:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a79c:	4927      	ldr	r1, [pc, #156]	; (801a83c <tcp_send_empty_ack+0xbc>)
 801a79e:	4828      	ldr	r0, [pc, #160]	; (801a840 <tcp_send_empty_ack+0xc0>)
 801a7a0:	f003 fde8 	bl	801e374 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a7a4:	7dfb      	ldrb	r3, [r7, #23]
 801a7a6:	009b      	lsls	r3, r3, #2
 801a7a8:	b2db      	uxtb	r3, r3
 801a7aa:	f003 0304 	and.w	r3, r3, #4
 801a7ae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a7b0:	7d7b      	ldrb	r3, [r7, #21]
 801a7b2:	b29c      	uxth	r4, r3
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	f7f8 f8e0 	bl	801297e <lwip_htonl>
 801a7be:	4603      	mov	r3, r0
 801a7c0:	2200      	movs	r2, #0
 801a7c2:	4621      	mov	r1, r4
 801a7c4:	6878      	ldr	r0, [r7, #4]
 801a7c6:	f7ff fec1 	bl	801a54c <tcp_output_alloc_header>
 801a7ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a7cc:	693b      	ldr	r3, [r7, #16]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d109      	bne.n	801a7e6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	8b5b      	ldrh	r3, [r3, #26]
 801a7d6:	f043 0303 	orr.w	r3, r3, #3
 801a7da:	b29a      	uxth	r2, r3
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a7e0:	f06f 0301 	mvn.w	r3, #1
 801a7e4:	e023      	b.n	801a82e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a7e6:	7dbb      	ldrb	r3, [r7, #22]
 801a7e8:	7dfa      	ldrb	r2, [r7, #23]
 801a7ea:	6939      	ldr	r1, [r7, #16]
 801a7ec:	6878      	ldr	r0, [r7, #4]
 801a7ee:	f7ff feeb 	bl	801a5c8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a7f2:	687a      	ldr	r2, [r7, #4]
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	3304      	adds	r3, #4
 801a7f8:	6939      	ldr	r1, [r7, #16]
 801a7fa:	6878      	ldr	r0, [r7, #4]
 801a7fc:	f7ff ff24 	bl	801a648 <tcp_output_control_segment>
 801a800:	4603      	mov	r3, r0
 801a802:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d007      	beq.n	801a81c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	8b5b      	ldrh	r3, [r3, #26]
 801a810:	f043 0303 	orr.w	r3, r3, #3
 801a814:	b29a      	uxth	r2, r3
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	835a      	strh	r2, [r3, #26]
 801a81a:	e006      	b.n	801a82a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	8b5b      	ldrh	r3, [r3, #26]
 801a820:	f023 0303 	bic.w	r3, r3, #3
 801a824:	b29a      	uxth	r2, r3
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a82e:	4618      	mov	r0, r3
 801a830:	371c      	adds	r7, #28
 801a832:	46bd      	mov	sp, r7
 801a834:	bd90      	pop	{r4, r7, pc}
 801a836:	bf00      	nop
 801a838:	08021fac 	.word	0x08021fac
 801a83c:	08022768 	.word	0x08022768
 801a840:	08022000 	.word	0x08022000

0801a844 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a844:	b590      	push	{r4, r7, lr}
 801a846:	b087      	sub	sp, #28
 801a848:	af00      	add	r7, sp, #0
 801a84a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a84c:	2300      	movs	r3, #0
 801a84e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	2b00      	cmp	r3, #0
 801a854:	d106      	bne.n	801a864 <tcp_keepalive+0x20>
 801a856:	4b18      	ldr	r3, [pc, #96]	; (801a8b8 <tcp_keepalive+0x74>)
 801a858:	f640 0224 	movw	r2, #2084	; 0x824
 801a85c:	4917      	ldr	r1, [pc, #92]	; (801a8bc <tcp_keepalive+0x78>)
 801a85e:	4818      	ldr	r0, [pc, #96]	; (801a8c0 <tcp_keepalive+0x7c>)
 801a860:	f003 fd88 	bl	801e374 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a864:	7dfb      	ldrb	r3, [r7, #23]
 801a866:	b29c      	uxth	r4, r3
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a86c:	3b01      	subs	r3, #1
 801a86e:	4618      	mov	r0, r3
 801a870:	f7f8 f885 	bl	801297e <lwip_htonl>
 801a874:	4603      	mov	r3, r0
 801a876:	2200      	movs	r2, #0
 801a878:	4621      	mov	r1, r4
 801a87a:	6878      	ldr	r0, [r7, #4]
 801a87c:	f7ff fe66 	bl	801a54c <tcp_output_alloc_header>
 801a880:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a882:	693b      	ldr	r3, [r7, #16]
 801a884:	2b00      	cmp	r3, #0
 801a886:	d102      	bne.n	801a88e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a888:	f04f 33ff 	mov.w	r3, #4294967295
 801a88c:	e010      	b.n	801a8b0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a88e:	7dfb      	ldrb	r3, [r7, #23]
 801a890:	2200      	movs	r2, #0
 801a892:	6939      	ldr	r1, [r7, #16]
 801a894:	6878      	ldr	r0, [r7, #4]
 801a896:	f7ff fe97 	bl	801a5c8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a89a:	687a      	ldr	r2, [r7, #4]
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	3304      	adds	r3, #4
 801a8a0:	6939      	ldr	r1, [r7, #16]
 801a8a2:	6878      	ldr	r0, [r7, #4]
 801a8a4:	f7ff fed0 	bl	801a648 <tcp_output_control_segment>
 801a8a8:	4603      	mov	r3, r0
 801a8aa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a8ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	371c      	adds	r7, #28
 801a8b4:	46bd      	mov	sp, r7
 801a8b6:	bd90      	pop	{r4, r7, pc}
 801a8b8:	08021fac 	.word	0x08021fac
 801a8bc:	08022788 	.word	0x08022788
 801a8c0:	08022000 	.word	0x08022000

0801a8c4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a8c4:	b590      	push	{r4, r7, lr}
 801a8c6:	b08b      	sub	sp, #44	; 0x2c
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a8cc:	2300      	movs	r3, #0
 801a8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d106      	bne.n	801a8e6 <tcp_zero_window_probe+0x22>
 801a8d8:	4b4c      	ldr	r3, [pc, #304]	; (801aa0c <tcp_zero_window_probe+0x148>)
 801a8da:	f640 024f 	movw	r2, #2127	; 0x84f
 801a8de:	494c      	ldr	r1, [pc, #304]	; (801aa10 <tcp_zero_window_probe+0x14c>)
 801a8e0:	484c      	ldr	r0, [pc, #304]	; (801aa14 <tcp_zero_window_probe+0x150>)
 801a8e2:	f003 fd47 	bl	801e374 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a8ea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a8ec:	6a3b      	ldr	r3, [r7, #32]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d101      	bne.n	801a8f6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	e086      	b.n	801aa04 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a8fc:	2bff      	cmp	r3, #255	; 0xff
 801a8fe:	d007      	beq.n	801a910 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a906:	3301      	adds	r3, #1
 801a908:	b2da      	uxtb	r2, r3
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a910:	6a3b      	ldr	r3, [r7, #32]
 801a912:	68db      	ldr	r3, [r3, #12]
 801a914:	899b      	ldrh	r3, [r3, #12]
 801a916:	b29b      	uxth	r3, r3
 801a918:	4618      	mov	r0, r3
 801a91a:	f7f8 f81b 	bl	8012954 <lwip_htons>
 801a91e:	4603      	mov	r3, r0
 801a920:	b2db      	uxtb	r3, r3
 801a922:	f003 0301 	and.w	r3, r3, #1
 801a926:	2b00      	cmp	r3, #0
 801a928:	d005      	beq.n	801a936 <tcp_zero_window_probe+0x72>
 801a92a:	6a3b      	ldr	r3, [r7, #32]
 801a92c:	891b      	ldrh	r3, [r3, #8]
 801a92e:	2b00      	cmp	r3, #0
 801a930:	d101      	bne.n	801a936 <tcp_zero_window_probe+0x72>
 801a932:	2301      	movs	r3, #1
 801a934:	e000      	b.n	801a938 <tcp_zero_window_probe+0x74>
 801a936:	2300      	movs	r3, #0
 801a938:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a93a:	7ffb      	ldrb	r3, [r7, #31]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	bf0c      	ite	eq
 801a940:	2301      	moveq	r3, #1
 801a942:	2300      	movne	r3, #0
 801a944:	b2db      	uxtb	r3, r3
 801a946:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a94c:	b299      	uxth	r1, r3
 801a94e:	6a3b      	ldr	r3, [r7, #32]
 801a950:	68db      	ldr	r3, [r3, #12]
 801a952:	685b      	ldr	r3, [r3, #4]
 801a954:	8bba      	ldrh	r2, [r7, #28]
 801a956:	6878      	ldr	r0, [r7, #4]
 801a958:	f7ff fdf8 	bl	801a54c <tcp_output_alloc_header>
 801a95c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a95e:	69bb      	ldr	r3, [r7, #24]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d102      	bne.n	801a96a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a964:	f04f 33ff 	mov.w	r3, #4294967295
 801a968:	e04c      	b.n	801aa04 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a96a:	69bb      	ldr	r3, [r7, #24]
 801a96c:	685b      	ldr	r3, [r3, #4]
 801a96e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a970:	7ffb      	ldrb	r3, [r7, #31]
 801a972:	2b00      	cmp	r3, #0
 801a974:	d011      	beq.n	801a99a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a976:	697b      	ldr	r3, [r7, #20]
 801a978:	899b      	ldrh	r3, [r3, #12]
 801a97a:	b29b      	uxth	r3, r3
 801a97c:	b21b      	sxth	r3, r3
 801a97e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a982:	b21c      	sxth	r4, r3
 801a984:	2011      	movs	r0, #17
 801a986:	f7f7 ffe5 	bl	8012954 <lwip_htons>
 801a98a:	4603      	mov	r3, r0
 801a98c:	b21b      	sxth	r3, r3
 801a98e:	4323      	orrs	r3, r4
 801a990:	b21b      	sxth	r3, r3
 801a992:	b29a      	uxth	r2, r3
 801a994:	697b      	ldr	r3, [r7, #20]
 801a996:	819a      	strh	r2, [r3, #12]
 801a998:	e010      	b.n	801a9bc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a99a:	69bb      	ldr	r3, [r7, #24]
 801a99c:	685b      	ldr	r3, [r3, #4]
 801a99e:	3314      	adds	r3, #20
 801a9a0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a9a2:	6a3b      	ldr	r3, [r7, #32]
 801a9a4:	6858      	ldr	r0, [r3, #4]
 801a9a6:	6a3b      	ldr	r3, [r7, #32]
 801a9a8:	685b      	ldr	r3, [r3, #4]
 801a9aa:	891a      	ldrh	r2, [r3, #8]
 801a9ac:	6a3b      	ldr	r3, [r7, #32]
 801a9ae:	891b      	ldrh	r3, [r3, #8]
 801a9b0:	1ad3      	subs	r3, r2, r3
 801a9b2:	b29b      	uxth	r3, r3
 801a9b4:	2201      	movs	r2, #1
 801a9b6:	6939      	ldr	r1, [r7, #16]
 801a9b8:	f7f9 ff28 	bl	801480c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a9bc:	6a3b      	ldr	r3, [r7, #32]
 801a9be:	68db      	ldr	r3, [r3, #12]
 801a9c0:	685b      	ldr	r3, [r3, #4]
 801a9c2:	4618      	mov	r0, r3
 801a9c4:	f7f7 ffdb 	bl	801297e <lwip_htonl>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	3301      	adds	r3, #1
 801a9cc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	1ad3      	subs	r3, r2, r3
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	da02      	bge.n	801a9e0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	68fa      	ldr	r2, [r7, #12]
 801a9de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9e4:	2200      	movs	r2, #0
 801a9e6:	69b9      	ldr	r1, [r7, #24]
 801a9e8:	6878      	ldr	r0, [r7, #4]
 801a9ea:	f7ff fded 	bl	801a5c8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a9ee:	687a      	ldr	r2, [r7, #4]
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	3304      	adds	r3, #4
 801a9f4:	69b9      	ldr	r1, [r7, #24]
 801a9f6:	6878      	ldr	r0, [r7, #4]
 801a9f8:	f7ff fe26 	bl	801a648 <tcp_output_control_segment>
 801a9fc:	4603      	mov	r3, r0
 801a9fe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801aa00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801aa04:	4618      	mov	r0, r3
 801aa06:	372c      	adds	r7, #44	; 0x2c
 801aa08:	46bd      	mov	sp, r7
 801aa0a:	bd90      	pop	{r4, r7, pc}
 801aa0c:	08021fac 	.word	0x08021fac
 801aa10:	080227a4 	.word	0x080227a4
 801aa14:	08022000 	.word	0x08022000

0801aa18 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801aa18:	b580      	push	{r7, lr}
 801aa1a:	b082      	sub	sp, #8
 801aa1c:	af00      	add	r7, sp, #0
 801aa1e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801aa20:	f7f9 ffe2 	bl	80149e8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801aa24:	4b0a      	ldr	r3, [pc, #40]	; (801aa50 <tcpip_tcp_timer+0x38>)
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d103      	bne.n	801aa34 <tcpip_tcp_timer+0x1c>
 801aa2c:	4b09      	ldr	r3, [pc, #36]	; (801aa54 <tcpip_tcp_timer+0x3c>)
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d005      	beq.n	801aa40 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801aa34:	2200      	movs	r2, #0
 801aa36:	4908      	ldr	r1, [pc, #32]	; (801aa58 <tcpip_tcp_timer+0x40>)
 801aa38:	20fa      	movs	r0, #250	; 0xfa
 801aa3a:	f000 f8f3 	bl	801ac24 <sys_timeout>
 801aa3e:	e003      	b.n	801aa48 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801aa40:	4b06      	ldr	r3, [pc, #24]	; (801aa5c <tcpip_tcp_timer+0x44>)
 801aa42:	2200      	movs	r2, #0
 801aa44:	601a      	str	r2, [r3, #0]
  }
}
 801aa46:	bf00      	nop
 801aa48:	bf00      	nop
 801aa4a:	3708      	adds	r7, #8
 801aa4c:	46bd      	mov	sp, r7
 801aa4e:	bd80      	pop	{r7, pc}
 801aa50:	2000f9c0 	.word	0x2000f9c0
 801aa54:	2000f9c4 	.word	0x2000f9c4
 801aa58:	0801aa19 	.word	0x0801aa19
 801aa5c:	2000fa0c 	.word	0x2000fa0c

0801aa60 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801aa60:	b580      	push	{r7, lr}
 801aa62:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801aa64:	4b0a      	ldr	r3, [pc, #40]	; (801aa90 <tcp_timer_needed+0x30>)
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d10f      	bne.n	801aa8c <tcp_timer_needed+0x2c>
 801aa6c:	4b09      	ldr	r3, [pc, #36]	; (801aa94 <tcp_timer_needed+0x34>)
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d103      	bne.n	801aa7c <tcp_timer_needed+0x1c>
 801aa74:	4b08      	ldr	r3, [pc, #32]	; (801aa98 <tcp_timer_needed+0x38>)
 801aa76:	681b      	ldr	r3, [r3, #0]
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d007      	beq.n	801aa8c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801aa7c:	4b04      	ldr	r3, [pc, #16]	; (801aa90 <tcp_timer_needed+0x30>)
 801aa7e:	2201      	movs	r2, #1
 801aa80:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801aa82:	2200      	movs	r2, #0
 801aa84:	4905      	ldr	r1, [pc, #20]	; (801aa9c <tcp_timer_needed+0x3c>)
 801aa86:	20fa      	movs	r0, #250	; 0xfa
 801aa88:	f000 f8cc 	bl	801ac24 <sys_timeout>
  }
}
 801aa8c:	bf00      	nop
 801aa8e:	bd80      	pop	{r7, pc}
 801aa90:	2000fa0c 	.word	0x2000fa0c
 801aa94:	2000f9c0 	.word	0x2000f9c0
 801aa98:	2000f9c4 	.word	0x2000f9c4
 801aa9c:	0801aa19 	.word	0x0801aa19

0801aaa0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b086      	sub	sp, #24
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	60f8      	str	r0, [r7, #12]
 801aaa8:	60b9      	str	r1, [r7, #8]
 801aaaa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801aaac:	200a      	movs	r0, #10
 801aaae:	f7f8 fc29 	bl	8013304 <memp_malloc>
 801aab2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801aab4:	693b      	ldr	r3, [r7, #16]
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d109      	bne.n	801aace <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801aaba:	693b      	ldr	r3, [r7, #16]
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d151      	bne.n	801ab64 <sys_timeout_abs+0xc4>
 801aac0:	4b2a      	ldr	r3, [pc, #168]	; (801ab6c <sys_timeout_abs+0xcc>)
 801aac2:	22be      	movs	r2, #190	; 0xbe
 801aac4:	492a      	ldr	r1, [pc, #168]	; (801ab70 <sys_timeout_abs+0xd0>)
 801aac6:	482b      	ldr	r0, [pc, #172]	; (801ab74 <sys_timeout_abs+0xd4>)
 801aac8:	f003 fc54 	bl	801e374 <iprintf>
    return;
 801aacc:	e04a      	b.n	801ab64 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801aace:	693b      	ldr	r3, [r7, #16]
 801aad0:	2200      	movs	r2, #0
 801aad2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801aad4:	693b      	ldr	r3, [r7, #16]
 801aad6:	68ba      	ldr	r2, [r7, #8]
 801aad8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801aada:	693b      	ldr	r3, [r7, #16]
 801aadc:	687a      	ldr	r2, [r7, #4]
 801aade:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801aae0:	693b      	ldr	r3, [r7, #16]
 801aae2:	68fa      	ldr	r2, [r7, #12]
 801aae4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801aae6:	4b24      	ldr	r3, [pc, #144]	; (801ab78 <sys_timeout_abs+0xd8>)
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d103      	bne.n	801aaf6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801aaee:	4a22      	ldr	r2, [pc, #136]	; (801ab78 <sys_timeout_abs+0xd8>)
 801aaf0:	693b      	ldr	r3, [r7, #16]
 801aaf2:	6013      	str	r3, [r2, #0]
    return;
 801aaf4:	e037      	b.n	801ab66 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801aaf6:	693b      	ldr	r3, [r7, #16]
 801aaf8:	685a      	ldr	r2, [r3, #4]
 801aafa:	4b1f      	ldr	r3, [pc, #124]	; (801ab78 <sys_timeout_abs+0xd8>)
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	685b      	ldr	r3, [r3, #4]
 801ab00:	1ad3      	subs	r3, r2, r3
 801ab02:	0fdb      	lsrs	r3, r3, #31
 801ab04:	f003 0301 	and.w	r3, r3, #1
 801ab08:	b2db      	uxtb	r3, r3
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d007      	beq.n	801ab1e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801ab0e:	4b1a      	ldr	r3, [pc, #104]	; (801ab78 <sys_timeout_abs+0xd8>)
 801ab10:	681a      	ldr	r2, [r3, #0]
 801ab12:	693b      	ldr	r3, [r7, #16]
 801ab14:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801ab16:	4a18      	ldr	r2, [pc, #96]	; (801ab78 <sys_timeout_abs+0xd8>)
 801ab18:	693b      	ldr	r3, [r7, #16]
 801ab1a:	6013      	str	r3, [r2, #0]
 801ab1c:	e023      	b.n	801ab66 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801ab1e:	4b16      	ldr	r3, [pc, #88]	; (801ab78 <sys_timeout_abs+0xd8>)
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	617b      	str	r3, [r7, #20]
 801ab24:	e01a      	b.n	801ab5c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801ab26:	697b      	ldr	r3, [r7, #20]
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d00b      	beq.n	801ab46 <sys_timeout_abs+0xa6>
 801ab2e:	693b      	ldr	r3, [r7, #16]
 801ab30:	685a      	ldr	r2, [r3, #4]
 801ab32:	697b      	ldr	r3, [r7, #20]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	685b      	ldr	r3, [r3, #4]
 801ab38:	1ad3      	subs	r3, r2, r3
 801ab3a:	0fdb      	lsrs	r3, r3, #31
 801ab3c:	f003 0301 	and.w	r3, r3, #1
 801ab40:	b2db      	uxtb	r3, r3
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d007      	beq.n	801ab56 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801ab46:	697b      	ldr	r3, [r7, #20]
 801ab48:	681a      	ldr	r2, [r3, #0]
 801ab4a:	693b      	ldr	r3, [r7, #16]
 801ab4c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801ab4e:	697b      	ldr	r3, [r7, #20]
 801ab50:	693a      	ldr	r2, [r7, #16]
 801ab52:	601a      	str	r2, [r3, #0]
        break;
 801ab54:	e007      	b.n	801ab66 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801ab56:	697b      	ldr	r3, [r7, #20]
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	617b      	str	r3, [r7, #20]
 801ab5c:	697b      	ldr	r3, [r7, #20]
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d1e1      	bne.n	801ab26 <sys_timeout_abs+0x86>
 801ab62:	e000      	b.n	801ab66 <sys_timeout_abs+0xc6>
    return;
 801ab64:	bf00      	nop
      }
    }
  }
}
 801ab66:	3718      	adds	r7, #24
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	bd80      	pop	{r7, pc}
 801ab6c:	080227c8 	.word	0x080227c8
 801ab70:	080227fc 	.word	0x080227fc
 801ab74:	0802283c 	.word	0x0802283c
 801ab78:	2000fa04 	.word	0x2000fa04

0801ab7c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b086      	sub	sp, #24
 801ab80:	af00      	add	r7, sp, #0
 801ab82:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801ab88:	697b      	ldr	r3, [r7, #20]
 801ab8a:	685b      	ldr	r3, [r3, #4]
 801ab8c:	4798      	blx	r3

  now = sys_now();
 801ab8e:	f7f2 f989 	bl	800cea4 <sys_now>
 801ab92:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801ab94:	697b      	ldr	r3, [r7, #20]
 801ab96:	681a      	ldr	r2, [r3, #0]
 801ab98:	4b0f      	ldr	r3, [pc, #60]	; (801abd8 <lwip_cyclic_timer+0x5c>)
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	4413      	add	r3, r2
 801ab9e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801aba0:	68fa      	ldr	r2, [r7, #12]
 801aba2:	693b      	ldr	r3, [r7, #16]
 801aba4:	1ad3      	subs	r3, r2, r3
 801aba6:	0fdb      	lsrs	r3, r3, #31
 801aba8:	f003 0301 	and.w	r3, r3, #1
 801abac:	b2db      	uxtb	r3, r3
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d009      	beq.n	801abc6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801abb2:	697b      	ldr	r3, [r7, #20]
 801abb4:	681a      	ldr	r2, [r3, #0]
 801abb6:	693b      	ldr	r3, [r7, #16]
 801abb8:	4413      	add	r3, r2
 801abba:	687a      	ldr	r2, [r7, #4]
 801abbc:	4907      	ldr	r1, [pc, #28]	; (801abdc <lwip_cyclic_timer+0x60>)
 801abbe:	4618      	mov	r0, r3
 801abc0:	f7ff ff6e 	bl	801aaa0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801abc4:	e004      	b.n	801abd0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801abc6:	687a      	ldr	r2, [r7, #4]
 801abc8:	4904      	ldr	r1, [pc, #16]	; (801abdc <lwip_cyclic_timer+0x60>)
 801abca:	68f8      	ldr	r0, [r7, #12]
 801abcc:	f7ff ff68 	bl	801aaa0 <sys_timeout_abs>
}
 801abd0:	bf00      	nop
 801abd2:	3718      	adds	r7, #24
 801abd4:	46bd      	mov	sp, r7
 801abd6:	bd80      	pop	{r7, pc}
 801abd8:	2000fa08 	.word	0x2000fa08
 801abdc:	0801ab7d 	.word	0x0801ab7d

0801abe0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b082      	sub	sp, #8
 801abe4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801abe6:	2301      	movs	r3, #1
 801abe8:	607b      	str	r3, [r7, #4]
 801abea:	e00e      	b.n	801ac0a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801abec:	4a0b      	ldr	r2, [pc, #44]	; (801ac1c <sys_timeouts_init+0x3c>)
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	00db      	lsls	r3, r3, #3
 801abf8:	4a08      	ldr	r2, [pc, #32]	; (801ac1c <sys_timeouts_init+0x3c>)
 801abfa:	4413      	add	r3, r2
 801abfc:	461a      	mov	r2, r3
 801abfe:	4908      	ldr	r1, [pc, #32]	; (801ac20 <sys_timeouts_init+0x40>)
 801ac00:	f000 f810 	bl	801ac24 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	3301      	adds	r3, #1
 801ac08:	607b      	str	r3, [r7, #4]
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	2b02      	cmp	r3, #2
 801ac0e:	d9ed      	bls.n	801abec <sys_timeouts_init+0xc>
  }
}
 801ac10:	bf00      	nop
 801ac12:	bf00      	nop
 801ac14:	3708      	adds	r7, #8
 801ac16:	46bd      	mov	sp, r7
 801ac18:	bd80      	pop	{r7, pc}
 801ac1a:	bf00      	nop
 801ac1c:	080234c4 	.word	0x080234c4
 801ac20:	0801ab7d 	.word	0x0801ab7d

0801ac24 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801ac24:	b580      	push	{r7, lr}
 801ac26:	b086      	sub	sp, #24
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	60f8      	str	r0, [r7, #12]
 801ac2c:	60b9      	str	r1, [r7, #8]
 801ac2e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ac36:	d306      	bcc.n	801ac46 <sys_timeout+0x22>
 801ac38:	4b0a      	ldr	r3, [pc, #40]	; (801ac64 <sys_timeout+0x40>)
 801ac3a:	f240 1229 	movw	r2, #297	; 0x129
 801ac3e:	490a      	ldr	r1, [pc, #40]	; (801ac68 <sys_timeout+0x44>)
 801ac40:	480a      	ldr	r0, [pc, #40]	; (801ac6c <sys_timeout+0x48>)
 801ac42:	f003 fb97 	bl	801e374 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ac46:	f7f2 f92d 	bl	800cea4 <sys_now>
 801ac4a:	4602      	mov	r2, r0
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	4413      	add	r3, r2
 801ac50:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ac52:	687a      	ldr	r2, [r7, #4]
 801ac54:	68b9      	ldr	r1, [r7, #8]
 801ac56:	6978      	ldr	r0, [r7, #20]
 801ac58:	f7ff ff22 	bl	801aaa0 <sys_timeout_abs>
#endif
}
 801ac5c:	bf00      	nop
 801ac5e:	3718      	adds	r7, #24
 801ac60:	46bd      	mov	sp, r7
 801ac62:	bd80      	pop	{r7, pc}
 801ac64:	080227c8 	.word	0x080227c8
 801ac68:	08022864 	.word	0x08022864
 801ac6c:	0802283c 	.word	0x0802283c

0801ac70 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ac70:	b580      	push	{r7, lr}
 801ac72:	b084      	sub	sp, #16
 801ac74:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ac76:	f7f2 f915 	bl	800cea4 <sys_now>
 801ac7a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ac7c:	4b17      	ldr	r3, [pc, #92]	; (801acdc <sys_check_timeouts+0x6c>)
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ac82:	68bb      	ldr	r3, [r7, #8]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d022      	beq.n	801acce <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ac88:	68bb      	ldr	r3, [r7, #8]
 801ac8a:	685b      	ldr	r3, [r3, #4]
 801ac8c:	68fa      	ldr	r2, [r7, #12]
 801ac8e:	1ad3      	subs	r3, r2, r3
 801ac90:	0fdb      	lsrs	r3, r3, #31
 801ac92:	f003 0301 	and.w	r3, r3, #1
 801ac96:	b2db      	uxtb	r3, r3
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d11a      	bne.n	801acd2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801ac9c:	68bb      	ldr	r3, [r7, #8]
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	4a0e      	ldr	r2, [pc, #56]	; (801acdc <sys_check_timeouts+0x6c>)
 801aca2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801aca4:	68bb      	ldr	r3, [r7, #8]
 801aca6:	689b      	ldr	r3, [r3, #8]
 801aca8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801acaa:	68bb      	ldr	r3, [r7, #8]
 801acac:	68db      	ldr	r3, [r3, #12]
 801acae:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801acb0:	68bb      	ldr	r3, [r7, #8]
 801acb2:	685b      	ldr	r3, [r3, #4]
 801acb4:	4a0a      	ldr	r2, [pc, #40]	; (801ace0 <sys_check_timeouts+0x70>)
 801acb6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801acb8:	68b9      	ldr	r1, [r7, #8]
 801acba:	200a      	movs	r0, #10
 801acbc:	f7f8 fb98 	bl	80133f0 <memp_free>
    if (handler != NULL) {
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d0da      	beq.n	801ac7c <sys_check_timeouts+0xc>
      handler(arg);
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	6838      	ldr	r0, [r7, #0]
 801acca:	4798      	blx	r3
  do {
 801accc:	e7d6      	b.n	801ac7c <sys_check_timeouts+0xc>
      return;
 801acce:	bf00      	nop
 801acd0:	e000      	b.n	801acd4 <sys_check_timeouts+0x64>
      return;
 801acd2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801acd4:	3710      	adds	r7, #16
 801acd6:	46bd      	mov	sp, r7
 801acd8:	bd80      	pop	{r7, pc}
 801acda:	bf00      	nop
 801acdc:	2000fa04 	.word	0x2000fa04
 801ace0:	2000fa08 	.word	0x2000fa08

0801ace4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801ace4:	b580      	push	{r7, lr}
 801ace6:	b082      	sub	sp, #8
 801ace8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801acea:	4b16      	ldr	r3, [pc, #88]	; (801ad44 <sys_timeouts_sleeptime+0x60>)
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d102      	bne.n	801acf8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801acf2:	f04f 33ff 	mov.w	r3, #4294967295
 801acf6:	e020      	b.n	801ad3a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801acf8:	f7f2 f8d4 	bl	800cea4 <sys_now>
 801acfc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801acfe:	4b11      	ldr	r3, [pc, #68]	; (801ad44 <sys_timeouts_sleeptime+0x60>)
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	685a      	ldr	r2, [r3, #4]
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	1ad3      	subs	r3, r2, r3
 801ad08:	0fdb      	lsrs	r3, r3, #31
 801ad0a:	f003 0301 	and.w	r3, r3, #1
 801ad0e:	b2db      	uxtb	r3, r3
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d001      	beq.n	801ad18 <sys_timeouts_sleeptime+0x34>
    return 0;
 801ad14:	2300      	movs	r3, #0
 801ad16:	e010      	b.n	801ad3a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801ad18:	4b0a      	ldr	r3, [pc, #40]	; (801ad44 <sys_timeouts_sleeptime+0x60>)
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	685a      	ldr	r2, [r3, #4]
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	1ad3      	subs	r3, r2, r3
 801ad22:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ad24:	683b      	ldr	r3, [r7, #0]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	da06      	bge.n	801ad38 <sys_timeouts_sleeptime+0x54>
 801ad2a:	4b07      	ldr	r3, [pc, #28]	; (801ad48 <sys_timeouts_sleeptime+0x64>)
 801ad2c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ad30:	4906      	ldr	r1, [pc, #24]	; (801ad4c <sys_timeouts_sleeptime+0x68>)
 801ad32:	4807      	ldr	r0, [pc, #28]	; (801ad50 <sys_timeouts_sleeptime+0x6c>)
 801ad34:	f003 fb1e 	bl	801e374 <iprintf>
    return ret;
 801ad38:	683b      	ldr	r3, [r7, #0]
  }
}
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	3708      	adds	r7, #8
 801ad3e:	46bd      	mov	sp, r7
 801ad40:	bd80      	pop	{r7, pc}
 801ad42:	bf00      	nop
 801ad44:	2000fa04 	.word	0x2000fa04
 801ad48:	080227c8 	.word	0x080227c8
 801ad4c:	0802289c 	.word	0x0802289c
 801ad50:	0802283c 	.word	0x0802283c

0801ad54 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ad54:	b580      	push	{r7, lr}
 801ad56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ad58:	f003 fb24 	bl	801e3a4 <rand>
 801ad5c:	4603      	mov	r3, r0
 801ad5e:	b29b      	uxth	r3, r3
 801ad60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ad64:	b29b      	uxth	r3, r3
 801ad66:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ad6a:	b29a      	uxth	r2, r3
 801ad6c:	4b01      	ldr	r3, [pc, #4]	; (801ad74 <udp_init+0x20>)
 801ad6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ad70:	bf00      	nop
 801ad72:	bd80      	pop	{r7, pc}
 801ad74:	2000002c 	.word	0x2000002c

0801ad78 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ad78:	b480      	push	{r7}
 801ad7a:	b083      	sub	sp, #12
 801ad7c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ad7e:	2300      	movs	r3, #0
 801ad80:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ad82:	4b17      	ldr	r3, [pc, #92]	; (801ade0 <udp_new_port+0x68>)
 801ad84:	881b      	ldrh	r3, [r3, #0]
 801ad86:	1c5a      	adds	r2, r3, #1
 801ad88:	b291      	uxth	r1, r2
 801ad8a:	4a15      	ldr	r2, [pc, #84]	; (801ade0 <udp_new_port+0x68>)
 801ad8c:	8011      	strh	r1, [r2, #0]
 801ad8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ad92:	4293      	cmp	r3, r2
 801ad94:	d103      	bne.n	801ad9e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ad96:	4b12      	ldr	r3, [pc, #72]	; (801ade0 <udp_new_port+0x68>)
 801ad98:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ad9c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad9e:	4b11      	ldr	r3, [pc, #68]	; (801ade4 <udp_new_port+0x6c>)
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	603b      	str	r3, [r7, #0]
 801ada4:	e011      	b.n	801adca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ada6:	683b      	ldr	r3, [r7, #0]
 801ada8:	8a5a      	ldrh	r2, [r3, #18]
 801adaa:	4b0d      	ldr	r3, [pc, #52]	; (801ade0 <udp_new_port+0x68>)
 801adac:	881b      	ldrh	r3, [r3, #0]
 801adae:	429a      	cmp	r2, r3
 801adb0:	d108      	bne.n	801adc4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801adb2:	88fb      	ldrh	r3, [r7, #6]
 801adb4:	3301      	adds	r3, #1
 801adb6:	80fb      	strh	r3, [r7, #6]
 801adb8:	88fb      	ldrh	r3, [r7, #6]
 801adba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801adbe:	d3e0      	bcc.n	801ad82 <udp_new_port+0xa>
        return 0;
 801adc0:	2300      	movs	r3, #0
 801adc2:	e007      	b.n	801add4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801adc4:	683b      	ldr	r3, [r7, #0]
 801adc6:	68db      	ldr	r3, [r3, #12]
 801adc8:	603b      	str	r3, [r7, #0]
 801adca:	683b      	ldr	r3, [r7, #0]
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d1ea      	bne.n	801ada6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801add0:	4b03      	ldr	r3, [pc, #12]	; (801ade0 <udp_new_port+0x68>)
 801add2:	881b      	ldrh	r3, [r3, #0]
}
 801add4:	4618      	mov	r0, r3
 801add6:	370c      	adds	r7, #12
 801add8:	46bd      	mov	sp, r7
 801adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adde:	4770      	bx	lr
 801ade0:	2000002c 	.word	0x2000002c
 801ade4:	2000fa10 	.word	0x2000fa10

0801ade8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801ade8:	b580      	push	{r7, lr}
 801adea:	b084      	sub	sp, #16
 801adec:	af00      	add	r7, sp, #0
 801adee:	60f8      	str	r0, [r7, #12]
 801adf0:	60b9      	str	r1, [r7, #8]
 801adf2:	4613      	mov	r3, r2
 801adf4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d105      	bne.n	801ae08 <udp_input_local_match+0x20>
 801adfc:	4b27      	ldr	r3, [pc, #156]	; (801ae9c <udp_input_local_match+0xb4>)
 801adfe:	2287      	movs	r2, #135	; 0x87
 801ae00:	4927      	ldr	r1, [pc, #156]	; (801aea0 <udp_input_local_match+0xb8>)
 801ae02:	4828      	ldr	r0, [pc, #160]	; (801aea4 <udp_input_local_match+0xbc>)
 801ae04:	f003 fab6 	bl	801e374 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ae08:	68bb      	ldr	r3, [r7, #8]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d105      	bne.n	801ae1a <udp_input_local_match+0x32>
 801ae0e:	4b23      	ldr	r3, [pc, #140]	; (801ae9c <udp_input_local_match+0xb4>)
 801ae10:	2288      	movs	r2, #136	; 0x88
 801ae12:	4925      	ldr	r1, [pc, #148]	; (801aea8 <udp_input_local_match+0xc0>)
 801ae14:	4823      	ldr	r0, [pc, #140]	; (801aea4 <udp_input_local_match+0xbc>)
 801ae16:	f003 faad 	bl	801e374 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	7a1b      	ldrb	r3, [r3, #8]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d00b      	beq.n	801ae3a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ae22:	68fb      	ldr	r3, [r7, #12]
 801ae24:	7a1a      	ldrb	r2, [r3, #8]
 801ae26:	4b21      	ldr	r3, [pc, #132]	; (801aeac <udp_input_local_match+0xc4>)
 801ae28:	685b      	ldr	r3, [r3, #4]
 801ae2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ae2e:	3301      	adds	r3, #1
 801ae30:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ae32:	429a      	cmp	r2, r3
 801ae34:	d001      	beq.n	801ae3a <udp_input_local_match+0x52>
    return 0;
 801ae36:	2300      	movs	r3, #0
 801ae38:	e02b      	b.n	801ae92 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801ae3a:	79fb      	ldrb	r3, [r7, #7]
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d018      	beq.n	801ae72 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ae40:	68fb      	ldr	r3, [r7, #12]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d013      	beq.n	801ae6e <udp_input_local_match+0x86>
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d00f      	beq.n	801ae6e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ae4e:	4b17      	ldr	r3, [pc, #92]	; (801aeac <udp_input_local_match+0xc4>)
 801ae50:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ae52:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae56:	d00a      	beq.n	801ae6e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ae58:	68fb      	ldr	r3, [r7, #12]
 801ae5a:	681a      	ldr	r2, [r3, #0]
 801ae5c:	4b13      	ldr	r3, [pc, #76]	; (801aeac <udp_input_local_match+0xc4>)
 801ae5e:	695b      	ldr	r3, [r3, #20]
 801ae60:	405a      	eors	r2, r3
 801ae62:	68bb      	ldr	r3, [r7, #8]
 801ae64:	3308      	adds	r3, #8
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d110      	bne.n	801ae90 <udp_input_local_match+0xa8>
          return 1;
 801ae6e:	2301      	movs	r3, #1
 801ae70:	e00f      	b.n	801ae92 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ae72:	68fb      	ldr	r3, [r7, #12]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d009      	beq.n	801ae8c <udp_input_local_match+0xa4>
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d005      	beq.n	801ae8c <udp_input_local_match+0xa4>
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	681a      	ldr	r2, [r3, #0]
 801ae84:	4b09      	ldr	r3, [pc, #36]	; (801aeac <udp_input_local_match+0xc4>)
 801ae86:	695b      	ldr	r3, [r3, #20]
 801ae88:	429a      	cmp	r2, r3
 801ae8a:	d101      	bne.n	801ae90 <udp_input_local_match+0xa8>
        return 1;
 801ae8c:	2301      	movs	r3, #1
 801ae8e:	e000      	b.n	801ae92 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801ae90:	2300      	movs	r3, #0
}
 801ae92:	4618      	mov	r0, r3
 801ae94:	3710      	adds	r7, #16
 801ae96:	46bd      	mov	sp, r7
 801ae98:	bd80      	pop	{r7, pc}
 801ae9a:	bf00      	nop
 801ae9c:	080228b0 	.word	0x080228b0
 801aea0:	080228e0 	.word	0x080228e0
 801aea4:	08022904 	.word	0x08022904
 801aea8:	0802292c 	.word	0x0802292c
 801aeac:	2000a06c 	.word	0x2000a06c

0801aeb0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801aeb0:	b590      	push	{r4, r7, lr}
 801aeb2:	b08d      	sub	sp, #52	; 0x34
 801aeb4:	af02      	add	r7, sp, #8
 801aeb6:	6078      	str	r0, [r7, #4]
 801aeb8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801aeba:	2300      	movs	r3, #0
 801aebc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d105      	bne.n	801aed0 <udp_input+0x20>
 801aec4:	4b7c      	ldr	r3, [pc, #496]	; (801b0b8 <udp_input+0x208>)
 801aec6:	22cf      	movs	r2, #207	; 0xcf
 801aec8:	497c      	ldr	r1, [pc, #496]	; (801b0bc <udp_input+0x20c>)
 801aeca:	487d      	ldr	r0, [pc, #500]	; (801b0c0 <udp_input+0x210>)
 801aecc:	f003 fa52 	bl	801e374 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801aed0:	683b      	ldr	r3, [r7, #0]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d105      	bne.n	801aee2 <udp_input+0x32>
 801aed6:	4b78      	ldr	r3, [pc, #480]	; (801b0b8 <udp_input+0x208>)
 801aed8:	22d0      	movs	r2, #208	; 0xd0
 801aeda:	497a      	ldr	r1, [pc, #488]	; (801b0c4 <udp_input+0x214>)
 801aedc:	4878      	ldr	r0, [pc, #480]	; (801b0c0 <udp_input+0x210>)
 801aede:	f003 fa49 	bl	801e374 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	895b      	ldrh	r3, [r3, #10]
 801aee6:	2b07      	cmp	r3, #7
 801aee8:	d803      	bhi.n	801aef2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801aeea:	6878      	ldr	r0, [r7, #4]
 801aeec:	f7f9 fa98 	bl	8014420 <pbuf_free>
    goto end;
 801aef0:	e0de      	b.n	801b0b0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	685b      	ldr	r3, [r3, #4]
 801aef6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801aef8:	4b73      	ldr	r3, [pc, #460]	; (801b0c8 <udp_input+0x218>)
 801aefa:	695b      	ldr	r3, [r3, #20]
 801aefc:	4a72      	ldr	r2, [pc, #456]	; (801b0c8 <udp_input+0x218>)
 801aefe:	6812      	ldr	r2, [r2, #0]
 801af00:	4611      	mov	r1, r2
 801af02:	4618      	mov	r0, r3
 801af04:	f001 fda4 	bl	801ca50 <ip4_addr_isbroadcast_u32>
 801af08:	4603      	mov	r3, r0
 801af0a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801af0c:	697b      	ldr	r3, [r7, #20]
 801af0e:	881b      	ldrh	r3, [r3, #0]
 801af10:	b29b      	uxth	r3, r3
 801af12:	4618      	mov	r0, r3
 801af14:	f7f7 fd1e 	bl	8012954 <lwip_htons>
 801af18:	4603      	mov	r3, r0
 801af1a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801af1c:	697b      	ldr	r3, [r7, #20]
 801af1e:	885b      	ldrh	r3, [r3, #2]
 801af20:	b29b      	uxth	r3, r3
 801af22:	4618      	mov	r0, r3
 801af24:	f7f7 fd16 	bl	8012954 <lwip_htons>
 801af28:	4603      	mov	r3, r0
 801af2a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801af2c:	2300      	movs	r3, #0
 801af2e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801af30:	2300      	movs	r3, #0
 801af32:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801af34:	2300      	movs	r3, #0
 801af36:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801af38:	4b64      	ldr	r3, [pc, #400]	; (801b0cc <udp_input+0x21c>)
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	627b      	str	r3, [r7, #36]	; 0x24
 801af3e:	e054      	b.n	801afea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af42:	8a5b      	ldrh	r3, [r3, #18]
 801af44:	89fa      	ldrh	r2, [r7, #14]
 801af46:	429a      	cmp	r2, r3
 801af48:	d14a      	bne.n	801afe0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801af4a:	7cfb      	ldrb	r3, [r7, #19]
 801af4c:	461a      	mov	r2, r3
 801af4e:	6839      	ldr	r1, [r7, #0]
 801af50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801af52:	f7ff ff49 	bl	801ade8 <udp_input_local_match>
 801af56:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d041      	beq.n	801afe0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af5e:	7c1b      	ldrb	r3, [r3, #16]
 801af60:	f003 0304 	and.w	r3, r3, #4
 801af64:	2b00      	cmp	r3, #0
 801af66:	d11d      	bne.n	801afa4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801af68:	69fb      	ldr	r3, [r7, #28]
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d102      	bne.n	801af74 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801af6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af70:	61fb      	str	r3, [r7, #28]
 801af72:	e017      	b.n	801afa4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801af74:	7cfb      	ldrb	r3, [r7, #19]
 801af76:	2b00      	cmp	r3, #0
 801af78:	d014      	beq.n	801afa4 <udp_input+0xf4>
 801af7a:	4b53      	ldr	r3, [pc, #332]	; (801b0c8 <udp_input+0x218>)
 801af7c:	695b      	ldr	r3, [r3, #20]
 801af7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af82:	d10f      	bne.n	801afa4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801af84:	69fb      	ldr	r3, [r7, #28]
 801af86:	681a      	ldr	r2, [r3, #0]
 801af88:	683b      	ldr	r3, [r7, #0]
 801af8a:	3304      	adds	r3, #4
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	429a      	cmp	r2, r3
 801af90:	d008      	beq.n	801afa4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801af92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af94:	681a      	ldr	r2, [r3, #0]
 801af96:	683b      	ldr	r3, [r7, #0]
 801af98:	3304      	adds	r3, #4
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	429a      	cmp	r2, r3
 801af9e:	d101      	bne.n	801afa4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afa2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afa6:	8a9b      	ldrh	r3, [r3, #20]
 801afa8:	8a3a      	ldrh	r2, [r7, #16]
 801afaa:	429a      	cmp	r2, r3
 801afac:	d118      	bne.n	801afe0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801afae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afb0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d005      	beq.n	801afc2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801afb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afb8:	685a      	ldr	r2, [r3, #4]
 801afba:	4b43      	ldr	r3, [pc, #268]	; (801b0c8 <udp_input+0x218>)
 801afbc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801afbe:	429a      	cmp	r2, r3
 801afc0:	d10e      	bne.n	801afe0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801afc2:	6a3b      	ldr	r3, [r7, #32]
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d014      	beq.n	801aff2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afca:	68da      	ldr	r2, [r3, #12]
 801afcc:	6a3b      	ldr	r3, [r7, #32]
 801afce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801afd0:	4b3e      	ldr	r3, [pc, #248]	; (801b0cc <udp_input+0x21c>)
 801afd2:	681a      	ldr	r2, [r3, #0]
 801afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afd6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801afd8:	4a3c      	ldr	r2, [pc, #240]	; (801b0cc <udp_input+0x21c>)
 801afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afdc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801afde:	e008      	b.n	801aff2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afe2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afe6:	68db      	ldr	r3, [r3, #12]
 801afe8:	627b      	str	r3, [r7, #36]	; 0x24
 801afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afec:	2b00      	cmp	r3, #0
 801afee:	d1a7      	bne.n	801af40 <udp_input+0x90>
 801aff0:	e000      	b.n	801aff4 <udp_input+0x144>
        break;
 801aff2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d101      	bne.n	801affe <udp_input+0x14e>
    pcb = uncon_pcb;
 801affa:	69fb      	ldr	r3, [r7, #28]
 801affc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b000:	2b00      	cmp	r3, #0
 801b002:	d002      	beq.n	801b00a <udp_input+0x15a>
    for_us = 1;
 801b004:	2301      	movs	r3, #1
 801b006:	76fb      	strb	r3, [r7, #27]
 801b008:	e00a      	b.n	801b020 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b00a:	683b      	ldr	r3, [r7, #0]
 801b00c:	3304      	adds	r3, #4
 801b00e:	681a      	ldr	r2, [r3, #0]
 801b010:	4b2d      	ldr	r3, [pc, #180]	; (801b0c8 <udp_input+0x218>)
 801b012:	695b      	ldr	r3, [r3, #20]
 801b014:	429a      	cmp	r2, r3
 801b016:	bf0c      	ite	eq
 801b018:	2301      	moveq	r3, #1
 801b01a:	2300      	movne	r3, #0
 801b01c:	b2db      	uxtb	r3, r3
 801b01e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b020:	7efb      	ldrb	r3, [r7, #27]
 801b022:	2b00      	cmp	r3, #0
 801b024:	d041      	beq.n	801b0aa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b026:	2108      	movs	r1, #8
 801b028:	6878      	ldr	r0, [r7, #4]
 801b02a:	f7f9 f973 	bl	8014314 <pbuf_remove_header>
 801b02e:	4603      	mov	r3, r0
 801b030:	2b00      	cmp	r3, #0
 801b032:	d00a      	beq.n	801b04a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b034:	4b20      	ldr	r3, [pc, #128]	; (801b0b8 <udp_input+0x208>)
 801b036:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b03a:	4925      	ldr	r1, [pc, #148]	; (801b0d0 <udp_input+0x220>)
 801b03c:	4820      	ldr	r0, [pc, #128]	; (801b0c0 <udp_input+0x210>)
 801b03e:	f003 f999 	bl	801e374 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b042:	6878      	ldr	r0, [r7, #4]
 801b044:	f7f9 f9ec 	bl	8014420 <pbuf_free>
      goto end;
 801b048:	e032      	b.n	801b0b0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d012      	beq.n	801b076 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b052:	699b      	ldr	r3, [r3, #24]
 801b054:	2b00      	cmp	r3, #0
 801b056:	d00a      	beq.n	801b06e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b05a:	699c      	ldr	r4, [r3, #24]
 801b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b05e:	69d8      	ldr	r0, [r3, #28]
 801b060:	8a3b      	ldrh	r3, [r7, #16]
 801b062:	9300      	str	r3, [sp, #0]
 801b064:	4b1b      	ldr	r3, [pc, #108]	; (801b0d4 <udp_input+0x224>)
 801b066:	687a      	ldr	r2, [r7, #4]
 801b068:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b06a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b06c:	e021      	b.n	801b0b2 <udp_input+0x202>
        pbuf_free(p);
 801b06e:	6878      	ldr	r0, [r7, #4]
 801b070:	f7f9 f9d6 	bl	8014420 <pbuf_free>
        goto end;
 801b074:	e01c      	b.n	801b0b0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b076:	7cfb      	ldrb	r3, [r7, #19]
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d112      	bne.n	801b0a2 <udp_input+0x1f2>
 801b07c:	4b12      	ldr	r3, [pc, #72]	; (801b0c8 <udp_input+0x218>)
 801b07e:	695b      	ldr	r3, [r3, #20]
 801b080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b084:	2be0      	cmp	r3, #224	; 0xe0
 801b086:	d00c      	beq.n	801b0a2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b088:	4b0f      	ldr	r3, [pc, #60]	; (801b0c8 <udp_input+0x218>)
 801b08a:	899b      	ldrh	r3, [r3, #12]
 801b08c:	3308      	adds	r3, #8
 801b08e:	b29b      	uxth	r3, r3
 801b090:	b21b      	sxth	r3, r3
 801b092:	4619      	mov	r1, r3
 801b094:	6878      	ldr	r0, [r7, #4]
 801b096:	f7f9 f9b0 	bl	80143fa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b09a:	2103      	movs	r1, #3
 801b09c:	6878      	ldr	r0, [r7, #4]
 801b09e:	f001 f9a9 	bl	801c3f4 <icmp_dest_unreach>
      pbuf_free(p);
 801b0a2:	6878      	ldr	r0, [r7, #4]
 801b0a4:	f7f9 f9bc 	bl	8014420 <pbuf_free>
  return;
 801b0a8:	e003      	b.n	801b0b2 <udp_input+0x202>
    pbuf_free(p);
 801b0aa:	6878      	ldr	r0, [r7, #4]
 801b0ac:	f7f9 f9b8 	bl	8014420 <pbuf_free>
  return;
 801b0b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b0b2:	372c      	adds	r7, #44	; 0x2c
 801b0b4:	46bd      	mov	sp, r7
 801b0b6:	bd90      	pop	{r4, r7, pc}
 801b0b8:	080228b0 	.word	0x080228b0
 801b0bc:	08022954 	.word	0x08022954
 801b0c0:	08022904 	.word	0x08022904
 801b0c4:	0802296c 	.word	0x0802296c
 801b0c8:	2000a06c 	.word	0x2000a06c
 801b0cc:	2000fa10 	.word	0x2000fa10
 801b0d0:	08022988 	.word	0x08022988
 801b0d4:	2000a07c 	.word	0x2000a07c

0801b0d8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b0d8:	b580      	push	{r7, lr}
 801b0da:	b086      	sub	sp, #24
 801b0dc:	af00      	add	r7, sp, #0
 801b0de:	60f8      	str	r0, [r7, #12]
 801b0e0:	60b9      	str	r1, [r7, #8]
 801b0e2:	4613      	mov	r3, r2
 801b0e4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b0e6:	68bb      	ldr	r3, [r7, #8]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d101      	bne.n	801b0f0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b0ec:	4b39      	ldr	r3, [pc, #228]	; (801b1d4 <udp_bind+0xfc>)
 801b0ee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d109      	bne.n	801b10a <udp_bind+0x32>
 801b0f6:	4b38      	ldr	r3, [pc, #224]	; (801b1d8 <udp_bind+0x100>)
 801b0f8:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b0fc:	4937      	ldr	r1, [pc, #220]	; (801b1dc <udp_bind+0x104>)
 801b0fe:	4838      	ldr	r0, [pc, #224]	; (801b1e0 <udp_bind+0x108>)
 801b100:	f003 f938 	bl	801e374 <iprintf>
 801b104:	f06f 030f 	mvn.w	r3, #15
 801b108:	e060      	b.n	801b1cc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b10a:	2300      	movs	r3, #0
 801b10c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b10e:	4b35      	ldr	r3, [pc, #212]	; (801b1e4 <udp_bind+0x10c>)
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	617b      	str	r3, [r7, #20]
 801b114:	e009      	b.n	801b12a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b116:	68fa      	ldr	r2, [r7, #12]
 801b118:	697b      	ldr	r3, [r7, #20]
 801b11a:	429a      	cmp	r2, r3
 801b11c:	d102      	bne.n	801b124 <udp_bind+0x4c>
      rebind = 1;
 801b11e:	2301      	movs	r3, #1
 801b120:	74fb      	strb	r3, [r7, #19]
      break;
 801b122:	e005      	b.n	801b130 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b124:	697b      	ldr	r3, [r7, #20]
 801b126:	68db      	ldr	r3, [r3, #12]
 801b128:	617b      	str	r3, [r7, #20]
 801b12a:	697b      	ldr	r3, [r7, #20]
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d1f2      	bne.n	801b116 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b130:	88fb      	ldrh	r3, [r7, #6]
 801b132:	2b00      	cmp	r3, #0
 801b134:	d109      	bne.n	801b14a <udp_bind+0x72>
    port = udp_new_port();
 801b136:	f7ff fe1f 	bl	801ad78 <udp_new_port>
 801b13a:	4603      	mov	r3, r0
 801b13c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b13e:	88fb      	ldrh	r3, [r7, #6]
 801b140:	2b00      	cmp	r3, #0
 801b142:	d12c      	bne.n	801b19e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b144:	f06f 0307 	mvn.w	r3, #7
 801b148:	e040      	b.n	801b1cc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b14a:	4b26      	ldr	r3, [pc, #152]	; (801b1e4 <udp_bind+0x10c>)
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	617b      	str	r3, [r7, #20]
 801b150:	e022      	b.n	801b198 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b152:	68fa      	ldr	r2, [r7, #12]
 801b154:	697b      	ldr	r3, [r7, #20]
 801b156:	429a      	cmp	r2, r3
 801b158:	d01b      	beq.n	801b192 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b15a:	697b      	ldr	r3, [r7, #20]
 801b15c:	8a5b      	ldrh	r3, [r3, #18]
 801b15e:	88fa      	ldrh	r2, [r7, #6]
 801b160:	429a      	cmp	r2, r3
 801b162:	d116      	bne.n	801b192 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b164:	697b      	ldr	r3, [r7, #20]
 801b166:	681a      	ldr	r2, [r3, #0]
 801b168:	68bb      	ldr	r3, [r7, #8]
 801b16a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b16c:	429a      	cmp	r2, r3
 801b16e:	d00d      	beq.n	801b18c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b170:	68bb      	ldr	r3, [r7, #8]
 801b172:	2b00      	cmp	r3, #0
 801b174:	d00a      	beq.n	801b18c <udp_bind+0xb4>
 801b176:	68bb      	ldr	r3, [r7, #8]
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d006      	beq.n	801b18c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b17e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b180:	2b00      	cmp	r3, #0
 801b182:	d003      	beq.n	801b18c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b184:	697b      	ldr	r3, [r7, #20]
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d102      	bne.n	801b192 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b18c:	f06f 0307 	mvn.w	r3, #7
 801b190:	e01c      	b.n	801b1cc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b192:	697b      	ldr	r3, [r7, #20]
 801b194:	68db      	ldr	r3, [r3, #12]
 801b196:	617b      	str	r3, [r7, #20]
 801b198:	697b      	ldr	r3, [r7, #20]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d1d9      	bne.n	801b152 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b19e:	68bb      	ldr	r3, [r7, #8]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d002      	beq.n	801b1aa <udp_bind+0xd2>
 801b1a4:	68bb      	ldr	r3, [r7, #8]
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	e000      	b.n	801b1ac <udp_bind+0xd4>
 801b1aa:	2300      	movs	r3, #0
 801b1ac:	68fa      	ldr	r2, [r7, #12]
 801b1ae:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b1b0:	68fb      	ldr	r3, [r7, #12]
 801b1b2:	88fa      	ldrh	r2, [r7, #6]
 801b1b4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b1b6:	7cfb      	ldrb	r3, [r7, #19]
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d106      	bne.n	801b1ca <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b1bc:	4b09      	ldr	r3, [pc, #36]	; (801b1e4 <udp_bind+0x10c>)
 801b1be:	681a      	ldr	r2, [r3, #0]
 801b1c0:	68fb      	ldr	r3, [r7, #12]
 801b1c2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b1c4:	4a07      	ldr	r2, [pc, #28]	; (801b1e4 <udp_bind+0x10c>)
 801b1c6:	68fb      	ldr	r3, [r7, #12]
 801b1c8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b1ca:	2300      	movs	r3, #0
}
 801b1cc:	4618      	mov	r0, r3
 801b1ce:	3718      	adds	r7, #24
 801b1d0:	46bd      	mov	sp, r7
 801b1d2:	bd80      	pop	{r7, pc}
 801b1d4:	080234dc 	.word	0x080234dc
 801b1d8:	080228b0 	.word	0x080228b0
 801b1dc:	08022b78 	.word	0x08022b78
 801b1e0:	08022904 	.word	0x08022904
 801b1e4:	2000fa10 	.word	0x2000fa10

0801b1e8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b084      	sub	sp, #16
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	60f8      	str	r0, [r7, #12]
 801b1f0:	60b9      	str	r1, [r7, #8]
 801b1f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b1f4:	68fb      	ldr	r3, [r7, #12]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d107      	bne.n	801b20a <udp_recv+0x22>
 801b1fa:	4b08      	ldr	r3, [pc, #32]	; (801b21c <udp_recv+0x34>)
 801b1fc:	f240 428a 	movw	r2, #1162	; 0x48a
 801b200:	4907      	ldr	r1, [pc, #28]	; (801b220 <udp_recv+0x38>)
 801b202:	4808      	ldr	r0, [pc, #32]	; (801b224 <udp_recv+0x3c>)
 801b204:	f003 f8b6 	bl	801e374 <iprintf>
 801b208:	e005      	b.n	801b216 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b20a:	68fb      	ldr	r3, [r7, #12]
 801b20c:	68ba      	ldr	r2, [r7, #8]
 801b20e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b210:	68fb      	ldr	r3, [r7, #12]
 801b212:	687a      	ldr	r2, [r7, #4]
 801b214:	61da      	str	r2, [r3, #28]
}
 801b216:	3710      	adds	r7, #16
 801b218:	46bd      	mov	sp, r7
 801b21a:	bd80      	pop	{r7, pc}
 801b21c:	080228b0 	.word	0x080228b0
 801b220:	08022be4 	.word	0x08022be4
 801b224:	08022904 	.word	0x08022904

0801b228 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b084      	sub	sp, #16
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	2b00      	cmp	r3, #0
 801b234:	d107      	bne.n	801b246 <udp_remove+0x1e>
 801b236:	4b19      	ldr	r3, [pc, #100]	; (801b29c <udp_remove+0x74>)
 801b238:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801b23c:	4918      	ldr	r1, [pc, #96]	; (801b2a0 <udp_remove+0x78>)
 801b23e:	4819      	ldr	r0, [pc, #100]	; (801b2a4 <udp_remove+0x7c>)
 801b240:	f003 f898 	bl	801e374 <iprintf>
 801b244:	e026      	b.n	801b294 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b246:	4b18      	ldr	r3, [pc, #96]	; (801b2a8 <udp_remove+0x80>)
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	687a      	ldr	r2, [r7, #4]
 801b24c:	429a      	cmp	r2, r3
 801b24e:	d105      	bne.n	801b25c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b250:	4b15      	ldr	r3, [pc, #84]	; (801b2a8 <udp_remove+0x80>)
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	68db      	ldr	r3, [r3, #12]
 801b256:	4a14      	ldr	r2, [pc, #80]	; (801b2a8 <udp_remove+0x80>)
 801b258:	6013      	str	r3, [r2, #0]
 801b25a:	e017      	b.n	801b28c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b25c:	4b12      	ldr	r3, [pc, #72]	; (801b2a8 <udp_remove+0x80>)
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	60fb      	str	r3, [r7, #12]
 801b262:	e010      	b.n	801b286 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b264:	68fb      	ldr	r3, [r7, #12]
 801b266:	68db      	ldr	r3, [r3, #12]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d009      	beq.n	801b280 <udp_remove+0x58>
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	68db      	ldr	r3, [r3, #12]
 801b270:	687a      	ldr	r2, [r7, #4]
 801b272:	429a      	cmp	r2, r3
 801b274:	d104      	bne.n	801b280 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	68da      	ldr	r2, [r3, #12]
 801b27a:	68fb      	ldr	r3, [r7, #12]
 801b27c:	60da      	str	r2, [r3, #12]
        break;
 801b27e:	e005      	b.n	801b28c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	68db      	ldr	r3, [r3, #12]
 801b284:	60fb      	str	r3, [r7, #12]
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d1eb      	bne.n	801b264 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b28c:	6879      	ldr	r1, [r7, #4]
 801b28e:	2000      	movs	r0, #0
 801b290:	f7f8 f8ae 	bl	80133f0 <memp_free>
}
 801b294:	3710      	adds	r7, #16
 801b296:	46bd      	mov	sp, r7
 801b298:	bd80      	pop	{r7, pc}
 801b29a:	bf00      	nop
 801b29c:	080228b0 	.word	0x080228b0
 801b2a0:	08022bfc 	.word	0x08022bfc
 801b2a4:	08022904 	.word	0x08022904
 801b2a8:	2000fa10 	.word	0x2000fa10

0801b2ac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	b082      	sub	sp, #8
 801b2b0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b2b2:	2000      	movs	r0, #0
 801b2b4:	f7f8 f826 	bl	8013304 <memp_malloc>
 801b2b8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d007      	beq.n	801b2d0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b2c0:	2220      	movs	r2, #32
 801b2c2:	2100      	movs	r1, #0
 801b2c4:	6878      	ldr	r0, [r7, #4]
 801b2c6:	f002 ff6d 	bl	801e1a4 <memset>
    pcb->ttl = UDP_TTL;
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	22ff      	movs	r2, #255	; 0xff
 801b2ce:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b2d0:	687b      	ldr	r3, [r7, #4]
}
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	3708      	adds	r7, #8
 801b2d6:	46bd      	mov	sp, r7
 801b2d8:	bd80      	pop	{r7, pc}

0801b2da <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801b2da:	b580      	push	{r7, lr}
 801b2dc:	b084      	sub	sp, #16
 801b2de:	af00      	add	r7, sp, #0
 801b2e0:	4603      	mov	r3, r0
 801b2e2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801b2e4:	f7ff ffe2 	bl	801b2ac <udp_new>
 801b2e8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b2ea:	68fb      	ldr	r3, [r7, #12]
}
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	3710      	adds	r7, #16
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	bd80      	pop	{r7, pc}

0801b2f4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b2f4:	b480      	push	{r7}
 801b2f6:	b085      	sub	sp, #20
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	6078      	str	r0, [r7, #4]
 801b2fc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	2b00      	cmp	r3, #0
 801b302:	d01e      	beq.n	801b342 <udp_netif_ip_addr_changed+0x4e>
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d01a      	beq.n	801b342 <udp_netif_ip_addr_changed+0x4e>
 801b30c:	683b      	ldr	r3, [r7, #0]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d017      	beq.n	801b342 <udp_netif_ip_addr_changed+0x4e>
 801b312:	683b      	ldr	r3, [r7, #0]
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d013      	beq.n	801b342 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b31a:	4b0d      	ldr	r3, [pc, #52]	; (801b350 <udp_netif_ip_addr_changed+0x5c>)
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	60fb      	str	r3, [r7, #12]
 801b320:	e00c      	b.n	801b33c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	681a      	ldr	r2, [r3, #0]
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	429a      	cmp	r2, r3
 801b32c:	d103      	bne.n	801b336 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b32e:	683b      	ldr	r3, [r7, #0]
 801b330:	681a      	ldr	r2, [r3, #0]
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	68db      	ldr	r3, [r3, #12]
 801b33a:	60fb      	str	r3, [r7, #12]
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d1ef      	bne.n	801b322 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b342:	bf00      	nop
 801b344:	3714      	adds	r7, #20
 801b346:	46bd      	mov	sp, r7
 801b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b34c:	4770      	bx	lr
 801b34e:	bf00      	nop
 801b350:	2000fa10 	.word	0x2000fa10

0801b354 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b354:	b580      	push	{r7, lr}
 801b356:	b082      	sub	sp, #8
 801b358:	af00      	add	r7, sp, #0
 801b35a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b35c:	4915      	ldr	r1, [pc, #84]	; (801b3b4 <etharp_free_entry+0x60>)
 801b35e:	687a      	ldr	r2, [r7, #4]
 801b360:	4613      	mov	r3, r2
 801b362:	005b      	lsls	r3, r3, #1
 801b364:	4413      	add	r3, r2
 801b366:	00db      	lsls	r3, r3, #3
 801b368:	440b      	add	r3, r1
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d013      	beq.n	801b398 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b370:	4910      	ldr	r1, [pc, #64]	; (801b3b4 <etharp_free_entry+0x60>)
 801b372:	687a      	ldr	r2, [r7, #4]
 801b374:	4613      	mov	r3, r2
 801b376:	005b      	lsls	r3, r3, #1
 801b378:	4413      	add	r3, r2
 801b37a:	00db      	lsls	r3, r3, #3
 801b37c:	440b      	add	r3, r1
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	4618      	mov	r0, r3
 801b382:	f7f9 f84d 	bl	8014420 <pbuf_free>
    arp_table[i].q = NULL;
 801b386:	490b      	ldr	r1, [pc, #44]	; (801b3b4 <etharp_free_entry+0x60>)
 801b388:	687a      	ldr	r2, [r7, #4]
 801b38a:	4613      	mov	r3, r2
 801b38c:	005b      	lsls	r3, r3, #1
 801b38e:	4413      	add	r3, r2
 801b390:	00db      	lsls	r3, r3, #3
 801b392:	440b      	add	r3, r1
 801b394:	2200      	movs	r2, #0
 801b396:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b398:	4906      	ldr	r1, [pc, #24]	; (801b3b4 <etharp_free_entry+0x60>)
 801b39a:	687a      	ldr	r2, [r7, #4]
 801b39c:	4613      	mov	r3, r2
 801b39e:	005b      	lsls	r3, r3, #1
 801b3a0:	4413      	add	r3, r2
 801b3a2:	00db      	lsls	r3, r3, #3
 801b3a4:	440b      	add	r3, r1
 801b3a6:	3314      	adds	r3, #20
 801b3a8:	2200      	movs	r2, #0
 801b3aa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801b3ac:	bf00      	nop
 801b3ae:	3708      	adds	r7, #8
 801b3b0:	46bd      	mov	sp, r7
 801b3b2:	bd80      	pop	{r7, pc}
 801b3b4:	2000fa14 	.word	0x2000fa14

0801b3b8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	b082      	sub	sp, #8
 801b3bc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b3be:	2300      	movs	r3, #0
 801b3c0:	607b      	str	r3, [r7, #4]
 801b3c2:	e096      	b.n	801b4f2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b3c4:	494f      	ldr	r1, [pc, #316]	; (801b504 <etharp_tmr+0x14c>)
 801b3c6:	687a      	ldr	r2, [r7, #4]
 801b3c8:	4613      	mov	r3, r2
 801b3ca:	005b      	lsls	r3, r3, #1
 801b3cc:	4413      	add	r3, r2
 801b3ce:	00db      	lsls	r3, r3, #3
 801b3d0:	440b      	add	r3, r1
 801b3d2:	3314      	adds	r3, #20
 801b3d4:	781b      	ldrb	r3, [r3, #0]
 801b3d6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b3d8:	78fb      	ldrb	r3, [r7, #3]
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	f000 8086 	beq.w	801b4ec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b3e0:	4948      	ldr	r1, [pc, #288]	; (801b504 <etharp_tmr+0x14c>)
 801b3e2:	687a      	ldr	r2, [r7, #4]
 801b3e4:	4613      	mov	r3, r2
 801b3e6:	005b      	lsls	r3, r3, #1
 801b3e8:	4413      	add	r3, r2
 801b3ea:	00db      	lsls	r3, r3, #3
 801b3ec:	440b      	add	r3, r1
 801b3ee:	3312      	adds	r3, #18
 801b3f0:	881b      	ldrh	r3, [r3, #0]
 801b3f2:	3301      	adds	r3, #1
 801b3f4:	b298      	uxth	r0, r3
 801b3f6:	4943      	ldr	r1, [pc, #268]	; (801b504 <etharp_tmr+0x14c>)
 801b3f8:	687a      	ldr	r2, [r7, #4]
 801b3fa:	4613      	mov	r3, r2
 801b3fc:	005b      	lsls	r3, r3, #1
 801b3fe:	4413      	add	r3, r2
 801b400:	00db      	lsls	r3, r3, #3
 801b402:	440b      	add	r3, r1
 801b404:	3312      	adds	r3, #18
 801b406:	4602      	mov	r2, r0
 801b408:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b40a:	493e      	ldr	r1, [pc, #248]	; (801b504 <etharp_tmr+0x14c>)
 801b40c:	687a      	ldr	r2, [r7, #4]
 801b40e:	4613      	mov	r3, r2
 801b410:	005b      	lsls	r3, r3, #1
 801b412:	4413      	add	r3, r2
 801b414:	00db      	lsls	r3, r3, #3
 801b416:	440b      	add	r3, r1
 801b418:	3312      	adds	r3, #18
 801b41a:	881b      	ldrh	r3, [r3, #0]
 801b41c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801b420:	d215      	bcs.n	801b44e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b422:	4938      	ldr	r1, [pc, #224]	; (801b504 <etharp_tmr+0x14c>)
 801b424:	687a      	ldr	r2, [r7, #4]
 801b426:	4613      	mov	r3, r2
 801b428:	005b      	lsls	r3, r3, #1
 801b42a:	4413      	add	r3, r2
 801b42c:	00db      	lsls	r3, r3, #3
 801b42e:	440b      	add	r3, r1
 801b430:	3314      	adds	r3, #20
 801b432:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b434:	2b01      	cmp	r3, #1
 801b436:	d10e      	bne.n	801b456 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b438:	4932      	ldr	r1, [pc, #200]	; (801b504 <etharp_tmr+0x14c>)
 801b43a:	687a      	ldr	r2, [r7, #4]
 801b43c:	4613      	mov	r3, r2
 801b43e:	005b      	lsls	r3, r3, #1
 801b440:	4413      	add	r3, r2
 801b442:	00db      	lsls	r3, r3, #3
 801b444:	440b      	add	r3, r1
 801b446:	3312      	adds	r3, #18
 801b448:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b44a:	2b04      	cmp	r3, #4
 801b44c:	d903      	bls.n	801b456 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b44e:	6878      	ldr	r0, [r7, #4]
 801b450:	f7ff ff80 	bl	801b354 <etharp_free_entry>
 801b454:	e04a      	b.n	801b4ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b456:	492b      	ldr	r1, [pc, #172]	; (801b504 <etharp_tmr+0x14c>)
 801b458:	687a      	ldr	r2, [r7, #4]
 801b45a:	4613      	mov	r3, r2
 801b45c:	005b      	lsls	r3, r3, #1
 801b45e:	4413      	add	r3, r2
 801b460:	00db      	lsls	r3, r3, #3
 801b462:	440b      	add	r3, r1
 801b464:	3314      	adds	r3, #20
 801b466:	781b      	ldrb	r3, [r3, #0]
 801b468:	2b03      	cmp	r3, #3
 801b46a:	d10a      	bne.n	801b482 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b46c:	4925      	ldr	r1, [pc, #148]	; (801b504 <etharp_tmr+0x14c>)
 801b46e:	687a      	ldr	r2, [r7, #4]
 801b470:	4613      	mov	r3, r2
 801b472:	005b      	lsls	r3, r3, #1
 801b474:	4413      	add	r3, r2
 801b476:	00db      	lsls	r3, r3, #3
 801b478:	440b      	add	r3, r1
 801b47a:	3314      	adds	r3, #20
 801b47c:	2204      	movs	r2, #4
 801b47e:	701a      	strb	r2, [r3, #0]
 801b480:	e034      	b.n	801b4ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b482:	4920      	ldr	r1, [pc, #128]	; (801b504 <etharp_tmr+0x14c>)
 801b484:	687a      	ldr	r2, [r7, #4]
 801b486:	4613      	mov	r3, r2
 801b488:	005b      	lsls	r3, r3, #1
 801b48a:	4413      	add	r3, r2
 801b48c:	00db      	lsls	r3, r3, #3
 801b48e:	440b      	add	r3, r1
 801b490:	3314      	adds	r3, #20
 801b492:	781b      	ldrb	r3, [r3, #0]
 801b494:	2b04      	cmp	r3, #4
 801b496:	d10a      	bne.n	801b4ae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b498:	491a      	ldr	r1, [pc, #104]	; (801b504 <etharp_tmr+0x14c>)
 801b49a:	687a      	ldr	r2, [r7, #4]
 801b49c:	4613      	mov	r3, r2
 801b49e:	005b      	lsls	r3, r3, #1
 801b4a0:	4413      	add	r3, r2
 801b4a2:	00db      	lsls	r3, r3, #3
 801b4a4:	440b      	add	r3, r1
 801b4a6:	3314      	adds	r3, #20
 801b4a8:	2202      	movs	r2, #2
 801b4aa:	701a      	strb	r2, [r3, #0]
 801b4ac:	e01e      	b.n	801b4ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b4ae:	4915      	ldr	r1, [pc, #84]	; (801b504 <etharp_tmr+0x14c>)
 801b4b0:	687a      	ldr	r2, [r7, #4]
 801b4b2:	4613      	mov	r3, r2
 801b4b4:	005b      	lsls	r3, r3, #1
 801b4b6:	4413      	add	r3, r2
 801b4b8:	00db      	lsls	r3, r3, #3
 801b4ba:	440b      	add	r3, r1
 801b4bc:	3314      	adds	r3, #20
 801b4be:	781b      	ldrb	r3, [r3, #0]
 801b4c0:	2b01      	cmp	r3, #1
 801b4c2:	d113      	bne.n	801b4ec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b4c4:	490f      	ldr	r1, [pc, #60]	; (801b504 <etharp_tmr+0x14c>)
 801b4c6:	687a      	ldr	r2, [r7, #4]
 801b4c8:	4613      	mov	r3, r2
 801b4ca:	005b      	lsls	r3, r3, #1
 801b4cc:	4413      	add	r3, r2
 801b4ce:	00db      	lsls	r3, r3, #3
 801b4d0:	440b      	add	r3, r1
 801b4d2:	3308      	adds	r3, #8
 801b4d4:	6818      	ldr	r0, [r3, #0]
 801b4d6:	687a      	ldr	r2, [r7, #4]
 801b4d8:	4613      	mov	r3, r2
 801b4da:	005b      	lsls	r3, r3, #1
 801b4dc:	4413      	add	r3, r2
 801b4de:	00db      	lsls	r3, r3, #3
 801b4e0:	4a08      	ldr	r2, [pc, #32]	; (801b504 <etharp_tmr+0x14c>)
 801b4e2:	4413      	add	r3, r2
 801b4e4:	3304      	adds	r3, #4
 801b4e6:	4619      	mov	r1, r3
 801b4e8:	f000 fe6e 	bl	801c1c8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	3301      	adds	r3, #1
 801b4f0:	607b      	str	r3, [r7, #4]
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	2b09      	cmp	r3, #9
 801b4f6:	f77f af65 	ble.w	801b3c4 <etharp_tmr+0xc>
      }
    }
  }
}
 801b4fa:	bf00      	nop
 801b4fc:	bf00      	nop
 801b4fe:	3708      	adds	r7, #8
 801b500:	46bd      	mov	sp, r7
 801b502:	bd80      	pop	{r7, pc}
 801b504:	2000fa14 	.word	0x2000fa14

0801b508 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b508:	b580      	push	{r7, lr}
 801b50a:	b08a      	sub	sp, #40	; 0x28
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	60f8      	str	r0, [r7, #12]
 801b510:	460b      	mov	r3, r1
 801b512:	607a      	str	r2, [r7, #4]
 801b514:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b516:	230a      	movs	r3, #10
 801b518:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b51a:	230a      	movs	r3, #10
 801b51c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801b51e:	230a      	movs	r3, #10
 801b520:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801b522:	2300      	movs	r3, #0
 801b524:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b526:	230a      	movs	r3, #10
 801b528:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b52a:	2300      	movs	r3, #0
 801b52c:	83bb      	strh	r3, [r7, #28]
 801b52e:	2300      	movs	r3, #0
 801b530:	837b      	strh	r3, [r7, #26]
 801b532:	2300      	movs	r3, #0
 801b534:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b536:	2300      	movs	r3, #0
 801b538:	843b      	strh	r3, [r7, #32]
 801b53a:	e0ae      	b.n	801b69a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801b53c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b540:	49a6      	ldr	r1, [pc, #664]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b542:	4613      	mov	r3, r2
 801b544:	005b      	lsls	r3, r3, #1
 801b546:	4413      	add	r3, r2
 801b548:	00db      	lsls	r3, r3, #3
 801b54a:	440b      	add	r3, r1
 801b54c:	3314      	adds	r3, #20
 801b54e:	781b      	ldrb	r3, [r3, #0]
 801b550:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b552:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b556:	2b0a      	cmp	r3, #10
 801b558:	d105      	bne.n	801b566 <etharp_find_entry+0x5e>
 801b55a:	7dfb      	ldrb	r3, [r7, #23]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d102      	bne.n	801b566 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b560:	8c3b      	ldrh	r3, [r7, #32]
 801b562:	847b      	strh	r3, [r7, #34]	; 0x22
 801b564:	e095      	b.n	801b692 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b566:	7dfb      	ldrb	r3, [r7, #23]
 801b568:	2b00      	cmp	r3, #0
 801b56a:	f000 8092 	beq.w	801b692 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b56e:	7dfb      	ldrb	r3, [r7, #23]
 801b570:	2b01      	cmp	r3, #1
 801b572:	d009      	beq.n	801b588 <etharp_find_entry+0x80>
 801b574:	7dfb      	ldrb	r3, [r7, #23]
 801b576:	2b01      	cmp	r3, #1
 801b578:	d806      	bhi.n	801b588 <etharp_find_entry+0x80>
 801b57a:	4b99      	ldr	r3, [pc, #612]	; (801b7e0 <etharp_find_entry+0x2d8>)
 801b57c:	f240 1223 	movw	r2, #291	; 0x123
 801b580:	4998      	ldr	r1, [pc, #608]	; (801b7e4 <etharp_find_entry+0x2dc>)
 801b582:	4899      	ldr	r0, [pc, #612]	; (801b7e8 <etharp_find_entry+0x2e0>)
 801b584:	f002 fef6 	bl	801e374 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b588:	68fb      	ldr	r3, [r7, #12]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d020      	beq.n	801b5d0 <etharp_find_entry+0xc8>
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	6819      	ldr	r1, [r3, #0]
 801b592:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b596:	4891      	ldr	r0, [pc, #580]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b598:	4613      	mov	r3, r2
 801b59a:	005b      	lsls	r3, r3, #1
 801b59c:	4413      	add	r3, r2
 801b59e:	00db      	lsls	r3, r3, #3
 801b5a0:	4403      	add	r3, r0
 801b5a2:	3304      	adds	r3, #4
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	4299      	cmp	r1, r3
 801b5a8:	d112      	bne.n	801b5d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d00c      	beq.n	801b5ca <etharp_find_entry+0xc2>
 801b5b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b5b4:	4989      	ldr	r1, [pc, #548]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b5b6:	4613      	mov	r3, r2
 801b5b8:	005b      	lsls	r3, r3, #1
 801b5ba:	4413      	add	r3, r2
 801b5bc:	00db      	lsls	r3, r3, #3
 801b5be:	440b      	add	r3, r1
 801b5c0:	3308      	adds	r3, #8
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	687a      	ldr	r2, [r7, #4]
 801b5c6:	429a      	cmp	r2, r3
 801b5c8:	d102      	bne.n	801b5d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801b5ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b5ce:	e100      	b.n	801b7d2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801b5d0:	7dfb      	ldrb	r3, [r7, #23]
 801b5d2:	2b01      	cmp	r3, #1
 801b5d4:	d140      	bne.n	801b658 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801b5d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b5da:	4980      	ldr	r1, [pc, #512]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b5dc:	4613      	mov	r3, r2
 801b5de:	005b      	lsls	r3, r3, #1
 801b5e0:	4413      	add	r3, r2
 801b5e2:	00db      	lsls	r3, r3, #3
 801b5e4:	440b      	add	r3, r1
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	d01a      	beq.n	801b622 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801b5ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b5f0:	497a      	ldr	r1, [pc, #488]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b5f2:	4613      	mov	r3, r2
 801b5f4:	005b      	lsls	r3, r3, #1
 801b5f6:	4413      	add	r3, r2
 801b5f8:	00db      	lsls	r3, r3, #3
 801b5fa:	440b      	add	r3, r1
 801b5fc:	3312      	adds	r3, #18
 801b5fe:	881b      	ldrh	r3, [r3, #0]
 801b600:	8bba      	ldrh	r2, [r7, #28]
 801b602:	429a      	cmp	r2, r3
 801b604:	d845      	bhi.n	801b692 <etharp_find_entry+0x18a>
            old_queue = i;
 801b606:	8c3b      	ldrh	r3, [r7, #32]
 801b608:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801b60a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b60e:	4973      	ldr	r1, [pc, #460]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b610:	4613      	mov	r3, r2
 801b612:	005b      	lsls	r3, r3, #1
 801b614:	4413      	add	r3, r2
 801b616:	00db      	lsls	r3, r3, #3
 801b618:	440b      	add	r3, r1
 801b61a:	3312      	adds	r3, #18
 801b61c:	881b      	ldrh	r3, [r3, #0]
 801b61e:	83bb      	strh	r3, [r7, #28]
 801b620:	e037      	b.n	801b692 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801b622:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b626:	496d      	ldr	r1, [pc, #436]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b628:	4613      	mov	r3, r2
 801b62a:	005b      	lsls	r3, r3, #1
 801b62c:	4413      	add	r3, r2
 801b62e:	00db      	lsls	r3, r3, #3
 801b630:	440b      	add	r3, r1
 801b632:	3312      	adds	r3, #18
 801b634:	881b      	ldrh	r3, [r3, #0]
 801b636:	8b7a      	ldrh	r2, [r7, #26]
 801b638:	429a      	cmp	r2, r3
 801b63a:	d82a      	bhi.n	801b692 <etharp_find_entry+0x18a>
            old_pending = i;
 801b63c:	8c3b      	ldrh	r3, [r7, #32]
 801b63e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801b640:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b644:	4965      	ldr	r1, [pc, #404]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b646:	4613      	mov	r3, r2
 801b648:	005b      	lsls	r3, r3, #1
 801b64a:	4413      	add	r3, r2
 801b64c:	00db      	lsls	r3, r3, #3
 801b64e:	440b      	add	r3, r1
 801b650:	3312      	adds	r3, #18
 801b652:	881b      	ldrh	r3, [r3, #0]
 801b654:	837b      	strh	r3, [r7, #26]
 801b656:	e01c      	b.n	801b692 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801b658:	7dfb      	ldrb	r3, [r7, #23]
 801b65a:	2b01      	cmp	r3, #1
 801b65c:	d919      	bls.n	801b692 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801b65e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b662:	495e      	ldr	r1, [pc, #376]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b664:	4613      	mov	r3, r2
 801b666:	005b      	lsls	r3, r3, #1
 801b668:	4413      	add	r3, r2
 801b66a:	00db      	lsls	r3, r3, #3
 801b66c:	440b      	add	r3, r1
 801b66e:	3312      	adds	r3, #18
 801b670:	881b      	ldrh	r3, [r3, #0]
 801b672:	8b3a      	ldrh	r2, [r7, #24]
 801b674:	429a      	cmp	r2, r3
 801b676:	d80c      	bhi.n	801b692 <etharp_find_entry+0x18a>
            old_stable = i;
 801b678:	8c3b      	ldrh	r3, [r7, #32]
 801b67a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801b67c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b680:	4956      	ldr	r1, [pc, #344]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b682:	4613      	mov	r3, r2
 801b684:	005b      	lsls	r3, r3, #1
 801b686:	4413      	add	r3, r2
 801b688:	00db      	lsls	r3, r3, #3
 801b68a:	440b      	add	r3, r1
 801b68c:	3312      	adds	r3, #18
 801b68e:	881b      	ldrh	r3, [r3, #0]
 801b690:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b692:	8c3b      	ldrh	r3, [r7, #32]
 801b694:	3301      	adds	r3, #1
 801b696:	b29b      	uxth	r3, r3
 801b698:	843b      	strh	r3, [r7, #32]
 801b69a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b69e:	2b09      	cmp	r3, #9
 801b6a0:	f77f af4c 	ble.w	801b53c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801b6a4:	7afb      	ldrb	r3, [r7, #11]
 801b6a6:	f003 0302 	and.w	r3, r3, #2
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d108      	bne.n	801b6c0 <etharp_find_entry+0x1b8>
 801b6ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b6b2:	2b0a      	cmp	r3, #10
 801b6b4:	d107      	bne.n	801b6c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801b6b6:	7afb      	ldrb	r3, [r7, #11]
 801b6b8:	f003 0301 	and.w	r3, r3, #1
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d102      	bne.n	801b6c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801b6c0:	f04f 33ff 	mov.w	r3, #4294967295
 801b6c4:	e085      	b.n	801b7d2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801b6c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b6ca:	2b09      	cmp	r3, #9
 801b6cc:	dc02      	bgt.n	801b6d4 <etharp_find_entry+0x1cc>
    i = empty;
 801b6ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b6d0:	843b      	strh	r3, [r7, #32]
 801b6d2:	e039      	b.n	801b748 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801b6d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801b6d8:	2b09      	cmp	r3, #9
 801b6da:	dc14      	bgt.n	801b706 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801b6dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b6de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801b6e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b6e4:	493d      	ldr	r1, [pc, #244]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b6e6:	4613      	mov	r3, r2
 801b6e8:	005b      	lsls	r3, r3, #1
 801b6ea:	4413      	add	r3, r2
 801b6ec:	00db      	lsls	r3, r3, #3
 801b6ee:	440b      	add	r3, r1
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d018      	beq.n	801b728 <etharp_find_entry+0x220>
 801b6f6:	4b3a      	ldr	r3, [pc, #232]	; (801b7e0 <etharp_find_entry+0x2d8>)
 801b6f8:	f240 126d 	movw	r2, #365	; 0x16d
 801b6fc:	493b      	ldr	r1, [pc, #236]	; (801b7ec <etharp_find_entry+0x2e4>)
 801b6fe:	483a      	ldr	r0, [pc, #232]	; (801b7e8 <etharp_find_entry+0x2e0>)
 801b700:	f002 fe38 	bl	801e374 <iprintf>
 801b704:	e010      	b.n	801b728 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801b706:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801b70a:	2b09      	cmp	r3, #9
 801b70c:	dc02      	bgt.n	801b714 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801b70e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b710:	843b      	strh	r3, [r7, #32]
 801b712:	e009      	b.n	801b728 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801b714:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801b718:	2b09      	cmp	r3, #9
 801b71a:	dc02      	bgt.n	801b722 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801b71c:	8bfb      	ldrh	r3, [r7, #30]
 801b71e:	843b      	strh	r3, [r7, #32]
 801b720:	e002      	b.n	801b728 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801b722:	f04f 33ff 	mov.w	r3, #4294967295
 801b726:	e054      	b.n	801b7d2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b728:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b72c:	2b09      	cmp	r3, #9
 801b72e:	dd06      	ble.n	801b73e <etharp_find_entry+0x236>
 801b730:	4b2b      	ldr	r3, [pc, #172]	; (801b7e0 <etharp_find_entry+0x2d8>)
 801b732:	f240 127f 	movw	r2, #383	; 0x17f
 801b736:	492e      	ldr	r1, [pc, #184]	; (801b7f0 <etharp_find_entry+0x2e8>)
 801b738:	482b      	ldr	r0, [pc, #172]	; (801b7e8 <etharp_find_entry+0x2e0>)
 801b73a:	f002 fe1b 	bl	801e374 <iprintf>
    etharp_free_entry(i);
 801b73e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b742:	4618      	mov	r0, r3
 801b744:	f7ff fe06 	bl	801b354 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801b748:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b74c:	2b09      	cmp	r3, #9
 801b74e:	dd06      	ble.n	801b75e <etharp_find_entry+0x256>
 801b750:	4b23      	ldr	r3, [pc, #140]	; (801b7e0 <etharp_find_entry+0x2d8>)
 801b752:	f240 1283 	movw	r2, #387	; 0x183
 801b756:	4926      	ldr	r1, [pc, #152]	; (801b7f0 <etharp_find_entry+0x2e8>)
 801b758:	4823      	ldr	r0, [pc, #140]	; (801b7e8 <etharp_find_entry+0x2e0>)
 801b75a:	f002 fe0b 	bl	801e374 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b75e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b762:	491e      	ldr	r1, [pc, #120]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b764:	4613      	mov	r3, r2
 801b766:	005b      	lsls	r3, r3, #1
 801b768:	4413      	add	r3, r2
 801b76a:	00db      	lsls	r3, r3, #3
 801b76c:	440b      	add	r3, r1
 801b76e:	3314      	adds	r3, #20
 801b770:	781b      	ldrb	r3, [r3, #0]
 801b772:	2b00      	cmp	r3, #0
 801b774:	d006      	beq.n	801b784 <etharp_find_entry+0x27c>
 801b776:	4b1a      	ldr	r3, [pc, #104]	; (801b7e0 <etharp_find_entry+0x2d8>)
 801b778:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801b77c:	491d      	ldr	r1, [pc, #116]	; (801b7f4 <etharp_find_entry+0x2ec>)
 801b77e:	481a      	ldr	r0, [pc, #104]	; (801b7e8 <etharp_find_entry+0x2e0>)
 801b780:	f002 fdf8 	bl	801e374 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801b784:	68fb      	ldr	r3, [r7, #12]
 801b786:	2b00      	cmp	r3, #0
 801b788:	d00b      	beq.n	801b7a2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b78a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b78e:	68fb      	ldr	r3, [r7, #12]
 801b790:	6819      	ldr	r1, [r3, #0]
 801b792:	4812      	ldr	r0, [pc, #72]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b794:	4613      	mov	r3, r2
 801b796:	005b      	lsls	r3, r3, #1
 801b798:	4413      	add	r3, r2
 801b79a:	00db      	lsls	r3, r3, #3
 801b79c:	4403      	add	r3, r0
 801b79e:	3304      	adds	r3, #4
 801b7a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801b7a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b7a6:	490d      	ldr	r1, [pc, #52]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b7a8:	4613      	mov	r3, r2
 801b7aa:	005b      	lsls	r3, r3, #1
 801b7ac:	4413      	add	r3, r2
 801b7ae:	00db      	lsls	r3, r3, #3
 801b7b0:	440b      	add	r3, r1
 801b7b2:	3312      	adds	r3, #18
 801b7b4:	2200      	movs	r2, #0
 801b7b6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801b7b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b7bc:	4907      	ldr	r1, [pc, #28]	; (801b7dc <etharp_find_entry+0x2d4>)
 801b7be:	4613      	mov	r3, r2
 801b7c0:	005b      	lsls	r3, r3, #1
 801b7c2:	4413      	add	r3, r2
 801b7c4:	00db      	lsls	r3, r3, #3
 801b7c6:	440b      	add	r3, r1
 801b7c8:	3308      	adds	r3, #8
 801b7ca:	687a      	ldr	r2, [r7, #4]
 801b7cc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801b7ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801b7d2:	4618      	mov	r0, r3
 801b7d4:	3728      	adds	r7, #40	; 0x28
 801b7d6:	46bd      	mov	sp, r7
 801b7d8:	bd80      	pop	{r7, pc}
 801b7da:	bf00      	nop
 801b7dc:	2000fa14 	.word	0x2000fa14
 801b7e0:	08022c14 	.word	0x08022c14
 801b7e4:	08022c4c 	.word	0x08022c4c
 801b7e8:	08022c8c 	.word	0x08022c8c
 801b7ec:	08022cb4 	.word	0x08022cb4
 801b7f0:	08022ccc 	.word	0x08022ccc
 801b7f4:	08022ce0 	.word	0x08022ce0

0801b7f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b7f8:	b580      	push	{r7, lr}
 801b7fa:	b088      	sub	sp, #32
 801b7fc:	af02      	add	r7, sp, #8
 801b7fe:	60f8      	str	r0, [r7, #12]
 801b800:	60b9      	str	r1, [r7, #8]
 801b802:	607a      	str	r2, [r7, #4]
 801b804:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b80c:	2b06      	cmp	r3, #6
 801b80e:	d006      	beq.n	801b81e <etharp_update_arp_entry+0x26>
 801b810:	4b48      	ldr	r3, [pc, #288]	; (801b934 <etharp_update_arp_entry+0x13c>)
 801b812:	f240 12a9 	movw	r2, #425	; 0x1a9
 801b816:	4948      	ldr	r1, [pc, #288]	; (801b938 <etharp_update_arp_entry+0x140>)
 801b818:	4848      	ldr	r0, [pc, #288]	; (801b93c <etharp_update_arp_entry+0x144>)
 801b81a:	f002 fdab 	bl	801e374 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b81e:	68bb      	ldr	r3, [r7, #8]
 801b820:	2b00      	cmp	r3, #0
 801b822:	d012      	beq.n	801b84a <etharp_update_arp_entry+0x52>
 801b824:	68bb      	ldr	r3, [r7, #8]
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d00e      	beq.n	801b84a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b82c:	68bb      	ldr	r3, [r7, #8]
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	68f9      	ldr	r1, [r7, #12]
 801b832:	4618      	mov	r0, r3
 801b834:	f001 f90c 	bl	801ca50 <ip4_addr_isbroadcast_u32>
 801b838:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d105      	bne.n	801b84a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801b83e:	68bb      	ldr	r3, [r7, #8]
 801b840:	681b      	ldr	r3, [r3, #0]
 801b842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b846:	2be0      	cmp	r3, #224	; 0xe0
 801b848:	d102      	bne.n	801b850 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b84a:	f06f 030f 	mvn.w	r3, #15
 801b84e:	e06c      	b.n	801b92a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801b850:	78fb      	ldrb	r3, [r7, #3]
 801b852:	68fa      	ldr	r2, [r7, #12]
 801b854:	4619      	mov	r1, r3
 801b856:	68b8      	ldr	r0, [r7, #8]
 801b858:	f7ff fe56 	bl	801b508 <etharp_find_entry>
 801b85c:	4603      	mov	r3, r0
 801b85e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801b860:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b864:	2b00      	cmp	r3, #0
 801b866:	da02      	bge.n	801b86e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801b868:	8afb      	ldrh	r3, [r7, #22]
 801b86a:	b25b      	sxtb	r3, r3
 801b86c:	e05d      	b.n	801b92a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b86e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b872:	4933      	ldr	r1, [pc, #204]	; (801b940 <etharp_update_arp_entry+0x148>)
 801b874:	4613      	mov	r3, r2
 801b876:	005b      	lsls	r3, r3, #1
 801b878:	4413      	add	r3, r2
 801b87a:	00db      	lsls	r3, r3, #3
 801b87c:	440b      	add	r3, r1
 801b87e:	3314      	adds	r3, #20
 801b880:	2202      	movs	r2, #2
 801b882:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801b884:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b888:	492d      	ldr	r1, [pc, #180]	; (801b940 <etharp_update_arp_entry+0x148>)
 801b88a:	4613      	mov	r3, r2
 801b88c:	005b      	lsls	r3, r3, #1
 801b88e:	4413      	add	r3, r2
 801b890:	00db      	lsls	r3, r3, #3
 801b892:	440b      	add	r3, r1
 801b894:	3308      	adds	r3, #8
 801b896:	68fa      	ldr	r2, [r7, #12]
 801b898:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801b89a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b89e:	4613      	mov	r3, r2
 801b8a0:	005b      	lsls	r3, r3, #1
 801b8a2:	4413      	add	r3, r2
 801b8a4:	00db      	lsls	r3, r3, #3
 801b8a6:	3308      	adds	r3, #8
 801b8a8:	4a25      	ldr	r2, [pc, #148]	; (801b940 <etharp_update_arp_entry+0x148>)
 801b8aa:	4413      	add	r3, r2
 801b8ac:	3304      	adds	r3, #4
 801b8ae:	2206      	movs	r2, #6
 801b8b0:	6879      	ldr	r1, [r7, #4]
 801b8b2:	4618      	mov	r0, r3
 801b8b4:	f002 fc4e 	bl	801e154 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801b8b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b8bc:	4920      	ldr	r1, [pc, #128]	; (801b940 <etharp_update_arp_entry+0x148>)
 801b8be:	4613      	mov	r3, r2
 801b8c0:	005b      	lsls	r3, r3, #1
 801b8c2:	4413      	add	r3, r2
 801b8c4:	00db      	lsls	r3, r3, #3
 801b8c6:	440b      	add	r3, r1
 801b8c8:	3312      	adds	r3, #18
 801b8ca:	2200      	movs	r2, #0
 801b8cc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801b8ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b8d2:	491b      	ldr	r1, [pc, #108]	; (801b940 <etharp_update_arp_entry+0x148>)
 801b8d4:	4613      	mov	r3, r2
 801b8d6:	005b      	lsls	r3, r3, #1
 801b8d8:	4413      	add	r3, r2
 801b8da:	00db      	lsls	r3, r3, #3
 801b8dc:	440b      	add	r3, r1
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d021      	beq.n	801b928 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801b8e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b8e8:	4915      	ldr	r1, [pc, #84]	; (801b940 <etharp_update_arp_entry+0x148>)
 801b8ea:	4613      	mov	r3, r2
 801b8ec:	005b      	lsls	r3, r3, #1
 801b8ee:	4413      	add	r3, r2
 801b8f0:	00db      	lsls	r3, r3, #3
 801b8f2:	440b      	add	r3, r1
 801b8f4:	681b      	ldr	r3, [r3, #0]
 801b8f6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b8f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b8fc:	4910      	ldr	r1, [pc, #64]	; (801b940 <etharp_update_arp_entry+0x148>)
 801b8fe:	4613      	mov	r3, r2
 801b900:	005b      	lsls	r3, r3, #1
 801b902:	4413      	add	r3, r2
 801b904:	00db      	lsls	r3, r3, #3
 801b906:	440b      	add	r3, r1
 801b908:	2200      	movs	r2, #0
 801b90a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801b912:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b916:	9300      	str	r3, [sp, #0]
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	6939      	ldr	r1, [r7, #16]
 801b91c:	68f8      	ldr	r0, [r7, #12]
 801b91e:	f001 ffa5 	bl	801d86c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b922:	6938      	ldr	r0, [r7, #16]
 801b924:	f7f8 fd7c 	bl	8014420 <pbuf_free>
  }
  return ERR_OK;
 801b928:	2300      	movs	r3, #0
}
 801b92a:	4618      	mov	r0, r3
 801b92c:	3718      	adds	r7, #24
 801b92e:	46bd      	mov	sp, r7
 801b930:	bd80      	pop	{r7, pc}
 801b932:	bf00      	nop
 801b934:	08022c14 	.word	0x08022c14
 801b938:	08022d0c 	.word	0x08022d0c
 801b93c:	08022c8c 	.word	0x08022c8c
 801b940:	2000fa14 	.word	0x2000fa14

0801b944 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801b944:	b580      	push	{r7, lr}
 801b946:	b084      	sub	sp, #16
 801b948:	af00      	add	r7, sp, #0
 801b94a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b94c:	2300      	movs	r3, #0
 801b94e:	60fb      	str	r3, [r7, #12]
 801b950:	e01e      	b.n	801b990 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801b952:	4913      	ldr	r1, [pc, #76]	; (801b9a0 <etharp_cleanup_netif+0x5c>)
 801b954:	68fa      	ldr	r2, [r7, #12]
 801b956:	4613      	mov	r3, r2
 801b958:	005b      	lsls	r3, r3, #1
 801b95a:	4413      	add	r3, r2
 801b95c:	00db      	lsls	r3, r3, #3
 801b95e:	440b      	add	r3, r1
 801b960:	3314      	adds	r3, #20
 801b962:	781b      	ldrb	r3, [r3, #0]
 801b964:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b966:	7afb      	ldrb	r3, [r7, #11]
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d00e      	beq.n	801b98a <etharp_cleanup_netif+0x46>
 801b96c:	490c      	ldr	r1, [pc, #48]	; (801b9a0 <etharp_cleanup_netif+0x5c>)
 801b96e:	68fa      	ldr	r2, [r7, #12]
 801b970:	4613      	mov	r3, r2
 801b972:	005b      	lsls	r3, r3, #1
 801b974:	4413      	add	r3, r2
 801b976:	00db      	lsls	r3, r3, #3
 801b978:	440b      	add	r3, r1
 801b97a:	3308      	adds	r3, #8
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	687a      	ldr	r2, [r7, #4]
 801b980:	429a      	cmp	r2, r3
 801b982:	d102      	bne.n	801b98a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801b984:	68f8      	ldr	r0, [r7, #12]
 801b986:	f7ff fce5 	bl	801b354 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b98a:	68fb      	ldr	r3, [r7, #12]
 801b98c:	3301      	adds	r3, #1
 801b98e:	60fb      	str	r3, [r7, #12]
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	2b09      	cmp	r3, #9
 801b994:	dddd      	ble.n	801b952 <etharp_cleanup_netif+0xe>
    }
  }
}
 801b996:	bf00      	nop
 801b998:	bf00      	nop
 801b99a:	3710      	adds	r7, #16
 801b99c:	46bd      	mov	sp, r7
 801b99e:	bd80      	pop	{r7, pc}
 801b9a0:	2000fa14 	.word	0x2000fa14

0801b9a4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b9a4:	b5b0      	push	{r4, r5, r7, lr}
 801b9a6:	b08a      	sub	sp, #40	; 0x28
 801b9a8:	af04      	add	r7, sp, #16
 801b9aa:	6078      	str	r0, [r7, #4]
 801b9ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b9ae:	683b      	ldr	r3, [r7, #0]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d107      	bne.n	801b9c4 <etharp_input+0x20>
 801b9b4:	4b3d      	ldr	r3, [pc, #244]	; (801baac <etharp_input+0x108>)
 801b9b6:	f240 228a 	movw	r2, #650	; 0x28a
 801b9ba:	493d      	ldr	r1, [pc, #244]	; (801bab0 <etharp_input+0x10c>)
 801b9bc:	483d      	ldr	r0, [pc, #244]	; (801bab4 <etharp_input+0x110>)
 801b9be:	f002 fcd9 	bl	801e374 <iprintf>
 801b9c2:	e06f      	b.n	801baa4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	685b      	ldr	r3, [r3, #4]
 801b9c8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b9ca:	693b      	ldr	r3, [r7, #16]
 801b9cc:	881b      	ldrh	r3, [r3, #0]
 801b9ce:	b29b      	uxth	r3, r3
 801b9d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b9d4:	d10c      	bne.n	801b9f0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b9d6:	693b      	ldr	r3, [r7, #16]
 801b9d8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b9da:	2b06      	cmp	r3, #6
 801b9dc:	d108      	bne.n	801b9f0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b9de:	693b      	ldr	r3, [r7, #16]
 801b9e0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b9e2:	2b04      	cmp	r3, #4
 801b9e4:	d104      	bne.n	801b9f0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b9e6:	693b      	ldr	r3, [r7, #16]
 801b9e8:	885b      	ldrh	r3, [r3, #2]
 801b9ea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b9ec:	2b08      	cmp	r3, #8
 801b9ee:	d003      	beq.n	801b9f8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b9f0:	6878      	ldr	r0, [r7, #4]
 801b9f2:	f7f8 fd15 	bl	8014420 <pbuf_free>
    return;
 801b9f6:	e055      	b.n	801baa4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b9f8:	693b      	ldr	r3, [r7, #16]
 801b9fa:	330e      	adds	r3, #14
 801b9fc:	681b      	ldr	r3, [r3, #0]
 801b9fe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801ba00:	693b      	ldr	r3, [r7, #16]
 801ba02:	3318      	adds	r3, #24
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ba08:	683b      	ldr	r3, [r7, #0]
 801ba0a:	3304      	adds	r3, #4
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d102      	bne.n	801ba18 <etharp_input+0x74>
    for_us = 0;
 801ba12:	2300      	movs	r3, #0
 801ba14:	75fb      	strb	r3, [r7, #23]
 801ba16:	e009      	b.n	801ba2c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801ba18:	68ba      	ldr	r2, [r7, #8]
 801ba1a:	683b      	ldr	r3, [r7, #0]
 801ba1c:	3304      	adds	r3, #4
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	429a      	cmp	r2, r3
 801ba22:	bf0c      	ite	eq
 801ba24:	2301      	moveq	r3, #1
 801ba26:	2300      	movne	r3, #0
 801ba28:	b2db      	uxtb	r3, r3
 801ba2a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801ba2c:	693b      	ldr	r3, [r7, #16]
 801ba2e:	f103 0208 	add.w	r2, r3, #8
 801ba32:	7dfb      	ldrb	r3, [r7, #23]
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d001      	beq.n	801ba3c <etharp_input+0x98>
 801ba38:	2301      	movs	r3, #1
 801ba3a:	e000      	b.n	801ba3e <etharp_input+0x9a>
 801ba3c:	2302      	movs	r3, #2
 801ba3e:	f107 010c 	add.w	r1, r7, #12
 801ba42:	6838      	ldr	r0, [r7, #0]
 801ba44:	f7ff fed8 	bl	801b7f8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801ba48:	693b      	ldr	r3, [r7, #16]
 801ba4a:	88db      	ldrh	r3, [r3, #6]
 801ba4c:	b29b      	uxth	r3, r3
 801ba4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ba52:	d003      	beq.n	801ba5c <etharp_input+0xb8>
 801ba54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ba58:	d01e      	beq.n	801ba98 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801ba5a:	e020      	b.n	801ba9e <etharp_input+0xfa>
      if (for_us) {
 801ba5c:	7dfb      	ldrb	r3, [r7, #23]
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d01c      	beq.n	801ba9c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801ba62:	683b      	ldr	r3, [r7, #0]
 801ba64:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801ba68:	693b      	ldr	r3, [r7, #16]
 801ba6a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801ba6e:	683b      	ldr	r3, [r7, #0]
 801ba70:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801ba74:	683b      	ldr	r3, [r7, #0]
 801ba76:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801ba78:	693a      	ldr	r2, [r7, #16]
 801ba7a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801ba7c:	2102      	movs	r1, #2
 801ba7e:	9103      	str	r1, [sp, #12]
 801ba80:	f107 010c 	add.w	r1, r7, #12
 801ba84:	9102      	str	r1, [sp, #8]
 801ba86:	9201      	str	r2, [sp, #4]
 801ba88:	9300      	str	r3, [sp, #0]
 801ba8a:	462b      	mov	r3, r5
 801ba8c:	4622      	mov	r2, r4
 801ba8e:	4601      	mov	r1, r0
 801ba90:	6838      	ldr	r0, [r7, #0]
 801ba92:	f000 faeb 	bl	801c06c <etharp_raw>
      break;
 801ba96:	e001      	b.n	801ba9c <etharp_input+0xf8>
      break;
 801ba98:	bf00      	nop
 801ba9a:	e000      	b.n	801ba9e <etharp_input+0xfa>
      break;
 801ba9c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801ba9e:	6878      	ldr	r0, [r7, #4]
 801baa0:	f7f8 fcbe 	bl	8014420 <pbuf_free>
}
 801baa4:	3718      	adds	r7, #24
 801baa6:	46bd      	mov	sp, r7
 801baa8:	bdb0      	pop	{r4, r5, r7, pc}
 801baaa:	bf00      	nop
 801baac:	08022c14 	.word	0x08022c14
 801bab0:	08022d64 	.word	0x08022d64
 801bab4:	08022c8c 	.word	0x08022c8c

0801bab8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801bab8:	b580      	push	{r7, lr}
 801baba:	b086      	sub	sp, #24
 801babc:	af02      	add	r7, sp, #8
 801babe:	60f8      	str	r0, [r7, #12]
 801bac0:	60b9      	str	r1, [r7, #8]
 801bac2:	4613      	mov	r3, r2
 801bac4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801bac6:	79fa      	ldrb	r2, [r7, #7]
 801bac8:	4944      	ldr	r1, [pc, #272]	; (801bbdc <etharp_output_to_arp_index+0x124>)
 801baca:	4613      	mov	r3, r2
 801bacc:	005b      	lsls	r3, r3, #1
 801bace:	4413      	add	r3, r2
 801bad0:	00db      	lsls	r3, r3, #3
 801bad2:	440b      	add	r3, r1
 801bad4:	3314      	adds	r3, #20
 801bad6:	781b      	ldrb	r3, [r3, #0]
 801bad8:	2b01      	cmp	r3, #1
 801bada:	d806      	bhi.n	801baea <etharp_output_to_arp_index+0x32>
 801badc:	4b40      	ldr	r3, [pc, #256]	; (801bbe0 <etharp_output_to_arp_index+0x128>)
 801bade:	f240 22ee 	movw	r2, #750	; 0x2ee
 801bae2:	4940      	ldr	r1, [pc, #256]	; (801bbe4 <etharp_output_to_arp_index+0x12c>)
 801bae4:	4840      	ldr	r0, [pc, #256]	; (801bbe8 <etharp_output_to_arp_index+0x130>)
 801bae6:	f002 fc45 	bl	801e374 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801baea:	79fa      	ldrb	r2, [r7, #7]
 801baec:	493b      	ldr	r1, [pc, #236]	; (801bbdc <etharp_output_to_arp_index+0x124>)
 801baee:	4613      	mov	r3, r2
 801baf0:	005b      	lsls	r3, r3, #1
 801baf2:	4413      	add	r3, r2
 801baf4:	00db      	lsls	r3, r3, #3
 801baf6:	440b      	add	r3, r1
 801baf8:	3314      	adds	r3, #20
 801bafa:	781b      	ldrb	r3, [r3, #0]
 801bafc:	2b02      	cmp	r3, #2
 801bafe:	d153      	bne.n	801bba8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801bb00:	79fa      	ldrb	r2, [r7, #7]
 801bb02:	4936      	ldr	r1, [pc, #216]	; (801bbdc <etharp_output_to_arp_index+0x124>)
 801bb04:	4613      	mov	r3, r2
 801bb06:	005b      	lsls	r3, r3, #1
 801bb08:	4413      	add	r3, r2
 801bb0a:	00db      	lsls	r3, r3, #3
 801bb0c:	440b      	add	r3, r1
 801bb0e:	3312      	adds	r3, #18
 801bb10:	881b      	ldrh	r3, [r3, #0]
 801bb12:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801bb16:	d919      	bls.n	801bb4c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801bb18:	79fa      	ldrb	r2, [r7, #7]
 801bb1a:	4613      	mov	r3, r2
 801bb1c:	005b      	lsls	r3, r3, #1
 801bb1e:	4413      	add	r3, r2
 801bb20:	00db      	lsls	r3, r3, #3
 801bb22:	4a2e      	ldr	r2, [pc, #184]	; (801bbdc <etharp_output_to_arp_index+0x124>)
 801bb24:	4413      	add	r3, r2
 801bb26:	3304      	adds	r3, #4
 801bb28:	4619      	mov	r1, r3
 801bb2a:	68f8      	ldr	r0, [r7, #12]
 801bb2c:	f000 fb4c 	bl	801c1c8 <etharp_request>
 801bb30:	4603      	mov	r3, r0
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d138      	bne.n	801bba8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bb36:	79fa      	ldrb	r2, [r7, #7]
 801bb38:	4928      	ldr	r1, [pc, #160]	; (801bbdc <etharp_output_to_arp_index+0x124>)
 801bb3a:	4613      	mov	r3, r2
 801bb3c:	005b      	lsls	r3, r3, #1
 801bb3e:	4413      	add	r3, r2
 801bb40:	00db      	lsls	r3, r3, #3
 801bb42:	440b      	add	r3, r1
 801bb44:	3314      	adds	r3, #20
 801bb46:	2203      	movs	r2, #3
 801bb48:	701a      	strb	r2, [r3, #0]
 801bb4a:	e02d      	b.n	801bba8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801bb4c:	79fa      	ldrb	r2, [r7, #7]
 801bb4e:	4923      	ldr	r1, [pc, #140]	; (801bbdc <etharp_output_to_arp_index+0x124>)
 801bb50:	4613      	mov	r3, r2
 801bb52:	005b      	lsls	r3, r3, #1
 801bb54:	4413      	add	r3, r2
 801bb56:	00db      	lsls	r3, r3, #3
 801bb58:	440b      	add	r3, r1
 801bb5a:	3312      	adds	r3, #18
 801bb5c:	881b      	ldrh	r3, [r3, #0]
 801bb5e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801bb62:	d321      	bcc.n	801bba8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801bb64:	79fa      	ldrb	r2, [r7, #7]
 801bb66:	4613      	mov	r3, r2
 801bb68:	005b      	lsls	r3, r3, #1
 801bb6a:	4413      	add	r3, r2
 801bb6c:	00db      	lsls	r3, r3, #3
 801bb6e:	4a1b      	ldr	r2, [pc, #108]	; (801bbdc <etharp_output_to_arp_index+0x124>)
 801bb70:	4413      	add	r3, r2
 801bb72:	1d19      	adds	r1, r3, #4
 801bb74:	79fa      	ldrb	r2, [r7, #7]
 801bb76:	4613      	mov	r3, r2
 801bb78:	005b      	lsls	r3, r3, #1
 801bb7a:	4413      	add	r3, r2
 801bb7c:	00db      	lsls	r3, r3, #3
 801bb7e:	3308      	adds	r3, #8
 801bb80:	4a16      	ldr	r2, [pc, #88]	; (801bbdc <etharp_output_to_arp_index+0x124>)
 801bb82:	4413      	add	r3, r2
 801bb84:	3304      	adds	r3, #4
 801bb86:	461a      	mov	r2, r3
 801bb88:	68f8      	ldr	r0, [r7, #12]
 801bb8a:	f000 fafb 	bl	801c184 <etharp_request_dst>
 801bb8e:	4603      	mov	r3, r0
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d109      	bne.n	801bba8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bb94:	79fa      	ldrb	r2, [r7, #7]
 801bb96:	4911      	ldr	r1, [pc, #68]	; (801bbdc <etharp_output_to_arp_index+0x124>)
 801bb98:	4613      	mov	r3, r2
 801bb9a:	005b      	lsls	r3, r3, #1
 801bb9c:	4413      	add	r3, r2
 801bb9e:	00db      	lsls	r3, r3, #3
 801bba0:	440b      	add	r3, r1
 801bba2:	3314      	adds	r3, #20
 801bba4:	2203      	movs	r2, #3
 801bba6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801bbae:	79fa      	ldrb	r2, [r7, #7]
 801bbb0:	4613      	mov	r3, r2
 801bbb2:	005b      	lsls	r3, r3, #1
 801bbb4:	4413      	add	r3, r2
 801bbb6:	00db      	lsls	r3, r3, #3
 801bbb8:	3308      	adds	r3, #8
 801bbba:	4a08      	ldr	r2, [pc, #32]	; (801bbdc <etharp_output_to_arp_index+0x124>)
 801bbbc:	4413      	add	r3, r2
 801bbbe:	3304      	adds	r3, #4
 801bbc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801bbc4:	9200      	str	r2, [sp, #0]
 801bbc6:	460a      	mov	r2, r1
 801bbc8:	68b9      	ldr	r1, [r7, #8]
 801bbca:	68f8      	ldr	r0, [r7, #12]
 801bbcc:	f001 fe4e 	bl	801d86c <ethernet_output>
 801bbd0:	4603      	mov	r3, r0
}
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	3710      	adds	r7, #16
 801bbd6:	46bd      	mov	sp, r7
 801bbd8:	bd80      	pop	{r7, pc}
 801bbda:	bf00      	nop
 801bbdc:	2000fa14 	.word	0x2000fa14
 801bbe0:	08022c14 	.word	0x08022c14
 801bbe4:	08022d84 	.word	0x08022d84
 801bbe8:	08022c8c 	.word	0x08022c8c

0801bbec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801bbec:	b580      	push	{r7, lr}
 801bbee:	b08a      	sub	sp, #40	; 0x28
 801bbf0:	af02      	add	r7, sp, #8
 801bbf2:	60f8      	str	r0, [r7, #12]
 801bbf4:	60b9      	str	r1, [r7, #8]
 801bbf6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801bbfc:	68fb      	ldr	r3, [r7, #12]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d106      	bne.n	801bc10 <etharp_output+0x24>
 801bc02:	4b73      	ldr	r3, [pc, #460]	; (801bdd0 <etharp_output+0x1e4>)
 801bc04:	f240 321e 	movw	r2, #798	; 0x31e
 801bc08:	4972      	ldr	r1, [pc, #456]	; (801bdd4 <etharp_output+0x1e8>)
 801bc0a:	4873      	ldr	r0, [pc, #460]	; (801bdd8 <etharp_output+0x1ec>)
 801bc0c:	f002 fbb2 	bl	801e374 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801bc10:	68bb      	ldr	r3, [r7, #8]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d106      	bne.n	801bc24 <etharp_output+0x38>
 801bc16:	4b6e      	ldr	r3, [pc, #440]	; (801bdd0 <etharp_output+0x1e4>)
 801bc18:	f240 321f 	movw	r2, #799	; 0x31f
 801bc1c:	496f      	ldr	r1, [pc, #444]	; (801bddc <etharp_output+0x1f0>)
 801bc1e:	486e      	ldr	r0, [pc, #440]	; (801bdd8 <etharp_output+0x1ec>)
 801bc20:	f002 fba8 	bl	801e374 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d106      	bne.n	801bc38 <etharp_output+0x4c>
 801bc2a:	4b69      	ldr	r3, [pc, #420]	; (801bdd0 <etharp_output+0x1e4>)
 801bc2c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801bc30:	496b      	ldr	r1, [pc, #428]	; (801bde0 <etharp_output+0x1f4>)
 801bc32:	4869      	ldr	r0, [pc, #420]	; (801bdd8 <etharp_output+0x1ec>)
 801bc34:	f002 fb9e 	bl	801e374 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	68f9      	ldr	r1, [r7, #12]
 801bc3e:	4618      	mov	r0, r3
 801bc40:	f000 ff06 	bl	801ca50 <ip4_addr_isbroadcast_u32>
 801bc44:	4603      	mov	r3, r0
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d002      	beq.n	801bc50 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801bc4a:	4b66      	ldr	r3, [pc, #408]	; (801bde4 <etharp_output+0x1f8>)
 801bc4c:	61fb      	str	r3, [r7, #28]
 801bc4e:	e0af      	b.n	801bdb0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801bc58:	2be0      	cmp	r3, #224	; 0xe0
 801bc5a:	d118      	bne.n	801bc8e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801bc5c:	2301      	movs	r3, #1
 801bc5e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801bc60:	2300      	movs	r3, #0
 801bc62:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801bc64:	235e      	movs	r3, #94	; 0x5e
 801bc66:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	3301      	adds	r3, #1
 801bc6c:	781b      	ldrb	r3, [r3, #0]
 801bc6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bc72:	b2db      	uxtb	r3, r3
 801bc74:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	3302      	adds	r3, #2
 801bc7a:	781b      	ldrb	r3, [r3, #0]
 801bc7c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	3303      	adds	r3, #3
 801bc82:	781b      	ldrb	r3, [r3, #0]
 801bc84:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801bc86:	f107 0310 	add.w	r3, r7, #16
 801bc8a:	61fb      	str	r3, [r7, #28]
 801bc8c:	e090      	b.n	801bdb0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	681a      	ldr	r2, [r3, #0]
 801bc92:	68fb      	ldr	r3, [r7, #12]
 801bc94:	3304      	adds	r3, #4
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	405a      	eors	r2, r3
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	3308      	adds	r3, #8
 801bc9e:	681b      	ldr	r3, [r3, #0]
 801bca0:	4013      	ands	r3, r2
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d012      	beq.n	801bccc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801bcac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801bcb0:	4293      	cmp	r3, r2
 801bcb2:	d00b      	beq.n	801bccc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801bcb4:	68fb      	ldr	r3, [r7, #12]
 801bcb6:	330c      	adds	r3, #12
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d003      	beq.n	801bcc6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801bcbe:	68fb      	ldr	r3, [r7, #12]
 801bcc0:	330c      	adds	r3, #12
 801bcc2:	61bb      	str	r3, [r7, #24]
 801bcc4:	e002      	b.n	801bccc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801bcc6:	f06f 0303 	mvn.w	r3, #3
 801bcca:	e07d      	b.n	801bdc8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801bccc:	4b46      	ldr	r3, [pc, #280]	; (801bde8 <etharp_output+0x1fc>)
 801bcce:	781b      	ldrb	r3, [r3, #0]
 801bcd0:	4619      	mov	r1, r3
 801bcd2:	4a46      	ldr	r2, [pc, #280]	; (801bdec <etharp_output+0x200>)
 801bcd4:	460b      	mov	r3, r1
 801bcd6:	005b      	lsls	r3, r3, #1
 801bcd8:	440b      	add	r3, r1
 801bcda:	00db      	lsls	r3, r3, #3
 801bcdc:	4413      	add	r3, r2
 801bcde:	3314      	adds	r3, #20
 801bce0:	781b      	ldrb	r3, [r3, #0]
 801bce2:	2b01      	cmp	r3, #1
 801bce4:	d925      	bls.n	801bd32 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801bce6:	4b40      	ldr	r3, [pc, #256]	; (801bde8 <etharp_output+0x1fc>)
 801bce8:	781b      	ldrb	r3, [r3, #0]
 801bcea:	4619      	mov	r1, r3
 801bcec:	4a3f      	ldr	r2, [pc, #252]	; (801bdec <etharp_output+0x200>)
 801bcee:	460b      	mov	r3, r1
 801bcf0:	005b      	lsls	r3, r3, #1
 801bcf2:	440b      	add	r3, r1
 801bcf4:	00db      	lsls	r3, r3, #3
 801bcf6:	4413      	add	r3, r2
 801bcf8:	3308      	adds	r3, #8
 801bcfa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801bcfc:	68fa      	ldr	r2, [r7, #12]
 801bcfe:	429a      	cmp	r2, r3
 801bd00:	d117      	bne.n	801bd32 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801bd02:	69bb      	ldr	r3, [r7, #24]
 801bd04:	681a      	ldr	r2, [r3, #0]
 801bd06:	4b38      	ldr	r3, [pc, #224]	; (801bde8 <etharp_output+0x1fc>)
 801bd08:	781b      	ldrb	r3, [r3, #0]
 801bd0a:	4618      	mov	r0, r3
 801bd0c:	4937      	ldr	r1, [pc, #220]	; (801bdec <etharp_output+0x200>)
 801bd0e:	4603      	mov	r3, r0
 801bd10:	005b      	lsls	r3, r3, #1
 801bd12:	4403      	add	r3, r0
 801bd14:	00db      	lsls	r3, r3, #3
 801bd16:	440b      	add	r3, r1
 801bd18:	3304      	adds	r3, #4
 801bd1a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801bd1c:	429a      	cmp	r2, r3
 801bd1e:	d108      	bne.n	801bd32 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801bd20:	4b31      	ldr	r3, [pc, #196]	; (801bde8 <etharp_output+0x1fc>)
 801bd22:	781b      	ldrb	r3, [r3, #0]
 801bd24:	461a      	mov	r2, r3
 801bd26:	68b9      	ldr	r1, [r7, #8]
 801bd28:	68f8      	ldr	r0, [r7, #12]
 801bd2a:	f7ff fec5 	bl	801bab8 <etharp_output_to_arp_index>
 801bd2e:	4603      	mov	r3, r0
 801bd30:	e04a      	b.n	801bdc8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801bd32:	2300      	movs	r3, #0
 801bd34:	75fb      	strb	r3, [r7, #23]
 801bd36:	e031      	b.n	801bd9c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801bd38:	7dfa      	ldrb	r2, [r7, #23]
 801bd3a:	492c      	ldr	r1, [pc, #176]	; (801bdec <etharp_output+0x200>)
 801bd3c:	4613      	mov	r3, r2
 801bd3e:	005b      	lsls	r3, r3, #1
 801bd40:	4413      	add	r3, r2
 801bd42:	00db      	lsls	r3, r3, #3
 801bd44:	440b      	add	r3, r1
 801bd46:	3314      	adds	r3, #20
 801bd48:	781b      	ldrb	r3, [r3, #0]
 801bd4a:	2b01      	cmp	r3, #1
 801bd4c:	d923      	bls.n	801bd96 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801bd4e:	7dfa      	ldrb	r2, [r7, #23]
 801bd50:	4926      	ldr	r1, [pc, #152]	; (801bdec <etharp_output+0x200>)
 801bd52:	4613      	mov	r3, r2
 801bd54:	005b      	lsls	r3, r3, #1
 801bd56:	4413      	add	r3, r2
 801bd58:	00db      	lsls	r3, r3, #3
 801bd5a:	440b      	add	r3, r1
 801bd5c:	3308      	adds	r3, #8
 801bd5e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801bd60:	68fa      	ldr	r2, [r7, #12]
 801bd62:	429a      	cmp	r2, r3
 801bd64:	d117      	bne.n	801bd96 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801bd66:	69bb      	ldr	r3, [r7, #24]
 801bd68:	6819      	ldr	r1, [r3, #0]
 801bd6a:	7dfa      	ldrb	r2, [r7, #23]
 801bd6c:	481f      	ldr	r0, [pc, #124]	; (801bdec <etharp_output+0x200>)
 801bd6e:	4613      	mov	r3, r2
 801bd70:	005b      	lsls	r3, r3, #1
 801bd72:	4413      	add	r3, r2
 801bd74:	00db      	lsls	r3, r3, #3
 801bd76:	4403      	add	r3, r0
 801bd78:	3304      	adds	r3, #4
 801bd7a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801bd7c:	4299      	cmp	r1, r3
 801bd7e:	d10a      	bne.n	801bd96 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801bd80:	4a19      	ldr	r2, [pc, #100]	; (801bde8 <etharp_output+0x1fc>)
 801bd82:	7dfb      	ldrb	r3, [r7, #23]
 801bd84:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801bd86:	7dfb      	ldrb	r3, [r7, #23]
 801bd88:	461a      	mov	r2, r3
 801bd8a:	68b9      	ldr	r1, [r7, #8]
 801bd8c:	68f8      	ldr	r0, [r7, #12]
 801bd8e:	f7ff fe93 	bl	801bab8 <etharp_output_to_arp_index>
 801bd92:	4603      	mov	r3, r0
 801bd94:	e018      	b.n	801bdc8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801bd96:	7dfb      	ldrb	r3, [r7, #23]
 801bd98:	3301      	adds	r3, #1
 801bd9a:	75fb      	strb	r3, [r7, #23]
 801bd9c:	7dfb      	ldrb	r3, [r7, #23]
 801bd9e:	2b09      	cmp	r3, #9
 801bda0:	d9ca      	bls.n	801bd38 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801bda2:	68ba      	ldr	r2, [r7, #8]
 801bda4:	69b9      	ldr	r1, [r7, #24]
 801bda6:	68f8      	ldr	r0, [r7, #12]
 801bda8:	f000 f822 	bl	801bdf0 <etharp_query>
 801bdac:	4603      	mov	r3, r0
 801bdae:	e00b      	b.n	801bdc8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801bdb0:	68fb      	ldr	r3, [r7, #12]
 801bdb2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801bdb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bdba:	9300      	str	r3, [sp, #0]
 801bdbc:	69fb      	ldr	r3, [r7, #28]
 801bdbe:	68b9      	ldr	r1, [r7, #8]
 801bdc0:	68f8      	ldr	r0, [r7, #12]
 801bdc2:	f001 fd53 	bl	801d86c <ethernet_output>
 801bdc6:	4603      	mov	r3, r0
}
 801bdc8:	4618      	mov	r0, r3
 801bdca:	3720      	adds	r7, #32
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	bd80      	pop	{r7, pc}
 801bdd0:	08022c14 	.word	0x08022c14
 801bdd4:	08022d64 	.word	0x08022d64
 801bdd8:	08022c8c 	.word	0x08022c8c
 801bddc:	08022db4 	.word	0x08022db4
 801bde0:	08022d54 	.word	0x08022d54
 801bde4:	080234e0 	.word	0x080234e0
 801bde8:	2000fb04 	.word	0x2000fb04
 801bdec:	2000fa14 	.word	0x2000fa14

0801bdf0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801bdf0:	b580      	push	{r7, lr}
 801bdf2:	b08c      	sub	sp, #48	; 0x30
 801bdf4:	af02      	add	r7, sp, #8
 801bdf6:	60f8      	str	r0, [r7, #12]
 801bdf8:	60b9      	str	r1, [r7, #8]
 801bdfa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801bdfc:	68fb      	ldr	r3, [r7, #12]
 801bdfe:	332a      	adds	r3, #42	; 0x2a
 801be00:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801be02:	23ff      	movs	r3, #255	; 0xff
 801be04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801be08:	2300      	movs	r3, #0
 801be0a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801be0c:	68bb      	ldr	r3, [r7, #8]
 801be0e:	681b      	ldr	r3, [r3, #0]
 801be10:	68f9      	ldr	r1, [r7, #12]
 801be12:	4618      	mov	r0, r3
 801be14:	f000 fe1c 	bl	801ca50 <ip4_addr_isbroadcast_u32>
 801be18:	4603      	mov	r3, r0
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d10c      	bne.n	801be38 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801be1e:	68bb      	ldr	r3, [r7, #8]
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801be26:	2be0      	cmp	r3, #224	; 0xe0
 801be28:	d006      	beq.n	801be38 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801be2a:	68bb      	ldr	r3, [r7, #8]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d003      	beq.n	801be38 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801be30:	68bb      	ldr	r3, [r7, #8]
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	2b00      	cmp	r3, #0
 801be36:	d102      	bne.n	801be3e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801be38:	f06f 030f 	mvn.w	r3, #15
 801be3c:	e101      	b.n	801c042 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801be3e:	68fa      	ldr	r2, [r7, #12]
 801be40:	2101      	movs	r1, #1
 801be42:	68b8      	ldr	r0, [r7, #8]
 801be44:	f7ff fb60 	bl	801b508 <etharp_find_entry>
 801be48:	4603      	mov	r3, r0
 801be4a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801be4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801be50:	2b00      	cmp	r3, #0
 801be52:	da02      	bge.n	801be5a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801be54:	8a7b      	ldrh	r3, [r7, #18]
 801be56:	b25b      	sxtb	r3, r3
 801be58:	e0f3      	b.n	801c042 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801be5a:	8a7b      	ldrh	r3, [r7, #18]
 801be5c:	2b7e      	cmp	r3, #126	; 0x7e
 801be5e:	d906      	bls.n	801be6e <etharp_query+0x7e>
 801be60:	4b7a      	ldr	r3, [pc, #488]	; (801c04c <etharp_query+0x25c>)
 801be62:	f240 32c1 	movw	r2, #961	; 0x3c1
 801be66:	497a      	ldr	r1, [pc, #488]	; (801c050 <etharp_query+0x260>)
 801be68:	487a      	ldr	r0, [pc, #488]	; (801c054 <etharp_query+0x264>)
 801be6a:	f002 fa83 	bl	801e374 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801be6e:	8a7b      	ldrh	r3, [r7, #18]
 801be70:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801be72:	7c7a      	ldrb	r2, [r7, #17]
 801be74:	4978      	ldr	r1, [pc, #480]	; (801c058 <etharp_query+0x268>)
 801be76:	4613      	mov	r3, r2
 801be78:	005b      	lsls	r3, r3, #1
 801be7a:	4413      	add	r3, r2
 801be7c:	00db      	lsls	r3, r3, #3
 801be7e:	440b      	add	r3, r1
 801be80:	3314      	adds	r3, #20
 801be82:	781b      	ldrb	r3, [r3, #0]
 801be84:	2b00      	cmp	r3, #0
 801be86:	d115      	bne.n	801beb4 <etharp_query+0xc4>
    is_new_entry = 1;
 801be88:	2301      	movs	r3, #1
 801be8a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801be8c:	7c7a      	ldrb	r2, [r7, #17]
 801be8e:	4972      	ldr	r1, [pc, #456]	; (801c058 <etharp_query+0x268>)
 801be90:	4613      	mov	r3, r2
 801be92:	005b      	lsls	r3, r3, #1
 801be94:	4413      	add	r3, r2
 801be96:	00db      	lsls	r3, r3, #3
 801be98:	440b      	add	r3, r1
 801be9a:	3314      	adds	r3, #20
 801be9c:	2201      	movs	r2, #1
 801be9e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801bea0:	7c7a      	ldrb	r2, [r7, #17]
 801bea2:	496d      	ldr	r1, [pc, #436]	; (801c058 <etharp_query+0x268>)
 801bea4:	4613      	mov	r3, r2
 801bea6:	005b      	lsls	r3, r3, #1
 801bea8:	4413      	add	r3, r2
 801beaa:	00db      	lsls	r3, r3, #3
 801beac:	440b      	add	r3, r1
 801beae:	3308      	adds	r3, #8
 801beb0:	68fa      	ldr	r2, [r7, #12]
 801beb2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801beb4:	7c7a      	ldrb	r2, [r7, #17]
 801beb6:	4968      	ldr	r1, [pc, #416]	; (801c058 <etharp_query+0x268>)
 801beb8:	4613      	mov	r3, r2
 801beba:	005b      	lsls	r3, r3, #1
 801bebc:	4413      	add	r3, r2
 801bebe:	00db      	lsls	r3, r3, #3
 801bec0:	440b      	add	r3, r1
 801bec2:	3314      	adds	r3, #20
 801bec4:	781b      	ldrb	r3, [r3, #0]
 801bec6:	2b01      	cmp	r3, #1
 801bec8:	d011      	beq.n	801beee <etharp_query+0xfe>
 801beca:	7c7a      	ldrb	r2, [r7, #17]
 801becc:	4962      	ldr	r1, [pc, #392]	; (801c058 <etharp_query+0x268>)
 801bece:	4613      	mov	r3, r2
 801bed0:	005b      	lsls	r3, r3, #1
 801bed2:	4413      	add	r3, r2
 801bed4:	00db      	lsls	r3, r3, #3
 801bed6:	440b      	add	r3, r1
 801bed8:	3314      	adds	r3, #20
 801beda:	781b      	ldrb	r3, [r3, #0]
 801bedc:	2b01      	cmp	r3, #1
 801bede:	d806      	bhi.n	801beee <etharp_query+0xfe>
 801bee0:	4b5a      	ldr	r3, [pc, #360]	; (801c04c <etharp_query+0x25c>)
 801bee2:	f240 32cd 	movw	r2, #973	; 0x3cd
 801bee6:	495d      	ldr	r1, [pc, #372]	; (801c05c <etharp_query+0x26c>)
 801bee8:	485a      	ldr	r0, [pc, #360]	; (801c054 <etharp_query+0x264>)
 801beea:	f002 fa43 	bl	801e374 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801beee:	6a3b      	ldr	r3, [r7, #32]
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	d102      	bne.n	801befa <etharp_query+0x10a>
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d10c      	bne.n	801bf14 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801befa:	68b9      	ldr	r1, [r7, #8]
 801befc:	68f8      	ldr	r0, [r7, #12]
 801befe:	f000 f963 	bl	801c1c8 <etharp_request>
 801bf02:	4603      	mov	r3, r0
 801bf04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d102      	bne.n	801bf14 <etharp_query+0x124>
      return result;
 801bf0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801bf12:	e096      	b.n	801c042 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d106      	bne.n	801bf28 <etharp_query+0x138>
 801bf1a:	4b4c      	ldr	r3, [pc, #304]	; (801c04c <etharp_query+0x25c>)
 801bf1c:	f240 32e1 	movw	r2, #993	; 0x3e1
 801bf20:	494f      	ldr	r1, [pc, #316]	; (801c060 <etharp_query+0x270>)
 801bf22:	484c      	ldr	r0, [pc, #304]	; (801c054 <etharp_query+0x264>)
 801bf24:	f002 fa26 	bl	801e374 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801bf28:	7c7a      	ldrb	r2, [r7, #17]
 801bf2a:	494b      	ldr	r1, [pc, #300]	; (801c058 <etharp_query+0x268>)
 801bf2c:	4613      	mov	r3, r2
 801bf2e:	005b      	lsls	r3, r3, #1
 801bf30:	4413      	add	r3, r2
 801bf32:	00db      	lsls	r3, r3, #3
 801bf34:	440b      	add	r3, r1
 801bf36:	3314      	adds	r3, #20
 801bf38:	781b      	ldrb	r3, [r3, #0]
 801bf3a:	2b01      	cmp	r3, #1
 801bf3c:	d917      	bls.n	801bf6e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801bf3e:	4a49      	ldr	r2, [pc, #292]	; (801c064 <etharp_query+0x274>)
 801bf40:	7c7b      	ldrb	r3, [r7, #17]
 801bf42:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801bf44:	7c7a      	ldrb	r2, [r7, #17]
 801bf46:	4613      	mov	r3, r2
 801bf48:	005b      	lsls	r3, r3, #1
 801bf4a:	4413      	add	r3, r2
 801bf4c:	00db      	lsls	r3, r3, #3
 801bf4e:	3308      	adds	r3, #8
 801bf50:	4a41      	ldr	r2, [pc, #260]	; (801c058 <etharp_query+0x268>)
 801bf52:	4413      	add	r3, r2
 801bf54:	3304      	adds	r3, #4
 801bf56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801bf5a:	9200      	str	r2, [sp, #0]
 801bf5c:	697a      	ldr	r2, [r7, #20]
 801bf5e:	6879      	ldr	r1, [r7, #4]
 801bf60:	68f8      	ldr	r0, [r7, #12]
 801bf62:	f001 fc83 	bl	801d86c <ethernet_output>
 801bf66:	4603      	mov	r3, r0
 801bf68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801bf6c:	e067      	b.n	801c03e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801bf6e:	7c7a      	ldrb	r2, [r7, #17]
 801bf70:	4939      	ldr	r1, [pc, #228]	; (801c058 <etharp_query+0x268>)
 801bf72:	4613      	mov	r3, r2
 801bf74:	005b      	lsls	r3, r3, #1
 801bf76:	4413      	add	r3, r2
 801bf78:	00db      	lsls	r3, r3, #3
 801bf7a:	440b      	add	r3, r1
 801bf7c:	3314      	adds	r3, #20
 801bf7e:	781b      	ldrb	r3, [r3, #0]
 801bf80:	2b01      	cmp	r3, #1
 801bf82:	d15c      	bne.n	801c03e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801bf84:	2300      	movs	r3, #0
 801bf86:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801bf8c:	e01c      	b.n	801bfc8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801bf8e:	69fb      	ldr	r3, [r7, #28]
 801bf90:	895a      	ldrh	r2, [r3, #10]
 801bf92:	69fb      	ldr	r3, [r7, #28]
 801bf94:	891b      	ldrh	r3, [r3, #8]
 801bf96:	429a      	cmp	r2, r3
 801bf98:	d10a      	bne.n	801bfb0 <etharp_query+0x1c0>
 801bf9a:	69fb      	ldr	r3, [r7, #28]
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d006      	beq.n	801bfb0 <etharp_query+0x1c0>
 801bfa2:	4b2a      	ldr	r3, [pc, #168]	; (801c04c <etharp_query+0x25c>)
 801bfa4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801bfa8:	492f      	ldr	r1, [pc, #188]	; (801c068 <etharp_query+0x278>)
 801bfaa:	482a      	ldr	r0, [pc, #168]	; (801c054 <etharp_query+0x264>)
 801bfac:	f002 f9e2 	bl	801e374 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801bfb0:	69fb      	ldr	r3, [r7, #28]
 801bfb2:	7b1b      	ldrb	r3, [r3, #12]
 801bfb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d002      	beq.n	801bfc2 <etharp_query+0x1d2>
        copy_needed = 1;
 801bfbc:	2301      	movs	r3, #1
 801bfbe:	61bb      	str	r3, [r7, #24]
        break;
 801bfc0:	e005      	b.n	801bfce <etharp_query+0x1de>
      }
      p = p->next;
 801bfc2:	69fb      	ldr	r3, [r7, #28]
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801bfc8:	69fb      	ldr	r3, [r7, #28]
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d1df      	bne.n	801bf8e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801bfce:	69bb      	ldr	r3, [r7, #24]
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d007      	beq.n	801bfe4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801bfd4:	687a      	ldr	r2, [r7, #4]
 801bfd6:	f44f 7120 	mov.w	r1, #640	; 0x280
 801bfda:	200e      	movs	r0, #14
 801bfdc:	f7f8 fc88 	bl	80148f0 <pbuf_clone>
 801bfe0:	61f8      	str	r0, [r7, #28]
 801bfe2:	e004      	b.n	801bfee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801bfe8:	69f8      	ldr	r0, [r7, #28]
 801bfea:	f7f8 fabf 	bl	801456c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801bfee:	69fb      	ldr	r3, [r7, #28]
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d021      	beq.n	801c038 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801bff4:	7c7a      	ldrb	r2, [r7, #17]
 801bff6:	4918      	ldr	r1, [pc, #96]	; (801c058 <etharp_query+0x268>)
 801bff8:	4613      	mov	r3, r2
 801bffa:	005b      	lsls	r3, r3, #1
 801bffc:	4413      	add	r3, r2
 801bffe:	00db      	lsls	r3, r3, #3
 801c000:	440b      	add	r3, r1
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d00a      	beq.n	801c01e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c008:	7c7a      	ldrb	r2, [r7, #17]
 801c00a:	4913      	ldr	r1, [pc, #76]	; (801c058 <etharp_query+0x268>)
 801c00c:	4613      	mov	r3, r2
 801c00e:	005b      	lsls	r3, r3, #1
 801c010:	4413      	add	r3, r2
 801c012:	00db      	lsls	r3, r3, #3
 801c014:	440b      	add	r3, r1
 801c016:	681b      	ldr	r3, [r3, #0]
 801c018:	4618      	mov	r0, r3
 801c01a:	f7f8 fa01 	bl	8014420 <pbuf_free>
      }
      arp_table[i].q = p;
 801c01e:	7c7a      	ldrb	r2, [r7, #17]
 801c020:	490d      	ldr	r1, [pc, #52]	; (801c058 <etharp_query+0x268>)
 801c022:	4613      	mov	r3, r2
 801c024:	005b      	lsls	r3, r3, #1
 801c026:	4413      	add	r3, r2
 801c028:	00db      	lsls	r3, r3, #3
 801c02a:	440b      	add	r3, r1
 801c02c:	69fa      	ldr	r2, [r7, #28]
 801c02e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c030:	2300      	movs	r3, #0
 801c032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c036:	e002      	b.n	801c03e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c038:	23ff      	movs	r3, #255	; 0xff
 801c03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801c03e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801c042:	4618      	mov	r0, r3
 801c044:	3728      	adds	r7, #40	; 0x28
 801c046:	46bd      	mov	sp, r7
 801c048:	bd80      	pop	{r7, pc}
 801c04a:	bf00      	nop
 801c04c:	08022c14 	.word	0x08022c14
 801c050:	08022dc0 	.word	0x08022dc0
 801c054:	08022c8c 	.word	0x08022c8c
 801c058:	2000fa14 	.word	0x2000fa14
 801c05c:	08022dd0 	.word	0x08022dd0
 801c060:	08022db4 	.word	0x08022db4
 801c064:	2000fb04 	.word	0x2000fb04
 801c068:	08022df8 	.word	0x08022df8

0801c06c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c06c:	b580      	push	{r7, lr}
 801c06e:	b08a      	sub	sp, #40	; 0x28
 801c070:	af02      	add	r7, sp, #8
 801c072:	60f8      	str	r0, [r7, #12]
 801c074:	60b9      	str	r1, [r7, #8]
 801c076:	607a      	str	r2, [r7, #4]
 801c078:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c07a:	2300      	movs	r3, #0
 801c07c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	2b00      	cmp	r3, #0
 801c082:	d106      	bne.n	801c092 <etharp_raw+0x26>
 801c084:	4b3a      	ldr	r3, [pc, #232]	; (801c170 <etharp_raw+0x104>)
 801c086:	f240 4257 	movw	r2, #1111	; 0x457
 801c08a:	493a      	ldr	r1, [pc, #232]	; (801c174 <etharp_raw+0x108>)
 801c08c:	483a      	ldr	r0, [pc, #232]	; (801c178 <etharp_raw+0x10c>)
 801c08e:	f002 f971 	bl	801e374 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c092:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c096:	211c      	movs	r1, #28
 801c098:	200e      	movs	r0, #14
 801c09a:	f7f7 fedd 	bl	8013e58 <pbuf_alloc>
 801c09e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c0a0:	69bb      	ldr	r3, [r7, #24]
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d102      	bne.n	801c0ac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c0a6:	f04f 33ff 	mov.w	r3, #4294967295
 801c0aa:	e05d      	b.n	801c168 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c0ac:	69bb      	ldr	r3, [r7, #24]
 801c0ae:	895b      	ldrh	r3, [r3, #10]
 801c0b0:	2b1b      	cmp	r3, #27
 801c0b2:	d806      	bhi.n	801c0c2 <etharp_raw+0x56>
 801c0b4:	4b2e      	ldr	r3, [pc, #184]	; (801c170 <etharp_raw+0x104>)
 801c0b6:	f240 4262 	movw	r2, #1122	; 0x462
 801c0ba:	4930      	ldr	r1, [pc, #192]	; (801c17c <etharp_raw+0x110>)
 801c0bc:	482e      	ldr	r0, [pc, #184]	; (801c178 <etharp_raw+0x10c>)
 801c0be:	f002 f959 	bl	801e374 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c0c2:	69bb      	ldr	r3, [r7, #24]
 801c0c4:	685b      	ldr	r3, [r3, #4]
 801c0c6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c0c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c0ca:	4618      	mov	r0, r3
 801c0cc:	f7f6 fc42 	bl	8012954 <lwip_htons>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	461a      	mov	r2, r3
 801c0d4:	697b      	ldr	r3, [r7, #20]
 801c0d6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c0de:	2b06      	cmp	r3, #6
 801c0e0:	d006      	beq.n	801c0f0 <etharp_raw+0x84>
 801c0e2:	4b23      	ldr	r3, [pc, #140]	; (801c170 <etharp_raw+0x104>)
 801c0e4:	f240 4269 	movw	r2, #1129	; 0x469
 801c0e8:	4925      	ldr	r1, [pc, #148]	; (801c180 <etharp_raw+0x114>)
 801c0ea:	4823      	ldr	r0, [pc, #140]	; (801c178 <etharp_raw+0x10c>)
 801c0ec:	f002 f942 	bl	801e374 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c0f0:	697b      	ldr	r3, [r7, #20]
 801c0f2:	3308      	adds	r3, #8
 801c0f4:	2206      	movs	r2, #6
 801c0f6:	6839      	ldr	r1, [r7, #0]
 801c0f8:	4618      	mov	r0, r3
 801c0fa:	f002 f82b 	bl	801e154 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c0fe:	697b      	ldr	r3, [r7, #20]
 801c100:	3312      	adds	r3, #18
 801c102:	2206      	movs	r2, #6
 801c104:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c106:	4618      	mov	r0, r3
 801c108:	f002 f824 	bl	801e154 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c10c:	697b      	ldr	r3, [r7, #20]
 801c10e:	330e      	adds	r3, #14
 801c110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c112:	6812      	ldr	r2, [r2, #0]
 801c114:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c116:	697b      	ldr	r3, [r7, #20]
 801c118:	3318      	adds	r3, #24
 801c11a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c11c:	6812      	ldr	r2, [r2, #0]
 801c11e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c120:	697b      	ldr	r3, [r7, #20]
 801c122:	2200      	movs	r2, #0
 801c124:	701a      	strb	r2, [r3, #0]
 801c126:	2200      	movs	r2, #0
 801c128:	f042 0201 	orr.w	r2, r2, #1
 801c12c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c12e:	697b      	ldr	r3, [r7, #20]
 801c130:	2200      	movs	r2, #0
 801c132:	f042 0208 	orr.w	r2, r2, #8
 801c136:	709a      	strb	r2, [r3, #2]
 801c138:	2200      	movs	r2, #0
 801c13a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c13c:	697b      	ldr	r3, [r7, #20]
 801c13e:	2206      	movs	r2, #6
 801c140:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c142:	697b      	ldr	r3, [r7, #20]
 801c144:	2204      	movs	r2, #4
 801c146:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c148:	f640 0306 	movw	r3, #2054	; 0x806
 801c14c:	9300      	str	r3, [sp, #0]
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	68ba      	ldr	r2, [r7, #8]
 801c152:	69b9      	ldr	r1, [r7, #24]
 801c154:	68f8      	ldr	r0, [r7, #12]
 801c156:	f001 fb89 	bl	801d86c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c15a:	69b8      	ldr	r0, [r7, #24]
 801c15c:	f7f8 f960 	bl	8014420 <pbuf_free>
  p = NULL;
 801c160:	2300      	movs	r3, #0
 801c162:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c164:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c168:	4618      	mov	r0, r3
 801c16a:	3720      	adds	r7, #32
 801c16c:	46bd      	mov	sp, r7
 801c16e:	bd80      	pop	{r7, pc}
 801c170:	08022c14 	.word	0x08022c14
 801c174:	08022d64 	.word	0x08022d64
 801c178:	08022c8c 	.word	0x08022c8c
 801c17c:	08022e14 	.word	0x08022e14
 801c180:	08022e48 	.word	0x08022e48

0801c184 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c184:	b580      	push	{r7, lr}
 801c186:	b088      	sub	sp, #32
 801c188:	af04      	add	r7, sp, #16
 801c18a:	60f8      	str	r0, [r7, #12]
 801c18c:	60b9      	str	r1, [r7, #8]
 801c18e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c190:	68fb      	ldr	r3, [r7, #12]
 801c192:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c196:	68fb      	ldr	r3, [r7, #12]
 801c198:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c1a0:	2201      	movs	r2, #1
 801c1a2:	9203      	str	r2, [sp, #12]
 801c1a4:	68ba      	ldr	r2, [r7, #8]
 801c1a6:	9202      	str	r2, [sp, #8]
 801c1a8:	4a06      	ldr	r2, [pc, #24]	; (801c1c4 <etharp_request_dst+0x40>)
 801c1aa:	9201      	str	r2, [sp, #4]
 801c1ac:	9300      	str	r3, [sp, #0]
 801c1ae:	4603      	mov	r3, r0
 801c1b0:	687a      	ldr	r2, [r7, #4]
 801c1b2:	68f8      	ldr	r0, [r7, #12]
 801c1b4:	f7ff ff5a 	bl	801c06c <etharp_raw>
 801c1b8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c1ba:	4618      	mov	r0, r3
 801c1bc:	3710      	adds	r7, #16
 801c1be:	46bd      	mov	sp, r7
 801c1c0:	bd80      	pop	{r7, pc}
 801c1c2:	bf00      	nop
 801c1c4:	080234e8 	.word	0x080234e8

0801c1c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c1c8:	b580      	push	{r7, lr}
 801c1ca:	b082      	sub	sp, #8
 801c1cc:	af00      	add	r7, sp, #0
 801c1ce:	6078      	str	r0, [r7, #4]
 801c1d0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c1d2:	4a05      	ldr	r2, [pc, #20]	; (801c1e8 <etharp_request+0x20>)
 801c1d4:	6839      	ldr	r1, [r7, #0]
 801c1d6:	6878      	ldr	r0, [r7, #4]
 801c1d8:	f7ff ffd4 	bl	801c184 <etharp_request_dst>
 801c1dc:	4603      	mov	r3, r0
}
 801c1de:	4618      	mov	r0, r3
 801c1e0:	3708      	adds	r7, #8
 801c1e2:	46bd      	mov	sp, r7
 801c1e4:	bd80      	pop	{r7, pc}
 801c1e6:	bf00      	nop
 801c1e8:	080234e0 	.word	0x080234e0

0801c1ec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	b08e      	sub	sp, #56	; 0x38
 801c1f0:	af04      	add	r7, sp, #16
 801c1f2:	6078      	str	r0, [r7, #4]
 801c1f4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c1f6:	4b79      	ldr	r3, [pc, #484]	; (801c3dc <icmp_input+0x1f0>)
 801c1f8:	689b      	ldr	r3, [r3, #8]
 801c1fa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1fe:	781b      	ldrb	r3, [r3, #0]
 801c200:	f003 030f 	and.w	r3, r3, #15
 801c204:	b2db      	uxtb	r3, r3
 801c206:	009b      	lsls	r3, r3, #2
 801c208:	b2db      	uxtb	r3, r3
 801c20a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801c20c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c20e:	2b13      	cmp	r3, #19
 801c210:	f240 80cd 	bls.w	801c3ae <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	895b      	ldrh	r3, [r3, #10]
 801c218:	2b03      	cmp	r3, #3
 801c21a:	f240 80ca 	bls.w	801c3b2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	685b      	ldr	r3, [r3, #4]
 801c222:	781b      	ldrb	r3, [r3, #0]
 801c224:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c228:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	f000 80b7 	beq.w	801c3a0 <icmp_input+0x1b4>
 801c232:	2b08      	cmp	r3, #8
 801c234:	f040 80b7 	bne.w	801c3a6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c238:	4b69      	ldr	r3, [pc, #420]	; (801c3e0 <icmp_input+0x1f4>)
 801c23a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c23c:	4b67      	ldr	r3, [pc, #412]	; (801c3dc <icmp_input+0x1f0>)
 801c23e:	695b      	ldr	r3, [r3, #20]
 801c240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c244:	2be0      	cmp	r3, #224	; 0xe0
 801c246:	f000 80bb 	beq.w	801c3c0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c24a:	4b64      	ldr	r3, [pc, #400]	; (801c3dc <icmp_input+0x1f0>)
 801c24c:	695b      	ldr	r3, [r3, #20]
 801c24e:	4a63      	ldr	r2, [pc, #396]	; (801c3dc <icmp_input+0x1f0>)
 801c250:	6812      	ldr	r2, [r2, #0]
 801c252:	4611      	mov	r1, r2
 801c254:	4618      	mov	r0, r3
 801c256:	f000 fbfb 	bl	801ca50 <ip4_addr_isbroadcast_u32>
 801c25a:	4603      	mov	r3, r0
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	f040 80b1 	bne.w	801c3c4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	891b      	ldrh	r3, [r3, #8]
 801c266:	2b07      	cmp	r3, #7
 801c268:	f240 80a5 	bls.w	801c3b6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c26c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c26e:	330e      	adds	r3, #14
 801c270:	4619      	mov	r1, r3
 801c272:	6878      	ldr	r0, [r7, #4]
 801c274:	f7f8 f83e 	bl	80142f4 <pbuf_add_header>
 801c278:	4603      	mov	r3, r0
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d04b      	beq.n	801c316 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	891a      	ldrh	r2, [r3, #8]
 801c282:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c284:	4413      	add	r3, r2
 801c286:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	891b      	ldrh	r3, [r3, #8]
 801c28c:	8b7a      	ldrh	r2, [r7, #26]
 801c28e:	429a      	cmp	r2, r3
 801c290:	f0c0 809a 	bcc.w	801c3c8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c294:	8b7b      	ldrh	r3, [r7, #26]
 801c296:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c29a:	4619      	mov	r1, r3
 801c29c:	200e      	movs	r0, #14
 801c29e:	f7f7 fddb 	bl	8013e58 <pbuf_alloc>
 801c2a2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c2a4:	697b      	ldr	r3, [r7, #20]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	f000 8090 	beq.w	801c3cc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c2ac:	697b      	ldr	r3, [r7, #20]
 801c2ae:	895b      	ldrh	r3, [r3, #10]
 801c2b0:	461a      	mov	r2, r3
 801c2b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c2b4:	3308      	adds	r3, #8
 801c2b6:	429a      	cmp	r2, r3
 801c2b8:	d203      	bcs.n	801c2c2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c2ba:	6978      	ldr	r0, [r7, #20]
 801c2bc:	f7f8 f8b0 	bl	8014420 <pbuf_free>
          goto icmperr;
 801c2c0:	e085      	b.n	801c3ce <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c2c2:	697b      	ldr	r3, [r7, #20]
 801c2c4:	685b      	ldr	r3, [r3, #4]
 801c2c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c2c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c2ca:	4618      	mov	r0, r3
 801c2cc:	f001 ff42 	bl	801e154 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c2d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c2d2:	4619      	mov	r1, r3
 801c2d4:	6978      	ldr	r0, [r7, #20]
 801c2d6:	f7f8 f81d 	bl	8014314 <pbuf_remove_header>
 801c2da:	4603      	mov	r3, r0
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d009      	beq.n	801c2f4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c2e0:	4b40      	ldr	r3, [pc, #256]	; (801c3e4 <icmp_input+0x1f8>)
 801c2e2:	22b6      	movs	r2, #182	; 0xb6
 801c2e4:	4940      	ldr	r1, [pc, #256]	; (801c3e8 <icmp_input+0x1fc>)
 801c2e6:	4841      	ldr	r0, [pc, #260]	; (801c3ec <icmp_input+0x200>)
 801c2e8:	f002 f844 	bl	801e374 <iprintf>
          pbuf_free(r);
 801c2ec:	6978      	ldr	r0, [r7, #20]
 801c2ee:	f7f8 f897 	bl	8014420 <pbuf_free>
          goto icmperr;
 801c2f2:	e06c      	b.n	801c3ce <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c2f4:	6879      	ldr	r1, [r7, #4]
 801c2f6:	6978      	ldr	r0, [r7, #20]
 801c2f8:	f7f8 f9b6 	bl	8014668 <pbuf_copy>
 801c2fc:	4603      	mov	r3, r0
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d003      	beq.n	801c30a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c302:	6978      	ldr	r0, [r7, #20]
 801c304:	f7f8 f88c 	bl	8014420 <pbuf_free>
          goto icmperr;
 801c308:	e061      	b.n	801c3ce <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801c30a:	6878      	ldr	r0, [r7, #4]
 801c30c:	f7f8 f888 	bl	8014420 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c310:	697b      	ldr	r3, [r7, #20]
 801c312:	607b      	str	r3, [r7, #4]
 801c314:	e00f      	b.n	801c336 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c316:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c318:	330e      	adds	r3, #14
 801c31a:	4619      	mov	r1, r3
 801c31c:	6878      	ldr	r0, [r7, #4]
 801c31e:	f7f7 fff9 	bl	8014314 <pbuf_remove_header>
 801c322:	4603      	mov	r3, r0
 801c324:	2b00      	cmp	r3, #0
 801c326:	d006      	beq.n	801c336 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c328:	4b2e      	ldr	r3, [pc, #184]	; (801c3e4 <icmp_input+0x1f8>)
 801c32a:	22c7      	movs	r2, #199	; 0xc7
 801c32c:	4930      	ldr	r1, [pc, #192]	; (801c3f0 <icmp_input+0x204>)
 801c32e:	482f      	ldr	r0, [pc, #188]	; (801c3ec <icmp_input+0x200>)
 801c330:	f002 f820 	bl	801e374 <iprintf>
          goto icmperr;
 801c334:	e04b      	b.n	801c3ce <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	685b      	ldr	r3, [r3, #4]
 801c33a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c33c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c33e:	4619      	mov	r1, r3
 801c340:	6878      	ldr	r0, [r7, #4]
 801c342:	f7f7 ffd7 	bl	80142f4 <pbuf_add_header>
 801c346:	4603      	mov	r3, r0
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d12b      	bne.n	801c3a4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	685b      	ldr	r3, [r3, #4]
 801c350:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c352:	69fb      	ldr	r3, [r7, #28]
 801c354:	681a      	ldr	r2, [r3, #0]
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c35a:	4b20      	ldr	r3, [pc, #128]	; (801c3dc <icmp_input+0x1f0>)
 801c35c:	691a      	ldr	r2, [r3, #16]
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c362:	693b      	ldr	r3, [r7, #16]
 801c364:	2200      	movs	r2, #0
 801c366:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801c368:	693b      	ldr	r3, [r7, #16]
 801c36a:	2200      	movs	r2, #0
 801c36c:	709a      	strb	r2, [r3, #2]
 801c36e:	2200      	movs	r2, #0
 801c370:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	22ff      	movs	r2, #255	; 0xff
 801c376:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	2200      	movs	r2, #0
 801c37c:	729a      	strb	r2, [r3, #10]
 801c37e:	2200      	movs	r2, #0
 801c380:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c382:	683b      	ldr	r3, [r7, #0]
 801c384:	9302      	str	r3, [sp, #8]
 801c386:	2301      	movs	r3, #1
 801c388:	9301      	str	r3, [sp, #4]
 801c38a:	2300      	movs	r3, #0
 801c38c:	9300      	str	r3, [sp, #0]
 801c38e:	23ff      	movs	r3, #255	; 0xff
 801c390:	2200      	movs	r2, #0
 801c392:	69f9      	ldr	r1, [r7, #28]
 801c394:	6878      	ldr	r0, [r7, #4]
 801c396:	f000 fa75 	bl	801c884 <ip4_output_if>
 801c39a:	4603      	mov	r3, r0
 801c39c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c39e:	e001      	b.n	801c3a4 <icmp_input+0x1b8>
      break;
 801c3a0:	bf00      	nop
 801c3a2:	e000      	b.n	801c3a6 <icmp_input+0x1ba>
      break;
 801c3a4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c3a6:	6878      	ldr	r0, [r7, #4]
 801c3a8:	f7f8 f83a 	bl	8014420 <pbuf_free>
  return;
 801c3ac:	e013      	b.n	801c3d6 <icmp_input+0x1ea>
    goto lenerr;
 801c3ae:	bf00      	nop
 801c3b0:	e002      	b.n	801c3b8 <icmp_input+0x1cc>
    goto lenerr;
 801c3b2:	bf00      	nop
 801c3b4:	e000      	b.n	801c3b8 <icmp_input+0x1cc>
        goto lenerr;
 801c3b6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c3b8:	6878      	ldr	r0, [r7, #4]
 801c3ba:	f7f8 f831 	bl	8014420 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c3be:	e00a      	b.n	801c3d6 <icmp_input+0x1ea>
        goto icmperr;
 801c3c0:	bf00      	nop
 801c3c2:	e004      	b.n	801c3ce <icmp_input+0x1e2>
        goto icmperr;
 801c3c4:	bf00      	nop
 801c3c6:	e002      	b.n	801c3ce <icmp_input+0x1e2>
          goto icmperr;
 801c3c8:	bf00      	nop
 801c3ca:	e000      	b.n	801c3ce <icmp_input+0x1e2>
          goto icmperr;
 801c3cc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c3ce:	6878      	ldr	r0, [r7, #4]
 801c3d0:	f7f8 f826 	bl	8014420 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c3d4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c3d6:	3728      	adds	r7, #40	; 0x28
 801c3d8:	46bd      	mov	sp, r7
 801c3da:	bd80      	pop	{r7, pc}
 801c3dc:	2000a06c 	.word	0x2000a06c
 801c3e0:	2000a080 	.word	0x2000a080
 801c3e4:	08022e8c 	.word	0x08022e8c
 801c3e8:	08022ec4 	.word	0x08022ec4
 801c3ec:	08022efc 	.word	0x08022efc
 801c3f0:	08022f24 	.word	0x08022f24

0801c3f4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c3f4:	b580      	push	{r7, lr}
 801c3f6:	b082      	sub	sp, #8
 801c3f8:	af00      	add	r7, sp, #0
 801c3fa:	6078      	str	r0, [r7, #4]
 801c3fc:	460b      	mov	r3, r1
 801c3fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c400:	78fb      	ldrb	r3, [r7, #3]
 801c402:	461a      	mov	r2, r3
 801c404:	2103      	movs	r1, #3
 801c406:	6878      	ldr	r0, [r7, #4]
 801c408:	f000 f814 	bl	801c434 <icmp_send_response>
}
 801c40c:	bf00      	nop
 801c40e:	3708      	adds	r7, #8
 801c410:	46bd      	mov	sp, r7
 801c412:	bd80      	pop	{r7, pc}

0801c414 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c414:	b580      	push	{r7, lr}
 801c416:	b082      	sub	sp, #8
 801c418:	af00      	add	r7, sp, #0
 801c41a:	6078      	str	r0, [r7, #4]
 801c41c:	460b      	mov	r3, r1
 801c41e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c420:	78fb      	ldrb	r3, [r7, #3]
 801c422:	461a      	mov	r2, r3
 801c424:	210b      	movs	r1, #11
 801c426:	6878      	ldr	r0, [r7, #4]
 801c428:	f000 f804 	bl	801c434 <icmp_send_response>
}
 801c42c:	bf00      	nop
 801c42e:	3708      	adds	r7, #8
 801c430:	46bd      	mov	sp, r7
 801c432:	bd80      	pop	{r7, pc}

0801c434 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c434:	b580      	push	{r7, lr}
 801c436:	b08c      	sub	sp, #48	; 0x30
 801c438:	af04      	add	r7, sp, #16
 801c43a:	6078      	str	r0, [r7, #4]
 801c43c:	460b      	mov	r3, r1
 801c43e:	70fb      	strb	r3, [r7, #3]
 801c440:	4613      	mov	r3, r2
 801c442:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c444:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c448:	2124      	movs	r1, #36	; 0x24
 801c44a:	2022      	movs	r0, #34	; 0x22
 801c44c:	f7f7 fd04 	bl	8013e58 <pbuf_alloc>
 801c450:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801c452:	69fb      	ldr	r3, [r7, #28]
 801c454:	2b00      	cmp	r3, #0
 801c456:	d04c      	beq.n	801c4f2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c458:	69fb      	ldr	r3, [r7, #28]
 801c45a:	895b      	ldrh	r3, [r3, #10]
 801c45c:	2b23      	cmp	r3, #35	; 0x23
 801c45e:	d806      	bhi.n	801c46e <icmp_send_response+0x3a>
 801c460:	4b26      	ldr	r3, [pc, #152]	; (801c4fc <icmp_send_response+0xc8>)
 801c462:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801c466:	4926      	ldr	r1, [pc, #152]	; (801c500 <icmp_send_response+0xcc>)
 801c468:	4826      	ldr	r0, [pc, #152]	; (801c504 <icmp_send_response+0xd0>)
 801c46a:	f001 ff83 	bl	801e374 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	685b      	ldr	r3, [r3, #4]
 801c472:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c474:	69fb      	ldr	r3, [r7, #28]
 801c476:	685b      	ldr	r3, [r3, #4]
 801c478:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801c47a:	697b      	ldr	r3, [r7, #20]
 801c47c:	78fa      	ldrb	r2, [r7, #3]
 801c47e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c480:	697b      	ldr	r3, [r7, #20]
 801c482:	78ba      	ldrb	r2, [r7, #2]
 801c484:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c486:	697b      	ldr	r3, [r7, #20]
 801c488:	2200      	movs	r2, #0
 801c48a:	711a      	strb	r2, [r3, #4]
 801c48c:	2200      	movs	r2, #0
 801c48e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c490:	697b      	ldr	r3, [r7, #20]
 801c492:	2200      	movs	r2, #0
 801c494:	719a      	strb	r2, [r3, #6]
 801c496:	2200      	movs	r2, #0
 801c498:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c49a:	69fb      	ldr	r3, [r7, #28]
 801c49c:	685b      	ldr	r3, [r3, #4]
 801c49e:	f103 0008 	add.w	r0, r3, #8
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	685b      	ldr	r3, [r3, #4]
 801c4a6:	221c      	movs	r2, #28
 801c4a8:	4619      	mov	r1, r3
 801c4aa:	f001 fe53 	bl	801e154 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c4ae:	69bb      	ldr	r3, [r7, #24]
 801c4b0:	68db      	ldr	r3, [r3, #12]
 801c4b2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c4b4:	f107 030c 	add.w	r3, r7, #12
 801c4b8:	4618      	mov	r0, r3
 801c4ba:	f000 f825 	bl	801c508 <ip4_route>
 801c4be:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801c4c0:	693b      	ldr	r3, [r7, #16]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d011      	beq.n	801c4ea <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801c4c6:	697b      	ldr	r3, [r7, #20]
 801c4c8:	2200      	movs	r2, #0
 801c4ca:	709a      	strb	r2, [r3, #2]
 801c4cc:	2200      	movs	r2, #0
 801c4ce:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801c4d0:	f107 020c 	add.w	r2, r7, #12
 801c4d4:	693b      	ldr	r3, [r7, #16]
 801c4d6:	9302      	str	r3, [sp, #8]
 801c4d8:	2301      	movs	r3, #1
 801c4da:	9301      	str	r3, [sp, #4]
 801c4dc:	2300      	movs	r3, #0
 801c4de:	9300      	str	r3, [sp, #0]
 801c4e0:	23ff      	movs	r3, #255	; 0xff
 801c4e2:	2100      	movs	r1, #0
 801c4e4:	69f8      	ldr	r0, [r7, #28]
 801c4e6:	f000 f9cd 	bl	801c884 <ip4_output_if>
  }
  pbuf_free(q);
 801c4ea:	69f8      	ldr	r0, [r7, #28]
 801c4ec:	f7f7 ff98 	bl	8014420 <pbuf_free>
 801c4f0:	e000      	b.n	801c4f4 <icmp_send_response+0xc0>
    return;
 801c4f2:	bf00      	nop
}
 801c4f4:	3720      	adds	r7, #32
 801c4f6:	46bd      	mov	sp, r7
 801c4f8:	bd80      	pop	{r7, pc}
 801c4fa:	bf00      	nop
 801c4fc:	08022e8c 	.word	0x08022e8c
 801c500:	08022f58 	.word	0x08022f58
 801c504:	08022efc 	.word	0x08022efc

0801c508 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c508:	b480      	push	{r7}
 801c50a:	b085      	sub	sp, #20
 801c50c:	af00      	add	r7, sp, #0
 801c50e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c510:	4b33      	ldr	r3, [pc, #204]	; (801c5e0 <ip4_route+0xd8>)
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	60fb      	str	r3, [r7, #12]
 801c516:	e036      	b.n	801c586 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c51e:	f003 0301 	and.w	r3, r3, #1
 801c522:	b2db      	uxtb	r3, r3
 801c524:	2b00      	cmp	r3, #0
 801c526:	d02b      	beq.n	801c580 <ip4_route+0x78>
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c52e:	089b      	lsrs	r3, r3, #2
 801c530:	f003 0301 	and.w	r3, r3, #1
 801c534:	b2db      	uxtb	r3, r3
 801c536:	2b00      	cmp	r3, #0
 801c538:	d022      	beq.n	801c580 <ip4_route+0x78>
 801c53a:	68fb      	ldr	r3, [r7, #12]
 801c53c:	3304      	adds	r3, #4
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	2b00      	cmp	r3, #0
 801c542:	d01d      	beq.n	801c580 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	681a      	ldr	r2, [r3, #0]
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	3304      	adds	r3, #4
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	405a      	eors	r2, r3
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	3308      	adds	r3, #8
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	4013      	ands	r3, r2
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d101      	bne.n	801c560 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	e038      	b.n	801c5d2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c566:	f003 0302 	and.w	r3, r3, #2
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d108      	bne.n	801c580 <ip4_route+0x78>
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	681a      	ldr	r2, [r3, #0]
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	330c      	adds	r3, #12
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	429a      	cmp	r2, r3
 801c57a:	d101      	bne.n	801c580 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	e028      	b.n	801c5d2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	60fb      	str	r3, [r7, #12]
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d1c5      	bne.n	801c518 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c58c:	4b15      	ldr	r3, [pc, #84]	; (801c5e4 <ip4_route+0xdc>)
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	2b00      	cmp	r3, #0
 801c592:	d01a      	beq.n	801c5ca <ip4_route+0xc2>
 801c594:	4b13      	ldr	r3, [pc, #76]	; (801c5e4 <ip4_route+0xdc>)
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c59c:	f003 0301 	and.w	r3, r3, #1
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d012      	beq.n	801c5ca <ip4_route+0xc2>
 801c5a4:	4b0f      	ldr	r3, [pc, #60]	; (801c5e4 <ip4_route+0xdc>)
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c5ac:	f003 0304 	and.w	r3, r3, #4
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d00a      	beq.n	801c5ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c5b4:	4b0b      	ldr	r3, [pc, #44]	; (801c5e4 <ip4_route+0xdc>)
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	3304      	adds	r3, #4
 801c5ba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d004      	beq.n	801c5ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	681b      	ldr	r3, [r3, #0]
 801c5c4:	b2db      	uxtb	r3, r3
 801c5c6:	2b7f      	cmp	r3, #127	; 0x7f
 801c5c8:	d101      	bne.n	801c5ce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801c5ca:	2300      	movs	r3, #0
 801c5cc:	e001      	b.n	801c5d2 <ip4_route+0xca>
  }

  return netif_default;
 801c5ce:	4b05      	ldr	r3, [pc, #20]	; (801c5e4 <ip4_route+0xdc>)
 801c5d0:	681b      	ldr	r3, [r3, #0]
}
 801c5d2:	4618      	mov	r0, r3
 801c5d4:	3714      	adds	r7, #20
 801c5d6:	46bd      	mov	sp, r7
 801c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5dc:	4770      	bx	lr
 801c5de:	bf00      	nop
 801c5e0:	2000f964 	.word	0x2000f964
 801c5e4:	2000f968 	.word	0x2000f968

0801c5e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801c5e8:	b580      	push	{r7, lr}
 801c5ea:	b082      	sub	sp, #8
 801c5ec:	af00      	add	r7, sp, #0
 801c5ee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c5f6:	f003 0301 	and.w	r3, r3, #1
 801c5fa:	b2db      	uxtb	r3, r3
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	d016      	beq.n	801c62e <ip4_input_accept+0x46>
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	3304      	adds	r3, #4
 801c604:	681b      	ldr	r3, [r3, #0]
 801c606:	2b00      	cmp	r3, #0
 801c608:	d011      	beq.n	801c62e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c60a:	4b0b      	ldr	r3, [pc, #44]	; (801c638 <ip4_input_accept+0x50>)
 801c60c:	695a      	ldr	r2, [r3, #20]
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	3304      	adds	r3, #4
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	429a      	cmp	r2, r3
 801c616:	d008      	beq.n	801c62a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801c618:	4b07      	ldr	r3, [pc, #28]	; (801c638 <ip4_input_accept+0x50>)
 801c61a:	695b      	ldr	r3, [r3, #20]
 801c61c:	6879      	ldr	r1, [r7, #4]
 801c61e:	4618      	mov	r0, r3
 801c620:	f000 fa16 	bl	801ca50 <ip4_addr_isbroadcast_u32>
 801c624:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c626:	2b00      	cmp	r3, #0
 801c628:	d001      	beq.n	801c62e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801c62a:	2301      	movs	r3, #1
 801c62c:	e000      	b.n	801c630 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801c62e:	2300      	movs	r3, #0
}
 801c630:	4618      	mov	r0, r3
 801c632:	3708      	adds	r7, #8
 801c634:	46bd      	mov	sp, r7
 801c636:	bd80      	pop	{r7, pc}
 801c638:	2000a06c 	.word	0x2000a06c

0801c63c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801c63c:	b580      	push	{r7, lr}
 801c63e:	b086      	sub	sp, #24
 801c640:	af00      	add	r7, sp, #0
 801c642:	6078      	str	r0, [r7, #4]
 801c644:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	685b      	ldr	r3, [r3, #4]
 801c64a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801c64c:	697b      	ldr	r3, [r7, #20]
 801c64e:	781b      	ldrb	r3, [r3, #0]
 801c650:	091b      	lsrs	r3, r3, #4
 801c652:	b2db      	uxtb	r3, r3
 801c654:	2b04      	cmp	r3, #4
 801c656:	d004      	beq.n	801c662 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801c658:	6878      	ldr	r0, [r7, #4]
 801c65a:	f7f7 fee1 	bl	8014420 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801c65e:	2300      	movs	r3, #0
 801c660:	e107      	b.n	801c872 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801c662:	697b      	ldr	r3, [r7, #20]
 801c664:	781b      	ldrb	r3, [r3, #0]
 801c666:	f003 030f 	and.w	r3, r3, #15
 801c66a:	b2db      	uxtb	r3, r3
 801c66c:	009b      	lsls	r3, r3, #2
 801c66e:	b2db      	uxtb	r3, r3
 801c670:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801c672:	697b      	ldr	r3, [r7, #20]
 801c674:	885b      	ldrh	r3, [r3, #2]
 801c676:	b29b      	uxth	r3, r3
 801c678:	4618      	mov	r0, r3
 801c67a:	f7f6 f96b 	bl	8012954 <lwip_htons>
 801c67e:	4603      	mov	r3, r0
 801c680:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	891b      	ldrh	r3, [r3, #8]
 801c686:	89ba      	ldrh	r2, [r7, #12]
 801c688:	429a      	cmp	r2, r3
 801c68a:	d204      	bcs.n	801c696 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801c68c:	89bb      	ldrh	r3, [r7, #12]
 801c68e:	4619      	mov	r1, r3
 801c690:	6878      	ldr	r0, [r7, #4]
 801c692:	f7f7 fd3f 	bl	8014114 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	895b      	ldrh	r3, [r3, #10]
 801c69a:	89fa      	ldrh	r2, [r7, #14]
 801c69c:	429a      	cmp	r2, r3
 801c69e:	d807      	bhi.n	801c6b0 <ip4_input+0x74>
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	891b      	ldrh	r3, [r3, #8]
 801c6a4:	89ba      	ldrh	r2, [r7, #12]
 801c6a6:	429a      	cmp	r2, r3
 801c6a8:	d802      	bhi.n	801c6b0 <ip4_input+0x74>
 801c6aa:	89fb      	ldrh	r3, [r7, #14]
 801c6ac:	2b13      	cmp	r3, #19
 801c6ae:	d804      	bhi.n	801c6ba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801c6b0:	6878      	ldr	r0, [r7, #4]
 801c6b2:	f7f7 feb5 	bl	8014420 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	e0db      	b.n	801c872 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801c6ba:	697b      	ldr	r3, [r7, #20]
 801c6bc:	691b      	ldr	r3, [r3, #16]
 801c6be:	4a6f      	ldr	r2, [pc, #444]	; (801c87c <ip4_input+0x240>)
 801c6c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801c6c2:	697b      	ldr	r3, [r7, #20]
 801c6c4:	68db      	ldr	r3, [r3, #12]
 801c6c6:	4a6d      	ldr	r2, [pc, #436]	; (801c87c <ip4_input+0x240>)
 801c6c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c6ca:	4b6c      	ldr	r3, [pc, #432]	; (801c87c <ip4_input+0x240>)
 801c6cc:	695b      	ldr	r3, [r3, #20]
 801c6ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c6d2:	2be0      	cmp	r3, #224	; 0xe0
 801c6d4:	d112      	bne.n	801c6fc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801c6d6:	683b      	ldr	r3, [r7, #0]
 801c6d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c6dc:	f003 0301 	and.w	r3, r3, #1
 801c6e0:	b2db      	uxtb	r3, r3
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d007      	beq.n	801c6f6 <ip4_input+0xba>
 801c6e6:	683b      	ldr	r3, [r7, #0]
 801c6e8:	3304      	adds	r3, #4
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	d002      	beq.n	801c6f6 <ip4_input+0xba>
      netif = inp;
 801c6f0:	683b      	ldr	r3, [r7, #0]
 801c6f2:	613b      	str	r3, [r7, #16]
 801c6f4:	e02a      	b.n	801c74c <ip4_input+0x110>
    } else {
      netif = NULL;
 801c6f6:	2300      	movs	r3, #0
 801c6f8:	613b      	str	r3, [r7, #16]
 801c6fa:	e027      	b.n	801c74c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801c6fc:	6838      	ldr	r0, [r7, #0]
 801c6fe:	f7ff ff73 	bl	801c5e8 <ip4_input_accept>
 801c702:	4603      	mov	r3, r0
 801c704:	2b00      	cmp	r3, #0
 801c706:	d002      	beq.n	801c70e <ip4_input+0xd2>
      netif = inp;
 801c708:	683b      	ldr	r3, [r7, #0]
 801c70a:	613b      	str	r3, [r7, #16]
 801c70c:	e01e      	b.n	801c74c <ip4_input+0x110>
    } else {
      netif = NULL;
 801c70e:	2300      	movs	r3, #0
 801c710:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801c712:	4b5a      	ldr	r3, [pc, #360]	; (801c87c <ip4_input+0x240>)
 801c714:	695b      	ldr	r3, [r3, #20]
 801c716:	b2db      	uxtb	r3, r3
 801c718:	2b7f      	cmp	r3, #127	; 0x7f
 801c71a:	d017      	beq.n	801c74c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801c71c:	4b58      	ldr	r3, [pc, #352]	; (801c880 <ip4_input+0x244>)
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	613b      	str	r3, [r7, #16]
 801c722:	e00e      	b.n	801c742 <ip4_input+0x106>
          if (netif == inp) {
 801c724:	693a      	ldr	r2, [r7, #16]
 801c726:	683b      	ldr	r3, [r7, #0]
 801c728:	429a      	cmp	r2, r3
 801c72a:	d006      	beq.n	801c73a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801c72c:	6938      	ldr	r0, [r7, #16]
 801c72e:	f7ff ff5b 	bl	801c5e8 <ip4_input_accept>
 801c732:	4603      	mov	r3, r0
 801c734:	2b00      	cmp	r3, #0
 801c736:	d108      	bne.n	801c74a <ip4_input+0x10e>
 801c738:	e000      	b.n	801c73c <ip4_input+0x100>
            continue;
 801c73a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801c73c:	693b      	ldr	r3, [r7, #16]
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	613b      	str	r3, [r7, #16]
 801c742:	693b      	ldr	r3, [r7, #16]
 801c744:	2b00      	cmp	r3, #0
 801c746:	d1ed      	bne.n	801c724 <ip4_input+0xe8>
 801c748:	e000      	b.n	801c74c <ip4_input+0x110>
            break;
 801c74a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c74c:	4b4b      	ldr	r3, [pc, #300]	; (801c87c <ip4_input+0x240>)
 801c74e:	691b      	ldr	r3, [r3, #16]
 801c750:	6839      	ldr	r1, [r7, #0]
 801c752:	4618      	mov	r0, r3
 801c754:	f000 f97c 	bl	801ca50 <ip4_addr_isbroadcast_u32>
 801c758:	4603      	mov	r3, r0
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d105      	bne.n	801c76a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801c75e:	4b47      	ldr	r3, [pc, #284]	; (801c87c <ip4_input+0x240>)
 801c760:	691b      	ldr	r3, [r3, #16]
 801c762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c766:	2be0      	cmp	r3, #224	; 0xe0
 801c768:	d104      	bne.n	801c774 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801c76a:	6878      	ldr	r0, [r7, #4]
 801c76c:	f7f7 fe58 	bl	8014420 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801c770:	2300      	movs	r3, #0
 801c772:	e07e      	b.n	801c872 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801c774:	693b      	ldr	r3, [r7, #16]
 801c776:	2b00      	cmp	r3, #0
 801c778:	d104      	bne.n	801c784 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801c77a:	6878      	ldr	r0, [r7, #4]
 801c77c:	f7f7 fe50 	bl	8014420 <pbuf_free>
    return ERR_OK;
 801c780:	2300      	movs	r3, #0
 801c782:	e076      	b.n	801c872 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801c784:	697b      	ldr	r3, [r7, #20]
 801c786:	88db      	ldrh	r3, [r3, #6]
 801c788:	b29b      	uxth	r3, r3
 801c78a:	461a      	mov	r2, r3
 801c78c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801c790:	4013      	ands	r3, r2
 801c792:	2b00      	cmp	r3, #0
 801c794:	d00b      	beq.n	801c7ae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801c796:	6878      	ldr	r0, [r7, #4]
 801c798:	f000 fca0 	bl	801d0dc <ip4_reass>
 801c79c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d101      	bne.n	801c7a8 <ip4_input+0x16c>
      return ERR_OK;
 801c7a4:	2300      	movs	r3, #0
 801c7a6:	e064      	b.n	801c872 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	685b      	ldr	r3, [r3, #4]
 801c7ac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801c7ae:	4a33      	ldr	r2, [pc, #204]	; (801c87c <ip4_input+0x240>)
 801c7b0:	693b      	ldr	r3, [r7, #16]
 801c7b2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801c7b4:	4a31      	ldr	r2, [pc, #196]	; (801c87c <ip4_input+0x240>)
 801c7b6:	683b      	ldr	r3, [r7, #0]
 801c7b8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801c7ba:	4a30      	ldr	r2, [pc, #192]	; (801c87c <ip4_input+0x240>)
 801c7bc:	697b      	ldr	r3, [r7, #20]
 801c7be:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801c7c0:	697b      	ldr	r3, [r7, #20]
 801c7c2:	781b      	ldrb	r3, [r3, #0]
 801c7c4:	f003 030f 	and.w	r3, r3, #15
 801c7c8:	b2db      	uxtb	r3, r3
 801c7ca:	009b      	lsls	r3, r3, #2
 801c7cc:	b2db      	uxtb	r3, r3
 801c7ce:	b29a      	uxth	r2, r3
 801c7d0:	4b2a      	ldr	r3, [pc, #168]	; (801c87c <ip4_input+0x240>)
 801c7d2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801c7d4:	89fb      	ldrh	r3, [r7, #14]
 801c7d6:	4619      	mov	r1, r3
 801c7d8:	6878      	ldr	r0, [r7, #4]
 801c7da:	f7f7 fd9b 	bl	8014314 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801c7de:	697b      	ldr	r3, [r7, #20]
 801c7e0:	7a5b      	ldrb	r3, [r3, #9]
 801c7e2:	2b11      	cmp	r3, #17
 801c7e4:	d006      	beq.n	801c7f4 <ip4_input+0x1b8>
 801c7e6:	2b11      	cmp	r3, #17
 801c7e8:	dc13      	bgt.n	801c812 <ip4_input+0x1d6>
 801c7ea:	2b01      	cmp	r3, #1
 801c7ec:	d00c      	beq.n	801c808 <ip4_input+0x1cc>
 801c7ee:	2b06      	cmp	r3, #6
 801c7f0:	d005      	beq.n	801c7fe <ip4_input+0x1c2>
 801c7f2:	e00e      	b.n	801c812 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801c7f4:	6839      	ldr	r1, [r7, #0]
 801c7f6:	6878      	ldr	r0, [r7, #4]
 801c7f8:	f7fe fb5a 	bl	801aeb0 <udp_input>
        break;
 801c7fc:	e026      	b.n	801c84c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801c7fe:	6839      	ldr	r1, [r7, #0]
 801c800:	6878      	ldr	r0, [r7, #4]
 801c802:	f7f9 ff13 	bl	801662c <tcp_input>
        break;
 801c806:	e021      	b.n	801c84c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801c808:	6839      	ldr	r1, [r7, #0]
 801c80a:	6878      	ldr	r0, [r7, #4]
 801c80c:	f7ff fcee 	bl	801c1ec <icmp_input>
        break;
 801c810:	e01c      	b.n	801c84c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c812:	4b1a      	ldr	r3, [pc, #104]	; (801c87c <ip4_input+0x240>)
 801c814:	695b      	ldr	r3, [r3, #20]
 801c816:	6939      	ldr	r1, [r7, #16]
 801c818:	4618      	mov	r0, r3
 801c81a:	f000 f919 	bl	801ca50 <ip4_addr_isbroadcast_u32>
 801c81e:	4603      	mov	r3, r0
 801c820:	2b00      	cmp	r3, #0
 801c822:	d10f      	bne.n	801c844 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c824:	4b15      	ldr	r3, [pc, #84]	; (801c87c <ip4_input+0x240>)
 801c826:	695b      	ldr	r3, [r3, #20]
 801c828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c82c:	2be0      	cmp	r3, #224	; 0xe0
 801c82e:	d009      	beq.n	801c844 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801c830:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801c834:	4619      	mov	r1, r3
 801c836:	6878      	ldr	r0, [r7, #4]
 801c838:	f7f7 fddf 	bl	80143fa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801c83c:	2102      	movs	r1, #2
 801c83e:	6878      	ldr	r0, [r7, #4]
 801c840:	f7ff fdd8 	bl	801c3f4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801c844:	6878      	ldr	r0, [r7, #4]
 801c846:	f7f7 fdeb 	bl	8014420 <pbuf_free>
        break;
 801c84a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801c84c:	4b0b      	ldr	r3, [pc, #44]	; (801c87c <ip4_input+0x240>)
 801c84e:	2200      	movs	r2, #0
 801c850:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801c852:	4b0a      	ldr	r3, [pc, #40]	; (801c87c <ip4_input+0x240>)
 801c854:	2200      	movs	r2, #0
 801c856:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801c858:	4b08      	ldr	r3, [pc, #32]	; (801c87c <ip4_input+0x240>)
 801c85a:	2200      	movs	r2, #0
 801c85c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801c85e:	4b07      	ldr	r3, [pc, #28]	; (801c87c <ip4_input+0x240>)
 801c860:	2200      	movs	r2, #0
 801c862:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801c864:	4b05      	ldr	r3, [pc, #20]	; (801c87c <ip4_input+0x240>)
 801c866:	2200      	movs	r2, #0
 801c868:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801c86a:	4b04      	ldr	r3, [pc, #16]	; (801c87c <ip4_input+0x240>)
 801c86c:	2200      	movs	r2, #0
 801c86e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801c870:	2300      	movs	r3, #0
}
 801c872:	4618      	mov	r0, r3
 801c874:	3718      	adds	r7, #24
 801c876:	46bd      	mov	sp, r7
 801c878:	bd80      	pop	{r7, pc}
 801c87a:	bf00      	nop
 801c87c:	2000a06c 	.word	0x2000a06c
 801c880:	2000f964 	.word	0x2000f964

0801c884 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801c884:	b580      	push	{r7, lr}
 801c886:	b08a      	sub	sp, #40	; 0x28
 801c888:	af04      	add	r7, sp, #16
 801c88a:	60f8      	str	r0, [r7, #12]
 801c88c:	60b9      	str	r1, [r7, #8]
 801c88e:	607a      	str	r2, [r7, #4]
 801c890:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801c892:	68bb      	ldr	r3, [r7, #8]
 801c894:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	2b00      	cmp	r3, #0
 801c89a:	d009      	beq.n	801c8b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801c89c:	68bb      	ldr	r3, [r7, #8]
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d003      	beq.n	801c8aa <ip4_output_if+0x26>
 801c8a2:	68bb      	ldr	r3, [r7, #8]
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d102      	bne.n	801c8b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8ac:	3304      	adds	r3, #4
 801c8ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c8b0:	78fa      	ldrb	r2, [r7, #3]
 801c8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8b4:	9302      	str	r3, [sp, #8]
 801c8b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c8ba:	9301      	str	r3, [sp, #4]
 801c8bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c8c0:	9300      	str	r3, [sp, #0]
 801c8c2:	4613      	mov	r3, r2
 801c8c4:	687a      	ldr	r2, [r7, #4]
 801c8c6:	6979      	ldr	r1, [r7, #20]
 801c8c8:	68f8      	ldr	r0, [r7, #12]
 801c8ca:	f000 f805 	bl	801c8d8 <ip4_output_if_src>
 801c8ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c8d0:	4618      	mov	r0, r3
 801c8d2:	3718      	adds	r7, #24
 801c8d4:	46bd      	mov	sp, r7
 801c8d6:	bd80      	pop	{r7, pc}

0801c8d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c8d8:	b580      	push	{r7, lr}
 801c8da:	b088      	sub	sp, #32
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	60f8      	str	r0, [r7, #12]
 801c8e0:	60b9      	str	r1, [r7, #8]
 801c8e2:	607a      	str	r2, [r7, #4]
 801c8e4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c8e6:	68fb      	ldr	r3, [r7, #12]
 801c8e8:	7b9b      	ldrb	r3, [r3, #14]
 801c8ea:	2b01      	cmp	r3, #1
 801c8ec:	d006      	beq.n	801c8fc <ip4_output_if_src+0x24>
 801c8ee:	4b52      	ldr	r3, [pc, #328]	; (801ca38 <ip4_output_if_src+0x160>)
 801c8f0:	f44f 7255 	mov.w	r2, #852	; 0x354
 801c8f4:	4951      	ldr	r1, [pc, #324]	; (801ca3c <ip4_output_if_src+0x164>)
 801c8f6:	4852      	ldr	r0, [pc, #328]	; (801ca40 <ip4_output_if_src+0x168>)
 801c8f8:	f001 fd3c 	bl	801e374 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d060      	beq.n	801c9c4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801c902:	2314      	movs	r3, #20
 801c904:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c906:	2114      	movs	r1, #20
 801c908:	68f8      	ldr	r0, [r7, #12]
 801c90a:	f7f7 fcf3 	bl	80142f4 <pbuf_add_header>
 801c90e:	4603      	mov	r3, r0
 801c910:	2b00      	cmp	r3, #0
 801c912:	d002      	beq.n	801c91a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c914:	f06f 0301 	mvn.w	r3, #1
 801c918:	e089      	b.n	801ca2e <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	685b      	ldr	r3, [r3, #4]
 801c91e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	895b      	ldrh	r3, [r3, #10]
 801c924:	2b13      	cmp	r3, #19
 801c926:	d806      	bhi.n	801c936 <ip4_output_if_src+0x5e>
 801c928:	4b43      	ldr	r3, [pc, #268]	; (801ca38 <ip4_output_if_src+0x160>)
 801c92a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801c92e:	4945      	ldr	r1, [pc, #276]	; (801ca44 <ip4_output_if_src+0x16c>)
 801c930:	4843      	ldr	r0, [pc, #268]	; (801ca40 <ip4_output_if_src+0x168>)
 801c932:	f001 fd1f 	bl	801e374 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c936:	69fb      	ldr	r3, [r7, #28]
 801c938:	78fa      	ldrb	r2, [r7, #3]
 801c93a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c93c:	69fb      	ldr	r3, [r7, #28]
 801c93e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801c942:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	681a      	ldr	r2, [r3, #0]
 801c948:	69fb      	ldr	r3, [r7, #28]
 801c94a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c94c:	8b7b      	ldrh	r3, [r7, #26]
 801c94e:	089b      	lsrs	r3, r3, #2
 801c950:	b29b      	uxth	r3, r3
 801c952:	b2db      	uxtb	r3, r3
 801c954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c958:	b2da      	uxtb	r2, r3
 801c95a:	69fb      	ldr	r3, [r7, #28]
 801c95c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c95e:	69fb      	ldr	r3, [r7, #28]
 801c960:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801c964:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c966:	68fb      	ldr	r3, [r7, #12]
 801c968:	891b      	ldrh	r3, [r3, #8]
 801c96a:	4618      	mov	r0, r3
 801c96c:	f7f5 fff2 	bl	8012954 <lwip_htons>
 801c970:	4603      	mov	r3, r0
 801c972:	461a      	mov	r2, r3
 801c974:	69fb      	ldr	r3, [r7, #28]
 801c976:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c978:	69fb      	ldr	r3, [r7, #28]
 801c97a:	2200      	movs	r2, #0
 801c97c:	719a      	strb	r2, [r3, #6]
 801c97e:	2200      	movs	r2, #0
 801c980:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c982:	4b31      	ldr	r3, [pc, #196]	; (801ca48 <ip4_output_if_src+0x170>)
 801c984:	881b      	ldrh	r3, [r3, #0]
 801c986:	4618      	mov	r0, r3
 801c988:	f7f5 ffe4 	bl	8012954 <lwip_htons>
 801c98c:	4603      	mov	r3, r0
 801c98e:	461a      	mov	r2, r3
 801c990:	69fb      	ldr	r3, [r7, #28]
 801c992:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c994:	4b2c      	ldr	r3, [pc, #176]	; (801ca48 <ip4_output_if_src+0x170>)
 801c996:	881b      	ldrh	r3, [r3, #0]
 801c998:	3301      	adds	r3, #1
 801c99a:	b29a      	uxth	r2, r3
 801c99c:	4b2a      	ldr	r3, [pc, #168]	; (801ca48 <ip4_output_if_src+0x170>)
 801c99e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c9a0:	68bb      	ldr	r3, [r7, #8]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d104      	bne.n	801c9b0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c9a6:	4b29      	ldr	r3, [pc, #164]	; (801ca4c <ip4_output_if_src+0x174>)
 801c9a8:	681a      	ldr	r2, [r3, #0]
 801c9aa:	69fb      	ldr	r3, [r7, #28]
 801c9ac:	60da      	str	r2, [r3, #12]
 801c9ae:	e003      	b.n	801c9b8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c9b0:	68bb      	ldr	r3, [r7, #8]
 801c9b2:	681a      	ldr	r2, [r3, #0]
 801c9b4:	69fb      	ldr	r3, [r7, #28]
 801c9b6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c9b8:	69fb      	ldr	r3, [r7, #28]
 801c9ba:	2200      	movs	r2, #0
 801c9bc:	729a      	strb	r2, [r3, #10]
 801c9be:	2200      	movs	r2, #0
 801c9c0:	72da      	strb	r2, [r3, #11]
 801c9c2:	e00f      	b.n	801c9e4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	895b      	ldrh	r3, [r3, #10]
 801c9c8:	2b13      	cmp	r3, #19
 801c9ca:	d802      	bhi.n	801c9d2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c9cc:	f06f 0301 	mvn.w	r3, #1
 801c9d0:	e02d      	b.n	801ca2e <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	685b      	ldr	r3, [r3, #4]
 801c9d6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801c9d8:	69fb      	ldr	r3, [r7, #28]
 801c9da:	691b      	ldr	r3, [r3, #16]
 801c9dc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801c9de:	f107 0314 	add.w	r3, r7, #20
 801c9e2:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	681a      	ldr	r2, [r3, #0]
 801c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9ea:	3304      	adds	r3, #4
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	429a      	cmp	r2, r3
 801c9f0:	d105      	bne.n	801c9fe <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 801c9f2:	68f9      	ldr	r1, [r7, #12]
 801c9f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c9f6:	f7f7 f86d 	bl	8013ad4 <netif_loop_output>
 801c9fa:	4603      	mov	r3, r0
 801c9fc:	e017      	b.n	801ca2e <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ca02:	2b00      	cmp	r3, #0
 801ca04:	d00c      	beq.n	801ca20 <ip4_output_if_src+0x148>
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	891a      	ldrh	r2, [r3, #8]
 801ca0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ca0e:	429a      	cmp	r2, r3
 801ca10:	d906      	bls.n	801ca20 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 801ca12:	687a      	ldr	r2, [r7, #4]
 801ca14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ca16:	68f8      	ldr	r0, [r7, #12]
 801ca18:	f000 fd54 	bl	801d4c4 <ip4_frag>
 801ca1c:	4603      	mov	r3, r0
 801ca1e:	e006      	b.n	801ca2e <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801ca20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca22:	695b      	ldr	r3, [r3, #20]
 801ca24:	687a      	ldr	r2, [r7, #4]
 801ca26:	68f9      	ldr	r1, [r7, #12]
 801ca28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ca2a:	4798      	blx	r3
 801ca2c:	4603      	mov	r3, r0
}
 801ca2e:	4618      	mov	r0, r3
 801ca30:	3720      	adds	r7, #32
 801ca32:	46bd      	mov	sp, r7
 801ca34:	bd80      	pop	{r7, pc}
 801ca36:	bf00      	nop
 801ca38:	08022f84 	.word	0x08022f84
 801ca3c:	08022fb8 	.word	0x08022fb8
 801ca40:	08022fc4 	.word	0x08022fc4
 801ca44:	08022fec 	.word	0x08022fec
 801ca48:	2000fb06 	.word	0x2000fb06
 801ca4c:	080234dc 	.word	0x080234dc

0801ca50 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801ca50:	b480      	push	{r7}
 801ca52:	b085      	sub	sp, #20
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	6078      	str	r0, [r7, #4]
 801ca58:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca64:	d002      	beq.n	801ca6c <ip4_addr_isbroadcast_u32+0x1c>
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d101      	bne.n	801ca70 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801ca6c:	2301      	movs	r3, #1
 801ca6e:	e02a      	b.n	801cac6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801ca70:	683b      	ldr	r3, [r7, #0]
 801ca72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ca76:	f003 0302 	and.w	r3, r3, #2
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d101      	bne.n	801ca82 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801ca7e:	2300      	movs	r3, #0
 801ca80:	e021      	b.n	801cac6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801ca82:	683b      	ldr	r3, [r7, #0]
 801ca84:	3304      	adds	r3, #4
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	687a      	ldr	r2, [r7, #4]
 801ca8a:	429a      	cmp	r2, r3
 801ca8c:	d101      	bne.n	801ca92 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801ca8e:	2300      	movs	r3, #0
 801ca90:	e019      	b.n	801cac6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801ca92:	68fa      	ldr	r2, [r7, #12]
 801ca94:	683b      	ldr	r3, [r7, #0]
 801ca96:	3304      	adds	r3, #4
 801ca98:	681b      	ldr	r3, [r3, #0]
 801ca9a:	405a      	eors	r2, r3
 801ca9c:	683b      	ldr	r3, [r7, #0]
 801ca9e:	3308      	adds	r3, #8
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	4013      	ands	r3, r2
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	d10d      	bne.n	801cac4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801caa8:	683b      	ldr	r3, [r7, #0]
 801caaa:	3308      	adds	r3, #8
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	43da      	mvns	r2, r3
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801cab4:	683b      	ldr	r3, [r7, #0]
 801cab6:	3308      	adds	r3, #8
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cabc:	429a      	cmp	r2, r3
 801cabe:	d101      	bne.n	801cac4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801cac0:	2301      	movs	r3, #1
 801cac2:	e000      	b.n	801cac6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801cac4:	2300      	movs	r3, #0
  }
}
 801cac6:	4618      	mov	r0, r3
 801cac8:	3714      	adds	r7, #20
 801caca:	46bd      	mov	sp, r7
 801cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cad0:	4770      	bx	lr
	...

0801cad4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801cad4:	b580      	push	{r7, lr}
 801cad6:	b084      	sub	sp, #16
 801cad8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801cada:	2300      	movs	r3, #0
 801cadc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801cade:	4b12      	ldr	r3, [pc, #72]	; (801cb28 <ip_reass_tmr+0x54>)
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801cae4:	e018      	b.n	801cb18 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801cae6:	68fb      	ldr	r3, [r7, #12]
 801cae8:	7fdb      	ldrb	r3, [r3, #31]
 801caea:	2b00      	cmp	r3, #0
 801caec:	d00b      	beq.n	801cb06 <ip_reass_tmr+0x32>
      r->timer--;
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	7fdb      	ldrb	r3, [r3, #31]
 801caf2:	3b01      	subs	r3, #1
 801caf4:	b2da      	uxtb	r2, r3
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801cafa:	68fb      	ldr	r3, [r7, #12]
 801cafc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	60fb      	str	r3, [r7, #12]
 801cb04:	e008      	b.n	801cb18 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	681b      	ldr	r3, [r3, #0]
 801cb0e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801cb10:	68b9      	ldr	r1, [r7, #8]
 801cb12:	6878      	ldr	r0, [r7, #4]
 801cb14:	f000 f80a 	bl	801cb2c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801cb18:	68fb      	ldr	r3, [r7, #12]
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d1e3      	bne.n	801cae6 <ip_reass_tmr+0x12>
    }
  }
}
 801cb1e:	bf00      	nop
 801cb20:	bf00      	nop
 801cb22:	3710      	adds	r7, #16
 801cb24:	46bd      	mov	sp, r7
 801cb26:	bd80      	pop	{r7, pc}
 801cb28:	2000fb08 	.word	0x2000fb08

0801cb2c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	b088      	sub	sp, #32
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	6078      	str	r0, [r7, #4]
 801cb34:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801cb36:	2300      	movs	r3, #0
 801cb38:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801cb3a:	683a      	ldr	r2, [r7, #0]
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	429a      	cmp	r2, r3
 801cb40:	d105      	bne.n	801cb4e <ip_reass_free_complete_datagram+0x22>
 801cb42:	4b45      	ldr	r3, [pc, #276]	; (801cc58 <ip_reass_free_complete_datagram+0x12c>)
 801cb44:	22ab      	movs	r2, #171	; 0xab
 801cb46:	4945      	ldr	r1, [pc, #276]	; (801cc5c <ip_reass_free_complete_datagram+0x130>)
 801cb48:	4845      	ldr	r0, [pc, #276]	; (801cc60 <ip_reass_free_complete_datagram+0x134>)
 801cb4a:	f001 fc13 	bl	801e374 <iprintf>
  if (prev != NULL) {
 801cb4e:	683b      	ldr	r3, [r7, #0]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d00a      	beq.n	801cb6a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801cb54:	683b      	ldr	r3, [r7, #0]
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	687a      	ldr	r2, [r7, #4]
 801cb5a:	429a      	cmp	r2, r3
 801cb5c:	d005      	beq.n	801cb6a <ip_reass_free_complete_datagram+0x3e>
 801cb5e:	4b3e      	ldr	r3, [pc, #248]	; (801cc58 <ip_reass_free_complete_datagram+0x12c>)
 801cb60:	22ad      	movs	r2, #173	; 0xad
 801cb62:	4940      	ldr	r1, [pc, #256]	; (801cc64 <ip_reass_free_complete_datagram+0x138>)
 801cb64:	483e      	ldr	r0, [pc, #248]	; (801cc60 <ip_reass_free_complete_datagram+0x134>)
 801cb66:	f001 fc05 	bl	801e374 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	685b      	ldr	r3, [r3, #4]
 801cb6e:	685b      	ldr	r3, [r3, #4]
 801cb70:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801cb72:	697b      	ldr	r3, [r7, #20]
 801cb74:	889b      	ldrh	r3, [r3, #4]
 801cb76:	b29b      	uxth	r3, r3
 801cb78:	2b00      	cmp	r3, #0
 801cb7a:	d12a      	bne.n	801cbd2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	685b      	ldr	r3, [r3, #4]
 801cb80:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801cb82:	697b      	ldr	r3, [r7, #20]
 801cb84:	681a      	ldr	r2, [r3, #0]
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801cb8a:	69bb      	ldr	r3, [r7, #24]
 801cb8c:	6858      	ldr	r0, [r3, #4]
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	3308      	adds	r3, #8
 801cb92:	2214      	movs	r2, #20
 801cb94:	4619      	mov	r1, r3
 801cb96:	f001 fadd 	bl	801e154 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801cb9a:	2101      	movs	r1, #1
 801cb9c:	69b8      	ldr	r0, [r7, #24]
 801cb9e:	f7ff fc39 	bl	801c414 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801cba2:	69b8      	ldr	r0, [r7, #24]
 801cba4:	f7f7 fcca 	bl	801453c <pbuf_clen>
 801cba8:	4603      	mov	r3, r0
 801cbaa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cbac:	8bfa      	ldrh	r2, [r7, #30]
 801cbae:	8a7b      	ldrh	r3, [r7, #18]
 801cbb0:	4413      	add	r3, r2
 801cbb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cbb6:	db05      	blt.n	801cbc4 <ip_reass_free_complete_datagram+0x98>
 801cbb8:	4b27      	ldr	r3, [pc, #156]	; (801cc58 <ip_reass_free_complete_datagram+0x12c>)
 801cbba:	22bc      	movs	r2, #188	; 0xbc
 801cbbc:	492a      	ldr	r1, [pc, #168]	; (801cc68 <ip_reass_free_complete_datagram+0x13c>)
 801cbbe:	4828      	ldr	r0, [pc, #160]	; (801cc60 <ip_reass_free_complete_datagram+0x134>)
 801cbc0:	f001 fbd8 	bl	801e374 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cbc4:	8bfa      	ldrh	r2, [r7, #30]
 801cbc6:	8a7b      	ldrh	r3, [r7, #18]
 801cbc8:	4413      	add	r3, r2
 801cbca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801cbcc:	69b8      	ldr	r0, [r7, #24]
 801cbce:	f7f7 fc27 	bl	8014420 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	685b      	ldr	r3, [r3, #4]
 801cbd6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801cbd8:	e01f      	b.n	801cc1a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801cbda:	69bb      	ldr	r3, [r7, #24]
 801cbdc:	685b      	ldr	r3, [r3, #4]
 801cbde:	617b      	str	r3, [r7, #20]
    pcur = p;
 801cbe0:	69bb      	ldr	r3, [r7, #24]
 801cbe2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801cbe4:	697b      	ldr	r3, [r7, #20]
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801cbea:	68f8      	ldr	r0, [r7, #12]
 801cbec:	f7f7 fca6 	bl	801453c <pbuf_clen>
 801cbf0:	4603      	mov	r3, r0
 801cbf2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cbf4:	8bfa      	ldrh	r2, [r7, #30]
 801cbf6:	8a7b      	ldrh	r3, [r7, #18]
 801cbf8:	4413      	add	r3, r2
 801cbfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cbfe:	db05      	blt.n	801cc0c <ip_reass_free_complete_datagram+0xe0>
 801cc00:	4b15      	ldr	r3, [pc, #84]	; (801cc58 <ip_reass_free_complete_datagram+0x12c>)
 801cc02:	22cc      	movs	r2, #204	; 0xcc
 801cc04:	4918      	ldr	r1, [pc, #96]	; (801cc68 <ip_reass_free_complete_datagram+0x13c>)
 801cc06:	4816      	ldr	r0, [pc, #88]	; (801cc60 <ip_reass_free_complete_datagram+0x134>)
 801cc08:	f001 fbb4 	bl	801e374 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cc0c:	8bfa      	ldrh	r2, [r7, #30]
 801cc0e:	8a7b      	ldrh	r3, [r7, #18]
 801cc10:	4413      	add	r3, r2
 801cc12:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801cc14:	68f8      	ldr	r0, [r7, #12]
 801cc16:	f7f7 fc03 	bl	8014420 <pbuf_free>
  while (p != NULL) {
 801cc1a:	69bb      	ldr	r3, [r7, #24]
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d1dc      	bne.n	801cbda <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801cc20:	6839      	ldr	r1, [r7, #0]
 801cc22:	6878      	ldr	r0, [r7, #4]
 801cc24:	f000 f8c2 	bl	801cdac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801cc28:	4b10      	ldr	r3, [pc, #64]	; (801cc6c <ip_reass_free_complete_datagram+0x140>)
 801cc2a:	881b      	ldrh	r3, [r3, #0]
 801cc2c:	8bfa      	ldrh	r2, [r7, #30]
 801cc2e:	429a      	cmp	r2, r3
 801cc30:	d905      	bls.n	801cc3e <ip_reass_free_complete_datagram+0x112>
 801cc32:	4b09      	ldr	r3, [pc, #36]	; (801cc58 <ip_reass_free_complete_datagram+0x12c>)
 801cc34:	22d2      	movs	r2, #210	; 0xd2
 801cc36:	490e      	ldr	r1, [pc, #56]	; (801cc70 <ip_reass_free_complete_datagram+0x144>)
 801cc38:	4809      	ldr	r0, [pc, #36]	; (801cc60 <ip_reass_free_complete_datagram+0x134>)
 801cc3a:	f001 fb9b 	bl	801e374 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801cc3e:	4b0b      	ldr	r3, [pc, #44]	; (801cc6c <ip_reass_free_complete_datagram+0x140>)
 801cc40:	881a      	ldrh	r2, [r3, #0]
 801cc42:	8bfb      	ldrh	r3, [r7, #30]
 801cc44:	1ad3      	subs	r3, r2, r3
 801cc46:	b29a      	uxth	r2, r3
 801cc48:	4b08      	ldr	r3, [pc, #32]	; (801cc6c <ip_reass_free_complete_datagram+0x140>)
 801cc4a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801cc4c:	8bfb      	ldrh	r3, [r7, #30]
}
 801cc4e:	4618      	mov	r0, r3
 801cc50:	3720      	adds	r7, #32
 801cc52:	46bd      	mov	sp, r7
 801cc54:	bd80      	pop	{r7, pc}
 801cc56:	bf00      	nop
 801cc58:	0802301c 	.word	0x0802301c
 801cc5c:	08023058 	.word	0x08023058
 801cc60:	08023064 	.word	0x08023064
 801cc64:	0802308c 	.word	0x0802308c
 801cc68:	080230a0 	.word	0x080230a0
 801cc6c:	2000fb0c 	.word	0x2000fb0c
 801cc70:	080230c0 	.word	0x080230c0

0801cc74 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801cc74:	b580      	push	{r7, lr}
 801cc76:	b08a      	sub	sp, #40	; 0x28
 801cc78:	af00      	add	r7, sp, #0
 801cc7a:	6078      	str	r0, [r7, #4]
 801cc7c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801cc7e:	2300      	movs	r3, #0
 801cc80:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801cc82:	2300      	movs	r3, #0
 801cc84:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801cc86:	2300      	movs	r3, #0
 801cc88:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801cc8e:	2300      	movs	r3, #0
 801cc90:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801cc92:	4b28      	ldr	r3, [pc, #160]	; (801cd34 <ip_reass_remove_oldest_datagram+0xc0>)
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801cc98:	e030      	b.n	801ccfc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801cc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc9c:	695a      	ldr	r2, [r3, #20]
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	68db      	ldr	r3, [r3, #12]
 801cca2:	429a      	cmp	r2, r3
 801cca4:	d10c      	bne.n	801ccc0 <ip_reass_remove_oldest_datagram+0x4c>
 801cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cca8:	699a      	ldr	r2, [r3, #24]
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	691b      	ldr	r3, [r3, #16]
 801ccae:	429a      	cmp	r2, r3
 801ccb0:	d106      	bne.n	801ccc0 <ip_reass_remove_oldest_datagram+0x4c>
 801ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccb4:	899a      	ldrh	r2, [r3, #12]
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	889b      	ldrh	r3, [r3, #4]
 801ccba:	b29b      	uxth	r3, r3
 801ccbc:	429a      	cmp	r2, r3
 801ccbe:	d014      	beq.n	801ccea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ccc0:	693b      	ldr	r3, [r7, #16]
 801ccc2:	3301      	adds	r3, #1
 801ccc4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ccc6:	6a3b      	ldr	r3, [r7, #32]
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d104      	bne.n	801ccd6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ccd0:	69fb      	ldr	r3, [r7, #28]
 801ccd2:	61bb      	str	r3, [r7, #24]
 801ccd4:	e009      	b.n	801ccea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ccd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccd8:	7fda      	ldrb	r2, [r3, #31]
 801ccda:	6a3b      	ldr	r3, [r7, #32]
 801ccdc:	7fdb      	ldrb	r3, [r3, #31]
 801ccde:	429a      	cmp	r2, r3
 801cce0:	d803      	bhi.n	801ccea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cce4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801cce6:	69fb      	ldr	r3, [r7, #28]
 801cce8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ccea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d001      	beq.n	801ccf6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccf4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ccf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccf8:	681b      	ldr	r3, [r3, #0]
 801ccfa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ccfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d1cb      	bne.n	801cc9a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801cd02:	6a3b      	ldr	r3, [r7, #32]
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d008      	beq.n	801cd1a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801cd08:	69b9      	ldr	r1, [r7, #24]
 801cd0a:	6a38      	ldr	r0, [r7, #32]
 801cd0c:	f7ff ff0e 	bl	801cb2c <ip_reass_free_complete_datagram>
 801cd10:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801cd12:	697a      	ldr	r2, [r7, #20]
 801cd14:	68fb      	ldr	r3, [r7, #12]
 801cd16:	4413      	add	r3, r2
 801cd18:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801cd1a:	697a      	ldr	r2, [r7, #20]
 801cd1c:	683b      	ldr	r3, [r7, #0]
 801cd1e:	429a      	cmp	r2, r3
 801cd20:	da02      	bge.n	801cd28 <ip_reass_remove_oldest_datagram+0xb4>
 801cd22:	693b      	ldr	r3, [r7, #16]
 801cd24:	2b01      	cmp	r3, #1
 801cd26:	dcac      	bgt.n	801cc82 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801cd28:	697b      	ldr	r3, [r7, #20]
}
 801cd2a:	4618      	mov	r0, r3
 801cd2c:	3728      	adds	r7, #40	; 0x28
 801cd2e:	46bd      	mov	sp, r7
 801cd30:	bd80      	pop	{r7, pc}
 801cd32:	bf00      	nop
 801cd34:	2000fb08 	.word	0x2000fb08

0801cd38 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	b084      	sub	sp, #16
 801cd3c:	af00      	add	r7, sp, #0
 801cd3e:	6078      	str	r0, [r7, #4]
 801cd40:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801cd42:	2004      	movs	r0, #4
 801cd44:	f7f6 fade 	bl	8013304 <memp_malloc>
 801cd48:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801cd4a:	68fb      	ldr	r3, [r7, #12]
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	d110      	bne.n	801cd72 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801cd50:	6839      	ldr	r1, [r7, #0]
 801cd52:	6878      	ldr	r0, [r7, #4]
 801cd54:	f7ff ff8e 	bl	801cc74 <ip_reass_remove_oldest_datagram>
 801cd58:	4602      	mov	r2, r0
 801cd5a:	683b      	ldr	r3, [r7, #0]
 801cd5c:	4293      	cmp	r3, r2
 801cd5e:	dc03      	bgt.n	801cd68 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801cd60:	2004      	movs	r0, #4
 801cd62:	f7f6 facf 	bl	8013304 <memp_malloc>
 801cd66:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	d101      	bne.n	801cd72 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801cd6e:	2300      	movs	r3, #0
 801cd70:	e016      	b.n	801cda0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801cd72:	2220      	movs	r2, #32
 801cd74:	2100      	movs	r1, #0
 801cd76:	68f8      	ldr	r0, [r7, #12]
 801cd78:	f001 fa14 	bl	801e1a4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801cd7c:	68fb      	ldr	r3, [r7, #12]
 801cd7e:	220f      	movs	r2, #15
 801cd80:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801cd82:	4b09      	ldr	r3, [pc, #36]	; (801cda8 <ip_reass_enqueue_new_datagram+0x70>)
 801cd84:	681a      	ldr	r2, [r3, #0]
 801cd86:	68fb      	ldr	r3, [r7, #12]
 801cd88:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801cd8a:	4a07      	ldr	r2, [pc, #28]	; (801cda8 <ip_reass_enqueue_new_datagram+0x70>)
 801cd8c:	68fb      	ldr	r3, [r7, #12]
 801cd8e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	3308      	adds	r3, #8
 801cd94:	2214      	movs	r2, #20
 801cd96:	6879      	ldr	r1, [r7, #4]
 801cd98:	4618      	mov	r0, r3
 801cd9a:	f001 f9db 	bl	801e154 <memcpy>
  return ipr;
 801cd9e:	68fb      	ldr	r3, [r7, #12]
}
 801cda0:	4618      	mov	r0, r3
 801cda2:	3710      	adds	r7, #16
 801cda4:	46bd      	mov	sp, r7
 801cda6:	bd80      	pop	{r7, pc}
 801cda8:	2000fb08 	.word	0x2000fb08

0801cdac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cdac:	b580      	push	{r7, lr}
 801cdae:	b082      	sub	sp, #8
 801cdb0:	af00      	add	r7, sp, #0
 801cdb2:	6078      	str	r0, [r7, #4]
 801cdb4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801cdb6:	4b10      	ldr	r3, [pc, #64]	; (801cdf8 <ip_reass_dequeue_datagram+0x4c>)
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	687a      	ldr	r2, [r7, #4]
 801cdbc:	429a      	cmp	r2, r3
 801cdbe:	d104      	bne.n	801cdca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	4a0c      	ldr	r2, [pc, #48]	; (801cdf8 <ip_reass_dequeue_datagram+0x4c>)
 801cdc6:	6013      	str	r3, [r2, #0]
 801cdc8:	e00d      	b.n	801cde6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801cdca:	683b      	ldr	r3, [r7, #0]
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	d106      	bne.n	801cdde <ip_reass_dequeue_datagram+0x32>
 801cdd0:	4b0a      	ldr	r3, [pc, #40]	; (801cdfc <ip_reass_dequeue_datagram+0x50>)
 801cdd2:	f240 1245 	movw	r2, #325	; 0x145
 801cdd6:	490a      	ldr	r1, [pc, #40]	; (801ce00 <ip_reass_dequeue_datagram+0x54>)
 801cdd8:	480a      	ldr	r0, [pc, #40]	; (801ce04 <ip_reass_dequeue_datagram+0x58>)
 801cdda:	f001 facb 	bl	801e374 <iprintf>
    prev->next = ipr->next;
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	681a      	ldr	r2, [r3, #0]
 801cde2:	683b      	ldr	r3, [r7, #0]
 801cde4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801cde6:	6879      	ldr	r1, [r7, #4]
 801cde8:	2004      	movs	r0, #4
 801cdea:	f7f6 fb01 	bl	80133f0 <memp_free>
}
 801cdee:	bf00      	nop
 801cdf0:	3708      	adds	r7, #8
 801cdf2:	46bd      	mov	sp, r7
 801cdf4:	bd80      	pop	{r7, pc}
 801cdf6:	bf00      	nop
 801cdf8:	2000fb08 	.word	0x2000fb08
 801cdfc:	0802301c 	.word	0x0802301c
 801ce00:	080230e4 	.word	0x080230e4
 801ce04:	08023064 	.word	0x08023064

0801ce08 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801ce08:	b580      	push	{r7, lr}
 801ce0a:	b08c      	sub	sp, #48	; 0x30
 801ce0c:	af00      	add	r7, sp, #0
 801ce0e:	60f8      	str	r0, [r7, #12]
 801ce10:	60b9      	str	r1, [r7, #8]
 801ce12:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801ce14:	2300      	movs	r3, #0
 801ce16:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801ce18:	2301      	movs	r3, #1
 801ce1a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801ce1c:	68bb      	ldr	r3, [r7, #8]
 801ce1e:	685b      	ldr	r3, [r3, #4]
 801ce20:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ce22:	69fb      	ldr	r3, [r7, #28]
 801ce24:	885b      	ldrh	r3, [r3, #2]
 801ce26:	b29b      	uxth	r3, r3
 801ce28:	4618      	mov	r0, r3
 801ce2a:	f7f5 fd93 	bl	8012954 <lwip_htons>
 801ce2e:	4603      	mov	r3, r0
 801ce30:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801ce32:	69fb      	ldr	r3, [r7, #28]
 801ce34:	781b      	ldrb	r3, [r3, #0]
 801ce36:	f003 030f 	and.w	r3, r3, #15
 801ce3a:	b2db      	uxtb	r3, r3
 801ce3c:	009b      	lsls	r3, r3, #2
 801ce3e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ce40:	7e7b      	ldrb	r3, [r7, #25]
 801ce42:	b29b      	uxth	r3, r3
 801ce44:	8b7a      	ldrh	r2, [r7, #26]
 801ce46:	429a      	cmp	r2, r3
 801ce48:	d202      	bcs.n	801ce50 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ce4a:	f04f 33ff 	mov.w	r3, #4294967295
 801ce4e:	e135      	b.n	801d0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801ce50:	7e7b      	ldrb	r3, [r7, #25]
 801ce52:	b29b      	uxth	r3, r3
 801ce54:	8b7a      	ldrh	r2, [r7, #26]
 801ce56:	1ad3      	subs	r3, r2, r3
 801ce58:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ce5a:	69fb      	ldr	r3, [r7, #28]
 801ce5c:	88db      	ldrh	r3, [r3, #6]
 801ce5e:	b29b      	uxth	r3, r3
 801ce60:	4618      	mov	r0, r3
 801ce62:	f7f5 fd77 	bl	8012954 <lwip_htons>
 801ce66:	4603      	mov	r3, r0
 801ce68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ce6c:	b29b      	uxth	r3, r3
 801ce6e:	00db      	lsls	r3, r3, #3
 801ce70:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ce72:	68bb      	ldr	r3, [r7, #8]
 801ce74:	685b      	ldr	r3, [r3, #4]
 801ce76:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801ce78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	701a      	strb	r2, [r3, #0]
 801ce7e:	2200      	movs	r2, #0
 801ce80:	705a      	strb	r2, [r3, #1]
 801ce82:	2200      	movs	r2, #0
 801ce84:	709a      	strb	r2, [r3, #2]
 801ce86:	2200      	movs	r2, #0
 801ce88:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ce8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce8c:	8afa      	ldrh	r2, [r7, #22]
 801ce8e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ce90:	8afa      	ldrh	r2, [r7, #22]
 801ce92:	8b7b      	ldrh	r3, [r7, #26]
 801ce94:	4413      	add	r3, r2
 801ce96:	b29a      	uxth	r2, r3
 801ce98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce9a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce9e:	88db      	ldrh	r3, [r3, #6]
 801cea0:	b29b      	uxth	r3, r3
 801cea2:	8afa      	ldrh	r2, [r7, #22]
 801cea4:	429a      	cmp	r2, r3
 801cea6:	d902      	bls.n	801ceae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cea8:	f04f 33ff 	mov.w	r3, #4294967295
 801ceac:	e106      	b.n	801d0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801ceae:	68fb      	ldr	r3, [r7, #12]
 801ceb0:	685b      	ldr	r3, [r3, #4]
 801ceb2:	627b      	str	r3, [r7, #36]	; 0x24
 801ceb4:	e068      	b.n	801cf88 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ceb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceb8:	685b      	ldr	r3, [r3, #4]
 801ceba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cebe:	889b      	ldrh	r3, [r3, #4]
 801cec0:	b29a      	uxth	r2, r3
 801cec2:	693b      	ldr	r3, [r7, #16]
 801cec4:	889b      	ldrh	r3, [r3, #4]
 801cec6:	b29b      	uxth	r3, r3
 801cec8:	429a      	cmp	r2, r3
 801ceca:	d235      	bcs.n	801cf38 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801cecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ced0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801ced2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	d020      	beq.n	801cf1a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801ced8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ceda:	889b      	ldrh	r3, [r3, #4]
 801cedc:	b29a      	uxth	r2, r3
 801cede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cee0:	88db      	ldrh	r3, [r3, #6]
 801cee2:	b29b      	uxth	r3, r3
 801cee4:	429a      	cmp	r2, r3
 801cee6:	d307      	bcc.n	801cef8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801cee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ceea:	88db      	ldrh	r3, [r3, #6]
 801ceec:	b29a      	uxth	r2, r3
 801ceee:	693b      	ldr	r3, [r7, #16]
 801cef0:	889b      	ldrh	r3, [r3, #4]
 801cef2:	b29b      	uxth	r3, r3
 801cef4:	429a      	cmp	r2, r3
 801cef6:	d902      	bls.n	801cefe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cef8:	f04f 33ff 	mov.w	r3, #4294967295
 801cefc:	e0de      	b.n	801d0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801cefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf00:	68ba      	ldr	r2, [r7, #8]
 801cf02:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801cf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf06:	88db      	ldrh	r3, [r3, #6]
 801cf08:	b29a      	uxth	r2, r3
 801cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf0c:	889b      	ldrh	r3, [r3, #4]
 801cf0e:	b29b      	uxth	r3, r3
 801cf10:	429a      	cmp	r2, r3
 801cf12:	d03d      	beq.n	801cf90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801cf14:	2300      	movs	r3, #0
 801cf16:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801cf18:	e03a      	b.n	801cf90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801cf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf1c:	88db      	ldrh	r3, [r3, #6]
 801cf1e:	b29a      	uxth	r2, r3
 801cf20:	693b      	ldr	r3, [r7, #16]
 801cf22:	889b      	ldrh	r3, [r3, #4]
 801cf24:	b29b      	uxth	r3, r3
 801cf26:	429a      	cmp	r2, r3
 801cf28:	d902      	bls.n	801cf30 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cf2a:	f04f 33ff 	mov.w	r3, #4294967295
 801cf2e:	e0c5      	b.n	801d0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	68ba      	ldr	r2, [r7, #8]
 801cf34:	605a      	str	r2, [r3, #4]
      break;
 801cf36:	e02b      	b.n	801cf90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf3a:	889b      	ldrh	r3, [r3, #4]
 801cf3c:	b29a      	uxth	r2, r3
 801cf3e:	693b      	ldr	r3, [r7, #16]
 801cf40:	889b      	ldrh	r3, [r3, #4]
 801cf42:	b29b      	uxth	r3, r3
 801cf44:	429a      	cmp	r2, r3
 801cf46:	d102      	bne.n	801cf4e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cf48:	f04f 33ff 	mov.w	r3, #4294967295
 801cf4c:	e0b6      	b.n	801d0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cf50:	889b      	ldrh	r3, [r3, #4]
 801cf52:	b29a      	uxth	r2, r3
 801cf54:	693b      	ldr	r3, [r7, #16]
 801cf56:	88db      	ldrh	r3, [r3, #6]
 801cf58:	b29b      	uxth	r3, r3
 801cf5a:	429a      	cmp	r2, r3
 801cf5c:	d202      	bcs.n	801cf64 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cf5e:	f04f 33ff 	mov.w	r3, #4294967295
 801cf62:	e0ab      	b.n	801d0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801cf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d009      	beq.n	801cf7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801cf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf6c:	88db      	ldrh	r3, [r3, #6]
 801cf6e:	b29a      	uxth	r2, r3
 801cf70:	693b      	ldr	r3, [r7, #16]
 801cf72:	889b      	ldrh	r3, [r3, #4]
 801cf74:	b29b      	uxth	r3, r3
 801cf76:	429a      	cmp	r2, r3
 801cf78:	d001      	beq.n	801cf7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801cf7a:	2300      	movs	r3, #0
 801cf7c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801cf7e:	693b      	ldr	r3, [r7, #16]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801cf84:	693b      	ldr	r3, [r7, #16]
 801cf86:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801cf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d193      	bne.n	801ceb6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801cf8e:	e000      	b.n	801cf92 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801cf90:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801cf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d12d      	bne.n	801cff4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801cf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d01c      	beq.n	801cfd8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801cf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfa0:	88db      	ldrh	r3, [r3, #6]
 801cfa2:	b29a      	uxth	r2, r3
 801cfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfa6:	889b      	ldrh	r3, [r3, #4]
 801cfa8:	b29b      	uxth	r3, r3
 801cfaa:	429a      	cmp	r2, r3
 801cfac:	d906      	bls.n	801cfbc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801cfae:	4b45      	ldr	r3, [pc, #276]	; (801d0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cfb0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801cfb4:	4944      	ldr	r1, [pc, #272]	; (801d0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801cfb6:	4845      	ldr	r0, [pc, #276]	; (801d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cfb8:	f001 f9dc 	bl	801e374 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801cfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfbe:	68ba      	ldr	r2, [r7, #8]
 801cfc0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801cfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfc4:	88db      	ldrh	r3, [r3, #6]
 801cfc6:	b29a      	uxth	r2, r3
 801cfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cfca:	889b      	ldrh	r3, [r3, #4]
 801cfcc:	b29b      	uxth	r3, r3
 801cfce:	429a      	cmp	r2, r3
 801cfd0:	d010      	beq.n	801cff4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	623b      	str	r3, [r7, #32]
 801cfd6:	e00d      	b.n	801cff4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801cfd8:	68fb      	ldr	r3, [r7, #12]
 801cfda:	685b      	ldr	r3, [r3, #4]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d006      	beq.n	801cfee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801cfe0:	4b38      	ldr	r3, [pc, #224]	; (801d0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cfe2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801cfe6:	493a      	ldr	r1, [pc, #232]	; (801d0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801cfe8:	4838      	ldr	r0, [pc, #224]	; (801d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cfea:	f001 f9c3 	bl	801e374 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801cfee:	68fb      	ldr	r3, [r7, #12]
 801cff0:	68ba      	ldr	r2, [r7, #8]
 801cff2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d105      	bne.n	801d006 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801cffa:	68fb      	ldr	r3, [r7, #12]
 801cffc:	7f9b      	ldrb	r3, [r3, #30]
 801cffe:	f003 0301 	and.w	r3, r3, #1
 801d002:	2b00      	cmp	r3, #0
 801d004:	d059      	beq.n	801d0ba <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d006:	6a3b      	ldr	r3, [r7, #32]
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d04f      	beq.n	801d0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d00c:	68fb      	ldr	r3, [r7, #12]
 801d00e:	685b      	ldr	r3, [r3, #4]
 801d010:	2b00      	cmp	r3, #0
 801d012:	d006      	beq.n	801d022 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d014:	68fb      	ldr	r3, [r7, #12]
 801d016:	685b      	ldr	r3, [r3, #4]
 801d018:	685b      	ldr	r3, [r3, #4]
 801d01a:	889b      	ldrh	r3, [r3, #4]
 801d01c:	b29b      	uxth	r3, r3
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d002      	beq.n	801d028 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d022:	2300      	movs	r3, #0
 801d024:	623b      	str	r3, [r7, #32]
 801d026:	e041      	b.n	801d0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d02a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d032:	e012      	b.n	801d05a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d036:	685b      	ldr	r3, [r3, #4]
 801d038:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d03c:	88db      	ldrh	r3, [r3, #6]
 801d03e:	b29a      	uxth	r2, r3
 801d040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d042:	889b      	ldrh	r3, [r3, #4]
 801d044:	b29b      	uxth	r3, r3
 801d046:	429a      	cmp	r2, r3
 801d048:	d002      	beq.n	801d050 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d04a:	2300      	movs	r3, #0
 801d04c:	623b      	str	r3, [r7, #32]
            break;
 801d04e:	e007      	b.n	801d060 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d052:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	d1e9      	bne.n	801d034 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d060:	6a3b      	ldr	r3, [r7, #32]
 801d062:	2b00      	cmp	r3, #0
 801d064:	d022      	beq.n	801d0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	685b      	ldr	r3, [r3, #4]
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d106      	bne.n	801d07c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d06e:	4b15      	ldr	r3, [pc, #84]	; (801d0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d070:	f240 12df 	movw	r2, #479	; 0x1df
 801d074:	4917      	ldr	r1, [pc, #92]	; (801d0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d076:	4815      	ldr	r0, [pc, #84]	; (801d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d078:	f001 f97c 	bl	801e374 <iprintf>
          LWIP_ASSERT("sanity check",
 801d07c:	68fb      	ldr	r3, [r7, #12]
 801d07e:	685b      	ldr	r3, [r3, #4]
 801d080:	685b      	ldr	r3, [r3, #4]
 801d082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d084:	429a      	cmp	r2, r3
 801d086:	d106      	bne.n	801d096 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d088:	4b0e      	ldr	r3, [pc, #56]	; (801d0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d08a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d08e:	4911      	ldr	r1, [pc, #68]	; (801d0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d090:	480e      	ldr	r0, [pc, #56]	; (801d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d092:	f001 f96f 	bl	801e374 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d098:	681b      	ldr	r3, [r3, #0]
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d006      	beq.n	801d0ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d09e:	4b09      	ldr	r3, [pc, #36]	; (801d0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d0a0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d0a4:	490c      	ldr	r1, [pc, #48]	; (801d0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d0a6:	4809      	ldr	r0, [pc, #36]	; (801d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d0a8:	f001 f964 	bl	801e374 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d0ac:	6a3b      	ldr	r3, [r7, #32]
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	bf14      	ite	ne
 801d0b2:	2301      	movne	r3, #1
 801d0b4:	2300      	moveq	r3, #0
 801d0b6:	b2db      	uxtb	r3, r3
 801d0b8:	e000      	b.n	801d0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d0ba:	2300      	movs	r3, #0
}
 801d0bc:	4618      	mov	r0, r3
 801d0be:	3730      	adds	r7, #48	; 0x30
 801d0c0:	46bd      	mov	sp, r7
 801d0c2:	bd80      	pop	{r7, pc}
 801d0c4:	0802301c 	.word	0x0802301c
 801d0c8:	08023100 	.word	0x08023100
 801d0cc:	08023064 	.word	0x08023064
 801d0d0:	08023120 	.word	0x08023120
 801d0d4:	08023158 	.word	0x08023158
 801d0d8:	08023168 	.word	0x08023168

0801d0dc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d0dc:	b580      	push	{r7, lr}
 801d0de:	b08e      	sub	sp, #56	; 0x38
 801d0e0:	af00      	add	r7, sp, #0
 801d0e2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	685b      	ldr	r3, [r3, #4]
 801d0e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0ec:	781b      	ldrb	r3, [r3, #0]
 801d0ee:	f003 030f 	and.w	r3, r3, #15
 801d0f2:	b2db      	uxtb	r3, r3
 801d0f4:	009b      	lsls	r3, r3, #2
 801d0f6:	b2db      	uxtb	r3, r3
 801d0f8:	2b14      	cmp	r3, #20
 801d0fa:	f040 8171 	bne.w	801d3e0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d100:	88db      	ldrh	r3, [r3, #6]
 801d102:	b29b      	uxth	r3, r3
 801d104:	4618      	mov	r0, r3
 801d106:	f7f5 fc25 	bl	8012954 <lwip_htons>
 801d10a:	4603      	mov	r3, r0
 801d10c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d110:	b29b      	uxth	r3, r3
 801d112:	00db      	lsls	r3, r3, #3
 801d114:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d118:	885b      	ldrh	r3, [r3, #2]
 801d11a:	b29b      	uxth	r3, r3
 801d11c:	4618      	mov	r0, r3
 801d11e:	f7f5 fc19 	bl	8012954 <lwip_htons>
 801d122:	4603      	mov	r3, r0
 801d124:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d128:	781b      	ldrb	r3, [r3, #0]
 801d12a:	f003 030f 	and.w	r3, r3, #15
 801d12e:	b2db      	uxtb	r3, r3
 801d130:	009b      	lsls	r3, r3, #2
 801d132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d136:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d13a:	b29b      	uxth	r3, r3
 801d13c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d13e:	429a      	cmp	r2, r3
 801d140:	f0c0 8150 	bcc.w	801d3e4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d148:	b29b      	uxth	r3, r3
 801d14a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d14c:	1ad3      	subs	r3, r2, r3
 801d14e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d150:	6878      	ldr	r0, [r7, #4]
 801d152:	f7f7 f9f3 	bl	801453c <pbuf_clen>
 801d156:	4603      	mov	r3, r0
 801d158:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d15a:	4b8c      	ldr	r3, [pc, #560]	; (801d38c <ip4_reass+0x2b0>)
 801d15c:	881b      	ldrh	r3, [r3, #0]
 801d15e:	461a      	mov	r2, r3
 801d160:	8c3b      	ldrh	r3, [r7, #32]
 801d162:	4413      	add	r3, r2
 801d164:	2b0a      	cmp	r3, #10
 801d166:	dd10      	ble.n	801d18a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d168:	8c3b      	ldrh	r3, [r7, #32]
 801d16a:	4619      	mov	r1, r3
 801d16c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d16e:	f7ff fd81 	bl	801cc74 <ip_reass_remove_oldest_datagram>
 801d172:	4603      	mov	r3, r0
 801d174:	2b00      	cmp	r3, #0
 801d176:	f000 8137 	beq.w	801d3e8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d17a:	4b84      	ldr	r3, [pc, #528]	; (801d38c <ip4_reass+0x2b0>)
 801d17c:	881b      	ldrh	r3, [r3, #0]
 801d17e:	461a      	mov	r2, r3
 801d180:	8c3b      	ldrh	r3, [r7, #32]
 801d182:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d184:	2b0a      	cmp	r3, #10
 801d186:	f300 812f 	bgt.w	801d3e8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d18a:	4b81      	ldr	r3, [pc, #516]	; (801d390 <ip4_reass+0x2b4>)
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	633b      	str	r3, [r7, #48]	; 0x30
 801d190:	e015      	b.n	801d1be <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d194:	695a      	ldr	r2, [r3, #20]
 801d196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d198:	68db      	ldr	r3, [r3, #12]
 801d19a:	429a      	cmp	r2, r3
 801d19c:	d10c      	bne.n	801d1b8 <ip4_reass+0xdc>
 801d19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1a0:	699a      	ldr	r2, [r3, #24]
 801d1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1a4:	691b      	ldr	r3, [r3, #16]
 801d1a6:	429a      	cmp	r2, r3
 801d1a8:	d106      	bne.n	801d1b8 <ip4_reass+0xdc>
 801d1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1ac:	899a      	ldrh	r2, [r3, #12]
 801d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1b0:	889b      	ldrh	r3, [r3, #4]
 801d1b2:	b29b      	uxth	r3, r3
 801d1b4:	429a      	cmp	r2, r3
 801d1b6:	d006      	beq.n	801d1c6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1ba:	681b      	ldr	r3, [r3, #0]
 801d1bc:	633b      	str	r3, [r7, #48]	; 0x30
 801d1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d1e6      	bne.n	801d192 <ip4_reass+0xb6>
 801d1c4:	e000      	b.n	801d1c8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d1c6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d109      	bne.n	801d1e2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d1ce:	8c3b      	ldrh	r3, [r7, #32]
 801d1d0:	4619      	mov	r1, r3
 801d1d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d1d4:	f7ff fdb0 	bl	801cd38 <ip_reass_enqueue_new_datagram>
 801d1d8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	d11c      	bne.n	801d21a <ip4_reass+0x13e>
      goto nullreturn;
 801d1e0:	e105      	b.n	801d3ee <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1e4:	88db      	ldrh	r3, [r3, #6]
 801d1e6:	b29b      	uxth	r3, r3
 801d1e8:	4618      	mov	r0, r3
 801d1ea:	f7f5 fbb3 	bl	8012954 <lwip_htons>
 801d1ee:	4603      	mov	r3, r0
 801d1f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d110      	bne.n	801d21a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d1fa:	89db      	ldrh	r3, [r3, #14]
 801d1fc:	4618      	mov	r0, r3
 801d1fe:	f7f5 fba9 	bl	8012954 <lwip_htons>
 801d202:	4603      	mov	r3, r0
 801d204:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d208:	2b00      	cmp	r3, #0
 801d20a:	d006      	beq.n	801d21a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d20e:	3308      	adds	r3, #8
 801d210:	2214      	movs	r2, #20
 801d212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d214:	4618      	mov	r0, r3
 801d216:	f000 ff9d 	bl	801e154 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d21c:	88db      	ldrh	r3, [r3, #6]
 801d21e:	b29b      	uxth	r3, r3
 801d220:	f003 0320 	and.w	r3, r3, #32
 801d224:	2b00      	cmp	r3, #0
 801d226:	bf0c      	ite	eq
 801d228:	2301      	moveq	r3, #1
 801d22a:	2300      	movne	r3, #0
 801d22c:	b2db      	uxtb	r3, r3
 801d22e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d230:	69fb      	ldr	r3, [r7, #28]
 801d232:	2b00      	cmp	r3, #0
 801d234:	d00e      	beq.n	801d254 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d236:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d23a:	4413      	add	r3, r2
 801d23c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d23e:	8b7a      	ldrh	r2, [r7, #26]
 801d240:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d242:	429a      	cmp	r2, r3
 801d244:	f0c0 80a0 	bcc.w	801d388 <ip4_reass+0x2ac>
 801d248:	8b7b      	ldrh	r3, [r7, #26]
 801d24a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801d24e:	4293      	cmp	r3, r2
 801d250:	f200 809a 	bhi.w	801d388 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d254:	69fa      	ldr	r2, [r7, #28]
 801d256:	6879      	ldr	r1, [r7, #4]
 801d258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d25a:	f7ff fdd5 	bl	801ce08 <ip_reass_chain_frag_into_datagram_and_validate>
 801d25e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d260:	697b      	ldr	r3, [r7, #20]
 801d262:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d266:	f000 809b 	beq.w	801d3a0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d26a:	4b48      	ldr	r3, [pc, #288]	; (801d38c <ip4_reass+0x2b0>)
 801d26c:	881a      	ldrh	r2, [r3, #0]
 801d26e:	8c3b      	ldrh	r3, [r7, #32]
 801d270:	4413      	add	r3, r2
 801d272:	b29a      	uxth	r2, r3
 801d274:	4b45      	ldr	r3, [pc, #276]	; (801d38c <ip4_reass+0x2b0>)
 801d276:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d278:	69fb      	ldr	r3, [r7, #28]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d00d      	beq.n	801d29a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d27e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d280:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d282:	4413      	add	r3, r2
 801d284:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d288:	8a7a      	ldrh	r2, [r7, #18]
 801d28a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d28e:	7f9b      	ldrb	r3, [r3, #30]
 801d290:	f043 0301 	orr.w	r3, r3, #1
 801d294:	b2da      	uxtb	r2, r3
 801d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d298:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d29a:	697b      	ldr	r3, [r7, #20]
 801d29c:	2b01      	cmp	r3, #1
 801d29e:	d171      	bne.n	801d384 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2a2:	8b9b      	ldrh	r3, [r3, #28]
 801d2a4:	3314      	adds	r3, #20
 801d2a6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2aa:	685b      	ldr	r3, [r3, #4]
 801d2ac:	685b      	ldr	r3, [r3, #4]
 801d2ae:	681b      	ldr	r3, [r3, #0]
 801d2b0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2b4:	685b      	ldr	r3, [r3, #4]
 801d2b6:	685b      	ldr	r3, [r3, #4]
 801d2b8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2bc:	3308      	adds	r3, #8
 801d2be:	2214      	movs	r2, #20
 801d2c0:	4619      	mov	r1, r3
 801d2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d2c4:	f000 ff46 	bl	801e154 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d2c8:	8a3b      	ldrh	r3, [r7, #16]
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	f7f5 fb42 	bl	8012954 <lwip_htons>
 801d2d0:	4603      	mov	r3, r0
 801d2d2:	461a      	mov	r2, r3
 801d2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2d6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2da:	2200      	movs	r2, #0
 801d2dc:	719a      	strb	r2, [r3, #6]
 801d2de:	2200      	movs	r2, #0
 801d2e0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2e4:	2200      	movs	r2, #0
 801d2e6:	729a      	strb	r2, [r3, #10]
 801d2e8:	2200      	movs	r2, #0
 801d2ea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2ee:	685b      	ldr	r3, [r3, #4]
 801d2f0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d2f2:	e00d      	b.n	801d310 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2f6:	685b      	ldr	r3, [r3, #4]
 801d2f8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d2fa:	2114      	movs	r1, #20
 801d2fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d2fe:	f7f7 f809 	bl	8014314 <pbuf_remove_header>
      pbuf_cat(p, r);
 801d302:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d304:	6878      	ldr	r0, [r7, #4]
 801d306:	f7f7 f959 	bl	80145bc <pbuf_cat>
      r = iprh->next_pbuf;
 801d30a:	68fb      	ldr	r3, [r7, #12]
 801d30c:	681b      	ldr	r3, [r3, #0]
 801d30e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801d310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d312:	2b00      	cmp	r3, #0
 801d314:	d1ee      	bne.n	801d2f4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d316:	4b1e      	ldr	r3, [pc, #120]	; (801d390 <ip4_reass+0x2b4>)
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d31c:	429a      	cmp	r2, r3
 801d31e:	d102      	bne.n	801d326 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d320:	2300      	movs	r3, #0
 801d322:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d324:	e010      	b.n	801d348 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d326:	4b1a      	ldr	r3, [pc, #104]	; (801d390 <ip4_reass+0x2b4>)
 801d328:	681b      	ldr	r3, [r3, #0]
 801d32a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d32c:	e007      	b.n	801d33e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d330:	681b      	ldr	r3, [r3, #0]
 801d332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d334:	429a      	cmp	r2, r3
 801d336:	d006      	beq.n	801d346 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d33a:	681b      	ldr	r3, [r3, #0]
 801d33c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d340:	2b00      	cmp	r3, #0
 801d342:	d1f4      	bne.n	801d32e <ip4_reass+0x252>
 801d344:	e000      	b.n	801d348 <ip4_reass+0x26c>
          break;
 801d346:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d34a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d34c:	f7ff fd2e 	bl	801cdac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d350:	6878      	ldr	r0, [r7, #4]
 801d352:	f7f7 f8f3 	bl	801453c <pbuf_clen>
 801d356:	4603      	mov	r3, r0
 801d358:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d35a:	4b0c      	ldr	r3, [pc, #48]	; (801d38c <ip4_reass+0x2b0>)
 801d35c:	881b      	ldrh	r3, [r3, #0]
 801d35e:	8c3a      	ldrh	r2, [r7, #32]
 801d360:	429a      	cmp	r2, r3
 801d362:	d906      	bls.n	801d372 <ip4_reass+0x296>
 801d364:	4b0b      	ldr	r3, [pc, #44]	; (801d394 <ip4_reass+0x2b8>)
 801d366:	f240 229b 	movw	r2, #667	; 0x29b
 801d36a:	490b      	ldr	r1, [pc, #44]	; (801d398 <ip4_reass+0x2bc>)
 801d36c:	480b      	ldr	r0, [pc, #44]	; (801d39c <ip4_reass+0x2c0>)
 801d36e:	f001 f801 	bl	801e374 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d372:	4b06      	ldr	r3, [pc, #24]	; (801d38c <ip4_reass+0x2b0>)
 801d374:	881a      	ldrh	r2, [r3, #0]
 801d376:	8c3b      	ldrh	r3, [r7, #32]
 801d378:	1ad3      	subs	r3, r2, r3
 801d37a:	b29a      	uxth	r2, r3
 801d37c:	4b03      	ldr	r3, [pc, #12]	; (801d38c <ip4_reass+0x2b0>)
 801d37e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	e038      	b.n	801d3f6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d384:	2300      	movs	r3, #0
 801d386:	e036      	b.n	801d3f6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801d388:	bf00      	nop
 801d38a:	e00a      	b.n	801d3a2 <ip4_reass+0x2c6>
 801d38c:	2000fb0c 	.word	0x2000fb0c
 801d390:	2000fb08 	.word	0x2000fb08
 801d394:	0802301c 	.word	0x0802301c
 801d398:	0802318c 	.word	0x0802318c
 801d39c:	08023064 	.word	0x08023064
    goto nullreturn_ipr;
 801d3a0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d106      	bne.n	801d3b6 <ip4_reass+0x2da>
 801d3a8:	4b15      	ldr	r3, [pc, #84]	; (801d400 <ip4_reass+0x324>)
 801d3aa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801d3ae:	4915      	ldr	r1, [pc, #84]	; (801d404 <ip4_reass+0x328>)
 801d3b0:	4815      	ldr	r0, [pc, #84]	; (801d408 <ip4_reass+0x32c>)
 801d3b2:	f000 ffdf 	bl	801e374 <iprintf>
  if (ipr->p == NULL) {
 801d3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3b8:	685b      	ldr	r3, [r3, #4]
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d116      	bne.n	801d3ec <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d3be:	4b13      	ldr	r3, [pc, #76]	; (801d40c <ip4_reass+0x330>)
 801d3c0:	681b      	ldr	r3, [r3, #0]
 801d3c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d3c4:	429a      	cmp	r2, r3
 801d3c6:	d006      	beq.n	801d3d6 <ip4_reass+0x2fa>
 801d3c8:	4b0d      	ldr	r3, [pc, #52]	; (801d400 <ip4_reass+0x324>)
 801d3ca:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d3ce:	4910      	ldr	r1, [pc, #64]	; (801d410 <ip4_reass+0x334>)
 801d3d0:	480d      	ldr	r0, [pc, #52]	; (801d408 <ip4_reass+0x32c>)
 801d3d2:	f000 ffcf 	bl	801e374 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d3d6:	2100      	movs	r1, #0
 801d3d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d3da:	f7ff fce7 	bl	801cdac <ip_reass_dequeue_datagram>
 801d3de:	e006      	b.n	801d3ee <ip4_reass+0x312>
    goto nullreturn;
 801d3e0:	bf00      	nop
 801d3e2:	e004      	b.n	801d3ee <ip4_reass+0x312>
    goto nullreturn;
 801d3e4:	bf00      	nop
 801d3e6:	e002      	b.n	801d3ee <ip4_reass+0x312>
      goto nullreturn;
 801d3e8:	bf00      	nop
 801d3ea:	e000      	b.n	801d3ee <ip4_reass+0x312>
  }

nullreturn:
 801d3ec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d3ee:	6878      	ldr	r0, [r7, #4]
 801d3f0:	f7f7 f816 	bl	8014420 <pbuf_free>
  return NULL;
 801d3f4:	2300      	movs	r3, #0
}
 801d3f6:	4618      	mov	r0, r3
 801d3f8:	3738      	adds	r7, #56	; 0x38
 801d3fa:	46bd      	mov	sp, r7
 801d3fc:	bd80      	pop	{r7, pc}
 801d3fe:	bf00      	nop
 801d400:	0802301c 	.word	0x0802301c
 801d404:	080231a8 	.word	0x080231a8
 801d408:	08023064 	.word	0x08023064
 801d40c:	2000fb08 	.word	0x2000fb08
 801d410:	080231b4 	.word	0x080231b4

0801d414 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d414:	b580      	push	{r7, lr}
 801d416:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d418:	2005      	movs	r0, #5
 801d41a:	f7f5 ff73 	bl	8013304 <memp_malloc>
 801d41e:	4603      	mov	r3, r0
}
 801d420:	4618      	mov	r0, r3
 801d422:	bd80      	pop	{r7, pc}

0801d424 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d424:	b580      	push	{r7, lr}
 801d426:	b082      	sub	sp, #8
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d106      	bne.n	801d440 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d432:	4b07      	ldr	r3, [pc, #28]	; (801d450 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d434:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801d438:	4906      	ldr	r1, [pc, #24]	; (801d454 <ip_frag_free_pbuf_custom_ref+0x30>)
 801d43a:	4807      	ldr	r0, [pc, #28]	; (801d458 <ip_frag_free_pbuf_custom_ref+0x34>)
 801d43c:	f000 ff9a 	bl	801e374 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d440:	6879      	ldr	r1, [r7, #4]
 801d442:	2005      	movs	r0, #5
 801d444:	f7f5 ffd4 	bl	80133f0 <memp_free>
}
 801d448:	bf00      	nop
 801d44a:	3708      	adds	r7, #8
 801d44c:	46bd      	mov	sp, r7
 801d44e:	bd80      	pop	{r7, pc}
 801d450:	0802301c 	.word	0x0802301c
 801d454:	080231d4 	.word	0x080231d4
 801d458:	08023064 	.word	0x08023064

0801d45c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d45c:	b580      	push	{r7, lr}
 801d45e:	b084      	sub	sp, #16
 801d460:	af00      	add	r7, sp, #0
 801d462:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d468:	68fb      	ldr	r3, [r7, #12]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d106      	bne.n	801d47c <ipfrag_free_pbuf_custom+0x20>
 801d46e:	4b11      	ldr	r3, [pc, #68]	; (801d4b4 <ipfrag_free_pbuf_custom+0x58>)
 801d470:	f240 22ce 	movw	r2, #718	; 0x2ce
 801d474:	4910      	ldr	r1, [pc, #64]	; (801d4b8 <ipfrag_free_pbuf_custom+0x5c>)
 801d476:	4811      	ldr	r0, [pc, #68]	; (801d4bc <ipfrag_free_pbuf_custom+0x60>)
 801d478:	f000 ff7c 	bl	801e374 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d47c:	68fa      	ldr	r2, [r7, #12]
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	429a      	cmp	r2, r3
 801d482:	d006      	beq.n	801d492 <ipfrag_free_pbuf_custom+0x36>
 801d484:	4b0b      	ldr	r3, [pc, #44]	; (801d4b4 <ipfrag_free_pbuf_custom+0x58>)
 801d486:	f240 22cf 	movw	r2, #719	; 0x2cf
 801d48a:	490d      	ldr	r1, [pc, #52]	; (801d4c0 <ipfrag_free_pbuf_custom+0x64>)
 801d48c:	480b      	ldr	r0, [pc, #44]	; (801d4bc <ipfrag_free_pbuf_custom+0x60>)
 801d48e:	f000 ff71 	bl	801e374 <iprintf>
  if (pcr->original != NULL) {
 801d492:	68fb      	ldr	r3, [r7, #12]
 801d494:	695b      	ldr	r3, [r3, #20]
 801d496:	2b00      	cmp	r3, #0
 801d498:	d004      	beq.n	801d4a4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	695b      	ldr	r3, [r3, #20]
 801d49e:	4618      	mov	r0, r3
 801d4a0:	f7f6 ffbe 	bl	8014420 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d4a4:	68f8      	ldr	r0, [r7, #12]
 801d4a6:	f7ff ffbd 	bl	801d424 <ip_frag_free_pbuf_custom_ref>
}
 801d4aa:	bf00      	nop
 801d4ac:	3710      	adds	r7, #16
 801d4ae:	46bd      	mov	sp, r7
 801d4b0:	bd80      	pop	{r7, pc}
 801d4b2:	bf00      	nop
 801d4b4:	0802301c 	.word	0x0802301c
 801d4b8:	080231e0 	.word	0x080231e0
 801d4bc:	08023064 	.word	0x08023064
 801d4c0:	080231ec 	.word	0x080231ec

0801d4c4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d4c4:	b580      	push	{r7, lr}
 801d4c6:	b094      	sub	sp, #80	; 0x50
 801d4c8:	af02      	add	r7, sp, #8
 801d4ca:	60f8      	str	r0, [r7, #12]
 801d4cc:	60b9      	str	r1, [r7, #8]
 801d4ce:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d4d0:	2300      	movs	r3, #0
 801d4d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d4d6:	68bb      	ldr	r3, [r7, #8]
 801d4d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d4da:	3b14      	subs	r3, #20
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	da00      	bge.n	801d4e2 <ip4_frag+0x1e>
 801d4e0:	3307      	adds	r3, #7
 801d4e2:	10db      	asrs	r3, r3, #3
 801d4e4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d4e6:	2314      	movs	r3, #20
 801d4e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d4ea:	68fb      	ldr	r3, [r7, #12]
 801d4ec:	685b      	ldr	r3, [r3, #4]
 801d4ee:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801d4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4f6:	781b      	ldrb	r3, [r3, #0]
 801d4f8:	f003 030f 	and.w	r3, r3, #15
 801d4fc:	b2db      	uxtb	r3, r3
 801d4fe:	009b      	lsls	r3, r3, #2
 801d500:	b2db      	uxtb	r3, r3
 801d502:	2b14      	cmp	r3, #20
 801d504:	d002      	beq.n	801d50c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d506:	f06f 0305 	mvn.w	r3, #5
 801d50a:	e110      	b.n	801d72e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d50c:	68fb      	ldr	r3, [r7, #12]
 801d50e:	895b      	ldrh	r3, [r3, #10]
 801d510:	2b13      	cmp	r3, #19
 801d512:	d809      	bhi.n	801d528 <ip4_frag+0x64>
 801d514:	4b88      	ldr	r3, [pc, #544]	; (801d738 <ip4_frag+0x274>)
 801d516:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801d51a:	4988      	ldr	r1, [pc, #544]	; (801d73c <ip4_frag+0x278>)
 801d51c:	4888      	ldr	r0, [pc, #544]	; (801d740 <ip4_frag+0x27c>)
 801d51e:	f000 ff29 	bl	801e374 <iprintf>
 801d522:	f06f 0305 	mvn.w	r3, #5
 801d526:	e102      	b.n	801d72e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d52a:	88db      	ldrh	r3, [r3, #6]
 801d52c:	b29b      	uxth	r3, r3
 801d52e:	4618      	mov	r0, r3
 801d530:	f7f5 fa10 	bl	8012954 <lwip_htons>
 801d534:	4603      	mov	r3, r0
 801d536:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801d538:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d53a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d53e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d542:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d548:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d54a:	68fb      	ldr	r3, [r7, #12]
 801d54c:	891b      	ldrh	r3, [r3, #8]
 801d54e:	3b14      	subs	r3, #20
 801d550:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801d554:	e0e1      	b.n	801d71a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d556:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d558:	00db      	lsls	r3, r3, #3
 801d55a:	b29b      	uxth	r3, r3
 801d55c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d560:	4293      	cmp	r3, r2
 801d562:	bf28      	it	cs
 801d564:	4613      	movcs	r3, r2
 801d566:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d568:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d56c:	2114      	movs	r1, #20
 801d56e:	200e      	movs	r0, #14
 801d570:	f7f6 fc72 	bl	8013e58 <pbuf_alloc>
 801d574:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801d576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d578:	2b00      	cmp	r3, #0
 801d57a:	f000 80d5 	beq.w	801d728 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d580:	895b      	ldrh	r3, [r3, #10]
 801d582:	2b13      	cmp	r3, #19
 801d584:	d806      	bhi.n	801d594 <ip4_frag+0xd0>
 801d586:	4b6c      	ldr	r3, [pc, #432]	; (801d738 <ip4_frag+0x274>)
 801d588:	f44f 7249 	mov.w	r2, #804	; 0x324
 801d58c:	496d      	ldr	r1, [pc, #436]	; (801d744 <ip4_frag+0x280>)
 801d58e:	486c      	ldr	r0, [pc, #432]	; (801d740 <ip4_frag+0x27c>)
 801d590:	f000 fef0 	bl	801e374 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d596:	685b      	ldr	r3, [r3, #4]
 801d598:	2214      	movs	r2, #20
 801d59a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d59c:	4618      	mov	r0, r3
 801d59e:	f000 fdd9 	bl	801e154 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5a4:	685b      	ldr	r3, [r3, #4]
 801d5a6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801d5a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d5aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801d5ae:	e064      	b.n	801d67a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d5b0:	68fb      	ldr	r3, [r7, #12]
 801d5b2:	895a      	ldrh	r2, [r3, #10]
 801d5b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d5b6:	1ad3      	subs	r3, r2, r3
 801d5b8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	895b      	ldrh	r3, [r3, #10]
 801d5be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d5c0:	429a      	cmp	r2, r3
 801d5c2:	d906      	bls.n	801d5d2 <ip4_frag+0x10e>
 801d5c4:	4b5c      	ldr	r3, [pc, #368]	; (801d738 <ip4_frag+0x274>)
 801d5c6:	f240 322d 	movw	r2, #813	; 0x32d
 801d5ca:	495f      	ldr	r1, [pc, #380]	; (801d748 <ip4_frag+0x284>)
 801d5cc:	485c      	ldr	r0, [pc, #368]	; (801d740 <ip4_frag+0x27c>)
 801d5ce:	f000 fed1 	bl	801e374 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d5d2:	8bfa      	ldrh	r2, [r7, #30]
 801d5d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d5d8:	4293      	cmp	r3, r2
 801d5da:	bf28      	it	cs
 801d5dc:	4613      	movcs	r3, r2
 801d5de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d5e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d105      	bne.n	801d5f6 <ip4_frag+0x132>
        poff = 0;
 801d5ea:	2300      	movs	r3, #0
 801d5ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	681b      	ldr	r3, [r3, #0]
 801d5f2:	60fb      	str	r3, [r7, #12]
        continue;
 801d5f4:	e041      	b.n	801d67a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d5f6:	f7ff ff0d 	bl	801d414 <ip_frag_alloc_pbuf_custom_ref>
 801d5fa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d5fc:	69bb      	ldr	r3, [r7, #24]
 801d5fe:	2b00      	cmp	r3, #0
 801d600:	d103      	bne.n	801d60a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d602:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d604:	f7f6 ff0c 	bl	8014420 <pbuf_free>
        goto memerr;
 801d608:	e08f      	b.n	801d72a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d60a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d610:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d612:	4413      	add	r3, r2
 801d614:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801d618:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801d61c:	9201      	str	r2, [sp, #4]
 801d61e:	9300      	str	r3, [sp, #0]
 801d620:	4603      	mov	r3, r0
 801d622:	2241      	movs	r2, #65	; 0x41
 801d624:	2000      	movs	r0, #0
 801d626:	f7f6 fd41 	bl	80140ac <pbuf_alloced_custom>
 801d62a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801d62c:	697b      	ldr	r3, [r7, #20]
 801d62e:	2b00      	cmp	r3, #0
 801d630:	d106      	bne.n	801d640 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801d632:	69b8      	ldr	r0, [r7, #24]
 801d634:	f7ff fef6 	bl	801d424 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801d638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d63a:	f7f6 fef1 	bl	8014420 <pbuf_free>
        goto memerr;
 801d63e:	e074      	b.n	801d72a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801d640:	68f8      	ldr	r0, [r7, #12]
 801d642:	f7f6 ff93 	bl	801456c <pbuf_ref>
      pcr->original = p;
 801d646:	69bb      	ldr	r3, [r7, #24]
 801d648:	68fa      	ldr	r2, [r7, #12]
 801d64a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801d64c:	69bb      	ldr	r3, [r7, #24]
 801d64e:	4a3f      	ldr	r2, [pc, #252]	; (801d74c <ip4_frag+0x288>)
 801d650:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801d652:	6979      	ldr	r1, [r7, #20]
 801d654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d656:	f7f6 ffb1 	bl	80145bc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801d65a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801d65e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d662:	1ad3      	subs	r3, r2, r3
 801d664:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801d668:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	d004      	beq.n	801d67a <ip4_frag+0x1b6>
        poff = 0;
 801d670:	2300      	movs	r3, #0
 801d672:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	681b      	ldr	r3, [r3, #0]
 801d678:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d67a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d67e:	2b00      	cmp	r3, #0
 801d680:	d196      	bne.n	801d5b0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d682:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d684:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d688:	4413      	add	r3, r2
 801d68a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d68c:	68bb      	ldr	r3, [r7, #8]
 801d68e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d690:	f1a3 0213 	sub.w	r2, r3, #19
 801d694:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d698:	429a      	cmp	r2, r3
 801d69a:	bfcc      	ite	gt
 801d69c:	2301      	movgt	r3, #1
 801d69e:	2300      	movle	r3, #0
 801d6a0:	b2db      	uxtb	r3, r3
 801d6a2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d6a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d6a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d6ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801d6ae:	6a3b      	ldr	r3, [r7, #32]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d002      	beq.n	801d6ba <ip4_frag+0x1f6>
 801d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d003      	beq.n	801d6c2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d6ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d6bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d6c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d6c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d6c4:	4618      	mov	r0, r3
 801d6c6:	f7f5 f945 	bl	8012954 <lwip_htons>
 801d6ca:	4603      	mov	r3, r0
 801d6cc:	461a      	mov	r2, r3
 801d6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6d0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d6d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d6d4:	3314      	adds	r3, #20
 801d6d6:	b29b      	uxth	r3, r3
 801d6d8:	4618      	mov	r0, r3
 801d6da:	f7f5 f93b 	bl	8012954 <lwip_htons>
 801d6de:	4603      	mov	r3, r0
 801d6e0:	461a      	mov	r2, r3
 801d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6e4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6e8:	2200      	movs	r2, #0
 801d6ea:	729a      	strb	r2, [r3, #10]
 801d6ec:	2200      	movs	r2, #0
 801d6ee:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d6f0:	68bb      	ldr	r3, [r7, #8]
 801d6f2:	695b      	ldr	r3, [r3, #20]
 801d6f4:	687a      	ldr	r2, [r7, #4]
 801d6f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d6f8:	68b8      	ldr	r0, [r7, #8]
 801d6fa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d6fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d6fe:	f7f6 fe8f 	bl	8014420 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d702:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d706:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d708:	1ad3      	subs	r3, r2, r3
 801d70a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801d70e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801d712:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d714:	4413      	add	r3, r2
 801d716:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801d71a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d71e:	2b00      	cmp	r3, #0
 801d720:	f47f af19 	bne.w	801d556 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d724:	2300      	movs	r3, #0
 801d726:	e002      	b.n	801d72e <ip4_frag+0x26a>
      goto memerr;
 801d728:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d72a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d72e:	4618      	mov	r0, r3
 801d730:	3748      	adds	r7, #72	; 0x48
 801d732:	46bd      	mov	sp, r7
 801d734:	bd80      	pop	{r7, pc}
 801d736:	bf00      	nop
 801d738:	0802301c 	.word	0x0802301c
 801d73c:	080231f8 	.word	0x080231f8
 801d740:	08023064 	.word	0x08023064
 801d744:	08023214 	.word	0x08023214
 801d748:	08023234 	.word	0x08023234
 801d74c:	0801d45d 	.word	0x0801d45d

0801d750 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d750:	b580      	push	{r7, lr}
 801d752:	b086      	sub	sp, #24
 801d754:	af00      	add	r7, sp, #0
 801d756:	6078      	str	r0, [r7, #4]
 801d758:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d75a:	230e      	movs	r3, #14
 801d75c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	895b      	ldrh	r3, [r3, #10]
 801d762:	2b0e      	cmp	r3, #14
 801d764:	d96e      	bls.n	801d844 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	7bdb      	ldrb	r3, [r3, #15]
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d106      	bne.n	801d77c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d76e:	683b      	ldr	r3, [r7, #0]
 801d770:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801d774:	3301      	adds	r3, #1
 801d776:	b2da      	uxtb	r2, r3
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	685b      	ldr	r3, [r3, #4]
 801d780:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d782:	693b      	ldr	r3, [r7, #16]
 801d784:	7b1a      	ldrb	r2, [r3, #12]
 801d786:	7b5b      	ldrb	r3, [r3, #13]
 801d788:	021b      	lsls	r3, r3, #8
 801d78a:	4313      	orrs	r3, r2
 801d78c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d78e:	693b      	ldr	r3, [r7, #16]
 801d790:	781b      	ldrb	r3, [r3, #0]
 801d792:	f003 0301 	and.w	r3, r3, #1
 801d796:	2b00      	cmp	r3, #0
 801d798:	d023      	beq.n	801d7e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d79a:	693b      	ldr	r3, [r7, #16]
 801d79c:	781b      	ldrb	r3, [r3, #0]
 801d79e:	2b01      	cmp	r3, #1
 801d7a0:	d10f      	bne.n	801d7c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d7a2:	693b      	ldr	r3, [r7, #16]
 801d7a4:	785b      	ldrb	r3, [r3, #1]
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d11b      	bne.n	801d7e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d7aa:	693b      	ldr	r3, [r7, #16]
 801d7ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d7ae:	2b5e      	cmp	r3, #94	; 0x5e
 801d7b0:	d117      	bne.n	801d7e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	7b5b      	ldrb	r3, [r3, #13]
 801d7b6:	f043 0310 	orr.w	r3, r3, #16
 801d7ba:	b2da      	uxtb	r2, r3
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	735a      	strb	r2, [r3, #13]
 801d7c0:	e00f      	b.n	801d7e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d7c2:	693b      	ldr	r3, [r7, #16]
 801d7c4:	2206      	movs	r2, #6
 801d7c6:	4928      	ldr	r1, [pc, #160]	; (801d868 <ethernet_input+0x118>)
 801d7c8:	4618      	mov	r0, r3
 801d7ca:	f000 fcb3 	bl	801e134 <memcmp>
 801d7ce:	4603      	mov	r3, r0
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	d106      	bne.n	801d7e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d7d4:	687b      	ldr	r3, [r7, #4]
 801d7d6:	7b5b      	ldrb	r3, [r3, #13]
 801d7d8:	f043 0308 	orr.w	r3, r3, #8
 801d7dc:	b2da      	uxtb	r2, r3
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d7e2:	89fb      	ldrh	r3, [r7, #14]
 801d7e4:	2b08      	cmp	r3, #8
 801d7e6:	d003      	beq.n	801d7f0 <ethernet_input+0xa0>
 801d7e8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801d7ec:	d014      	beq.n	801d818 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d7ee:	e032      	b.n	801d856 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d7f0:	683b      	ldr	r3, [r7, #0]
 801d7f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d7f6:	f003 0308 	and.w	r3, r3, #8
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d024      	beq.n	801d848 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d7fe:	8afb      	ldrh	r3, [r7, #22]
 801d800:	4619      	mov	r1, r3
 801d802:	6878      	ldr	r0, [r7, #4]
 801d804:	f7f6 fd86 	bl	8014314 <pbuf_remove_header>
 801d808:	4603      	mov	r3, r0
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d11e      	bne.n	801d84c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d80e:	6839      	ldr	r1, [r7, #0]
 801d810:	6878      	ldr	r0, [r7, #4]
 801d812:	f7fe ff13 	bl	801c63c <ip4_input>
      break;
 801d816:	e013      	b.n	801d840 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d818:	683b      	ldr	r3, [r7, #0]
 801d81a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d81e:	f003 0308 	and.w	r3, r3, #8
 801d822:	2b00      	cmp	r3, #0
 801d824:	d014      	beq.n	801d850 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d826:	8afb      	ldrh	r3, [r7, #22]
 801d828:	4619      	mov	r1, r3
 801d82a:	6878      	ldr	r0, [r7, #4]
 801d82c:	f7f6 fd72 	bl	8014314 <pbuf_remove_header>
 801d830:	4603      	mov	r3, r0
 801d832:	2b00      	cmp	r3, #0
 801d834:	d10e      	bne.n	801d854 <ethernet_input+0x104>
        etharp_input(p, netif);
 801d836:	6839      	ldr	r1, [r7, #0]
 801d838:	6878      	ldr	r0, [r7, #4]
 801d83a:	f7fe f8b3 	bl	801b9a4 <etharp_input>
      break;
 801d83e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d840:	2300      	movs	r3, #0
 801d842:	e00c      	b.n	801d85e <ethernet_input+0x10e>
    goto free_and_return;
 801d844:	bf00      	nop
 801d846:	e006      	b.n	801d856 <ethernet_input+0x106>
        goto free_and_return;
 801d848:	bf00      	nop
 801d84a:	e004      	b.n	801d856 <ethernet_input+0x106>
        goto free_and_return;
 801d84c:	bf00      	nop
 801d84e:	e002      	b.n	801d856 <ethernet_input+0x106>
        goto free_and_return;
 801d850:	bf00      	nop
 801d852:	e000      	b.n	801d856 <ethernet_input+0x106>
        goto free_and_return;
 801d854:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d856:	6878      	ldr	r0, [r7, #4]
 801d858:	f7f6 fde2 	bl	8014420 <pbuf_free>
  return ERR_OK;
 801d85c:	2300      	movs	r3, #0
}
 801d85e:	4618      	mov	r0, r3
 801d860:	3718      	adds	r7, #24
 801d862:	46bd      	mov	sp, r7
 801d864:	bd80      	pop	{r7, pc}
 801d866:	bf00      	nop
 801d868:	080234e0 	.word	0x080234e0

0801d86c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d86c:	b580      	push	{r7, lr}
 801d86e:	b086      	sub	sp, #24
 801d870:	af00      	add	r7, sp, #0
 801d872:	60f8      	str	r0, [r7, #12]
 801d874:	60b9      	str	r1, [r7, #8]
 801d876:	607a      	str	r2, [r7, #4]
 801d878:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801d87a:	8c3b      	ldrh	r3, [r7, #32]
 801d87c:	4618      	mov	r0, r3
 801d87e:	f7f5 f869 	bl	8012954 <lwip_htons>
 801d882:	4603      	mov	r3, r0
 801d884:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801d886:	210e      	movs	r1, #14
 801d888:	68b8      	ldr	r0, [r7, #8]
 801d88a:	f7f6 fd33 	bl	80142f4 <pbuf_add_header>
 801d88e:	4603      	mov	r3, r0
 801d890:	2b00      	cmp	r3, #0
 801d892:	d125      	bne.n	801d8e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801d894:	68bb      	ldr	r3, [r7, #8]
 801d896:	685b      	ldr	r3, [r3, #4]
 801d898:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801d89a:	693b      	ldr	r3, [r7, #16]
 801d89c:	8afa      	ldrh	r2, [r7, #22]
 801d89e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801d8a0:	693b      	ldr	r3, [r7, #16]
 801d8a2:	2206      	movs	r2, #6
 801d8a4:	6839      	ldr	r1, [r7, #0]
 801d8a6:	4618      	mov	r0, r3
 801d8a8:	f000 fc54 	bl	801e154 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801d8ac:	693b      	ldr	r3, [r7, #16]
 801d8ae:	3306      	adds	r3, #6
 801d8b0:	2206      	movs	r2, #6
 801d8b2:	6879      	ldr	r1, [r7, #4]
 801d8b4:	4618      	mov	r0, r3
 801d8b6:	f000 fc4d 	bl	801e154 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d8c0:	2b06      	cmp	r3, #6
 801d8c2:	d006      	beq.n	801d8d2 <ethernet_output+0x66>
 801d8c4:	4b0a      	ldr	r3, [pc, #40]	; (801d8f0 <ethernet_output+0x84>)
 801d8c6:	f44f 7299 	mov.w	r2, #306	; 0x132
 801d8ca:	490a      	ldr	r1, [pc, #40]	; (801d8f4 <ethernet_output+0x88>)
 801d8cc:	480a      	ldr	r0, [pc, #40]	; (801d8f8 <ethernet_output+0x8c>)
 801d8ce:	f000 fd51 	bl	801e374 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	699b      	ldr	r3, [r3, #24]
 801d8d6:	68b9      	ldr	r1, [r7, #8]
 801d8d8:	68f8      	ldr	r0, [r7, #12]
 801d8da:	4798      	blx	r3
 801d8dc:	4603      	mov	r3, r0
 801d8de:	e002      	b.n	801d8e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801d8e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801d8e2:	f06f 0301 	mvn.w	r3, #1
}
 801d8e6:	4618      	mov	r0, r3
 801d8e8:	3718      	adds	r7, #24
 801d8ea:	46bd      	mov	sp, r7
 801d8ec:	bd80      	pop	{r7, pc}
 801d8ee:	bf00      	nop
 801d8f0:	08023244 	.word	0x08023244
 801d8f4:	0802327c 	.word	0x0802327c
 801d8f8:	080232b0 	.word	0x080232b0

0801d8fc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d8fc:	b580      	push	{r7, lr}
 801d8fe:	b086      	sub	sp, #24
 801d900:	af00      	add	r7, sp, #0
 801d902:	6078      	str	r0, [r7, #4]
 801d904:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801d906:	683b      	ldr	r3, [r7, #0]
 801d908:	60bb      	str	r3, [r7, #8]
 801d90a:	2304      	movs	r3, #4
 801d90c:	60fb      	str	r3, [r7, #12]
 801d90e:	2300      	movs	r3, #0
 801d910:	613b      	str	r3, [r7, #16]
 801d912:	2300      	movs	r3, #0
 801d914:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801d916:	f107 0308 	add.w	r3, r7, #8
 801d91a:	2100      	movs	r1, #0
 801d91c:	4618      	mov	r0, r3
 801d91e:	f7ef fee8 	bl	800d6f2 <osMessageCreate>
 801d922:	4602      	mov	r2, r0
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	681b      	ldr	r3, [r3, #0]
 801d92c:	2b00      	cmp	r3, #0
 801d92e:	d102      	bne.n	801d936 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801d930:	f04f 33ff 	mov.w	r3, #4294967295
 801d934:	e000      	b.n	801d938 <sys_mbox_new+0x3c>

  return ERR_OK;
 801d936:	2300      	movs	r3, #0
}
 801d938:	4618      	mov	r0, r3
 801d93a:	3718      	adds	r7, #24
 801d93c:	46bd      	mov	sp, r7
 801d93e:	bd80      	pop	{r7, pc}

0801d940 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801d940:	b580      	push	{r7, lr}
 801d942:	b082      	sub	sp, #8
 801d944:	af00      	add	r7, sp, #0
 801d946:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	4618      	mov	r0, r3
 801d94e:	f7ef ffad 	bl	800d8ac <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	4618      	mov	r0, r3
 801d958:	f7ef ffbe 	bl	800d8d8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801d95c:	bf00      	nop
 801d95e:	3708      	adds	r7, #8
 801d960:	46bd      	mov	sp, r7
 801d962:	bd80      	pop	{r7, pc}

0801d964 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d964:	b580      	push	{r7, lr}
 801d966:	b084      	sub	sp, #16
 801d968:	af00      	add	r7, sp, #0
 801d96a:	6078      	str	r0, [r7, #4]
 801d96c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	681b      	ldr	r3, [r3, #0]
 801d972:	6839      	ldr	r1, [r7, #0]
 801d974:	2200      	movs	r2, #0
 801d976:	4618      	mov	r0, r3
 801d978:	f7ef fee4 	bl	800d744 <osMessagePut>
 801d97c:	4603      	mov	r3, r0
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d102      	bne.n	801d988 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801d982:	2300      	movs	r3, #0
 801d984:	73fb      	strb	r3, [r7, #15]
 801d986:	e001      	b.n	801d98c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d988:	23ff      	movs	r3, #255	; 0xff
 801d98a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d98c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d990:	4618      	mov	r0, r3
 801d992:	3710      	adds	r7, #16
 801d994:	46bd      	mov	sp, r7
 801d996:	bd80      	pop	{r7, pc}

0801d998 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801d998:	b580      	push	{r7, lr}
 801d99a:	b08c      	sub	sp, #48	; 0x30
 801d99c:	af00      	add	r7, sp, #0
 801d99e:	61f8      	str	r0, [r7, #28]
 801d9a0:	61b9      	str	r1, [r7, #24]
 801d9a2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801d9a4:	f7ef fcd0 	bl	800d348 <osKernelSysTick>
 801d9a8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801d9aa:	697b      	ldr	r3, [r7, #20]
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	d017      	beq.n	801d9e0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801d9b0:	69fb      	ldr	r3, [r7, #28]
 801d9b2:	6819      	ldr	r1, [r3, #0]
 801d9b4:	f107 0320 	add.w	r3, r7, #32
 801d9b8:	697a      	ldr	r2, [r7, #20]
 801d9ba:	4618      	mov	r0, r3
 801d9bc:	f7ef ff02 	bl	800d7c4 <osMessageGet>

    if(event.status == osEventMessage)
 801d9c0:	6a3b      	ldr	r3, [r7, #32]
 801d9c2:	2b10      	cmp	r3, #16
 801d9c4:	d109      	bne.n	801d9da <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801d9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9c8:	461a      	mov	r2, r3
 801d9ca:	69bb      	ldr	r3, [r7, #24]
 801d9cc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801d9ce:	f7ef fcbb 	bl	800d348 <osKernelSysTick>
 801d9d2:	4602      	mov	r2, r0
 801d9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9d6:	1ad3      	subs	r3, r2, r3
 801d9d8:	e019      	b.n	801da0e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d9da:	f04f 33ff 	mov.w	r3, #4294967295
 801d9de:	e016      	b.n	801da0e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801d9e0:	69fb      	ldr	r3, [r7, #28]
 801d9e2:	6819      	ldr	r1, [r3, #0]
 801d9e4:	463b      	mov	r3, r7
 801d9e6:	f04f 32ff 	mov.w	r2, #4294967295
 801d9ea:	4618      	mov	r0, r3
 801d9ec:	f7ef feea 	bl	800d7c4 <osMessageGet>
 801d9f0:	f107 0320 	add.w	r3, r7, #32
 801d9f4:	463a      	mov	r2, r7
 801d9f6:	ca07      	ldmia	r2, {r0, r1, r2}
 801d9f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9fe:	461a      	mov	r2, r3
 801da00:	69bb      	ldr	r3, [r7, #24]
 801da02:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801da04:	f7ef fca0 	bl	800d348 <osKernelSysTick>
 801da08:	4602      	mov	r2, r0
 801da0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da0c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801da0e:	4618      	mov	r0, r3
 801da10:	3730      	adds	r7, #48	; 0x30
 801da12:	46bd      	mov	sp, r7
 801da14:	bd80      	pop	{r7, pc}

0801da16 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801da16:	b580      	push	{r7, lr}
 801da18:	b086      	sub	sp, #24
 801da1a:	af00      	add	r7, sp, #0
 801da1c:	6078      	str	r0, [r7, #4]
 801da1e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	6819      	ldr	r1, [r3, #0]
 801da24:	f107 030c 	add.w	r3, r7, #12
 801da28:	2200      	movs	r2, #0
 801da2a:	4618      	mov	r0, r3
 801da2c:	f7ef feca 	bl	800d7c4 <osMessageGet>

  if(event.status == osEventMessage)
 801da30:	68fb      	ldr	r3, [r7, #12]
 801da32:	2b10      	cmp	r3, #16
 801da34:	d105      	bne.n	801da42 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801da36:	693b      	ldr	r3, [r7, #16]
 801da38:	461a      	mov	r2, r3
 801da3a:	683b      	ldr	r3, [r7, #0]
 801da3c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801da3e:	2300      	movs	r3, #0
 801da40:	e001      	b.n	801da46 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801da42:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801da46:	4618      	mov	r0, r3
 801da48:	3718      	adds	r7, #24
 801da4a:	46bd      	mov	sp, r7
 801da4c:	bd80      	pop	{r7, pc}

0801da4e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801da4e:	b480      	push	{r7}
 801da50:	b083      	sub	sp, #12
 801da52:	af00      	add	r7, sp, #0
 801da54:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	681b      	ldr	r3, [r3, #0]
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	d101      	bne.n	801da62 <sys_mbox_valid+0x14>
    return 0;
 801da5e:	2300      	movs	r3, #0
 801da60:	e000      	b.n	801da64 <sys_mbox_valid+0x16>
  else
    return 1;
 801da62:	2301      	movs	r3, #1
}
 801da64:	4618      	mov	r0, r3
 801da66:	370c      	adds	r7, #12
 801da68:	46bd      	mov	sp, r7
 801da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da6e:	4770      	bx	lr

0801da70 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801da70:	b480      	push	{r7}
 801da72:	b083      	sub	sp, #12
 801da74:	af00      	add	r7, sp, #0
 801da76:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	2200      	movs	r2, #0
 801da7c:	601a      	str	r2, [r3, #0]
}
 801da7e:	bf00      	nop
 801da80:	370c      	adds	r7, #12
 801da82:	46bd      	mov	sp, r7
 801da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da88:	4770      	bx	lr

0801da8a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801da8a:	b580      	push	{r7, lr}
 801da8c:	b084      	sub	sp, #16
 801da8e:	af00      	add	r7, sp, #0
 801da90:	6078      	str	r0, [r7, #4]
 801da92:	460b      	mov	r3, r1
 801da94:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801da96:	2300      	movs	r3, #0
 801da98:	60bb      	str	r3, [r7, #8]
 801da9a:	2300      	movs	r3, #0
 801da9c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801da9e:	f107 0308 	add.w	r3, r7, #8
 801daa2:	2101      	movs	r1, #1
 801daa4:	4618      	mov	r0, r3
 801daa6:	f7ef fd5b 	bl	800d560 <osSemaphoreCreate>
 801daaa:	4602      	mov	r2, r0
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d102      	bne.n	801dabe <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801dab8:	f04f 33ff 	mov.w	r3, #4294967295
 801dabc:	e009      	b.n	801dad2 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801dabe:	78fb      	ldrb	r3, [r7, #3]
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	d105      	bne.n	801dad0 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	2100      	movs	r1, #0
 801daca:	4618      	mov	r0, r3
 801dacc:	f7ef fd7a 	bl	800d5c4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801dad0:	2300      	movs	r3, #0
}
 801dad2:	4618      	mov	r0, r3
 801dad4:	3710      	adds	r7, #16
 801dad6:	46bd      	mov	sp, r7
 801dad8:	bd80      	pop	{r7, pc}

0801dada <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801dada:	b580      	push	{r7, lr}
 801dadc:	b084      	sub	sp, #16
 801dade:	af00      	add	r7, sp, #0
 801dae0:	6078      	str	r0, [r7, #4]
 801dae2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801dae4:	f7ef fc30 	bl	800d348 <osKernelSysTick>
 801dae8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801daea:	683b      	ldr	r3, [r7, #0]
 801daec:	2b00      	cmp	r3, #0
 801daee:	d011      	beq.n	801db14 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	6839      	ldr	r1, [r7, #0]
 801daf6:	4618      	mov	r0, r3
 801daf8:	f7ef fd64 	bl	800d5c4 <osSemaphoreWait>
 801dafc:	4603      	mov	r3, r0
 801dafe:	2b00      	cmp	r3, #0
 801db00:	d105      	bne.n	801db0e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801db02:	f7ef fc21 	bl	800d348 <osKernelSysTick>
 801db06:	4602      	mov	r2, r0
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	1ad3      	subs	r3, r2, r3
 801db0c:	e012      	b.n	801db34 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801db0e:	f04f 33ff 	mov.w	r3, #4294967295
 801db12:	e00f      	b.n	801db34 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801db14:	bf00      	nop
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	681b      	ldr	r3, [r3, #0]
 801db1a:	f04f 31ff 	mov.w	r1, #4294967295
 801db1e:	4618      	mov	r0, r3
 801db20:	f7ef fd50 	bl	800d5c4 <osSemaphoreWait>
 801db24:	4603      	mov	r3, r0
 801db26:	2b00      	cmp	r3, #0
 801db28:	d1f5      	bne.n	801db16 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801db2a:	f7ef fc0d 	bl	800d348 <osKernelSysTick>
 801db2e:	4602      	mov	r2, r0
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801db34:	4618      	mov	r0, r3
 801db36:	3710      	adds	r7, #16
 801db38:	46bd      	mov	sp, r7
 801db3a:	bd80      	pop	{r7, pc}

0801db3c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801db3c:	b580      	push	{r7, lr}
 801db3e:	b082      	sub	sp, #8
 801db40:	af00      	add	r7, sp, #0
 801db42:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801db44:	687b      	ldr	r3, [r7, #4]
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	4618      	mov	r0, r3
 801db4a:	f7ef fd89 	bl	800d660 <osSemaphoreRelease>
}
 801db4e:	bf00      	nop
 801db50:	3708      	adds	r7, #8
 801db52:	46bd      	mov	sp, r7
 801db54:	bd80      	pop	{r7, pc}

0801db56 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801db56:	b580      	push	{r7, lr}
 801db58:	b082      	sub	sp, #8
 801db5a:	af00      	add	r7, sp, #0
 801db5c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	4618      	mov	r0, r3
 801db64:	f7ef fdb2 	bl	800d6cc <osSemaphoreDelete>
}
 801db68:	bf00      	nop
 801db6a:	3708      	adds	r7, #8
 801db6c:	46bd      	mov	sp, r7
 801db6e:	bd80      	pop	{r7, pc}

0801db70 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801db70:	b480      	push	{r7}
 801db72:	b083      	sub	sp, #12
 801db74:	af00      	add	r7, sp, #0
 801db76:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d101      	bne.n	801db84 <sys_sem_valid+0x14>
    return 0;
 801db80:	2300      	movs	r3, #0
 801db82:	e000      	b.n	801db86 <sys_sem_valid+0x16>
  else
    return 1;
 801db84:	2301      	movs	r3, #1
}
 801db86:	4618      	mov	r0, r3
 801db88:	370c      	adds	r7, #12
 801db8a:	46bd      	mov	sp, r7
 801db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db90:	4770      	bx	lr

0801db92 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801db92:	b480      	push	{r7}
 801db94:	b083      	sub	sp, #12
 801db96:	af00      	add	r7, sp, #0
 801db98:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	2200      	movs	r2, #0
 801db9e:	601a      	str	r2, [r3, #0]
}
 801dba0:	bf00      	nop
 801dba2:	370c      	adds	r7, #12
 801dba4:	46bd      	mov	sp, r7
 801dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbaa:	4770      	bx	lr

0801dbac <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801dbac:	b580      	push	{r7, lr}
 801dbae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801dbb0:	4803      	ldr	r0, [pc, #12]	; (801dbc0 <sys_init+0x14>)
 801dbb2:	f7ef fc39 	bl	800d428 <osMutexCreate>
 801dbb6:	4603      	mov	r3, r0
 801dbb8:	4a02      	ldr	r2, [pc, #8]	; (801dbc4 <sys_init+0x18>)
 801dbba:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801dbbc:	bf00      	nop
 801dbbe:	bd80      	pop	{r7, pc}
 801dbc0:	080234f0 	.word	0x080234f0
 801dbc4:	2000fb10 	.word	0x2000fb10

0801dbc8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801dbc8:	b580      	push	{r7, lr}
 801dbca:	b084      	sub	sp, #16
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801dbd0:	2300      	movs	r3, #0
 801dbd2:	60bb      	str	r3, [r7, #8]
 801dbd4:	2300      	movs	r3, #0
 801dbd6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801dbd8:	f107 0308 	add.w	r3, r7, #8
 801dbdc:	4618      	mov	r0, r3
 801dbde:	f7ef fc23 	bl	800d428 <osMutexCreate>
 801dbe2:	4602      	mov	r2, r0
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	681b      	ldr	r3, [r3, #0]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	d102      	bne.n	801dbf6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801dbf0:	f04f 33ff 	mov.w	r3, #4294967295
 801dbf4:	e000      	b.n	801dbf8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801dbf6:	2300      	movs	r3, #0
}
 801dbf8:	4618      	mov	r0, r3
 801dbfa:	3710      	adds	r7, #16
 801dbfc:	46bd      	mov	sp, r7
 801dbfe:	bd80      	pop	{r7, pc}

0801dc00 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801dc00:	b580      	push	{r7, lr}
 801dc02:	b082      	sub	sp, #8
 801dc04:	af00      	add	r7, sp, #0
 801dc06:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	f04f 31ff 	mov.w	r1, #4294967295
 801dc10:	4618      	mov	r0, r3
 801dc12:	f7ef fc21 	bl	800d458 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801dc16:	bf00      	nop
 801dc18:	3708      	adds	r7, #8
 801dc1a:	46bd      	mov	sp, r7
 801dc1c:	bd80      	pop	{r7, pc}

0801dc1e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801dc1e:	b580      	push	{r7, lr}
 801dc20:	b082      	sub	sp, #8
 801dc22:	af00      	add	r7, sp, #0
 801dc24:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	4618      	mov	r0, r3
 801dc2c:	f7ef fc62 	bl	800d4f4 <osMutexRelease>
}
 801dc30:	bf00      	nop
 801dc32:	3708      	adds	r7, #8
 801dc34:	46bd      	mov	sp, r7
 801dc36:	bd80      	pop	{r7, pc}

0801dc38 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801dc38:	b580      	push	{r7, lr}
 801dc3a:	b08c      	sub	sp, #48	; 0x30
 801dc3c:	af00      	add	r7, sp, #0
 801dc3e:	60f8      	str	r0, [r7, #12]
 801dc40:	60b9      	str	r1, [r7, #8]
 801dc42:	607a      	str	r2, [r7, #4]
 801dc44:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801dc46:	f107 0314 	add.w	r3, r7, #20
 801dc4a:	2200      	movs	r2, #0
 801dc4c:	601a      	str	r2, [r3, #0]
 801dc4e:	605a      	str	r2, [r3, #4]
 801dc50:	609a      	str	r2, [r3, #8]
 801dc52:	60da      	str	r2, [r3, #12]
 801dc54:	611a      	str	r2, [r3, #16]
 801dc56:	615a      	str	r2, [r3, #20]
 801dc58:	619a      	str	r2, [r3, #24]
 801dc5a:	68fb      	ldr	r3, [r7, #12]
 801dc5c:	617b      	str	r3, [r7, #20]
 801dc5e:	68bb      	ldr	r3, [r7, #8]
 801dc60:	61bb      	str	r3, [r7, #24]
 801dc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc64:	b21b      	sxth	r3, r3
 801dc66:	83bb      	strh	r3, [r7, #28]
 801dc68:	683b      	ldr	r3, [r7, #0]
 801dc6a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801dc6c:	f107 0314 	add.w	r3, r7, #20
 801dc70:	6879      	ldr	r1, [r7, #4]
 801dc72:	4618      	mov	r0, r3
 801dc74:	f7ef fb78 	bl	800d368 <osThreadCreate>
 801dc78:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801dc7a:	4618      	mov	r0, r3
 801dc7c:	3730      	adds	r7, #48	; 0x30
 801dc7e:	46bd      	mov	sp, r7
 801dc80:	bd80      	pop	{r7, pc}
	...

0801dc84 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801dc84:	b580      	push	{r7, lr}
 801dc86:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801dc88:	4b04      	ldr	r3, [pc, #16]	; (801dc9c <sys_arch_protect+0x18>)
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	f04f 31ff 	mov.w	r1, #4294967295
 801dc90:	4618      	mov	r0, r3
 801dc92:	f7ef fbe1 	bl	800d458 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801dc96:	2301      	movs	r3, #1
}
 801dc98:	4618      	mov	r0, r3
 801dc9a:	bd80      	pop	{r7, pc}
 801dc9c:	2000fb10 	.word	0x2000fb10

0801dca0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801dca0:	b580      	push	{r7, lr}
 801dca2:	b082      	sub	sp, #8
 801dca4:	af00      	add	r7, sp, #0
 801dca6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801dca8:	4b04      	ldr	r3, [pc, #16]	; (801dcbc <sys_arch_unprotect+0x1c>)
 801dcaa:	681b      	ldr	r3, [r3, #0]
 801dcac:	4618      	mov	r0, r3
 801dcae:	f7ef fc21 	bl	800d4f4 <osMutexRelease>
}
 801dcb2:	bf00      	nop
 801dcb4:	3708      	adds	r7, #8
 801dcb6:	46bd      	mov	sp, r7
 801dcb8:	bd80      	pop	{r7, pc}
 801dcba:	bf00      	nop
 801dcbc:	2000fb10 	.word	0x2000fb10

0801dcc0 <_ZdlPv>:
 801dcc0:	f000 ba30 	b.w	801e124 <free>

0801dcc4 <_ZdlPvj>:
 801dcc4:	f7ff bffc 	b.w	801dcc0 <_ZdlPv>

0801dcc8 <_ZdaPv>:
 801dcc8:	f7ff bffa 	b.w	801dcc0 <_ZdlPv>

0801dccc <_ZdaPvj>:
 801dccc:	f7ff bffc 	b.w	801dcc8 <_ZdaPv>

0801dcd0 <_Znwj>:
 801dcd0:	2801      	cmp	r0, #1
 801dcd2:	bf38      	it	cc
 801dcd4:	2001      	movcc	r0, #1
 801dcd6:	b510      	push	{r4, lr}
 801dcd8:	4604      	mov	r4, r0
 801dcda:	4620      	mov	r0, r4
 801dcdc:	f000 fa1a 	bl	801e114 <malloc>
 801dce0:	b930      	cbnz	r0, 801dcf0 <_Znwj+0x20>
 801dce2:	f000 f8cb 	bl	801de7c <_ZSt15get_new_handlerv>
 801dce6:	b908      	cbnz	r0, 801dcec <_Znwj+0x1c>
 801dce8:	f000 f8d0 	bl	801de8c <abort>
 801dcec:	4780      	blx	r0
 801dcee:	e7f4      	b.n	801dcda <_Znwj+0xa>
 801dcf0:	bd10      	pop	{r4, pc}

0801dcf2 <_Znaj>:
 801dcf2:	f7ff bfed 	b.w	801dcd0 <_Znwj>

0801dcf6 <_ZNSaIcEC1Ev>:
 801dcf6:	4770      	bx	lr

0801dcf8 <_ZNSaIcEC1ERKS_>:
 801dcf8:	4770      	bx	lr

0801dcfa <_ZNSaIcED1Ev>:
 801dcfa:	4770      	bx	lr

0801dcfc <_ZSt17__throw_bad_allocv>:
 801dcfc:	b508      	push	{r3, lr}
 801dcfe:	f000 f8c5 	bl	801de8c <abort>

0801dd02 <_ZSt19__throw_logic_errorPKc>:
 801dd02:	b508      	push	{r3, lr}
 801dd04:	f000 f8c2 	bl	801de8c <abort>

0801dd08 <_ZSt24__throw_invalid_argumentPKc>:
 801dd08:	b508      	push	{r3, lr}
 801dd0a:	f000 f8bf 	bl	801de8c <abort>

0801dd0e <_ZSt20__throw_length_errorPKc>:
 801dd0e:	b508      	push	{r3, lr}
 801dd10:	f000 f8bc 	bl	801de8c <abort>

0801dd14 <_ZSt20__throw_out_of_rangePKc>:
 801dd14:	b508      	push	{r3, lr}
 801dd16:	f000 f8b9 	bl	801de8c <abort>

0801dd1a <_ZSt24__throw_out_of_range_fmtPKcz>:
 801dd1a:	b40f      	push	{r0, r1, r2, r3}
 801dd1c:	b580      	push	{r7, lr}
 801dd1e:	b084      	sub	sp, #16
 801dd20:	af00      	add	r7, sp, #0
 801dd22:	f107 0418 	add.w	r4, r7, #24
 801dd26:	f854 2b04 	ldr.w	r2, [r4], #4
 801dd2a:	607a      	str	r2, [r7, #4]
 801dd2c:	4610      	mov	r0, r2
 801dd2e:	f7e2 fad7 	bl	80002e0 <strlen>
 801dd32:	f200 2307 	addw	r3, r0, #519	; 0x207
 801dd36:	f023 0307 	bic.w	r3, r3, #7
 801dd3a:	ebad 0d03 	sub.w	sp, sp, r3
 801dd3e:	f500 7100 	add.w	r1, r0, #512	; 0x200
 801dd42:	687a      	ldr	r2, [r7, #4]
 801dd44:	60fc      	str	r4, [r7, #12]
 801dd46:	4623      	mov	r3, r4
 801dd48:	4668      	mov	r0, sp
 801dd4a:	f000 f855 	bl	801ddf8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 801dd4e:	f000 f89d 	bl	801de8c <abort>
	...

0801dd54 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 801dd54:	b580      	push	{r7, lr}
 801dd56:	b09c      	sub	sp, #112	; 0x70
 801dd58:	4606      	mov	r6, r0
 801dd5a:	af00      	add	r7, sp, #0
 801dd5c:	460c      	mov	r4, r1
 801dd5e:	1ba4      	subs	r4, r4, r6
 801dd60:	490e      	ldr	r1, [pc, #56]	; (801dd9c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 801dd62:	2269      	movs	r2, #105	; 0x69
 801dd64:	1d38      	adds	r0, r7, #4
 801dd66:	f000 f9f5 	bl	801e154 <memcpy>
 801dd6a:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801dd6e:	f023 0307 	bic.w	r3, r3, #7
 801dd72:	ebad 0d03 	sub.w	sp, sp, r3
 801dd76:	466d      	mov	r5, sp
 801dd78:	2268      	movs	r2, #104	; 0x68
 801dd7a:	1d39      	adds	r1, r7, #4
 801dd7c:	4628      	mov	r0, r5
 801dd7e:	f000 f9e9 	bl	801e154 <memcpy>
 801dd82:	4622      	mov	r2, r4
 801dd84:	4631      	mov	r1, r6
 801dd86:	f105 0068 	add.w	r0, r5, #104	; 0x68
 801dd8a:	442c      	add	r4, r5
 801dd8c:	f000 f9e2 	bl	801e154 <memcpy>
 801dd90:	2300      	movs	r3, #0
 801dd92:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 801dd96:	4628      	mov	r0, r5
 801dd98:	f7ff ffb3 	bl	801dd02 <_ZSt19__throw_logic_errorPKc>
 801dd9c:	080234f8 	.word	0x080234f8

0801dda0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 801dda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dda4:	af00      	add	r7, sp, #0
 801dda6:	b084      	sub	sp, #16
 801dda8:	466d      	mov	r5, sp
 801ddaa:	f105 040c 	add.w	r4, r5, #12
 801ddae:	f8df 8044 	ldr.w	r8, [pc, #68]	; 801ddf4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 801ddb2:	4623      	mov	r3, r4
 801ddb4:	f04f 0c0a 	mov.w	ip, #10
 801ddb8:	fbb2 f6fc 	udiv	r6, r2, ip
 801ddbc:	fb0c 2e16 	mls	lr, ip, r6, r2
 801ddc0:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801ddc4:	f803 ed01 	strb.w	lr, [r3, #-1]!
 801ddc8:	4696      	mov	lr, r2
 801ddca:	f1be 0f09 	cmp.w	lr, #9
 801ddce:	4632      	mov	r2, r6
 801ddd0:	d8f2      	bhi.n	801ddb8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 801ddd2:	1ae4      	subs	r4, r4, r3
 801ddd4:	428c      	cmp	r4, r1
 801ddd6:	d809      	bhi.n	801ddec <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 801ddd8:	f1c4 030c 	rsb	r3, r4, #12
 801dddc:	4622      	mov	r2, r4
 801ddde:	18e9      	adds	r1, r5, r3
 801dde0:	f000 f9b8 	bl	801e154 <memcpy>
 801dde4:	4620      	mov	r0, r4
 801dde6:	46bd      	mov	sp, r7
 801dde8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ddec:	f04f 34ff 	mov.w	r4, #4294967295
 801ddf0:	e7f8      	b.n	801dde4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 801ddf2:	bf00      	nop
 801ddf4:	08023561 	.word	0x08023561

0801ddf8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 801ddf8:	3901      	subs	r1, #1
 801ddfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ddfe:	4607      	mov	r7, r0
 801de00:	4615      	mov	r5, r2
 801de02:	eb00 0801 	add.w	r8, r0, r1
 801de06:	4604      	mov	r4, r0
 801de08:	782a      	ldrb	r2, [r5, #0]
 801de0a:	b392      	cbz	r2, 801de72 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 801de0c:	4544      	cmp	r4, r8
 801de0e:	d22a      	bcs.n	801de66 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 801de10:	2a25      	cmp	r2, #37	; 0x25
 801de12:	d107      	bne.n	801de24 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801de14:	786a      	ldrb	r2, [r5, #1]
 801de16:	2a73      	cmp	r2, #115	; 0x73
 801de18:	d009      	beq.n	801de2e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 801de1a:	2a7a      	cmp	r2, #122	; 0x7a
 801de1c:	d012      	beq.n	801de44 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 801de1e:	2a25      	cmp	r2, #37	; 0x25
 801de20:	d100      	bne.n	801de24 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801de22:	3501      	adds	r5, #1
 801de24:	f815 2b01 	ldrb.w	r2, [r5], #1
 801de28:	f804 2b01 	strb.w	r2, [r4], #1
 801de2c:	e7ec      	b.n	801de08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801de2e:	f853 2b04 	ldr.w	r2, [r3], #4
 801de32:	3a01      	subs	r2, #1
 801de34:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801de38:	b1c9      	cbz	r1, 801de6e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 801de3a:	4544      	cmp	r4, r8
 801de3c:	d013      	beq.n	801de66 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 801de3e:	f804 1b01 	strb.w	r1, [r4], #1
 801de42:	e7f7      	b.n	801de34 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 801de44:	78aa      	ldrb	r2, [r5, #2]
 801de46:	2a75      	cmp	r2, #117	; 0x75
 801de48:	d1ec      	bne.n	801de24 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 801de4a:	461e      	mov	r6, r3
 801de4c:	eba8 0104 	sub.w	r1, r8, r4
 801de50:	f856 2b04 	ldr.w	r2, [r6], #4
 801de54:	4620      	mov	r0, r4
 801de56:	f7ff ffa3 	bl	801dda0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 801de5a:	2800      	cmp	r0, #0
 801de5c:	dd03      	ble.n	801de66 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 801de5e:	4404      	add	r4, r0
 801de60:	3503      	adds	r5, #3
 801de62:	4633      	mov	r3, r6
 801de64:	e7d0      	b.n	801de08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801de66:	4621      	mov	r1, r4
 801de68:	4638      	mov	r0, r7
 801de6a:	f7ff ff73 	bl	801dd54 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 801de6e:	3502      	adds	r5, #2
 801de70:	e7ca      	b.n	801de08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 801de72:	7022      	strb	r2, [r4, #0]
 801de74:	1be0      	subs	r0, r4, r7
 801de76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801de7c <_ZSt15get_new_handlerv>:
 801de7c:	4b02      	ldr	r3, [pc, #8]	; (801de88 <_ZSt15get_new_handlerv+0xc>)
 801de7e:	6818      	ldr	r0, [r3, #0]
 801de80:	f3bf 8f5b 	dmb	ish
 801de84:	4770      	bx	lr
 801de86:	bf00      	nop
 801de88:	2000fb14 	.word	0x2000fb14

0801de8c <abort>:
 801de8c:	b508      	push	{r3, lr}
 801de8e:	2006      	movs	r0, #6
 801de90:	f000 fba6 	bl	801e5e0 <raise>
 801de94:	2001      	movs	r0, #1
 801de96:	f7ea f817 	bl	8007ec8 <_exit>

0801de9a <atoi>:
 801de9a:	220a      	movs	r2, #10
 801de9c:	2100      	movs	r1, #0
 801de9e:	f000 bc81 	b.w	801e7a4 <strtol>
	...

0801dea4 <std>:
 801dea4:	2300      	movs	r3, #0
 801dea6:	b510      	push	{r4, lr}
 801dea8:	4604      	mov	r4, r0
 801deaa:	e9c0 3300 	strd	r3, r3, [r0]
 801deae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801deb2:	6083      	str	r3, [r0, #8]
 801deb4:	8181      	strh	r1, [r0, #12]
 801deb6:	6643      	str	r3, [r0, #100]	; 0x64
 801deb8:	81c2      	strh	r2, [r0, #14]
 801deba:	6183      	str	r3, [r0, #24]
 801debc:	4619      	mov	r1, r3
 801debe:	2208      	movs	r2, #8
 801dec0:	305c      	adds	r0, #92	; 0x5c
 801dec2:	f000 f96f 	bl	801e1a4 <memset>
 801dec6:	4b05      	ldr	r3, [pc, #20]	; (801dedc <std+0x38>)
 801dec8:	6263      	str	r3, [r4, #36]	; 0x24
 801deca:	4b05      	ldr	r3, [pc, #20]	; (801dee0 <std+0x3c>)
 801decc:	62a3      	str	r3, [r4, #40]	; 0x28
 801dece:	4b05      	ldr	r3, [pc, #20]	; (801dee4 <std+0x40>)
 801ded0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ded2:	4b05      	ldr	r3, [pc, #20]	; (801dee8 <std+0x44>)
 801ded4:	6224      	str	r4, [r4, #32]
 801ded6:	6323      	str	r3, [r4, #48]	; 0x30
 801ded8:	bd10      	pop	{r4, pc}
 801deda:	bf00      	nop
 801dedc:	0801e619 	.word	0x0801e619
 801dee0:	0801e63b 	.word	0x0801e63b
 801dee4:	0801e673 	.word	0x0801e673
 801dee8:	0801e697 	.word	0x0801e697

0801deec <_cleanup_r>:
 801deec:	4901      	ldr	r1, [pc, #4]	; (801def4 <_cleanup_r+0x8>)
 801deee:	f000 b8af 	b.w	801e050 <_fwalk_reent>
 801def2:	bf00      	nop
 801def4:	0801e9d5 	.word	0x0801e9d5

0801def8 <__sfmoreglue>:
 801def8:	b570      	push	{r4, r5, r6, lr}
 801defa:	2268      	movs	r2, #104	; 0x68
 801defc:	1e4d      	subs	r5, r1, #1
 801defe:	4355      	muls	r5, r2
 801df00:	460e      	mov	r6, r1
 801df02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801df06:	f000 f9c1 	bl	801e28c <_malloc_r>
 801df0a:	4604      	mov	r4, r0
 801df0c:	b140      	cbz	r0, 801df20 <__sfmoreglue+0x28>
 801df0e:	2100      	movs	r1, #0
 801df10:	e9c0 1600 	strd	r1, r6, [r0]
 801df14:	300c      	adds	r0, #12
 801df16:	60a0      	str	r0, [r4, #8]
 801df18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801df1c:	f000 f942 	bl	801e1a4 <memset>
 801df20:	4620      	mov	r0, r4
 801df22:	bd70      	pop	{r4, r5, r6, pc}

0801df24 <__sfp_lock_acquire>:
 801df24:	4801      	ldr	r0, [pc, #4]	; (801df2c <__sfp_lock_acquire+0x8>)
 801df26:	f000 b8f2 	b.w	801e10e <__retarget_lock_acquire_recursive>
 801df2a:	bf00      	nop
 801df2c:	2000fb19 	.word	0x2000fb19

0801df30 <__sfp_lock_release>:
 801df30:	4801      	ldr	r0, [pc, #4]	; (801df38 <__sfp_lock_release+0x8>)
 801df32:	f000 b8ed 	b.w	801e110 <__retarget_lock_release_recursive>
 801df36:	bf00      	nop
 801df38:	2000fb19 	.word	0x2000fb19

0801df3c <__sinit_lock_acquire>:
 801df3c:	4801      	ldr	r0, [pc, #4]	; (801df44 <__sinit_lock_acquire+0x8>)
 801df3e:	f000 b8e6 	b.w	801e10e <__retarget_lock_acquire_recursive>
 801df42:	bf00      	nop
 801df44:	2000fb1a 	.word	0x2000fb1a

0801df48 <__sinit_lock_release>:
 801df48:	4801      	ldr	r0, [pc, #4]	; (801df50 <__sinit_lock_release+0x8>)
 801df4a:	f000 b8e1 	b.w	801e110 <__retarget_lock_release_recursive>
 801df4e:	bf00      	nop
 801df50:	2000fb1a 	.word	0x2000fb1a

0801df54 <__sinit>:
 801df54:	b510      	push	{r4, lr}
 801df56:	4604      	mov	r4, r0
 801df58:	f7ff fff0 	bl	801df3c <__sinit_lock_acquire>
 801df5c:	69a3      	ldr	r3, [r4, #24]
 801df5e:	b11b      	cbz	r3, 801df68 <__sinit+0x14>
 801df60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df64:	f7ff bff0 	b.w	801df48 <__sinit_lock_release>
 801df68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801df6c:	6523      	str	r3, [r4, #80]	; 0x50
 801df6e:	4b13      	ldr	r3, [pc, #76]	; (801dfbc <__sinit+0x68>)
 801df70:	4a13      	ldr	r2, [pc, #76]	; (801dfc0 <__sinit+0x6c>)
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	62a2      	str	r2, [r4, #40]	; 0x28
 801df76:	42a3      	cmp	r3, r4
 801df78:	bf04      	itt	eq
 801df7a:	2301      	moveq	r3, #1
 801df7c:	61a3      	streq	r3, [r4, #24]
 801df7e:	4620      	mov	r0, r4
 801df80:	f000 f820 	bl	801dfc4 <__sfp>
 801df84:	6060      	str	r0, [r4, #4]
 801df86:	4620      	mov	r0, r4
 801df88:	f000 f81c 	bl	801dfc4 <__sfp>
 801df8c:	60a0      	str	r0, [r4, #8]
 801df8e:	4620      	mov	r0, r4
 801df90:	f000 f818 	bl	801dfc4 <__sfp>
 801df94:	2200      	movs	r2, #0
 801df96:	60e0      	str	r0, [r4, #12]
 801df98:	2104      	movs	r1, #4
 801df9a:	6860      	ldr	r0, [r4, #4]
 801df9c:	f7ff ff82 	bl	801dea4 <std>
 801dfa0:	68a0      	ldr	r0, [r4, #8]
 801dfa2:	2201      	movs	r2, #1
 801dfa4:	2109      	movs	r1, #9
 801dfa6:	f7ff ff7d 	bl	801dea4 <std>
 801dfaa:	68e0      	ldr	r0, [r4, #12]
 801dfac:	2202      	movs	r2, #2
 801dfae:	2112      	movs	r1, #18
 801dfb0:	f7ff ff78 	bl	801dea4 <std>
 801dfb4:	2301      	movs	r3, #1
 801dfb6:	61a3      	str	r3, [r4, #24]
 801dfb8:	e7d2      	b.n	801df60 <__sinit+0xc>
 801dfba:	bf00      	nop
 801dfbc:	080236d0 	.word	0x080236d0
 801dfc0:	0801deed 	.word	0x0801deed

0801dfc4 <__sfp>:
 801dfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfc6:	4607      	mov	r7, r0
 801dfc8:	f7ff ffac 	bl	801df24 <__sfp_lock_acquire>
 801dfcc:	4b1e      	ldr	r3, [pc, #120]	; (801e048 <__sfp+0x84>)
 801dfce:	681e      	ldr	r6, [r3, #0]
 801dfd0:	69b3      	ldr	r3, [r6, #24]
 801dfd2:	b913      	cbnz	r3, 801dfda <__sfp+0x16>
 801dfd4:	4630      	mov	r0, r6
 801dfd6:	f7ff ffbd 	bl	801df54 <__sinit>
 801dfda:	3648      	adds	r6, #72	; 0x48
 801dfdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dfe0:	3b01      	subs	r3, #1
 801dfe2:	d503      	bpl.n	801dfec <__sfp+0x28>
 801dfe4:	6833      	ldr	r3, [r6, #0]
 801dfe6:	b30b      	cbz	r3, 801e02c <__sfp+0x68>
 801dfe8:	6836      	ldr	r6, [r6, #0]
 801dfea:	e7f7      	b.n	801dfdc <__sfp+0x18>
 801dfec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dff0:	b9d5      	cbnz	r5, 801e028 <__sfp+0x64>
 801dff2:	4b16      	ldr	r3, [pc, #88]	; (801e04c <__sfp+0x88>)
 801dff4:	60e3      	str	r3, [r4, #12]
 801dff6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dffa:	6665      	str	r5, [r4, #100]	; 0x64
 801dffc:	f000 f886 	bl	801e10c <__retarget_lock_init_recursive>
 801e000:	f7ff ff96 	bl	801df30 <__sfp_lock_release>
 801e004:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e008:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e00c:	6025      	str	r5, [r4, #0]
 801e00e:	61a5      	str	r5, [r4, #24]
 801e010:	2208      	movs	r2, #8
 801e012:	4629      	mov	r1, r5
 801e014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e018:	f000 f8c4 	bl	801e1a4 <memset>
 801e01c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e024:	4620      	mov	r0, r4
 801e026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e028:	3468      	adds	r4, #104	; 0x68
 801e02a:	e7d9      	b.n	801dfe0 <__sfp+0x1c>
 801e02c:	2104      	movs	r1, #4
 801e02e:	4638      	mov	r0, r7
 801e030:	f7ff ff62 	bl	801def8 <__sfmoreglue>
 801e034:	4604      	mov	r4, r0
 801e036:	6030      	str	r0, [r6, #0]
 801e038:	2800      	cmp	r0, #0
 801e03a:	d1d5      	bne.n	801dfe8 <__sfp+0x24>
 801e03c:	f7ff ff78 	bl	801df30 <__sfp_lock_release>
 801e040:	230c      	movs	r3, #12
 801e042:	603b      	str	r3, [r7, #0]
 801e044:	e7ee      	b.n	801e024 <__sfp+0x60>
 801e046:	bf00      	nop
 801e048:	080236d0 	.word	0x080236d0
 801e04c:	ffff0001 	.word	0xffff0001

0801e050 <_fwalk_reent>:
 801e050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e054:	4606      	mov	r6, r0
 801e056:	4688      	mov	r8, r1
 801e058:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e05c:	2700      	movs	r7, #0
 801e05e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e062:	f1b9 0901 	subs.w	r9, r9, #1
 801e066:	d505      	bpl.n	801e074 <_fwalk_reent+0x24>
 801e068:	6824      	ldr	r4, [r4, #0]
 801e06a:	2c00      	cmp	r4, #0
 801e06c:	d1f7      	bne.n	801e05e <_fwalk_reent+0xe>
 801e06e:	4638      	mov	r0, r7
 801e070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e074:	89ab      	ldrh	r3, [r5, #12]
 801e076:	2b01      	cmp	r3, #1
 801e078:	d907      	bls.n	801e08a <_fwalk_reent+0x3a>
 801e07a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e07e:	3301      	adds	r3, #1
 801e080:	d003      	beq.n	801e08a <_fwalk_reent+0x3a>
 801e082:	4629      	mov	r1, r5
 801e084:	4630      	mov	r0, r6
 801e086:	47c0      	blx	r8
 801e088:	4307      	orrs	r7, r0
 801e08a:	3568      	adds	r5, #104	; 0x68
 801e08c:	e7e9      	b.n	801e062 <_fwalk_reent+0x12>
	...

0801e090 <__libc_init_array>:
 801e090:	b570      	push	{r4, r5, r6, lr}
 801e092:	4d0d      	ldr	r5, [pc, #52]	; (801e0c8 <__libc_init_array+0x38>)
 801e094:	4c0d      	ldr	r4, [pc, #52]	; (801e0cc <__libc_init_array+0x3c>)
 801e096:	1b64      	subs	r4, r4, r5
 801e098:	10a4      	asrs	r4, r4, #2
 801e09a:	2600      	movs	r6, #0
 801e09c:	42a6      	cmp	r6, r4
 801e09e:	d109      	bne.n	801e0b4 <__libc_init_array+0x24>
 801e0a0:	4d0b      	ldr	r5, [pc, #44]	; (801e0d0 <__libc_init_array+0x40>)
 801e0a2:	4c0c      	ldr	r4, [pc, #48]	; (801e0d4 <__libc_init_array+0x44>)
 801e0a4:	f001 f94a 	bl	801f33c <_init>
 801e0a8:	1b64      	subs	r4, r4, r5
 801e0aa:	10a4      	asrs	r4, r4, #2
 801e0ac:	2600      	movs	r6, #0
 801e0ae:	42a6      	cmp	r6, r4
 801e0b0:	d105      	bne.n	801e0be <__libc_init_array+0x2e>
 801e0b2:	bd70      	pop	{r4, r5, r6, pc}
 801e0b4:	f855 3b04 	ldr.w	r3, [r5], #4
 801e0b8:	4798      	blx	r3
 801e0ba:	3601      	adds	r6, #1
 801e0bc:	e7ee      	b.n	801e09c <__libc_init_array+0xc>
 801e0be:	f855 3b04 	ldr.w	r3, [r5], #4
 801e0c2:	4798      	blx	r3
 801e0c4:	3601      	adds	r6, #1
 801e0c6:	e7f2      	b.n	801e0ae <__libc_init_array+0x1e>
 801e0c8:	08023840 	.word	0x08023840
 801e0cc:	08023840 	.word	0x08023840
 801e0d0:	08023840 	.word	0x08023840
 801e0d4:	08023848 	.word	0x08023848

0801e0d8 <__itoa>:
 801e0d8:	1e93      	subs	r3, r2, #2
 801e0da:	2b22      	cmp	r3, #34	; 0x22
 801e0dc:	b510      	push	{r4, lr}
 801e0de:	460c      	mov	r4, r1
 801e0e0:	d904      	bls.n	801e0ec <__itoa+0x14>
 801e0e2:	2300      	movs	r3, #0
 801e0e4:	700b      	strb	r3, [r1, #0]
 801e0e6:	461c      	mov	r4, r3
 801e0e8:	4620      	mov	r0, r4
 801e0ea:	bd10      	pop	{r4, pc}
 801e0ec:	2a0a      	cmp	r2, #10
 801e0ee:	d109      	bne.n	801e104 <__itoa+0x2c>
 801e0f0:	2800      	cmp	r0, #0
 801e0f2:	da07      	bge.n	801e104 <__itoa+0x2c>
 801e0f4:	232d      	movs	r3, #45	; 0x2d
 801e0f6:	700b      	strb	r3, [r1, #0]
 801e0f8:	4240      	negs	r0, r0
 801e0fa:	2101      	movs	r1, #1
 801e0fc:	4421      	add	r1, r4
 801e0fe:	f000 fb5b 	bl	801e7b8 <__utoa>
 801e102:	e7f1      	b.n	801e0e8 <__itoa+0x10>
 801e104:	2100      	movs	r1, #0
 801e106:	e7f9      	b.n	801e0fc <__itoa+0x24>

0801e108 <itoa>:
 801e108:	f7ff bfe6 	b.w	801e0d8 <__itoa>

0801e10c <__retarget_lock_init_recursive>:
 801e10c:	4770      	bx	lr

0801e10e <__retarget_lock_acquire_recursive>:
 801e10e:	4770      	bx	lr

0801e110 <__retarget_lock_release_recursive>:
 801e110:	4770      	bx	lr
	...

0801e114 <malloc>:
 801e114:	4b02      	ldr	r3, [pc, #8]	; (801e120 <malloc+0xc>)
 801e116:	4601      	mov	r1, r0
 801e118:	6818      	ldr	r0, [r3, #0]
 801e11a:	f000 b8b7 	b.w	801e28c <_malloc_r>
 801e11e:	bf00      	nop
 801e120:	20000030 	.word	0x20000030

0801e124 <free>:
 801e124:	4b02      	ldr	r3, [pc, #8]	; (801e130 <free+0xc>)
 801e126:	4601      	mov	r1, r0
 801e128:	6818      	ldr	r0, [r3, #0]
 801e12a:	f000 b843 	b.w	801e1b4 <_free_r>
 801e12e:	bf00      	nop
 801e130:	20000030 	.word	0x20000030

0801e134 <memcmp>:
 801e134:	b510      	push	{r4, lr}
 801e136:	3901      	subs	r1, #1
 801e138:	4402      	add	r2, r0
 801e13a:	4290      	cmp	r0, r2
 801e13c:	d101      	bne.n	801e142 <memcmp+0xe>
 801e13e:	2000      	movs	r0, #0
 801e140:	e005      	b.n	801e14e <memcmp+0x1a>
 801e142:	7803      	ldrb	r3, [r0, #0]
 801e144:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e148:	42a3      	cmp	r3, r4
 801e14a:	d001      	beq.n	801e150 <memcmp+0x1c>
 801e14c:	1b18      	subs	r0, r3, r4
 801e14e:	bd10      	pop	{r4, pc}
 801e150:	3001      	adds	r0, #1
 801e152:	e7f2      	b.n	801e13a <memcmp+0x6>

0801e154 <memcpy>:
 801e154:	440a      	add	r2, r1
 801e156:	4291      	cmp	r1, r2
 801e158:	f100 33ff 	add.w	r3, r0, #4294967295
 801e15c:	d100      	bne.n	801e160 <memcpy+0xc>
 801e15e:	4770      	bx	lr
 801e160:	b510      	push	{r4, lr}
 801e162:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e166:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e16a:	4291      	cmp	r1, r2
 801e16c:	d1f9      	bne.n	801e162 <memcpy+0xe>
 801e16e:	bd10      	pop	{r4, pc}

0801e170 <memmove>:
 801e170:	4288      	cmp	r0, r1
 801e172:	b510      	push	{r4, lr}
 801e174:	eb01 0402 	add.w	r4, r1, r2
 801e178:	d902      	bls.n	801e180 <memmove+0x10>
 801e17a:	4284      	cmp	r4, r0
 801e17c:	4623      	mov	r3, r4
 801e17e:	d807      	bhi.n	801e190 <memmove+0x20>
 801e180:	1e43      	subs	r3, r0, #1
 801e182:	42a1      	cmp	r1, r4
 801e184:	d008      	beq.n	801e198 <memmove+0x28>
 801e186:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e18a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e18e:	e7f8      	b.n	801e182 <memmove+0x12>
 801e190:	4402      	add	r2, r0
 801e192:	4601      	mov	r1, r0
 801e194:	428a      	cmp	r2, r1
 801e196:	d100      	bne.n	801e19a <memmove+0x2a>
 801e198:	bd10      	pop	{r4, pc}
 801e19a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e19e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e1a2:	e7f7      	b.n	801e194 <memmove+0x24>

0801e1a4 <memset>:
 801e1a4:	4402      	add	r2, r0
 801e1a6:	4603      	mov	r3, r0
 801e1a8:	4293      	cmp	r3, r2
 801e1aa:	d100      	bne.n	801e1ae <memset+0xa>
 801e1ac:	4770      	bx	lr
 801e1ae:	f803 1b01 	strb.w	r1, [r3], #1
 801e1b2:	e7f9      	b.n	801e1a8 <memset+0x4>

0801e1b4 <_free_r>:
 801e1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e1b6:	2900      	cmp	r1, #0
 801e1b8:	d044      	beq.n	801e244 <_free_r+0x90>
 801e1ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e1be:	9001      	str	r0, [sp, #4]
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	f1a1 0404 	sub.w	r4, r1, #4
 801e1c6:	bfb8      	it	lt
 801e1c8:	18e4      	addlt	r4, r4, r3
 801e1ca:	f000 fc63 	bl	801ea94 <__malloc_lock>
 801e1ce:	4a1e      	ldr	r2, [pc, #120]	; (801e248 <_free_r+0x94>)
 801e1d0:	9801      	ldr	r0, [sp, #4]
 801e1d2:	6813      	ldr	r3, [r2, #0]
 801e1d4:	b933      	cbnz	r3, 801e1e4 <_free_r+0x30>
 801e1d6:	6063      	str	r3, [r4, #4]
 801e1d8:	6014      	str	r4, [r2, #0]
 801e1da:	b003      	add	sp, #12
 801e1dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e1e0:	f000 bc5e 	b.w	801eaa0 <__malloc_unlock>
 801e1e4:	42a3      	cmp	r3, r4
 801e1e6:	d908      	bls.n	801e1fa <_free_r+0x46>
 801e1e8:	6825      	ldr	r5, [r4, #0]
 801e1ea:	1961      	adds	r1, r4, r5
 801e1ec:	428b      	cmp	r3, r1
 801e1ee:	bf01      	itttt	eq
 801e1f0:	6819      	ldreq	r1, [r3, #0]
 801e1f2:	685b      	ldreq	r3, [r3, #4]
 801e1f4:	1949      	addeq	r1, r1, r5
 801e1f6:	6021      	streq	r1, [r4, #0]
 801e1f8:	e7ed      	b.n	801e1d6 <_free_r+0x22>
 801e1fa:	461a      	mov	r2, r3
 801e1fc:	685b      	ldr	r3, [r3, #4]
 801e1fe:	b10b      	cbz	r3, 801e204 <_free_r+0x50>
 801e200:	42a3      	cmp	r3, r4
 801e202:	d9fa      	bls.n	801e1fa <_free_r+0x46>
 801e204:	6811      	ldr	r1, [r2, #0]
 801e206:	1855      	adds	r5, r2, r1
 801e208:	42a5      	cmp	r5, r4
 801e20a:	d10b      	bne.n	801e224 <_free_r+0x70>
 801e20c:	6824      	ldr	r4, [r4, #0]
 801e20e:	4421      	add	r1, r4
 801e210:	1854      	adds	r4, r2, r1
 801e212:	42a3      	cmp	r3, r4
 801e214:	6011      	str	r1, [r2, #0]
 801e216:	d1e0      	bne.n	801e1da <_free_r+0x26>
 801e218:	681c      	ldr	r4, [r3, #0]
 801e21a:	685b      	ldr	r3, [r3, #4]
 801e21c:	6053      	str	r3, [r2, #4]
 801e21e:	4421      	add	r1, r4
 801e220:	6011      	str	r1, [r2, #0]
 801e222:	e7da      	b.n	801e1da <_free_r+0x26>
 801e224:	d902      	bls.n	801e22c <_free_r+0x78>
 801e226:	230c      	movs	r3, #12
 801e228:	6003      	str	r3, [r0, #0]
 801e22a:	e7d6      	b.n	801e1da <_free_r+0x26>
 801e22c:	6825      	ldr	r5, [r4, #0]
 801e22e:	1961      	adds	r1, r4, r5
 801e230:	428b      	cmp	r3, r1
 801e232:	bf04      	itt	eq
 801e234:	6819      	ldreq	r1, [r3, #0]
 801e236:	685b      	ldreq	r3, [r3, #4]
 801e238:	6063      	str	r3, [r4, #4]
 801e23a:	bf04      	itt	eq
 801e23c:	1949      	addeq	r1, r1, r5
 801e23e:	6021      	streq	r1, [r4, #0]
 801e240:	6054      	str	r4, [r2, #4]
 801e242:	e7ca      	b.n	801e1da <_free_r+0x26>
 801e244:	b003      	add	sp, #12
 801e246:	bd30      	pop	{r4, r5, pc}
 801e248:	2000fb1c 	.word	0x2000fb1c

0801e24c <sbrk_aligned>:
 801e24c:	b570      	push	{r4, r5, r6, lr}
 801e24e:	4e0e      	ldr	r6, [pc, #56]	; (801e288 <sbrk_aligned+0x3c>)
 801e250:	460c      	mov	r4, r1
 801e252:	6831      	ldr	r1, [r6, #0]
 801e254:	4605      	mov	r5, r0
 801e256:	b911      	cbnz	r1, 801e25e <sbrk_aligned+0x12>
 801e258:	f000 f98a 	bl	801e570 <_sbrk_r>
 801e25c:	6030      	str	r0, [r6, #0]
 801e25e:	4621      	mov	r1, r4
 801e260:	4628      	mov	r0, r5
 801e262:	f000 f985 	bl	801e570 <_sbrk_r>
 801e266:	1c43      	adds	r3, r0, #1
 801e268:	d00a      	beq.n	801e280 <sbrk_aligned+0x34>
 801e26a:	1cc4      	adds	r4, r0, #3
 801e26c:	f024 0403 	bic.w	r4, r4, #3
 801e270:	42a0      	cmp	r0, r4
 801e272:	d007      	beq.n	801e284 <sbrk_aligned+0x38>
 801e274:	1a21      	subs	r1, r4, r0
 801e276:	4628      	mov	r0, r5
 801e278:	f000 f97a 	bl	801e570 <_sbrk_r>
 801e27c:	3001      	adds	r0, #1
 801e27e:	d101      	bne.n	801e284 <sbrk_aligned+0x38>
 801e280:	f04f 34ff 	mov.w	r4, #4294967295
 801e284:	4620      	mov	r0, r4
 801e286:	bd70      	pop	{r4, r5, r6, pc}
 801e288:	2000fb20 	.word	0x2000fb20

0801e28c <_malloc_r>:
 801e28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e290:	1ccd      	adds	r5, r1, #3
 801e292:	f025 0503 	bic.w	r5, r5, #3
 801e296:	3508      	adds	r5, #8
 801e298:	2d0c      	cmp	r5, #12
 801e29a:	bf38      	it	cc
 801e29c:	250c      	movcc	r5, #12
 801e29e:	2d00      	cmp	r5, #0
 801e2a0:	4607      	mov	r7, r0
 801e2a2:	db01      	blt.n	801e2a8 <_malloc_r+0x1c>
 801e2a4:	42a9      	cmp	r1, r5
 801e2a6:	d905      	bls.n	801e2b4 <_malloc_r+0x28>
 801e2a8:	230c      	movs	r3, #12
 801e2aa:	603b      	str	r3, [r7, #0]
 801e2ac:	2600      	movs	r6, #0
 801e2ae:	4630      	mov	r0, r6
 801e2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2b4:	4e2e      	ldr	r6, [pc, #184]	; (801e370 <_malloc_r+0xe4>)
 801e2b6:	f000 fbed 	bl	801ea94 <__malloc_lock>
 801e2ba:	6833      	ldr	r3, [r6, #0]
 801e2bc:	461c      	mov	r4, r3
 801e2be:	bb34      	cbnz	r4, 801e30e <_malloc_r+0x82>
 801e2c0:	4629      	mov	r1, r5
 801e2c2:	4638      	mov	r0, r7
 801e2c4:	f7ff ffc2 	bl	801e24c <sbrk_aligned>
 801e2c8:	1c43      	adds	r3, r0, #1
 801e2ca:	4604      	mov	r4, r0
 801e2cc:	d14d      	bne.n	801e36a <_malloc_r+0xde>
 801e2ce:	6834      	ldr	r4, [r6, #0]
 801e2d0:	4626      	mov	r6, r4
 801e2d2:	2e00      	cmp	r6, #0
 801e2d4:	d140      	bne.n	801e358 <_malloc_r+0xcc>
 801e2d6:	6823      	ldr	r3, [r4, #0]
 801e2d8:	4631      	mov	r1, r6
 801e2da:	4638      	mov	r0, r7
 801e2dc:	eb04 0803 	add.w	r8, r4, r3
 801e2e0:	f000 f946 	bl	801e570 <_sbrk_r>
 801e2e4:	4580      	cmp	r8, r0
 801e2e6:	d13a      	bne.n	801e35e <_malloc_r+0xd2>
 801e2e8:	6821      	ldr	r1, [r4, #0]
 801e2ea:	3503      	adds	r5, #3
 801e2ec:	1a6d      	subs	r5, r5, r1
 801e2ee:	f025 0503 	bic.w	r5, r5, #3
 801e2f2:	3508      	adds	r5, #8
 801e2f4:	2d0c      	cmp	r5, #12
 801e2f6:	bf38      	it	cc
 801e2f8:	250c      	movcc	r5, #12
 801e2fa:	4629      	mov	r1, r5
 801e2fc:	4638      	mov	r0, r7
 801e2fe:	f7ff ffa5 	bl	801e24c <sbrk_aligned>
 801e302:	3001      	adds	r0, #1
 801e304:	d02b      	beq.n	801e35e <_malloc_r+0xd2>
 801e306:	6823      	ldr	r3, [r4, #0]
 801e308:	442b      	add	r3, r5
 801e30a:	6023      	str	r3, [r4, #0]
 801e30c:	e00e      	b.n	801e32c <_malloc_r+0xa0>
 801e30e:	6822      	ldr	r2, [r4, #0]
 801e310:	1b52      	subs	r2, r2, r5
 801e312:	d41e      	bmi.n	801e352 <_malloc_r+0xc6>
 801e314:	2a0b      	cmp	r2, #11
 801e316:	d916      	bls.n	801e346 <_malloc_r+0xba>
 801e318:	1961      	adds	r1, r4, r5
 801e31a:	42a3      	cmp	r3, r4
 801e31c:	6025      	str	r5, [r4, #0]
 801e31e:	bf18      	it	ne
 801e320:	6059      	strne	r1, [r3, #4]
 801e322:	6863      	ldr	r3, [r4, #4]
 801e324:	bf08      	it	eq
 801e326:	6031      	streq	r1, [r6, #0]
 801e328:	5162      	str	r2, [r4, r5]
 801e32a:	604b      	str	r3, [r1, #4]
 801e32c:	4638      	mov	r0, r7
 801e32e:	f104 060b 	add.w	r6, r4, #11
 801e332:	f000 fbb5 	bl	801eaa0 <__malloc_unlock>
 801e336:	f026 0607 	bic.w	r6, r6, #7
 801e33a:	1d23      	adds	r3, r4, #4
 801e33c:	1af2      	subs	r2, r6, r3
 801e33e:	d0b6      	beq.n	801e2ae <_malloc_r+0x22>
 801e340:	1b9b      	subs	r3, r3, r6
 801e342:	50a3      	str	r3, [r4, r2]
 801e344:	e7b3      	b.n	801e2ae <_malloc_r+0x22>
 801e346:	6862      	ldr	r2, [r4, #4]
 801e348:	42a3      	cmp	r3, r4
 801e34a:	bf0c      	ite	eq
 801e34c:	6032      	streq	r2, [r6, #0]
 801e34e:	605a      	strne	r2, [r3, #4]
 801e350:	e7ec      	b.n	801e32c <_malloc_r+0xa0>
 801e352:	4623      	mov	r3, r4
 801e354:	6864      	ldr	r4, [r4, #4]
 801e356:	e7b2      	b.n	801e2be <_malloc_r+0x32>
 801e358:	4634      	mov	r4, r6
 801e35a:	6876      	ldr	r6, [r6, #4]
 801e35c:	e7b9      	b.n	801e2d2 <_malloc_r+0x46>
 801e35e:	230c      	movs	r3, #12
 801e360:	603b      	str	r3, [r7, #0]
 801e362:	4638      	mov	r0, r7
 801e364:	f000 fb9c 	bl	801eaa0 <__malloc_unlock>
 801e368:	e7a1      	b.n	801e2ae <_malloc_r+0x22>
 801e36a:	6025      	str	r5, [r4, #0]
 801e36c:	e7de      	b.n	801e32c <_malloc_r+0xa0>
 801e36e:	bf00      	nop
 801e370:	2000fb1c 	.word	0x2000fb1c

0801e374 <iprintf>:
 801e374:	b40f      	push	{r0, r1, r2, r3}
 801e376:	4b0a      	ldr	r3, [pc, #40]	; (801e3a0 <iprintf+0x2c>)
 801e378:	b513      	push	{r0, r1, r4, lr}
 801e37a:	681c      	ldr	r4, [r3, #0]
 801e37c:	b124      	cbz	r4, 801e388 <iprintf+0x14>
 801e37e:	69a3      	ldr	r3, [r4, #24]
 801e380:	b913      	cbnz	r3, 801e388 <iprintf+0x14>
 801e382:	4620      	mov	r0, r4
 801e384:	f7ff fde6 	bl	801df54 <__sinit>
 801e388:	ab05      	add	r3, sp, #20
 801e38a:	9a04      	ldr	r2, [sp, #16]
 801e38c:	68a1      	ldr	r1, [r4, #8]
 801e38e:	9301      	str	r3, [sp, #4]
 801e390:	4620      	mov	r0, r4
 801e392:	f000 fbb5 	bl	801eb00 <_vfiprintf_r>
 801e396:	b002      	add	sp, #8
 801e398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e39c:	b004      	add	sp, #16
 801e39e:	4770      	bx	lr
 801e3a0:	20000030 	.word	0x20000030

0801e3a4 <rand>:
 801e3a4:	4b16      	ldr	r3, [pc, #88]	; (801e400 <rand+0x5c>)
 801e3a6:	b510      	push	{r4, lr}
 801e3a8:	681c      	ldr	r4, [r3, #0]
 801e3aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e3ac:	b9b3      	cbnz	r3, 801e3dc <rand+0x38>
 801e3ae:	2018      	movs	r0, #24
 801e3b0:	f7ff feb0 	bl	801e114 <malloc>
 801e3b4:	63a0      	str	r0, [r4, #56]	; 0x38
 801e3b6:	b928      	cbnz	r0, 801e3c4 <rand+0x20>
 801e3b8:	4602      	mov	r2, r0
 801e3ba:	4b12      	ldr	r3, [pc, #72]	; (801e404 <rand+0x60>)
 801e3bc:	4812      	ldr	r0, [pc, #72]	; (801e408 <rand+0x64>)
 801e3be:	214e      	movs	r1, #78	; 0x4e
 801e3c0:	f000 fa4e 	bl	801e860 <__assert_func>
 801e3c4:	4a11      	ldr	r2, [pc, #68]	; (801e40c <rand+0x68>)
 801e3c6:	4b12      	ldr	r3, [pc, #72]	; (801e410 <rand+0x6c>)
 801e3c8:	e9c0 2300 	strd	r2, r3, [r0]
 801e3cc:	4b11      	ldr	r3, [pc, #68]	; (801e414 <rand+0x70>)
 801e3ce:	6083      	str	r3, [r0, #8]
 801e3d0:	230b      	movs	r3, #11
 801e3d2:	8183      	strh	r3, [r0, #12]
 801e3d4:	2201      	movs	r2, #1
 801e3d6:	2300      	movs	r3, #0
 801e3d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801e3dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801e3de:	4a0e      	ldr	r2, [pc, #56]	; (801e418 <rand+0x74>)
 801e3e0:	6920      	ldr	r0, [r4, #16]
 801e3e2:	6963      	ldr	r3, [r4, #20]
 801e3e4:	490d      	ldr	r1, [pc, #52]	; (801e41c <rand+0x78>)
 801e3e6:	4342      	muls	r2, r0
 801e3e8:	fb01 2203 	mla	r2, r1, r3, r2
 801e3ec:	fba0 0101 	umull	r0, r1, r0, r1
 801e3f0:	1c43      	adds	r3, r0, #1
 801e3f2:	eb42 0001 	adc.w	r0, r2, r1
 801e3f6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801e3fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e3fe:	bd10      	pop	{r4, pc}
 801e400:	20000030 	.word	0x20000030
 801e404:	080236d4 	.word	0x080236d4
 801e408:	080236eb 	.word	0x080236eb
 801e40c:	abcd330e 	.word	0xabcd330e
 801e410:	e66d1234 	.word	0xe66d1234
 801e414:	0005deec 	.word	0x0005deec
 801e418:	5851f42d 	.word	0x5851f42d
 801e41c:	4c957f2d 	.word	0x4c957f2d

0801e420 <random>:
 801e420:	4b16      	ldr	r3, [pc, #88]	; (801e47c <random+0x5c>)
 801e422:	b510      	push	{r4, lr}
 801e424:	681c      	ldr	r4, [r3, #0]
 801e426:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e428:	b9b3      	cbnz	r3, 801e458 <random+0x38>
 801e42a:	2018      	movs	r0, #24
 801e42c:	f7ff fe72 	bl	801e114 <malloc>
 801e430:	63a0      	str	r0, [r4, #56]	; 0x38
 801e432:	b928      	cbnz	r0, 801e440 <random+0x20>
 801e434:	4602      	mov	r2, r0
 801e436:	4b12      	ldr	r3, [pc, #72]	; (801e480 <random+0x60>)
 801e438:	4812      	ldr	r0, [pc, #72]	; (801e484 <random+0x64>)
 801e43a:	214c      	movs	r1, #76	; 0x4c
 801e43c:	f000 fa10 	bl	801e860 <__assert_func>
 801e440:	4a11      	ldr	r2, [pc, #68]	; (801e488 <random+0x68>)
 801e442:	4b12      	ldr	r3, [pc, #72]	; (801e48c <random+0x6c>)
 801e444:	e9c0 2300 	strd	r2, r3, [r0]
 801e448:	4b11      	ldr	r3, [pc, #68]	; (801e490 <random+0x70>)
 801e44a:	6083      	str	r3, [r0, #8]
 801e44c:	230b      	movs	r3, #11
 801e44e:	8183      	strh	r3, [r0, #12]
 801e450:	2201      	movs	r2, #1
 801e452:	2300      	movs	r3, #0
 801e454:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801e458:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801e45a:	4a0e      	ldr	r2, [pc, #56]	; (801e494 <random+0x74>)
 801e45c:	6920      	ldr	r0, [r4, #16]
 801e45e:	6963      	ldr	r3, [r4, #20]
 801e460:	490d      	ldr	r1, [pc, #52]	; (801e498 <random+0x78>)
 801e462:	4342      	muls	r2, r0
 801e464:	fb01 2203 	mla	r2, r1, r3, r2
 801e468:	fba0 0101 	umull	r0, r1, r0, r1
 801e46c:	1c43      	adds	r3, r0, #1
 801e46e:	eb42 0001 	adc.w	r0, r2, r1
 801e472:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801e476:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801e47a:	bd10      	pop	{r4, pc}
 801e47c:	20000030 	.word	0x20000030
 801e480:	080236d4 	.word	0x080236d4
 801e484:	08023746 	.word	0x08023746
 801e488:	abcd330e 	.word	0xabcd330e
 801e48c:	e66d1234 	.word	0xe66d1234
 801e490:	0005deec 	.word	0x0005deec
 801e494:	5851f42d 	.word	0x5851f42d
 801e498:	4c957f2d 	.word	0x4c957f2d

0801e49c <cleanup_glue>:
 801e49c:	b538      	push	{r3, r4, r5, lr}
 801e49e:	460c      	mov	r4, r1
 801e4a0:	6809      	ldr	r1, [r1, #0]
 801e4a2:	4605      	mov	r5, r0
 801e4a4:	b109      	cbz	r1, 801e4aa <cleanup_glue+0xe>
 801e4a6:	f7ff fff9 	bl	801e49c <cleanup_glue>
 801e4aa:	4621      	mov	r1, r4
 801e4ac:	4628      	mov	r0, r5
 801e4ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e4b2:	f7ff be7f 	b.w	801e1b4 <_free_r>
	...

0801e4b8 <_reclaim_reent>:
 801e4b8:	4b2c      	ldr	r3, [pc, #176]	; (801e56c <_reclaim_reent+0xb4>)
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	4283      	cmp	r3, r0
 801e4be:	b570      	push	{r4, r5, r6, lr}
 801e4c0:	4604      	mov	r4, r0
 801e4c2:	d051      	beq.n	801e568 <_reclaim_reent+0xb0>
 801e4c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801e4c6:	b143      	cbz	r3, 801e4da <_reclaim_reent+0x22>
 801e4c8:	68db      	ldr	r3, [r3, #12]
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	d14a      	bne.n	801e564 <_reclaim_reent+0xac>
 801e4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e4d0:	6819      	ldr	r1, [r3, #0]
 801e4d2:	b111      	cbz	r1, 801e4da <_reclaim_reent+0x22>
 801e4d4:	4620      	mov	r0, r4
 801e4d6:	f7ff fe6d 	bl	801e1b4 <_free_r>
 801e4da:	6961      	ldr	r1, [r4, #20]
 801e4dc:	b111      	cbz	r1, 801e4e4 <_reclaim_reent+0x2c>
 801e4de:	4620      	mov	r0, r4
 801e4e0:	f7ff fe68 	bl	801e1b4 <_free_r>
 801e4e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e4e6:	b111      	cbz	r1, 801e4ee <_reclaim_reent+0x36>
 801e4e8:	4620      	mov	r0, r4
 801e4ea:	f7ff fe63 	bl	801e1b4 <_free_r>
 801e4ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e4f0:	b111      	cbz	r1, 801e4f8 <_reclaim_reent+0x40>
 801e4f2:	4620      	mov	r0, r4
 801e4f4:	f7ff fe5e 	bl	801e1b4 <_free_r>
 801e4f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801e4fa:	b111      	cbz	r1, 801e502 <_reclaim_reent+0x4a>
 801e4fc:	4620      	mov	r0, r4
 801e4fe:	f7ff fe59 	bl	801e1b4 <_free_r>
 801e502:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e504:	b111      	cbz	r1, 801e50c <_reclaim_reent+0x54>
 801e506:	4620      	mov	r0, r4
 801e508:	f7ff fe54 	bl	801e1b4 <_free_r>
 801e50c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801e50e:	b111      	cbz	r1, 801e516 <_reclaim_reent+0x5e>
 801e510:	4620      	mov	r0, r4
 801e512:	f7ff fe4f 	bl	801e1b4 <_free_r>
 801e516:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801e518:	b111      	cbz	r1, 801e520 <_reclaim_reent+0x68>
 801e51a:	4620      	mov	r0, r4
 801e51c:	f7ff fe4a 	bl	801e1b4 <_free_r>
 801e520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e522:	b111      	cbz	r1, 801e52a <_reclaim_reent+0x72>
 801e524:	4620      	mov	r0, r4
 801e526:	f7ff fe45 	bl	801e1b4 <_free_r>
 801e52a:	69a3      	ldr	r3, [r4, #24]
 801e52c:	b1e3      	cbz	r3, 801e568 <_reclaim_reent+0xb0>
 801e52e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e530:	4620      	mov	r0, r4
 801e532:	4798      	blx	r3
 801e534:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801e536:	b1b9      	cbz	r1, 801e568 <_reclaim_reent+0xb0>
 801e538:	4620      	mov	r0, r4
 801e53a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e53e:	f7ff bfad 	b.w	801e49c <cleanup_glue>
 801e542:	5949      	ldr	r1, [r1, r5]
 801e544:	b941      	cbnz	r1, 801e558 <_reclaim_reent+0xa0>
 801e546:	3504      	adds	r5, #4
 801e548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e54a:	2d80      	cmp	r5, #128	; 0x80
 801e54c:	68d9      	ldr	r1, [r3, #12]
 801e54e:	d1f8      	bne.n	801e542 <_reclaim_reent+0x8a>
 801e550:	4620      	mov	r0, r4
 801e552:	f7ff fe2f 	bl	801e1b4 <_free_r>
 801e556:	e7ba      	b.n	801e4ce <_reclaim_reent+0x16>
 801e558:	680e      	ldr	r6, [r1, #0]
 801e55a:	4620      	mov	r0, r4
 801e55c:	f7ff fe2a 	bl	801e1b4 <_free_r>
 801e560:	4631      	mov	r1, r6
 801e562:	e7ef      	b.n	801e544 <_reclaim_reent+0x8c>
 801e564:	2500      	movs	r5, #0
 801e566:	e7ef      	b.n	801e548 <_reclaim_reent+0x90>
 801e568:	bd70      	pop	{r4, r5, r6, pc}
 801e56a:	bf00      	nop
 801e56c:	20000030 	.word	0x20000030

0801e570 <_sbrk_r>:
 801e570:	b538      	push	{r3, r4, r5, lr}
 801e572:	4d06      	ldr	r5, [pc, #24]	; (801e58c <_sbrk_r+0x1c>)
 801e574:	2300      	movs	r3, #0
 801e576:	4604      	mov	r4, r0
 801e578:	4608      	mov	r0, r1
 801e57a:	602b      	str	r3, [r5, #0]
 801e57c:	f7e9 fd00 	bl	8007f80 <_sbrk>
 801e580:	1c43      	adds	r3, r0, #1
 801e582:	d102      	bne.n	801e58a <_sbrk_r+0x1a>
 801e584:	682b      	ldr	r3, [r5, #0]
 801e586:	b103      	cbz	r3, 801e58a <_sbrk_r+0x1a>
 801e588:	6023      	str	r3, [r4, #0]
 801e58a:	bd38      	pop	{r3, r4, r5, pc}
 801e58c:	2000fb24 	.word	0x2000fb24

0801e590 <_raise_r>:
 801e590:	291f      	cmp	r1, #31
 801e592:	b538      	push	{r3, r4, r5, lr}
 801e594:	4604      	mov	r4, r0
 801e596:	460d      	mov	r5, r1
 801e598:	d904      	bls.n	801e5a4 <_raise_r+0x14>
 801e59a:	2316      	movs	r3, #22
 801e59c:	6003      	str	r3, [r0, #0]
 801e59e:	f04f 30ff 	mov.w	r0, #4294967295
 801e5a2:	bd38      	pop	{r3, r4, r5, pc}
 801e5a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e5a6:	b112      	cbz	r2, 801e5ae <_raise_r+0x1e>
 801e5a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e5ac:	b94b      	cbnz	r3, 801e5c2 <_raise_r+0x32>
 801e5ae:	4620      	mov	r0, r4
 801e5b0:	f000 f830 	bl	801e614 <_getpid_r>
 801e5b4:	462a      	mov	r2, r5
 801e5b6:	4601      	mov	r1, r0
 801e5b8:	4620      	mov	r0, r4
 801e5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e5be:	f000 b817 	b.w	801e5f0 <_kill_r>
 801e5c2:	2b01      	cmp	r3, #1
 801e5c4:	d00a      	beq.n	801e5dc <_raise_r+0x4c>
 801e5c6:	1c59      	adds	r1, r3, #1
 801e5c8:	d103      	bne.n	801e5d2 <_raise_r+0x42>
 801e5ca:	2316      	movs	r3, #22
 801e5cc:	6003      	str	r3, [r0, #0]
 801e5ce:	2001      	movs	r0, #1
 801e5d0:	e7e7      	b.n	801e5a2 <_raise_r+0x12>
 801e5d2:	2400      	movs	r4, #0
 801e5d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e5d8:	4628      	mov	r0, r5
 801e5da:	4798      	blx	r3
 801e5dc:	2000      	movs	r0, #0
 801e5de:	e7e0      	b.n	801e5a2 <_raise_r+0x12>

0801e5e0 <raise>:
 801e5e0:	4b02      	ldr	r3, [pc, #8]	; (801e5ec <raise+0xc>)
 801e5e2:	4601      	mov	r1, r0
 801e5e4:	6818      	ldr	r0, [r3, #0]
 801e5e6:	f7ff bfd3 	b.w	801e590 <_raise_r>
 801e5ea:	bf00      	nop
 801e5ec:	20000030 	.word	0x20000030

0801e5f0 <_kill_r>:
 801e5f0:	b538      	push	{r3, r4, r5, lr}
 801e5f2:	4d07      	ldr	r5, [pc, #28]	; (801e610 <_kill_r+0x20>)
 801e5f4:	2300      	movs	r3, #0
 801e5f6:	4604      	mov	r4, r0
 801e5f8:	4608      	mov	r0, r1
 801e5fa:	4611      	mov	r1, r2
 801e5fc:	602b      	str	r3, [r5, #0]
 801e5fe:	f7e9 fc51 	bl	8007ea4 <_kill>
 801e602:	1c43      	adds	r3, r0, #1
 801e604:	d102      	bne.n	801e60c <_kill_r+0x1c>
 801e606:	682b      	ldr	r3, [r5, #0]
 801e608:	b103      	cbz	r3, 801e60c <_kill_r+0x1c>
 801e60a:	6023      	str	r3, [r4, #0]
 801e60c:	bd38      	pop	{r3, r4, r5, pc}
 801e60e:	bf00      	nop
 801e610:	2000fb24 	.word	0x2000fb24

0801e614 <_getpid_r>:
 801e614:	f7e9 bc3e 	b.w	8007e94 <_getpid>

0801e618 <__sread>:
 801e618:	b510      	push	{r4, lr}
 801e61a:	460c      	mov	r4, r1
 801e61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e620:	f000 fd32 	bl	801f088 <_read_r>
 801e624:	2800      	cmp	r0, #0
 801e626:	bfab      	itete	ge
 801e628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e62a:	89a3      	ldrhlt	r3, [r4, #12]
 801e62c:	181b      	addge	r3, r3, r0
 801e62e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e632:	bfac      	ite	ge
 801e634:	6563      	strge	r3, [r4, #84]	; 0x54
 801e636:	81a3      	strhlt	r3, [r4, #12]
 801e638:	bd10      	pop	{r4, pc}

0801e63a <__swrite>:
 801e63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e63e:	461f      	mov	r7, r3
 801e640:	898b      	ldrh	r3, [r1, #12]
 801e642:	05db      	lsls	r3, r3, #23
 801e644:	4605      	mov	r5, r0
 801e646:	460c      	mov	r4, r1
 801e648:	4616      	mov	r6, r2
 801e64a:	d505      	bpl.n	801e658 <__swrite+0x1e>
 801e64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e650:	2302      	movs	r3, #2
 801e652:	2200      	movs	r2, #0
 801e654:	f000 fa0c 	bl	801ea70 <_lseek_r>
 801e658:	89a3      	ldrh	r3, [r4, #12]
 801e65a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e65e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e662:	81a3      	strh	r3, [r4, #12]
 801e664:	4632      	mov	r2, r6
 801e666:	463b      	mov	r3, r7
 801e668:	4628      	mov	r0, r5
 801e66a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e66e:	f000 b8e5 	b.w	801e83c <_write_r>

0801e672 <__sseek>:
 801e672:	b510      	push	{r4, lr}
 801e674:	460c      	mov	r4, r1
 801e676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e67a:	f000 f9f9 	bl	801ea70 <_lseek_r>
 801e67e:	1c43      	adds	r3, r0, #1
 801e680:	89a3      	ldrh	r3, [r4, #12]
 801e682:	bf15      	itete	ne
 801e684:	6560      	strne	r0, [r4, #84]	; 0x54
 801e686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e68a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e68e:	81a3      	strheq	r3, [r4, #12]
 801e690:	bf18      	it	ne
 801e692:	81a3      	strhne	r3, [r4, #12]
 801e694:	bd10      	pop	{r4, pc}

0801e696 <__sclose>:
 801e696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e69a:	f000 b8ff 	b.w	801e89c <_close_r>
	...

0801e6a0 <_strtol_l.constprop.0>:
 801e6a0:	2b01      	cmp	r3, #1
 801e6a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e6a6:	d001      	beq.n	801e6ac <_strtol_l.constprop.0+0xc>
 801e6a8:	2b24      	cmp	r3, #36	; 0x24
 801e6aa:	d906      	bls.n	801e6ba <_strtol_l.constprop.0+0x1a>
 801e6ac:	f000 f906 	bl	801e8bc <__errno>
 801e6b0:	2316      	movs	r3, #22
 801e6b2:	6003      	str	r3, [r0, #0]
 801e6b4:	2000      	movs	r0, #0
 801e6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801e7a0 <_strtol_l.constprop.0+0x100>
 801e6be:	460d      	mov	r5, r1
 801e6c0:	462e      	mov	r6, r5
 801e6c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e6c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 801e6ca:	f017 0708 	ands.w	r7, r7, #8
 801e6ce:	d1f7      	bne.n	801e6c0 <_strtol_l.constprop.0+0x20>
 801e6d0:	2c2d      	cmp	r4, #45	; 0x2d
 801e6d2:	d132      	bne.n	801e73a <_strtol_l.constprop.0+0x9a>
 801e6d4:	782c      	ldrb	r4, [r5, #0]
 801e6d6:	2701      	movs	r7, #1
 801e6d8:	1cb5      	adds	r5, r6, #2
 801e6da:	2b00      	cmp	r3, #0
 801e6dc:	d05b      	beq.n	801e796 <_strtol_l.constprop.0+0xf6>
 801e6de:	2b10      	cmp	r3, #16
 801e6e0:	d109      	bne.n	801e6f6 <_strtol_l.constprop.0+0x56>
 801e6e2:	2c30      	cmp	r4, #48	; 0x30
 801e6e4:	d107      	bne.n	801e6f6 <_strtol_l.constprop.0+0x56>
 801e6e6:	782c      	ldrb	r4, [r5, #0]
 801e6e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e6ec:	2c58      	cmp	r4, #88	; 0x58
 801e6ee:	d14d      	bne.n	801e78c <_strtol_l.constprop.0+0xec>
 801e6f0:	786c      	ldrb	r4, [r5, #1]
 801e6f2:	2310      	movs	r3, #16
 801e6f4:	3502      	adds	r5, #2
 801e6f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801e6fa:	f108 38ff 	add.w	r8, r8, #4294967295
 801e6fe:	f04f 0c00 	mov.w	ip, #0
 801e702:	fbb8 f9f3 	udiv	r9, r8, r3
 801e706:	4666      	mov	r6, ip
 801e708:	fb03 8a19 	mls	sl, r3, r9, r8
 801e70c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801e710:	f1be 0f09 	cmp.w	lr, #9
 801e714:	d816      	bhi.n	801e744 <_strtol_l.constprop.0+0xa4>
 801e716:	4674      	mov	r4, lr
 801e718:	42a3      	cmp	r3, r4
 801e71a:	dd24      	ble.n	801e766 <_strtol_l.constprop.0+0xc6>
 801e71c:	f1bc 0f00 	cmp.w	ip, #0
 801e720:	db1e      	blt.n	801e760 <_strtol_l.constprop.0+0xc0>
 801e722:	45b1      	cmp	r9, r6
 801e724:	d31c      	bcc.n	801e760 <_strtol_l.constprop.0+0xc0>
 801e726:	d101      	bne.n	801e72c <_strtol_l.constprop.0+0x8c>
 801e728:	45a2      	cmp	sl, r4
 801e72a:	db19      	blt.n	801e760 <_strtol_l.constprop.0+0xc0>
 801e72c:	fb06 4603 	mla	r6, r6, r3, r4
 801e730:	f04f 0c01 	mov.w	ip, #1
 801e734:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e738:	e7e8      	b.n	801e70c <_strtol_l.constprop.0+0x6c>
 801e73a:	2c2b      	cmp	r4, #43	; 0x2b
 801e73c:	bf04      	itt	eq
 801e73e:	782c      	ldrbeq	r4, [r5, #0]
 801e740:	1cb5      	addeq	r5, r6, #2
 801e742:	e7ca      	b.n	801e6da <_strtol_l.constprop.0+0x3a>
 801e744:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801e748:	f1be 0f19 	cmp.w	lr, #25
 801e74c:	d801      	bhi.n	801e752 <_strtol_l.constprop.0+0xb2>
 801e74e:	3c37      	subs	r4, #55	; 0x37
 801e750:	e7e2      	b.n	801e718 <_strtol_l.constprop.0+0x78>
 801e752:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801e756:	f1be 0f19 	cmp.w	lr, #25
 801e75a:	d804      	bhi.n	801e766 <_strtol_l.constprop.0+0xc6>
 801e75c:	3c57      	subs	r4, #87	; 0x57
 801e75e:	e7db      	b.n	801e718 <_strtol_l.constprop.0+0x78>
 801e760:	f04f 3cff 	mov.w	ip, #4294967295
 801e764:	e7e6      	b.n	801e734 <_strtol_l.constprop.0+0x94>
 801e766:	f1bc 0f00 	cmp.w	ip, #0
 801e76a:	da05      	bge.n	801e778 <_strtol_l.constprop.0+0xd8>
 801e76c:	2322      	movs	r3, #34	; 0x22
 801e76e:	6003      	str	r3, [r0, #0]
 801e770:	4646      	mov	r6, r8
 801e772:	b942      	cbnz	r2, 801e786 <_strtol_l.constprop.0+0xe6>
 801e774:	4630      	mov	r0, r6
 801e776:	e79e      	b.n	801e6b6 <_strtol_l.constprop.0+0x16>
 801e778:	b107      	cbz	r7, 801e77c <_strtol_l.constprop.0+0xdc>
 801e77a:	4276      	negs	r6, r6
 801e77c:	2a00      	cmp	r2, #0
 801e77e:	d0f9      	beq.n	801e774 <_strtol_l.constprop.0+0xd4>
 801e780:	f1bc 0f00 	cmp.w	ip, #0
 801e784:	d000      	beq.n	801e788 <_strtol_l.constprop.0+0xe8>
 801e786:	1e69      	subs	r1, r5, #1
 801e788:	6011      	str	r1, [r2, #0]
 801e78a:	e7f3      	b.n	801e774 <_strtol_l.constprop.0+0xd4>
 801e78c:	2430      	movs	r4, #48	; 0x30
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d1b1      	bne.n	801e6f6 <_strtol_l.constprop.0+0x56>
 801e792:	2308      	movs	r3, #8
 801e794:	e7af      	b.n	801e6f6 <_strtol_l.constprop.0+0x56>
 801e796:	2c30      	cmp	r4, #48	; 0x30
 801e798:	d0a5      	beq.n	801e6e6 <_strtol_l.constprop.0+0x46>
 801e79a:	230a      	movs	r3, #10
 801e79c:	e7ab      	b.n	801e6f6 <_strtol_l.constprop.0+0x56>
 801e79e:	bf00      	nop
 801e7a0:	0802356d 	.word	0x0802356d

0801e7a4 <strtol>:
 801e7a4:	4613      	mov	r3, r2
 801e7a6:	460a      	mov	r2, r1
 801e7a8:	4601      	mov	r1, r0
 801e7aa:	4802      	ldr	r0, [pc, #8]	; (801e7b4 <strtol+0x10>)
 801e7ac:	6800      	ldr	r0, [r0, #0]
 801e7ae:	f7ff bf77 	b.w	801e6a0 <_strtol_l.constprop.0>
 801e7b2:	bf00      	nop
 801e7b4:	20000030 	.word	0x20000030

0801e7b8 <__utoa>:
 801e7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7ba:	4c1f      	ldr	r4, [pc, #124]	; (801e838 <__utoa+0x80>)
 801e7bc:	b08b      	sub	sp, #44	; 0x2c
 801e7be:	4605      	mov	r5, r0
 801e7c0:	460b      	mov	r3, r1
 801e7c2:	466e      	mov	r6, sp
 801e7c4:	f104 0c20 	add.w	ip, r4, #32
 801e7c8:	6820      	ldr	r0, [r4, #0]
 801e7ca:	6861      	ldr	r1, [r4, #4]
 801e7cc:	4637      	mov	r7, r6
 801e7ce:	c703      	stmia	r7!, {r0, r1}
 801e7d0:	3408      	adds	r4, #8
 801e7d2:	4564      	cmp	r4, ip
 801e7d4:	463e      	mov	r6, r7
 801e7d6:	d1f7      	bne.n	801e7c8 <__utoa+0x10>
 801e7d8:	7921      	ldrb	r1, [r4, #4]
 801e7da:	7139      	strb	r1, [r7, #4]
 801e7dc:	1e91      	subs	r1, r2, #2
 801e7de:	6820      	ldr	r0, [r4, #0]
 801e7e0:	6038      	str	r0, [r7, #0]
 801e7e2:	2922      	cmp	r1, #34	; 0x22
 801e7e4:	f04f 0100 	mov.w	r1, #0
 801e7e8:	d904      	bls.n	801e7f4 <__utoa+0x3c>
 801e7ea:	7019      	strb	r1, [r3, #0]
 801e7ec:	460b      	mov	r3, r1
 801e7ee:	4618      	mov	r0, r3
 801e7f0:	b00b      	add	sp, #44	; 0x2c
 801e7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e7f4:	1e58      	subs	r0, r3, #1
 801e7f6:	4684      	mov	ip, r0
 801e7f8:	fbb5 f7f2 	udiv	r7, r5, r2
 801e7fc:	fb02 5617 	mls	r6, r2, r7, r5
 801e800:	3628      	adds	r6, #40	; 0x28
 801e802:	446e      	add	r6, sp
 801e804:	460c      	mov	r4, r1
 801e806:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801e80a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801e80e:	462e      	mov	r6, r5
 801e810:	42b2      	cmp	r2, r6
 801e812:	f101 0101 	add.w	r1, r1, #1
 801e816:	463d      	mov	r5, r7
 801e818:	d9ee      	bls.n	801e7f8 <__utoa+0x40>
 801e81a:	2200      	movs	r2, #0
 801e81c:	545a      	strb	r2, [r3, r1]
 801e81e:	1919      	adds	r1, r3, r4
 801e820:	1aa5      	subs	r5, r4, r2
 801e822:	42aa      	cmp	r2, r5
 801e824:	dae3      	bge.n	801e7ee <__utoa+0x36>
 801e826:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801e82a:	780e      	ldrb	r6, [r1, #0]
 801e82c:	7006      	strb	r6, [r0, #0]
 801e82e:	3201      	adds	r2, #1
 801e830:	f801 5901 	strb.w	r5, [r1], #-1
 801e834:	e7f4      	b.n	801e820 <__utoa+0x68>
 801e836:	bf00      	nop
 801e838:	080237a3 	.word	0x080237a3

0801e83c <_write_r>:
 801e83c:	b538      	push	{r3, r4, r5, lr}
 801e83e:	4d07      	ldr	r5, [pc, #28]	; (801e85c <_write_r+0x20>)
 801e840:	4604      	mov	r4, r0
 801e842:	4608      	mov	r0, r1
 801e844:	4611      	mov	r1, r2
 801e846:	2200      	movs	r2, #0
 801e848:	602a      	str	r2, [r5, #0]
 801e84a:	461a      	mov	r2, r3
 801e84c:	f7e9 f964 	bl	8007b18 <_write>
 801e850:	1c43      	adds	r3, r0, #1
 801e852:	d102      	bne.n	801e85a <_write_r+0x1e>
 801e854:	682b      	ldr	r3, [r5, #0]
 801e856:	b103      	cbz	r3, 801e85a <_write_r+0x1e>
 801e858:	6023      	str	r3, [r4, #0]
 801e85a:	bd38      	pop	{r3, r4, r5, pc}
 801e85c:	2000fb24 	.word	0x2000fb24

0801e860 <__assert_func>:
 801e860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e862:	4614      	mov	r4, r2
 801e864:	461a      	mov	r2, r3
 801e866:	4b09      	ldr	r3, [pc, #36]	; (801e88c <__assert_func+0x2c>)
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	4605      	mov	r5, r0
 801e86c:	68d8      	ldr	r0, [r3, #12]
 801e86e:	b14c      	cbz	r4, 801e884 <__assert_func+0x24>
 801e870:	4b07      	ldr	r3, [pc, #28]	; (801e890 <__assert_func+0x30>)
 801e872:	9100      	str	r1, [sp, #0]
 801e874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e878:	4906      	ldr	r1, [pc, #24]	; (801e894 <__assert_func+0x34>)
 801e87a:	462b      	mov	r3, r5
 801e87c:	f000 f8e6 	bl	801ea4c <fiprintf>
 801e880:	f7ff fb04 	bl	801de8c <abort>
 801e884:	4b04      	ldr	r3, [pc, #16]	; (801e898 <__assert_func+0x38>)
 801e886:	461c      	mov	r4, r3
 801e888:	e7f3      	b.n	801e872 <__assert_func+0x12>
 801e88a:	bf00      	nop
 801e88c:	20000030 	.word	0x20000030
 801e890:	080237c8 	.word	0x080237c8
 801e894:	080237d5 	.word	0x080237d5
 801e898:	08023803 	.word	0x08023803

0801e89c <_close_r>:
 801e89c:	b538      	push	{r3, r4, r5, lr}
 801e89e:	4d06      	ldr	r5, [pc, #24]	; (801e8b8 <_close_r+0x1c>)
 801e8a0:	2300      	movs	r3, #0
 801e8a2:	4604      	mov	r4, r0
 801e8a4:	4608      	mov	r0, r1
 801e8a6:	602b      	str	r3, [r5, #0]
 801e8a8:	f7e9 fb35 	bl	8007f16 <_close>
 801e8ac:	1c43      	adds	r3, r0, #1
 801e8ae:	d102      	bne.n	801e8b6 <_close_r+0x1a>
 801e8b0:	682b      	ldr	r3, [r5, #0]
 801e8b2:	b103      	cbz	r3, 801e8b6 <_close_r+0x1a>
 801e8b4:	6023      	str	r3, [r4, #0]
 801e8b6:	bd38      	pop	{r3, r4, r5, pc}
 801e8b8:	2000fb24 	.word	0x2000fb24

0801e8bc <__errno>:
 801e8bc:	4b01      	ldr	r3, [pc, #4]	; (801e8c4 <__errno+0x8>)
 801e8be:	6818      	ldr	r0, [r3, #0]
 801e8c0:	4770      	bx	lr
 801e8c2:	bf00      	nop
 801e8c4:	20000030 	.word	0x20000030

0801e8c8 <__sflush_r>:
 801e8c8:	898a      	ldrh	r2, [r1, #12]
 801e8ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8ce:	4605      	mov	r5, r0
 801e8d0:	0710      	lsls	r0, r2, #28
 801e8d2:	460c      	mov	r4, r1
 801e8d4:	d458      	bmi.n	801e988 <__sflush_r+0xc0>
 801e8d6:	684b      	ldr	r3, [r1, #4]
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	dc05      	bgt.n	801e8e8 <__sflush_r+0x20>
 801e8dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e8de:	2b00      	cmp	r3, #0
 801e8e0:	dc02      	bgt.n	801e8e8 <__sflush_r+0x20>
 801e8e2:	2000      	movs	r0, #0
 801e8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e8ea:	2e00      	cmp	r6, #0
 801e8ec:	d0f9      	beq.n	801e8e2 <__sflush_r+0x1a>
 801e8ee:	2300      	movs	r3, #0
 801e8f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e8f4:	682f      	ldr	r7, [r5, #0]
 801e8f6:	602b      	str	r3, [r5, #0]
 801e8f8:	d032      	beq.n	801e960 <__sflush_r+0x98>
 801e8fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e8fc:	89a3      	ldrh	r3, [r4, #12]
 801e8fe:	075a      	lsls	r2, r3, #29
 801e900:	d505      	bpl.n	801e90e <__sflush_r+0x46>
 801e902:	6863      	ldr	r3, [r4, #4]
 801e904:	1ac0      	subs	r0, r0, r3
 801e906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e908:	b10b      	cbz	r3, 801e90e <__sflush_r+0x46>
 801e90a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e90c:	1ac0      	subs	r0, r0, r3
 801e90e:	2300      	movs	r3, #0
 801e910:	4602      	mov	r2, r0
 801e912:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e914:	6a21      	ldr	r1, [r4, #32]
 801e916:	4628      	mov	r0, r5
 801e918:	47b0      	blx	r6
 801e91a:	1c43      	adds	r3, r0, #1
 801e91c:	89a3      	ldrh	r3, [r4, #12]
 801e91e:	d106      	bne.n	801e92e <__sflush_r+0x66>
 801e920:	6829      	ldr	r1, [r5, #0]
 801e922:	291d      	cmp	r1, #29
 801e924:	d82c      	bhi.n	801e980 <__sflush_r+0xb8>
 801e926:	4a2a      	ldr	r2, [pc, #168]	; (801e9d0 <__sflush_r+0x108>)
 801e928:	40ca      	lsrs	r2, r1
 801e92a:	07d6      	lsls	r6, r2, #31
 801e92c:	d528      	bpl.n	801e980 <__sflush_r+0xb8>
 801e92e:	2200      	movs	r2, #0
 801e930:	6062      	str	r2, [r4, #4]
 801e932:	04d9      	lsls	r1, r3, #19
 801e934:	6922      	ldr	r2, [r4, #16]
 801e936:	6022      	str	r2, [r4, #0]
 801e938:	d504      	bpl.n	801e944 <__sflush_r+0x7c>
 801e93a:	1c42      	adds	r2, r0, #1
 801e93c:	d101      	bne.n	801e942 <__sflush_r+0x7a>
 801e93e:	682b      	ldr	r3, [r5, #0]
 801e940:	b903      	cbnz	r3, 801e944 <__sflush_r+0x7c>
 801e942:	6560      	str	r0, [r4, #84]	; 0x54
 801e944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e946:	602f      	str	r7, [r5, #0]
 801e948:	2900      	cmp	r1, #0
 801e94a:	d0ca      	beq.n	801e8e2 <__sflush_r+0x1a>
 801e94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e950:	4299      	cmp	r1, r3
 801e952:	d002      	beq.n	801e95a <__sflush_r+0x92>
 801e954:	4628      	mov	r0, r5
 801e956:	f7ff fc2d 	bl	801e1b4 <_free_r>
 801e95a:	2000      	movs	r0, #0
 801e95c:	6360      	str	r0, [r4, #52]	; 0x34
 801e95e:	e7c1      	b.n	801e8e4 <__sflush_r+0x1c>
 801e960:	6a21      	ldr	r1, [r4, #32]
 801e962:	2301      	movs	r3, #1
 801e964:	4628      	mov	r0, r5
 801e966:	47b0      	blx	r6
 801e968:	1c41      	adds	r1, r0, #1
 801e96a:	d1c7      	bne.n	801e8fc <__sflush_r+0x34>
 801e96c:	682b      	ldr	r3, [r5, #0]
 801e96e:	2b00      	cmp	r3, #0
 801e970:	d0c4      	beq.n	801e8fc <__sflush_r+0x34>
 801e972:	2b1d      	cmp	r3, #29
 801e974:	d001      	beq.n	801e97a <__sflush_r+0xb2>
 801e976:	2b16      	cmp	r3, #22
 801e978:	d101      	bne.n	801e97e <__sflush_r+0xb6>
 801e97a:	602f      	str	r7, [r5, #0]
 801e97c:	e7b1      	b.n	801e8e2 <__sflush_r+0x1a>
 801e97e:	89a3      	ldrh	r3, [r4, #12]
 801e980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e984:	81a3      	strh	r3, [r4, #12]
 801e986:	e7ad      	b.n	801e8e4 <__sflush_r+0x1c>
 801e988:	690f      	ldr	r7, [r1, #16]
 801e98a:	2f00      	cmp	r7, #0
 801e98c:	d0a9      	beq.n	801e8e2 <__sflush_r+0x1a>
 801e98e:	0793      	lsls	r3, r2, #30
 801e990:	680e      	ldr	r6, [r1, #0]
 801e992:	bf08      	it	eq
 801e994:	694b      	ldreq	r3, [r1, #20]
 801e996:	600f      	str	r7, [r1, #0]
 801e998:	bf18      	it	ne
 801e99a:	2300      	movne	r3, #0
 801e99c:	eba6 0807 	sub.w	r8, r6, r7
 801e9a0:	608b      	str	r3, [r1, #8]
 801e9a2:	f1b8 0f00 	cmp.w	r8, #0
 801e9a6:	dd9c      	ble.n	801e8e2 <__sflush_r+0x1a>
 801e9a8:	6a21      	ldr	r1, [r4, #32]
 801e9aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e9ac:	4643      	mov	r3, r8
 801e9ae:	463a      	mov	r2, r7
 801e9b0:	4628      	mov	r0, r5
 801e9b2:	47b0      	blx	r6
 801e9b4:	2800      	cmp	r0, #0
 801e9b6:	dc06      	bgt.n	801e9c6 <__sflush_r+0xfe>
 801e9b8:	89a3      	ldrh	r3, [r4, #12]
 801e9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e9be:	81a3      	strh	r3, [r4, #12]
 801e9c0:	f04f 30ff 	mov.w	r0, #4294967295
 801e9c4:	e78e      	b.n	801e8e4 <__sflush_r+0x1c>
 801e9c6:	4407      	add	r7, r0
 801e9c8:	eba8 0800 	sub.w	r8, r8, r0
 801e9cc:	e7e9      	b.n	801e9a2 <__sflush_r+0xda>
 801e9ce:	bf00      	nop
 801e9d0:	20400001 	.word	0x20400001

0801e9d4 <_fflush_r>:
 801e9d4:	b538      	push	{r3, r4, r5, lr}
 801e9d6:	690b      	ldr	r3, [r1, #16]
 801e9d8:	4605      	mov	r5, r0
 801e9da:	460c      	mov	r4, r1
 801e9dc:	b913      	cbnz	r3, 801e9e4 <_fflush_r+0x10>
 801e9de:	2500      	movs	r5, #0
 801e9e0:	4628      	mov	r0, r5
 801e9e2:	bd38      	pop	{r3, r4, r5, pc}
 801e9e4:	b118      	cbz	r0, 801e9ee <_fflush_r+0x1a>
 801e9e6:	6983      	ldr	r3, [r0, #24]
 801e9e8:	b90b      	cbnz	r3, 801e9ee <_fflush_r+0x1a>
 801e9ea:	f7ff fab3 	bl	801df54 <__sinit>
 801e9ee:	4b14      	ldr	r3, [pc, #80]	; (801ea40 <_fflush_r+0x6c>)
 801e9f0:	429c      	cmp	r4, r3
 801e9f2:	d11b      	bne.n	801ea2c <_fflush_r+0x58>
 801e9f4:	686c      	ldr	r4, [r5, #4]
 801e9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e9fa:	2b00      	cmp	r3, #0
 801e9fc:	d0ef      	beq.n	801e9de <_fflush_r+0xa>
 801e9fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ea00:	07d0      	lsls	r0, r2, #31
 801ea02:	d404      	bmi.n	801ea0e <_fflush_r+0x3a>
 801ea04:	0599      	lsls	r1, r3, #22
 801ea06:	d402      	bmi.n	801ea0e <_fflush_r+0x3a>
 801ea08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea0a:	f7ff fb80 	bl	801e10e <__retarget_lock_acquire_recursive>
 801ea0e:	4628      	mov	r0, r5
 801ea10:	4621      	mov	r1, r4
 801ea12:	f7ff ff59 	bl	801e8c8 <__sflush_r>
 801ea16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ea18:	07da      	lsls	r2, r3, #31
 801ea1a:	4605      	mov	r5, r0
 801ea1c:	d4e0      	bmi.n	801e9e0 <_fflush_r+0xc>
 801ea1e:	89a3      	ldrh	r3, [r4, #12]
 801ea20:	059b      	lsls	r3, r3, #22
 801ea22:	d4dd      	bmi.n	801e9e0 <_fflush_r+0xc>
 801ea24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea26:	f7ff fb73 	bl	801e110 <__retarget_lock_release_recursive>
 801ea2a:	e7d9      	b.n	801e9e0 <_fflush_r+0xc>
 801ea2c:	4b05      	ldr	r3, [pc, #20]	; (801ea44 <_fflush_r+0x70>)
 801ea2e:	429c      	cmp	r4, r3
 801ea30:	d101      	bne.n	801ea36 <_fflush_r+0x62>
 801ea32:	68ac      	ldr	r4, [r5, #8]
 801ea34:	e7df      	b.n	801e9f6 <_fflush_r+0x22>
 801ea36:	4b04      	ldr	r3, [pc, #16]	; (801ea48 <_fflush_r+0x74>)
 801ea38:	429c      	cmp	r4, r3
 801ea3a:	bf08      	it	eq
 801ea3c:	68ec      	ldreq	r4, [r5, #12]
 801ea3e:	e7da      	b.n	801e9f6 <_fflush_r+0x22>
 801ea40:	08023690 	.word	0x08023690
 801ea44:	080236b0 	.word	0x080236b0
 801ea48:	08023670 	.word	0x08023670

0801ea4c <fiprintf>:
 801ea4c:	b40e      	push	{r1, r2, r3}
 801ea4e:	b503      	push	{r0, r1, lr}
 801ea50:	4601      	mov	r1, r0
 801ea52:	ab03      	add	r3, sp, #12
 801ea54:	4805      	ldr	r0, [pc, #20]	; (801ea6c <fiprintf+0x20>)
 801ea56:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea5a:	6800      	ldr	r0, [r0, #0]
 801ea5c:	9301      	str	r3, [sp, #4]
 801ea5e:	f000 f84f 	bl	801eb00 <_vfiprintf_r>
 801ea62:	b002      	add	sp, #8
 801ea64:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea68:	b003      	add	sp, #12
 801ea6a:	4770      	bx	lr
 801ea6c:	20000030 	.word	0x20000030

0801ea70 <_lseek_r>:
 801ea70:	b538      	push	{r3, r4, r5, lr}
 801ea72:	4d07      	ldr	r5, [pc, #28]	; (801ea90 <_lseek_r+0x20>)
 801ea74:	4604      	mov	r4, r0
 801ea76:	4608      	mov	r0, r1
 801ea78:	4611      	mov	r1, r2
 801ea7a:	2200      	movs	r2, #0
 801ea7c:	602a      	str	r2, [r5, #0]
 801ea7e:	461a      	mov	r2, r3
 801ea80:	f7e9 fa70 	bl	8007f64 <_lseek>
 801ea84:	1c43      	adds	r3, r0, #1
 801ea86:	d102      	bne.n	801ea8e <_lseek_r+0x1e>
 801ea88:	682b      	ldr	r3, [r5, #0]
 801ea8a:	b103      	cbz	r3, 801ea8e <_lseek_r+0x1e>
 801ea8c:	6023      	str	r3, [r4, #0]
 801ea8e:	bd38      	pop	{r3, r4, r5, pc}
 801ea90:	2000fb24 	.word	0x2000fb24

0801ea94 <__malloc_lock>:
 801ea94:	4801      	ldr	r0, [pc, #4]	; (801ea9c <__malloc_lock+0x8>)
 801ea96:	f7ff bb3a 	b.w	801e10e <__retarget_lock_acquire_recursive>
 801ea9a:	bf00      	nop
 801ea9c:	2000fb18 	.word	0x2000fb18

0801eaa0 <__malloc_unlock>:
 801eaa0:	4801      	ldr	r0, [pc, #4]	; (801eaa8 <__malloc_unlock+0x8>)
 801eaa2:	f7ff bb35 	b.w	801e110 <__retarget_lock_release_recursive>
 801eaa6:	bf00      	nop
 801eaa8:	2000fb18 	.word	0x2000fb18

0801eaac <__sfputc_r>:
 801eaac:	6893      	ldr	r3, [r2, #8]
 801eaae:	3b01      	subs	r3, #1
 801eab0:	2b00      	cmp	r3, #0
 801eab2:	b410      	push	{r4}
 801eab4:	6093      	str	r3, [r2, #8]
 801eab6:	da08      	bge.n	801eaca <__sfputc_r+0x1e>
 801eab8:	6994      	ldr	r4, [r2, #24]
 801eaba:	42a3      	cmp	r3, r4
 801eabc:	db01      	blt.n	801eac2 <__sfputc_r+0x16>
 801eabe:	290a      	cmp	r1, #10
 801eac0:	d103      	bne.n	801eaca <__sfputc_r+0x1e>
 801eac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eac6:	f000 baf1 	b.w	801f0ac <__swbuf_r>
 801eaca:	6813      	ldr	r3, [r2, #0]
 801eacc:	1c58      	adds	r0, r3, #1
 801eace:	6010      	str	r0, [r2, #0]
 801ead0:	7019      	strb	r1, [r3, #0]
 801ead2:	4608      	mov	r0, r1
 801ead4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ead8:	4770      	bx	lr

0801eada <__sfputs_r>:
 801eada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eadc:	4606      	mov	r6, r0
 801eade:	460f      	mov	r7, r1
 801eae0:	4614      	mov	r4, r2
 801eae2:	18d5      	adds	r5, r2, r3
 801eae4:	42ac      	cmp	r4, r5
 801eae6:	d101      	bne.n	801eaec <__sfputs_r+0x12>
 801eae8:	2000      	movs	r0, #0
 801eaea:	e007      	b.n	801eafc <__sfputs_r+0x22>
 801eaec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eaf0:	463a      	mov	r2, r7
 801eaf2:	4630      	mov	r0, r6
 801eaf4:	f7ff ffda 	bl	801eaac <__sfputc_r>
 801eaf8:	1c43      	adds	r3, r0, #1
 801eafa:	d1f3      	bne.n	801eae4 <__sfputs_r+0xa>
 801eafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801eb00 <_vfiprintf_r>:
 801eb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb04:	460d      	mov	r5, r1
 801eb06:	b09d      	sub	sp, #116	; 0x74
 801eb08:	4614      	mov	r4, r2
 801eb0a:	4698      	mov	r8, r3
 801eb0c:	4606      	mov	r6, r0
 801eb0e:	b118      	cbz	r0, 801eb18 <_vfiprintf_r+0x18>
 801eb10:	6983      	ldr	r3, [r0, #24]
 801eb12:	b90b      	cbnz	r3, 801eb18 <_vfiprintf_r+0x18>
 801eb14:	f7ff fa1e 	bl	801df54 <__sinit>
 801eb18:	4b89      	ldr	r3, [pc, #548]	; (801ed40 <_vfiprintf_r+0x240>)
 801eb1a:	429d      	cmp	r5, r3
 801eb1c:	d11b      	bne.n	801eb56 <_vfiprintf_r+0x56>
 801eb1e:	6875      	ldr	r5, [r6, #4]
 801eb20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eb22:	07d9      	lsls	r1, r3, #31
 801eb24:	d405      	bmi.n	801eb32 <_vfiprintf_r+0x32>
 801eb26:	89ab      	ldrh	r3, [r5, #12]
 801eb28:	059a      	lsls	r2, r3, #22
 801eb2a:	d402      	bmi.n	801eb32 <_vfiprintf_r+0x32>
 801eb2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eb2e:	f7ff faee 	bl	801e10e <__retarget_lock_acquire_recursive>
 801eb32:	89ab      	ldrh	r3, [r5, #12]
 801eb34:	071b      	lsls	r3, r3, #28
 801eb36:	d501      	bpl.n	801eb3c <_vfiprintf_r+0x3c>
 801eb38:	692b      	ldr	r3, [r5, #16]
 801eb3a:	b9eb      	cbnz	r3, 801eb78 <_vfiprintf_r+0x78>
 801eb3c:	4629      	mov	r1, r5
 801eb3e:	4630      	mov	r0, r6
 801eb40:	f000 fb06 	bl	801f150 <__swsetup_r>
 801eb44:	b1c0      	cbz	r0, 801eb78 <_vfiprintf_r+0x78>
 801eb46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801eb48:	07dc      	lsls	r4, r3, #31
 801eb4a:	d50e      	bpl.n	801eb6a <_vfiprintf_r+0x6a>
 801eb4c:	f04f 30ff 	mov.w	r0, #4294967295
 801eb50:	b01d      	add	sp, #116	; 0x74
 801eb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb56:	4b7b      	ldr	r3, [pc, #492]	; (801ed44 <_vfiprintf_r+0x244>)
 801eb58:	429d      	cmp	r5, r3
 801eb5a:	d101      	bne.n	801eb60 <_vfiprintf_r+0x60>
 801eb5c:	68b5      	ldr	r5, [r6, #8]
 801eb5e:	e7df      	b.n	801eb20 <_vfiprintf_r+0x20>
 801eb60:	4b79      	ldr	r3, [pc, #484]	; (801ed48 <_vfiprintf_r+0x248>)
 801eb62:	429d      	cmp	r5, r3
 801eb64:	bf08      	it	eq
 801eb66:	68f5      	ldreq	r5, [r6, #12]
 801eb68:	e7da      	b.n	801eb20 <_vfiprintf_r+0x20>
 801eb6a:	89ab      	ldrh	r3, [r5, #12]
 801eb6c:	0598      	lsls	r0, r3, #22
 801eb6e:	d4ed      	bmi.n	801eb4c <_vfiprintf_r+0x4c>
 801eb70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801eb72:	f7ff facd 	bl	801e110 <__retarget_lock_release_recursive>
 801eb76:	e7e9      	b.n	801eb4c <_vfiprintf_r+0x4c>
 801eb78:	2300      	movs	r3, #0
 801eb7a:	9309      	str	r3, [sp, #36]	; 0x24
 801eb7c:	2320      	movs	r3, #32
 801eb7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801eb82:	f8cd 800c 	str.w	r8, [sp, #12]
 801eb86:	2330      	movs	r3, #48	; 0x30
 801eb88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ed4c <_vfiprintf_r+0x24c>
 801eb8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801eb90:	f04f 0901 	mov.w	r9, #1
 801eb94:	4623      	mov	r3, r4
 801eb96:	469a      	mov	sl, r3
 801eb98:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eb9c:	b10a      	cbz	r2, 801eba2 <_vfiprintf_r+0xa2>
 801eb9e:	2a25      	cmp	r2, #37	; 0x25
 801eba0:	d1f9      	bne.n	801eb96 <_vfiprintf_r+0x96>
 801eba2:	ebba 0b04 	subs.w	fp, sl, r4
 801eba6:	d00b      	beq.n	801ebc0 <_vfiprintf_r+0xc0>
 801eba8:	465b      	mov	r3, fp
 801ebaa:	4622      	mov	r2, r4
 801ebac:	4629      	mov	r1, r5
 801ebae:	4630      	mov	r0, r6
 801ebb0:	f7ff ff93 	bl	801eada <__sfputs_r>
 801ebb4:	3001      	adds	r0, #1
 801ebb6:	f000 80aa 	beq.w	801ed0e <_vfiprintf_r+0x20e>
 801ebba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ebbc:	445a      	add	r2, fp
 801ebbe:	9209      	str	r2, [sp, #36]	; 0x24
 801ebc0:	f89a 3000 	ldrb.w	r3, [sl]
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	f000 80a2 	beq.w	801ed0e <_vfiprintf_r+0x20e>
 801ebca:	2300      	movs	r3, #0
 801ebcc:	f04f 32ff 	mov.w	r2, #4294967295
 801ebd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ebd4:	f10a 0a01 	add.w	sl, sl, #1
 801ebd8:	9304      	str	r3, [sp, #16]
 801ebda:	9307      	str	r3, [sp, #28]
 801ebdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ebe0:	931a      	str	r3, [sp, #104]	; 0x68
 801ebe2:	4654      	mov	r4, sl
 801ebe4:	2205      	movs	r2, #5
 801ebe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ebea:	4858      	ldr	r0, [pc, #352]	; (801ed4c <_vfiprintf_r+0x24c>)
 801ebec:	f7e1 fb28 	bl	8000240 <memchr>
 801ebf0:	9a04      	ldr	r2, [sp, #16]
 801ebf2:	b9d8      	cbnz	r0, 801ec2c <_vfiprintf_r+0x12c>
 801ebf4:	06d1      	lsls	r1, r2, #27
 801ebf6:	bf44      	itt	mi
 801ebf8:	2320      	movmi	r3, #32
 801ebfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ebfe:	0713      	lsls	r3, r2, #28
 801ec00:	bf44      	itt	mi
 801ec02:	232b      	movmi	r3, #43	; 0x2b
 801ec04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ec08:	f89a 3000 	ldrb.w	r3, [sl]
 801ec0c:	2b2a      	cmp	r3, #42	; 0x2a
 801ec0e:	d015      	beq.n	801ec3c <_vfiprintf_r+0x13c>
 801ec10:	9a07      	ldr	r2, [sp, #28]
 801ec12:	4654      	mov	r4, sl
 801ec14:	2000      	movs	r0, #0
 801ec16:	f04f 0c0a 	mov.w	ip, #10
 801ec1a:	4621      	mov	r1, r4
 801ec1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ec20:	3b30      	subs	r3, #48	; 0x30
 801ec22:	2b09      	cmp	r3, #9
 801ec24:	d94e      	bls.n	801ecc4 <_vfiprintf_r+0x1c4>
 801ec26:	b1b0      	cbz	r0, 801ec56 <_vfiprintf_r+0x156>
 801ec28:	9207      	str	r2, [sp, #28]
 801ec2a:	e014      	b.n	801ec56 <_vfiprintf_r+0x156>
 801ec2c:	eba0 0308 	sub.w	r3, r0, r8
 801ec30:	fa09 f303 	lsl.w	r3, r9, r3
 801ec34:	4313      	orrs	r3, r2
 801ec36:	9304      	str	r3, [sp, #16]
 801ec38:	46a2      	mov	sl, r4
 801ec3a:	e7d2      	b.n	801ebe2 <_vfiprintf_r+0xe2>
 801ec3c:	9b03      	ldr	r3, [sp, #12]
 801ec3e:	1d19      	adds	r1, r3, #4
 801ec40:	681b      	ldr	r3, [r3, #0]
 801ec42:	9103      	str	r1, [sp, #12]
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	bfbb      	ittet	lt
 801ec48:	425b      	neglt	r3, r3
 801ec4a:	f042 0202 	orrlt.w	r2, r2, #2
 801ec4e:	9307      	strge	r3, [sp, #28]
 801ec50:	9307      	strlt	r3, [sp, #28]
 801ec52:	bfb8      	it	lt
 801ec54:	9204      	strlt	r2, [sp, #16]
 801ec56:	7823      	ldrb	r3, [r4, #0]
 801ec58:	2b2e      	cmp	r3, #46	; 0x2e
 801ec5a:	d10c      	bne.n	801ec76 <_vfiprintf_r+0x176>
 801ec5c:	7863      	ldrb	r3, [r4, #1]
 801ec5e:	2b2a      	cmp	r3, #42	; 0x2a
 801ec60:	d135      	bne.n	801ecce <_vfiprintf_r+0x1ce>
 801ec62:	9b03      	ldr	r3, [sp, #12]
 801ec64:	1d1a      	adds	r2, r3, #4
 801ec66:	681b      	ldr	r3, [r3, #0]
 801ec68:	9203      	str	r2, [sp, #12]
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	bfb8      	it	lt
 801ec6e:	f04f 33ff 	movlt.w	r3, #4294967295
 801ec72:	3402      	adds	r4, #2
 801ec74:	9305      	str	r3, [sp, #20]
 801ec76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ed5c <_vfiprintf_r+0x25c>
 801ec7a:	7821      	ldrb	r1, [r4, #0]
 801ec7c:	2203      	movs	r2, #3
 801ec7e:	4650      	mov	r0, sl
 801ec80:	f7e1 fade 	bl	8000240 <memchr>
 801ec84:	b140      	cbz	r0, 801ec98 <_vfiprintf_r+0x198>
 801ec86:	2340      	movs	r3, #64	; 0x40
 801ec88:	eba0 000a 	sub.w	r0, r0, sl
 801ec8c:	fa03 f000 	lsl.w	r0, r3, r0
 801ec90:	9b04      	ldr	r3, [sp, #16]
 801ec92:	4303      	orrs	r3, r0
 801ec94:	3401      	adds	r4, #1
 801ec96:	9304      	str	r3, [sp, #16]
 801ec98:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec9c:	482c      	ldr	r0, [pc, #176]	; (801ed50 <_vfiprintf_r+0x250>)
 801ec9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801eca2:	2206      	movs	r2, #6
 801eca4:	f7e1 facc 	bl	8000240 <memchr>
 801eca8:	2800      	cmp	r0, #0
 801ecaa:	d03f      	beq.n	801ed2c <_vfiprintf_r+0x22c>
 801ecac:	4b29      	ldr	r3, [pc, #164]	; (801ed54 <_vfiprintf_r+0x254>)
 801ecae:	bb1b      	cbnz	r3, 801ecf8 <_vfiprintf_r+0x1f8>
 801ecb0:	9b03      	ldr	r3, [sp, #12]
 801ecb2:	3307      	adds	r3, #7
 801ecb4:	f023 0307 	bic.w	r3, r3, #7
 801ecb8:	3308      	adds	r3, #8
 801ecba:	9303      	str	r3, [sp, #12]
 801ecbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecbe:	443b      	add	r3, r7
 801ecc0:	9309      	str	r3, [sp, #36]	; 0x24
 801ecc2:	e767      	b.n	801eb94 <_vfiprintf_r+0x94>
 801ecc4:	fb0c 3202 	mla	r2, ip, r2, r3
 801ecc8:	460c      	mov	r4, r1
 801ecca:	2001      	movs	r0, #1
 801eccc:	e7a5      	b.n	801ec1a <_vfiprintf_r+0x11a>
 801ecce:	2300      	movs	r3, #0
 801ecd0:	3401      	adds	r4, #1
 801ecd2:	9305      	str	r3, [sp, #20]
 801ecd4:	4619      	mov	r1, r3
 801ecd6:	f04f 0c0a 	mov.w	ip, #10
 801ecda:	4620      	mov	r0, r4
 801ecdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ece0:	3a30      	subs	r2, #48	; 0x30
 801ece2:	2a09      	cmp	r2, #9
 801ece4:	d903      	bls.n	801ecee <_vfiprintf_r+0x1ee>
 801ece6:	2b00      	cmp	r3, #0
 801ece8:	d0c5      	beq.n	801ec76 <_vfiprintf_r+0x176>
 801ecea:	9105      	str	r1, [sp, #20]
 801ecec:	e7c3      	b.n	801ec76 <_vfiprintf_r+0x176>
 801ecee:	fb0c 2101 	mla	r1, ip, r1, r2
 801ecf2:	4604      	mov	r4, r0
 801ecf4:	2301      	movs	r3, #1
 801ecf6:	e7f0      	b.n	801ecda <_vfiprintf_r+0x1da>
 801ecf8:	ab03      	add	r3, sp, #12
 801ecfa:	9300      	str	r3, [sp, #0]
 801ecfc:	462a      	mov	r2, r5
 801ecfe:	4b16      	ldr	r3, [pc, #88]	; (801ed58 <_vfiprintf_r+0x258>)
 801ed00:	a904      	add	r1, sp, #16
 801ed02:	4630      	mov	r0, r6
 801ed04:	f3af 8000 	nop.w
 801ed08:	4607      	mov	r7, r0
 801ed0a:	1c78      	adds	r0, r7, #1
 801ed0c:	d1d6      	bne.n	801ecbc <_vfiprintf_r+0x1bc>
 801ed0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ed10:	07d9      	lsls	r1, r3, #31
 801ed12:	d405      	bmi.n	801ed20 <_vfiprintf_r+0x220>
 801ed14:	89ab      	ldrh	r3, [r5, #12]
 801ed16:	059a      	lsls	r2, r3, #22
 801ed18:	d402      	bmi.n	801ed20 <_vfiprintf_r+0x220>
 801ed1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ed1c:	f7ff f9f8 	bl	801e110 <__retarget_lock_release_recursive>
 801ed20:	89ab      	ldrh	r3, [r5, #12]
 801ed22:	065b      	lsls	r3, r3, #25
 801ed24:	f53f af12 	bmi.w	801eb4c <_vfiprintf_r+0x4c>
 801ed28:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ed2a:	e711      	b.n	801eb50 <_vfiprintf_r+0x50>
 801ed2c:	ab03      	add	r3, sp, #12
 801ed2e:	9300      	str	r3, [sp, #0]
 801ed30:	462a      	mov	r2, r5
 801ed32:	4b09      	ldr	r3, [pc, #36]	; (801ed58 <_vfiprintf_r+0x258>)
 801ed34:	a904      	add	r1, sp, #16
 801ed36:	4630      	mov	r0, r6
 801ed38:	f000 f880 	bl	801ee3c <_printf_i>
 801ed3c:	e7e4      	b.n	801ed08 <_vfiprintf_r+0x208>
 801ed3e:	bf00      	nop
 801ed40:	08023690 	.word	0x08023690
 801ed44:	080236b0 	.word	0x080236b0
 801ed48:	08023670 	.word	0x08023670
 801ed4c:	08023804 	.word	0x08023804
 801ed50:	0802380e 	.word	0x0802380e
 801ed54:	00000000 	.word	0x00000000
 801ed58:	0801eadb 	.word	0x0801eadb
 801ed5c:	0802380a 	.word	0x0802380a

0801ed60 <_printf_common>:
 801ed60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ed64:	4616      	mov	r6, r2
 801ed66:	4699      	mov	r9, r3
 801ed68:	688a      	ldr	r2, [r1, #8]
 801ed6a:	690b      	ldr	r3, [r1, #16]
 801ed6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ed70:	4293      	cmp	r3, r2
 801ed72:	bfb8      	it	lt
 801ed74:	4613      	movlt	r3, r2
 801ed76:	6033      	str	r3, [r6, #0]
 801ed78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ed7c:	4607      	mov	r7, r0
 801ed7e:	460c      	mov	r4, r1
 801ed80:	b10a      	cbz	r2, 801ed86 <_printf_common+0x26>
 801ed82:	3301      	adds	r3, #1
 801ed84:	6033      	str	r3, [r6, #0]
 801ed86:	6823      	ldr	r3, [r4, #0]
 801ed88:	0699      	lsls	r1, r3, #26
 801ed8a:	bf42      	ittt	mi
 801ed8c:	6833      	ldrmi	r3, [r6, #0]
 801ed8e:	3302      	addmi	r3, #2
 801ed90:	6033      	strmi	r3, [r6, #0]
 801ed92:	6825      	ldr	r5, [r4, #0]
 801ed94:	f015 0506 	ands.w	r5, r5, #6
 801ed98:	d106      	bne.n	801eda8 <_printf_common+0x48>
 801ed9a:	f104 0a19 	add.w	sl, r4, #25
 801ed9e:	68e3      	ldr	r3, [r4, #12]
 801eda0:	6832      	ldr	r2, [r6, #0]
 801eda2:	1a9b      	subs	r3, r3, r2
 801eda4:	42ab      	cmp	r3, r5
 801eda6:	dc26      	bgt.n	801edf6 <_printf_common+0x96>
 801eda8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801edac:	1e13      	subs	r3, r2, #0
 801edae:	6822      	ldr	r2, [r4, #0]
 801edb0:	bf18      	it	ne
 801edb2:	2301      	movne	r3, #1
 801edb4:	0692      	lsls	r2, r2, #26
 801edb6:	d42b      	bmi.n	801ee10 <_printf_common+0xb0>
 801edb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801edbc:	4649      	mov	r1, r9
 801edbe:	4638      	mov	r0, r7
 801edc0:	47c0      	blx	r8
 801edc2:	3001      	adds	r0, #1
 801edc4:	d01e      	beq.n	801ee04 <_printf_common+0xa4>
 801edc6:	6823      	ldr	r3, [r4, #0]
 801edc8:	68e5      	ldr	r5, [r4, #12]
 801edca:	6832      	ldr	r2, [r6, #0]
 801edcc:	f003 0306 	and.w	r3, r3, #6
 801edd0:	2b04      	cmp	r3, #4
 801edd2:	bf08      	it	eq
 801edd4:	1aad      	subeq	r5, r5, r2
 801edd6:	68a3      	ldr	r3, [r4, #8]
 801edd8:	6922      	ldr	r2, [r4, #16]
 801edda:	bf0c      	ite	eq
 801eddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ede0:	2500      	movne	r5, #0
 801ede2:	4293      	cmp	r3, r2
 801ede4:	bfc4      	itt	gt
 801ede6:	1a9b      	subgt	r3, r3, r2
 801ede8:	18ed      	addgt	r5, r5, r3
 801edea:	2600      	movs	r6, #0
 801edec:	341a      	adds	r4, #26
 801edee:	42b5      	cmp	r5, r6
 801edf0:	d11a      	bne.n	801ee28 <_printf_common+0xc8>
 801edf2:	2000      	movs	r0, #0
 801edf4:	e008      	b.n	801ee08 <_printf_common+0xa8>
 801edf6:	2301      	movs	r3, #1
 801edf8:	4652      	mov	r2, sl
 801edfa:	4649      	mov	r1, r9
 801edfc:	4638      	mov	r0, r7
 801edfe:	47c0      	blx	r8
 801ee00:	3001      	adds	r0, #1
 801ee02:	d103      	bne.n	801ee0c <_printf_common+0xac>
 801ee04:	f04f 30ff 	mov.w	r0, #4294967295
 801ee08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee0c:	3501      	adds	r5, #1
 801ee0e:	e7c6      	b.n	801ed9e <_printf_common+0x3e>
 801ee10:	18e1      	adds	r1, r4, r3
 801ee12:	1c5a      	adds	r2, r3, #1
 801ee14:	2030      	movs	r0, #48	; 0x30
 801ee16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ee1a:	4422      	add	r2, r4
 801ee1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ee20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ee24:	3302      	adds	r3, #2
 801ee26:	e7c7      	b.n	801edb8 <_printf_common+0x58>
 801ee28:	2301      	movs	r3, #1
 801ee2a:	4622      	mov	r2, r4
 801ee2c:	4649      	mov	r1, r9
 801ee2e:	4638      	mov	r0, r7
 801ee30:	47c0      	blx	r8
 801ee32:	3001      	adds	r0, #1
 801ee34:	d0e6      	beq.n	801ee04 <_printf_common+0xa4>
 801ee36:	3601      	adds	r6, #1
 801ee38:	e7d9      	b.n	801edee <_printf_common+0x8e>
	...

0801ee3c <_printf_i>:
 801ee3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ee40:	7e0f      	ldrb	r7, [r1, #24]
 801ee42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ee44:	2f78      	cmp	r7, #120	; 0x78
 801ee46:	4691      	mov	r9, r2
 801ee48:	4680      	mov	r8, r0
 801ee4a:	460c      	mov	r4, r1
 801ee4c:	469a      	mov	sl, r3
 801ee4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ee52:	d807      	bhi.n	801ee64 <_printf_i+0x28>
 801ee54:	2f62      	cmp	r7, #98	; 0x62
 801ee56:	d80a      	bhi.n	801ee6e <_printf_i+0x32>
 801ee58:	2f00      	cmp	r7, #0
 801ee5a:	f000 80d8 	beq.w	801f00e <_printf_i+0x1d2>
 801ee5e:	2f58      	cmp	r7, #88	; 0x58
 801ee60:	f000 80a3 	beq.w	801efaa <_printf_i+0x16e>
 801ee64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ee68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ee6c:	e03a      	b.n	801eee4 <_printf_i+0xa8>
 801ee6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ee72:	2b15      	cmp	r3, #21
 801ee74:	d8f6      	bhi.n	801ee64 <_printf_i+0x28>
 801ee76:	a101      	add	r1, pc, #4	; (adr r1, 801ee7c <_printf_i+0x40>)
 801ee78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ee7c:	0801eed5 	.word	0x0801eed5
 801ee80:	0801eee9 	.word	0x0801eee9
 801ee84:	0801ee65 	.word	0x0801ee65
 801ee88:	0801ee65 	.word	0x0801ee65
 801ee8c:	0801ee65 	.word	0x0801ee65
 801ee90:	0801ee65 	.word	0x0801ee65
 801ee94:	0801eee9 	.word	0x0801eee9
 801ee98:	0801ee65 	.word	0x0801ee65
 801ee9c:	0801ee65 	.word	0x0801ee65
 801eea0:	0801ee65 	.word	0x0801ee65
 801eea4:	0801ee65 	.word	0x0801ee65
 801eea8:	0801eff5 	.word	0x0801eff5
 801eeac:	0801ef19 	.word	0x0801ef19
 801eeb0:	0801efd7 	.word	0x0801efd7
 801eeb4:	0801ee65 	.word	0x0801ee65
 801eeb8:	0801ee65 	.word	0x0801ee65
 801eebc:	0801f017 	.word	0x0801f017
 801eec0:	0801ee65 	.word	0x0801ee65
 801eec4:	0801ef19 	.word	0x0801ef19
 801eec8:	0801ee65 	.word	0x0801ee65
 801eecc:	0801ee65 	.word	0x0801ee65
 801eed0:	0801efdf 	.word	0x0801efdf
 801eed4:	682b      	ldr	r3, [r5, #0]
 801eed6:	1d1a      	adds	r2, r3, #4
 801eed8:	681b      	ldr	r3, [r3, #0]
 801eeda:	602a      	str	r2, [r5, #0]
 801eedc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801eee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801eee4:	2301      	movs	r3, #1
 801eee6:	e0a3      	b.n	801f030 <_printf_i+0x1f4>
 801eee8:	6820      	ldr	r0, [r4, #0]
 801eeea:	6829      	ldr	r1, [r5, #0]
 801eeec:	0606      	lsls	r6, r0, #24
 801eeee:	f101 0304 	add.w	r3, r1, #4
 801eef2:	d50a      	bpl.n	801ef0a <_printf_i+0xce>
 801eef4:	680e      	ldr	r6, [r1, #0]
 801eef6:	602b      	str	r3, [r5, #0]
 801eef8:	2e00      	cmp	r6, #0
 801eefa:	da03      	bge.n	801ef04 <_printf_i+0xc8>
 801eefc:	232d      	movs	r3, #45	; 0x2d
 801eefe:	4276      	negs	r6, r6
 801ef00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ef04:	485e      	ldr	r0, [pc, #376]	; (801f080 <_printf_i+0x244>)
 801ef06:	230a      	movs	r3, #10
 801ef08:	e019      	b.n	801ef3e <_printf_i+0x102>
 801ef0a:	680e      	ldr	r6, [r1, #0]
 801ef0c:	602b      	str	r3, [r5, #0]
 801ef0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ef12:	bf18      	it	ne
 801ef14:	b236      	sxthne	r6, r6
 801ef16:	e7ef      	b.n	801eef8 <_printf_i+0xbc>
 801ef18:	682b      	ldr	r3, [r5, #0]
 801ef1a:	6820      	ldr	r0, [r4, #0]
 801ef1c:	1d19      	adds	r1, r3, #4
 801ef1e:	6029      	str	r1, [r5, #0]
 801ef20:	0601      	lsls	r1, r0, #24
 801ef22:	d501      	bpl.n	801ef28 <_printf_i+0xec>
 801ef24:	681e      	ldr	r6, [r3, #0]
 801ef26:	e002      	b.n	801ef2e <_printf_i+0xf2>
 801ef28:	0646      	lsls	r6, r0, #25
 801ef2a:	d5fb      	bpl.n	801ef24 <_printf_i+0xe8>
 801ef2c:	881e      	ldrh	r6, [r3, #0]
 801ef2e:	4854      	ldr	r0, [pc, #336]	; (801f080 <_printf_i+0x244>)
 801ef30:	2f6f      	cmp	r7, #111	; 0x6f
 801ef32:	bf0c      	ite	eq
 801ef34:	2308      	moveq	r3, #8
 801ef36:	230a      	movne	r3, #10
 801ef38:	2100      	movs	r1, #0
 801ef3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ef3e:	6865      	ldr	r5, [r4, #4]
 801ef40:	60a5      	str	r5, [r4, #8]
 801ef42:	2d00      	cmp	r5, #0
 801ef44:	bfa2      	ittt	ge
 801ef46:	6821      	ldrge	r1, [r4, #0]
 801ef48:	f021 0104 	bicge.w	r1, r1, #4
 801ef4c:	6021      	strge	r1, [r4, #0]
 801ef4e:	b90e      	cbnz	r6, 801ef54 <_printf_i+0x118>
 801ef50:	2d00      	cmp	r5, #0
 801ef52:	d04d      	beq.n	801eff0 <_printf_i+0x1b4>
 801ef54:	4615      	mov	r5, r2
 801ef56:	fbb6 f1f3 	udiv	r1, r6, r3
 801ef5a:	fb03 6711 	mls	r7, r3, r1, r6
 801ef5e:	5dc7      	ldrb	r7, [r0, r7]
 801ef60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ef64:	4637      	mov	r7, r6
 801ef66:	42bb      	cmp	r3, r7
 801ef68:	460e      	mov	r6, r1
 801ef6a:	d9f4      	bls.n	801ef56 <_printf_i+0x11a>
 801ef6c:	2b08      	cmp	r3, #8
 801ef6e:	d10b      	bne.n	801ef88 <_printf_i+0x14c>
 801ef70:	6823      	ldr	r3, [r4, #0]
 801ef72:	07de      	lsls	r6, r3, #31
 801ef74:	d508      	bpl.n	801ef88 <_printf_i+0x14c>
 801ef76:	6923      	ldr	r3, [r4, #16]
 801ef78:	6861      	ldr	r1, [r4, #4]
 801ef7a:	4299      	cmp	r1, r3
 801ef7c:	bfde      	ittt	le
 801ef7e:	2330      	movle	r3, #48	; 0x30
 801ef80:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ef84:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ef88:	1b52      	subs	r2, r2, r5
 801ef8a:	6122      	str	r2, [r4, #16]
 801ef8c:	f8cd a000 	str.w	sl, [sp]
 801ef90:	464b      	mov	r3, r9
 801ef92:	aa03      	add	r2, sp, #12
 801ef94:	4621      	mov	r1, r4
 801ef96:	4640      	mov	r0, r8
 801ef98:	f7ff fee2 	bl	801ed60 <_printf_common>
 801ef9c:	3001      	adds	r0, #1
 801ef9e:	d14c      	bne.n	801f03a <_printf_i+0x1fe>
 801efa0:	f04f 30ff 	mov.w	r0, #4294967295
 801efa4:	b004      	add	sp, #16
 801efa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801efaa:	4835      	ldr	r0, [pc, #212]	; (801f080 <_printf_i+0x244>)
 801efac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801efb0:	6829      	ldr	r1, [r5, #0]
 801efb2:	6823      	ldr	r3, [r4, #0]
 801efb4:	f851 6b04 	ldr.w	r6, [r1], #4
 801efb8:	6029      	str	r1, [r5, #0]
 801efba:	061d      	lsls	r5, r3, #24
 801efbc:	d514      	bpl.n	801efe8 <_printf_i+0x1ac>
 801efbe:	07df      	lsls	r7, r3, #31
 801efc0:	bf44      	itt	mi
 801efc2:	f043 0320 	orrmi.w	r3, r3, #32
 801efc6:	6023      	strmi	r3, [r4, #0]
 801efc8:	b91e      	cbnz	r6, 801efd2 <_printf_i+0x196>
 801efca:	6823      	ldr	r3, [r4, #0]
 801efcc:	f023 0320 	bic.w	r3, r3, #32
 801efd0:	6023      	str	r3, [r4, #0]
 801efd2:	2310      	movs	r3, #16
 801efd4:	e7b0      	b.n	801ef38 <_printf_i+0xfc>
 801efd6:	6823      	ldr	r3, [r4, #0]
 801efd8:	f043 0320 	orr.w	r3, r3, #32
 801efdc:	6023      	str	r3, [r4, #0]
 801efde:	2378      	movs	r3, #120	; 0x78
 801efe0:	4828      	ldr	r0, [pc, #160]	; (801f084 <_printf_i+0x248>)
 801efe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801efe6:	e7e3      	b.n	801efb0 <_printf_i+0x174>
 801efe8:	0659      	lsls	r1, r3, #25
 801efea:	bf48      	it	mi
 801efec:	b2b6      	uxthmi	r6, r6
 801efee:	e7e6      	b.n	801efbe <_printf_i+0x182>
 801eff0:	4615      	mov	r5, r2
 801eff2:	e7bb      	b.n	801ef6c <_printf_i+0x130>
 801eff4:	682b      	ldr	r3, [r5, #0]
 801eff6:	6826      	ldr	r6, [r4, #0]
 801eff8:	6961      	ldr	r1, [r4, #20]
 801effa:	1d18      	adds	r0, r3, #4
 801effc:	6028      	str	r0, [r5, #0]
 801effe:	0635      	lsls	r5, r6, #24
 801f000:	681b      	ldr	r3, [r3, #0]
 801f002:	d501      	bpl.n	801f008 <_printf_i+0x1cc>
 801f004:	6019      	str	r1, [r3, #0]
 801f006:	e002      	b.n	801f00e <_printf_i+0x1d2>
 801f008:	0670      	lsls	r0, r6, #25
 801f00a:	d5fb      	bpl.n	801f004 <_printf_i+0x1c8>
 801f00c:	8019      	strh	r1, [r3, #0]
 801f00e:	2300      	movs	r3, #0
 801f010:	6123      	str	r3, [r4, #16]
 801f012:	4615      	mov	r5, r2
 801f014:	e7ba      	b.n	801ef8c <_printf_i+0x150>
 801f016:	682b      	ldr	r3, [r5, #0]
 801f018:	1d1a      	adds	r2, r3, #4
 801f01a:	602a      	str	r2, [r5, #0]
 801f01c:	681d      	ldr	r5, [r3, #0]
 801f01e:	6862      	ldr	r2, [r4, #4]
 801f020:	2100      	movs	r1, #0
 801f022:	4628      	mov	r0, r5
 801f024:	f7e1 f90c 	bl	8000240 <memchr>
 801f028:	b108      	cbz	r0, 801f02e <_printf_i+0x1f2>
 801f02a:	1b40      	subs	r0, r0, r5
 801f02c:	6060      	str	r0, [r4, #4]
 801f02e:	6863      	ldr	r3, [r4, #4]
 801f030:	6123      	str	r3, [r4, #16]
 801f032:	2300      	movs	r3, #0
 801f034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f038:	e7a8      	b.n	801ef8c <_printf_i+0x150>
 801f03a:	6923      	ldr	r3, [r4, #16]
 801f03c:	462a      	mov	r2, r5
 801f03e:	4649      	mov	r1, r9
 801f040:	4640      	mov	r0, r8
 801f042:	47d0      	blx	sl
 801f044:	3001      	adds	r0, #1
 801f046:	d0ab      	beq.n	801efa0 <_printf_i+0x164>
 801f048:	6823      	ldr	r3, [r4, #0]
 801f04a:	079b      	lsls	r3, r3, #30
 801f04c:	d413      	bmi.n	801f076 <_printf_i+0x23a>
 801f04e:	68e0      	ldr	r0, [r4, #12]
 801f050:	9b03      	ldr	r3, [sp, #12]
 801f052:	4298      	cmp	r0, r3
 801f054:	bfb8      	it	lt
 801f056:	4618      	movlt	r0, r3
 801f058:	e7a4      	b.n	801efa4 <_printf_i+0x168>
 801f05a:	2301      	movs	r3, #1
 801f05c:	4632      	mov	r2, r6
 801f05e:	4649      	mov	r1, r9
 801f060:	4640      	mov	r0, r8
 801f062:	47d0      	blx	sl
 801f064:	3001      	adds	r0, #1
 801f066:	d09b      	beq.n	801efa0 <_printf_i+0x164>
 801f068:	3501      	adds	r5, #1
 801f06a:	68e3      	ldr	r3, [r4, #12]
 801f06c:	9903      	ldr	r1, [sp, #12]
 801f06e:	1a5b      	subs	r3, r3, r1
 801f070:	42ab      	cmp	r3, r5
 801f072:	dcf2      	bgt.n	801f05a <_printf_i+0x21e>
 801f074:	e7eb      	b.n	801f04e <_printf_i+0x212>
 801f076:	2500      	movs	r5, #0
 801f078:	f104 0619 	add.w	r6, r4, #25
 801f07c:	e7f5      	b.n	801f06a <_printf_i+0x22e>
 801f07e:	bf00      	nop
 801f080:	08023815 	.word	0x08023815
 801f084:	08023826 	.word	0x08023826

0801f088 <_read_r>:
 801f088:	b538      	push	{r3, r4, r5, lr}
 801f08a:	4d07      	ldr	r5, [pc, #28]	; (801f0a8 <_read_r+0x20>)
 801f08c:	4604      	mov	r4, r0
 801f08e:	4608      	mov	r0, r1
 801f090:	4611      	mov	r1, r2
 801f092:	2200      	movs	r2, #0
 801f094:	602a      	str	r2, [r5, #0]
 801f096:	461a      	mov	r2, r3
 801f098:	f7e8 ff20 	bl	8007edc <_read>
 801f09c:	1c43      	adds	r3, r0, #1
 801f09e:	d102      	bne.n	801f0a6 <_read_r+0x1e>
 801f0a0:	682b      	ldr	r3, [r5, #0]
 801f0a2:	b103      	cbz	r3, 801f0a6 <_read_r+0x1e>
 801f0a4:	6023      	str	r3, [r4, #0]
 801f0a6:	bd38      	pop	{r3, r4, r5, pc}
 801f0a8:	2000fb24 	.word	0x2000fb24

0801f0ac <__swbuf_r>:
 801f0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0ae:	460e      	mov	r6, r1
 801f0b0:	4614      	mov	r4, r2
 801f0b2:	4605      	mov	r5, r0
 801f0b4:	b118      	cbz	r0, 801f0be <__swbuf_r+0x12>
 801f0b6:	6983      	ldr	r3, [r0, #24]
 801f0b8:	b90b      	cbnz	r3, 801f0be <__swbuf_r+0x12>
 801f0ba:	f7fe ff4b 	bl	801df54 <__sinit>
 801f0be:	4b21      	ldr	r3, [pc, #132]	; (801f144 <__swbuf_r+0x98>)
 801f0c0:	429c      	cmp	r4, r3
 801f0c2:	d12b      	bne.n	801f11c <__swbuf_r+0x70>
 801f0c4:	686c      	ldr	r4, [r5, #4]
 801f0c6:	69a3      	ldr	r3, [r4, #24]
 801f0c8:	60a3      	str	r3, [r4, #8]
 801f0ca:	89a3      	ldrh	r3, [r4, #12]
 801f0cc:	071a      	lsls	r2, r3, #28
 801f0ce:	d52f      	bpl.n	801f130 <__swbuf_r+0x84>
 801f0d0:	6923      	ldr	r3, [r4, #16]
 801f0d2:	b36b      	cbz	r3, 801f130 <__swbuf_r+0x84>
 801f0d4:	6923      	ldr	r3, [r4, #16]
 801f0d6:	6820      	ldr	r0, [r4, #0]
 801f0d8:	1ac0      	subs	r0, r0, r3
 801f0da:	6963      	ldr	r3, [r4, #20]
 801f0dc:	b2f6      	uxtb	r6, r6
 801f0de:	4283      	cmp	r3, r0
 801f0e0:	4637      	mov	r7, r6
 801f0e2:	dc04      	bgt.n	801f0ee <__swbuf_r+0x42>
 801f0e4:	4621      	mov	r1, r4
 801f0e6:	4628      	mov	r0, r5
 801f0e8:	f7ff fc74 	bl	801e9d4 <_fflush_r>
 801f0ec:	bb30      	cbnz	r0, 801f13c <__swbuf_r+0x90>
 801f0ee:	68a3      	ldr	r3, [r4, #8]
 801f0f0:	3b01      	subs	r3, #1
 801f0f2:	60a3      	str	r3, [r4, #8]
 801f0f4:	6823      	ldr	r3, [r4, #0]
 801f0f6:	1c5a      	adds	r2, r3, #1
 801f0f8:	6022      	str	r2, [r4, #0]
 801f0fa:	701e      	strb	r6, [r3, #0]
 801f0fc:	6963      	ldr	r3, [r4, #20]
 801f0fe:	3001      	adds	r0, #1
 801f100:	4283      	cmp	r3, r0
 801f102:	d004      	beq.n	801f10e <__swbuf_r+0x62>
 801f104:	89a3      	ldrh	r3, [r4, #12]
 801f106:	07db      	lsls	r3, r3, #31
 801f108:	d506      	bpl.n	801f118 <__swbuf_r+0x6c>
 801f10a:	2e0a      	cmp	r6, #10
 801f10c:	d104      	bne.n	801f118 <__swbuf_r+0x6c>
 801f10e:	4621      	mov	r1, r4
 801f110:	4628      	mov	r0, r5
 801f112:	f7ff fc5f 	bl	801e9d4 <_fflush_r>
 801f116:	b988      	cbnz	r0, 801f13c <__swbuf_r+0x90>
 801f118:	4638      	mov	r0, r7
 801f11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f11c:	4b0a      	ldr	r3, [pc, #40]	; (801f148 <__swbuf_r+0x9c>)
 801f11e:	429c      	cmp	r4, r3
 801f120:	d101      	bne.n	801f126 <__swbuf_r+0x7a>
 801f122:	68ac      	ldr	r4, [r5, #8]
 801f124:	e7cf      	b.n	801f0c6 <__swbuf_r+0x1a>
 801f126:	4b09      	ldr	r3, [pc, #36]	; (801f14c <__swbuf_r+0xa0>)
 801f128:	429c      	cmp	r4, r3
 801f12a:	bf08      	it	eq
 801f12c:	68ec      	ldreq	r4, [r5, #12]
 801f12e:	e7ca      	b.n	801f0c6 <__swbuf_r+0x1a>
 801f130:	4621      	mov	r1, r4
 801f132:	4628      	mov	r0, r5
 801f134:	f000 f80c 	bl	801f150 <__swsetup_r>
 801f138:	2800      	cmp	r0, #0
 801f13a:	d0cb      	beq.n	801f0d4 <__swbuf_r+0x28>
 801f13c:	f04f 37ff 	mov.w	r7, #4294967295
 801f140:	e7ea      	b.n	801f118 <__swbuf_r+0x6c>
 801f142:	bf00      	nop
 801f144:	08023690 	.word	0x08023690
 801f148:	080236b0 	.word	0x080236b0
 801f14c:	08023670 	.word	0x08023670

0801f150 <__swsetup_r>:
 801f150:	4b32      	ldr	r3, [pc, #200]	; (801f21c <__swsetup_r+0xcc>)
 801f152:	b570      	push	{r4, r5, r6, lr}
 801f154:	681d      	ldr	r5, [r3, #0]
 801f156:	4606      	mov	r6, r0
 801f158:	460c      	mov	r4, r1
 801f15a:	b125      	cbz	r5, 801f166 <__swsetup_r+0x16>
 801f15c:	69ab      	ldr	r3, [r5, #24]
 801f15e:	b913      	cbnz	r3, 801f166 <__swsetup_r+0x16>
 801f160:	4628      	mov	r0, r5
 801f162:	f7fe fef7 	bl	801df54 <__sinit>
 801f166:	4b2e      	ldr	r3, [pc, #184]	; (801f220 <__swsetup_r+0xd0>)
 801f168:	429c      	cmp	r4, r3
 801f16a:	d10f      	bne.n	801f18c <__swsetup_r+0x3c>
 801f16c:	686c      	ldr	r4, [r5, #4]
 801f16e:	89a3      	ldrh	r3, [r4, #12]
 801f170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f174:	0719      	lsls	r1, r3, #28
 801f176:	d42c      	bmi.n	801f1d2 <__swsetup_r+0x82>
 801f178:	06dd      	lsls	r5, r3, #27
 801f17a:	d411      	bmi.n	801f1a0 <__swsetup_r+0x50>
 801f17c:	2309      	movs	r3, #9
 801f17e:	6033      	str	r3, [r6, #0]
 801f180:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f184:	81a3      	strh	r3, [r4, #12]
 801f186:	f04f 30ff 	mov.w	r0, #4294967295
 801f18a:	e03e      	b.n	801f20a <__swsetup_r+0xba>
 801f18c:	4b25      	ldr	r3, [pc, #148]	; (801f224 <__swsetup_r+0xd4>)
 801f18e:	429c      	cmp	r4, r3
 801f190:	d101      	bne.n	801f196 <__swsetup_r+0x46>
 801f192:	68ac      	ldr	r4, [r5, #8]
 801f194:	e7eb      	b.n	801f16e <__swsetup_r+0x1e>
 801f196:	4b24      	ldr	r3, [pc, #144]	; (801f228 <__swsetup_r+0xd8>)
 801f198:	429c      	cmp	r4, r3
 801f19a:	bf08      	it	eq
 801f19c:	68ec      	ldreq	r4, [r5, #12]
 801f19e:	e7e6      	b.n	801f16e <__swsetup_r+0x1e>
 801f1a0:	0758      	lsls	r0, r3, #29
 801f1a2:	d512      	bpl.n	801f1ca <__swsetup_r+0x7a>
 801f1a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f1a6:	b141      	cbz	r1, 801f1ba <__swsetup_r+0x6a>
 801f1a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f1ac:	4299      	cmp	r1, r3
 801f1ae:	d002      	beq.n	801f1b6 <__swsetup_r+0x66>
 801f1b0:	4630      	mov	r0, r6
 801f1b2:	f7fe ffff 	bl	801e1b4 <_free_r>
 801f1b6:	2300      	movs	r3, #0
 801f1b8:	6363      	str	r3, [r4, #52]	; 0x34
 801f1ba:	89a3      	ldrh	r3, [r4, #12]
 801f1bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f1c0:	81a3      	strh	r3, [r4, #12]
 801f1c2:	2300      	movs	r3, #0
 801f1c4:	6063      	str	r3, [r4, #4]
 801f1c6:	6923      	ldr	r3, [r4, #16]
 801f1c8:	6023      	str	r3, [r4, #0]
 801f1ca:	89a3      	ldrh	r3, [r4, #12]
 801f1cc:	f043 0308 	orr.w	r3, r3, #8
 801f1d0:	81a3      	strh	r3, [r4, #12]
 801f1d2:	6923      	ldr	r3, [r4, #16]
 801f1d4:	b94b      	cbnz	r3, 801f1ea <__swsetup_r+0x9a>
 801f1d6:	89a3      	ldrh	r3, [r4, #12]
 801f1d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f1dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f1e0:	d003      	beq.n	801f1ea <__swsetup_r+0x9a>
 801f1e2:	4621      	mov	r1, r4
 801f1e4:	4630      	mov	r0, r6
 801f1e6:	f000 f847 	bl	801f278 <__smakebuf_r>
 801f1ea:	89a0      	ldrh	r0, [r4, #12]
 801f1ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f1f0:	f010 0301 	ands.w	r3, r0, #1
 801f1f4:	d00a      	beq.n	801f20c <__swsetup_r+0xbc>
 801f1f6:	2300      	movs	r3, #0
 801f1f8:	60a3      	str	r3, [r4, #8]
 801f1fa:	6963      	ldr	r3, [r4, #20]
 801f1fc:	425b      	negs	r3, r3
 801f1fe:	61a3      	str	r3, [r4, #24]
 801f200:	6923      	ldr	r3, [r4, #16]
 801f202:	b943      	cbnz	r3, 801f216 <__swsetup_r+0xc6>
 801f204:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f208:	d1ba      	bne.n	801f180 <__swsetup_r+0x30>
 801f20a:	bd70      	pop	{r4, r5, r6, pc}
 801f20c:	0781      	lsls	r1, r0, #30
 801f20e:	bf58      	it	pl
 801f210:	6963      	ldrpl	r3, [r4, #20]
 801f212:	60a3      	str	r3, [r4, #8]
 801f214:	e7f4      	b.n	801f200 <__swsetup_r+0xb0>
 801f216:	2000      	movs	r0, #0
 801f218:	e7f7      	b.n	801f20a <__swsetup_r+0xba>
 801f21a:	bf00      	nop
 801f21c:	20000030 	.word	0x20000030
 801f220:	08023690 	.word	0x08023690
 801f224:	080236b0 	.word	0x080236b0
 801f228:	08023670 	.word	0x08023670

0801f22c <__swhatbuf_r>:
 801f22c:	b570      	push	{r4, r5, r6, lr}
 801f22e:	460e      	mov	r6, r1
 801f230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f234:	2900      	cmp	r1, #0
 801f236:	b096      	sub	sp, #88	; 0x58
 801f238:	4614      	mov	r4, r2
 801f23a:	461d      	mov	r5, r3
 801f23c:	da08      	bge.n	801f250 <__swhatbuf_r+0x24>
 801f23e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f242:	2200      	movs	r2, #0
 801f244:	602a      	str	r2, [r5, #0]
 801f246:	061a      	lsls	r2, r3, #24
 801f248:	d410      	bmi.n	801f26c <__swhatbuf_r+0x40>
 801f24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f24e:	e00e      	b.n	801f26e <__swhatbuf_r+0x42>
 801f250:	466a      	mov	r2, sp
 801f252:	f000 f851 	bl	801f2f8 <_fstat_r>
 801f256:	2800      	cmp	r0, #0
 801f258:	dbf1      	blt.n	801f23e <__swhatbuf_r+0x12>
 801f25a:	9a01      	ldr	r2, [sp, #4]
 801f25c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f260:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f264:	425a      	negs	r2, r3
 801f266:	415a      	adcs	r2, r3
 801f268:	602a      	str	r2, [r5, #0]
 801f26a:	e7ee      	b.n	801f24a <__swhatbuf_r+0x1e>
 801f26c:	2340      	movs	r3, #64	; 0x40
 801f26e:	2000      	movs	r0, #0
 801f270:	6023      	str	r3, [r4, #0]
 801f272:	b016      	add	sp, #88	; 0x58
 801f274:	bd70      	pop	{r4, r5, r6, pc}
	...

0801f278 <__smakebuf_r>:
 801f278:	898b      	ldrh	r3, [r1, #12]
 801f27a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f27c:	079d      	lsls	r5, r3, #30
 801f27e:	4606      	mov	r6, r0
 801f280:	460c      	mov	r4, r1
 801f282:	d507      	bpl.n	801f294 <__smakebuf_r+0x1c>
 801f284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f288:	6023      	str	r3, [r4, #0]
 801f28a:	6123      	str	r3, [r4, #16]
 801f28c:	2301      	movs	r3, #1
 801f28e:	6163      	str	r3, [r4, #20]
 801f290:	b002      	add	sp, #8
 801f292:	bd70      	pop	{r4, r5, r6, pc}
 801f294:	ab01      	add	r3, sp, #4
 801f296:	466a      	mov	r2, sp
 801f298:	f7ff ffc8 	bl	801f22c <__swhatbuf_r>
 801f29c:	9900      	ldr	r1, [sp, #0]
 801f29e:	4605      	mov	r5, r0
 801f2a0:	4630      	mov	r0, r6
 801f2a2:	f7fe fff3 	bl	801e28c <_malloc_r>
 801f2a6:	b948      	cbnz	r0, 801f2bc <__smakebuf_r+0x44>
 801f2a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2ac:	059a      	lsls	r2, r3, #22
 801f2ae:	d4ef      	bmi.n	801f290 <__smakebuf_r+0x18>
 801f2b0:	f023 0303 	bic.w	r3, r3, #3
 801f2b4:	f043 0302 	orr.w	r3, r3, #2
 801f2b8:	81a3      	strh	r3, [r4, #12]
 801f2ba:	e7e3      	b.n	801f284 <__smakebuf_r+0xc>
 801f2bc:	4b0d      	ldr	r3, [pc, #52]	; (801f2f4 <__smakebuf_r+0x7c>)
 801f2be:	62b3      	str	r3, [r6, #40]	; 0x28
 801f2c0:	89a3      	ldrh	r3, [r4, #12]
 801f2c2:	6020      	str	r0, [r4, #0]
 801f2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f2c8:	81a3      	strh	r3, [r4, #12]
 801f2ca:	9b00      	ldr	r3, [sp, #0]
 801f2cc:	6163      	str	r3, [r4, #20]
 801f2ce:	9b01      	ldr	r3, [sp, #4]
 801f2d0:	6120      	str	r0, [r4, #16]
 801f2d2:	b15b      	cbz	r3, 801f2ec <__smakebuf_r+0x74>
 801f2d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f2d8:	4630      	mov	r0, r6
 801f2da:	f000 f81f 	bl	801f31c <_isatty_r>
 801f2de:	b128      	cbz	r0, 801f2ec <__smakebuf_r+0x74>
 801f2e0:	89a3      	ldrh	r3, [r4, #12]
 801f2e2:	f023 0303 	bic.w	r3, r3, #3
 801f2e6:	f043 0301 	orr.w	r3, r3, #1
 801f2ea:	81a3      	strh	r3, [r4, #12]
 801f2ec:	89a0      	ldrh	r0, [r4, #12]
 801f2ee:	4305      	orrs	r5, r0
 801f2f0:	81a5      	strh	r5, [r4, #12]
 801f2f2:	e7cd      	b.n	801f290 <__smakebuf_r+0x18>
 801f2f4:	0801deed 	.word	0x0801deed

0801f2f8 <_fstat_r>:
 801f2f8:	b538      	push	{r3, r4, r5, lr}
 801f2fa:	4d07      	ldr	r5, [pc, #28]	; (801f318 <_fstat_r+0x20>)
 801f2fc:	2300      	movs	r3, #0
 801f2fe:	4604      	mov	r4, r0
 801f300:	4608      	mov	r0, r1
 801f302:	4611      	mov	r1, r2
 801f304:	602b      	str	r3, [r5, #0]
 801f306:	f7e8 fe12 	bl	8007f2e <_fstat>
 801f30a:	1c43      	adds	r3, r0, #1
 801f30c:	d102      	bne.n	801f314 <_fstat_r+0x1c>
 801f30e:	682b      	ldr	r3, [r5, #0]
 801f310:	b103      	cbz	r3, 801f314 <_fstat_r+0x1c>
 801f312:	6023      	str	r3, [r4, #0]
 801f314:	bd38      	pop	{r3, r4, r5, pc}
 801f316:	bf00      	nop
 801f318:	2000fb24 	.word	0x2000fb24

0801f31c <_isatty_r>:
 801f31c:	b538      	push	{r3, r4, r5, lr}
 801f31e:	4d06      	ldr	r5, [pc, #24]	; (801f338 <_isatty_r+0x1c>)
 801f320:	2300      	movs	r3, #0
 801f322:	4604      	mov	r4, r0
 801f324:	4608      	mov	r0, r1
 801f326:	602b      	str	r3, [r5, #0]
 801f328:	f7e8 fe11 	bl	8007f4e <_isatty>
 801f32c:	1c43      	adds	r3, r0, #1
 801f32e:	d102      	bne.n	801f336 <_isatty_r+0x1a>
 801f330:	682b      	ldr	r3, [r5, #0]
 801f332:	b103      	cbz	r3, 801f336 <_isatty_r+0x1a>
 801f334:	6023      	str	r3, [r4, #0]
 801f336:	bd38      	pop	{r3, r4, r5, pc}
 801f338:	2000fb24 	.word	0x2000fb24

0801f33c <_init>:
 801f33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f33e:	bf00      	nop
 801f340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f342:	bc08      	pop	{r3}
 801f344:	469e      	mov	lr, r3
 801f346:	4770      	bx	lr

0801f348 <_fini>:
 801f348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f34a:	bf00      	nop
 801f34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f34e:	bc08      	pop	{r3}
 801f350:	469e      	mov	lr, r3
 801f352:	4770      	bx	lr
