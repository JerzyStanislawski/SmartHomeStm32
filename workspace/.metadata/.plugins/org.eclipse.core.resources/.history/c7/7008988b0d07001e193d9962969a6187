/*
 * entry.c
 *
 *  Created on: Jun 5, 2023
 *      Author: JERZSTAN
 */

#include "entry.hpp"
#include "HttpServer.hpp"

#ifdef __cplusplus
extern "C" {
#endif

Lights lights;
Blinds blinds;
Scheduler scheduler(&lights, &blinds);
Board board(&scheduler);
HttpServer server(board);

void http_listen()
{
	MX_RTC_Init();
	server.http_thread();
}

static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 16;
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
  sDate.Month = RTC_MONTH_APRIL;
  sDate.Date = 22;
  sDate.Year = 23;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
  {
    Error_Handler();
  }
}

void SetTime(int hours, int minutes, int seconds, int day, int month, int year)
{
	RTC_TimeTypeDef sTime = {0};
	RTC_DateTypeDef sDate = {0};

	sTime.Hours = hours;
	sTime.Minutes = minutes;
	sTime.Seconds = seconds;
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
	if (HAL_RTC_SetTime(hrtc2, &sTime, RTC_FORMAT_BIN) != HAL_OK)
	{
	  Error_Handler();
	}

	sDate.Date = day;
	sDate.Year = year;

	switch (month)
	{
	case 1:
		sDate.Month = RTC_MONTH_JANUARY;
		break;
	case 2:
		sDate.Month = RTC_MONTH_FEBRUARY;
		break;
	case 3:
		sDate.Month = RTC_MONTH_MARCH;
		break;
	case 4:
		sDate.Month = RTC_MONTH_APRIL;
		break;
	case 5:
		sDate.Month = RTC_MONTH_MAY;
		break;
	case 6:
		sDate.Month = RTC_MONTH_JUNE;
		break;
	case 7:
		sDate.Month = RTC_MONTH_JULY;
		break;
	case 8:
		sDate.Month = RTC_MONTH_AUGUST;
		break;
	case 9:
		sDate.Month = RTC_MONTH_SEPTEMBER;
		break;
	case 10:
		sDate.Month = RTC_MONTH_OCTOBER;
		break;
	case 11:
		sDate.Month = RTC_MONTH_NOVEMBER;
		break;
	case 12:
		sDate.Month = RTC_MONTH_DECEMBER;
		break;
	}

	if (HAL_RTC_SetDate(hrtc2, &sDate, RTC_FORMAT_BIN) != HAL_OK)
	{
	  Error_Handler();
	}
}

const char * GetTime()
{
	RTC_TimeTypeDef sTime = {0};
	RTC_DateTypeDef sDate = {0};

	if (HAL_RTC_GetTime(hrtc2, &sTime, RTC_FORMAT_BIN) != HAL_OK)
	{
	  Error_Handler();
	}
	if (HAL_RTC_GetDate(hrtc2, &sDate, RTC_FORMAT_BIN) != HAL_OK)
	{
	  Error_Handler();
	}

	std::string time = "Time: ";
	time += std::to_string(sTime.Hours);
	time += ":";
	time += std::to_string(sTime.Minutes);
	time += ":";
	time += std::to_string(sTime.Seconds);
	time += "\n";
	time += "Date: ";
	time += std::to_string(sDate.Year);
	time += "-";
	time += std::to_string(sDate.Month);
	time += "-";
	time += std::to_string(sDate.Date);
	time += "\n";

	//length = time.length();
	return time.c_str();
}

#ifdef __cplusplus
}
#endif
