/*
 * entry.c
 *
 *  Created on: Jun 5, 2023
 *      Author: JERZSTAN
 */

#include "entry.hpp"
#include "HttpServer.hpp"
#include "stm32f7xx_hal_rtc.h"

#ifdef __cplusplus
extern "C" {
#endif

Lights lights;
Blinds blinds;
Scheduler scheduler(&lights, &blinds);
Board board(&scheduler);
HttpServer server(board);

void Init()
{
	board.ResetHolidaySettings();
	InitLights();
	InitBlinds();
}

void http_listen()
{
	server.http_thread();
}

void TriggerScheduler(RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate)
{
	scheduler.Execute(sTime.Hours, sTime.Minutes, sTime.Seconds);
	board.TimerEvent(sTime, sDate);
}

void InitLights()
{
	lights.AddLight(GPIOA, GPIO_PIN_0, GPIOB, GPIO_PIN_0, "barek", NULL, 0);
	lights.AddLight(GPIOA, GPIO_PIN_4, GPIOB, GPIO_PIN_4, "garaz", NULL, 0);
	lights.AddLight(GPIOA, GPIO_PIN_5, GPIOB, GPIO_PIN_5, "kotlownia", NULL, 0);
	lights.AddLight(GPIOA, GPIO_PIN_6, GPIOB, GPIO_PIN_6, "wiatrolap", GPIOA, GPIO_PIN_3);
	lights.AddLight(GPIOA, GPIO_PIN_8, GPIOB, GPIO_PIN_8, "hall", NULL, 0);
	lights.AddLight(GPIOA, GPIO_PIN_9, GPIOB, GPIO_PIN_9, "lazienka2", NULL, 0);
	lights.AddLight(GPIOA, GPIO_PIN_10, GPIOB, GPIO_PIN_10, "salon_led", NULL, 0);
	lights.AddLight(GPIOA, GPIO_PIN_11, GPIOB, GPIO_PIN_11, "jadalnia", NULL, 0);
	lights.AddLight(GPIOA, GPIO_PIN_12, GPIOB, GPIO_PIN_12, "kuchnia", NULL, 0);
	lights.AddLight(GPIOA, GPIO_PIN_15, GPIOB, GPIO_PIN_15, "spizarnia", NULL, 0);
	lights.AddLight(GPIOA, GPIO_PIN_13, GPIOA, GPIO_PIN_14, "gabinet", NULL, 0);
	lights.AddLight(GPIOB, GPIO_PIN_1, GPIOB, GPIO_PIN_2, "lazienka", NULL, 0);
	lights.AddLight(GPIOC, GPIO_PIN_0, GPIOD, GPIO_PIN_0, "wejscie", NULL, 0);
	lights.AddLight(GPIOC, GPIO_PIN_2, GPIOD, GPIO_PIN_2, "wejscie_kolumna", NULL, 0);
	lights.AddLight(GPIOC, GPIO_PIN_3, GPIOD, GPIO_PIN_3, "front", NULL, 0);
	lights.AddLight(GPIOD, GPIO_PIN_4, GPIOD, GPIO_PIN_5, "salon_kominek", NULL, 0);
	lights.AddLight(GPIOC, GPIO_PIN_6, GPIOD, GPIO_PIN_6, "lazienka_lustro", NULL, 0);
	lights.AddLight(GPIOC, GPIO_PIN_7, GPIOD, GPIO_PIN_7, "salon", NULL, 0);
	lights.AddLight(GPIOC, GPIO_PIN_9, GPIOD, GPIO_PIN_9, "kuchnia_szafki", NULL, 0);

	////////////////////////////////////////////////////////////////////////////////////////////////////////

	lights.AddLight(GPIOC, GPIO_PIN_10, GPIOD, GPIO_PIN_10, "sypialnia", NULL, 0);
	lights.AddLight(GPIOC, GPIO_PIN_11, GPIOD, GPIO_PIN_11, "pokoj1", NULL, 0);
	lights.AddLight(GPIOC, GPIO_PIN_12, GPIOD, GPIO_PIN_12, "pokoj2", NULL, 0);
	lights.AddLight(GPIOD, GPIO_PIN_8, GPIOD, GPIO_PIN_13, "lazienka_gora", NULL, 0);
	lights.AddLight(GPIOC, GPIO_PIN_14, GPIOD, GPIO_PIN_14, "lazienka_kinkiety", NULL, 0);
	lights.AddLight(GPIOC, GPIO_PIN_15, GPIOD, GPIO_PIN_15, "lazienka_led", NULL, 0);
	lights.AddLight(GPIOE, GPIO_PIN_0, GPIOF, GPIO_PIN_0, "pralnia", NULL, 0);
	lights.AddLight(GPIOE, GPIO_PIN_1, GPIOF, GPIO_PIN_1, "garderoba_gora", NULL, 0);
	lights.AddLight(GPIOE, GPIO_PIN_2, GPIOF, GPIO_PIN_2, "korytarz", GPIOE, GPIO_PIN_3);
	lights.AddLight(GPIOE, GPIO_PIN_4, GPIOF, GPIO_PIN_4, "korytarz_nocne", GPIOF, GPIO_PIN_3);
	lights.AddLight(GPIOE, GPIO_PIN_5, GPIOF, GPIO_PIN_5, "schody", NULL, 0);
	lights.AddLight(GPIOE, GPIO_PIN_6, GPIOF, GPIO_PIN_6, "taras", NULL, 0);
	lights.AddLight(GPIOE, GPIO_PIN_7, GPIOF, GPIO_PIN_7, "taras_punktowe", NULL, 0);
	lights.AddLight(GPIOE, GPIO_PIN_8, GPIOF, GPIO_PIN_8, "taras_kolumna", NULL, 0);
}

void InitBlinds()
{
	blinds.AddBlind(GPIOE, GPIO_PIN_9, "sypialnia_up", BlindDirection::UP);
	blinds.AddBlind(GPIOE, GPIO_PIN_10, "sypialnia_down", BlindDirection::DOWN);
	blinds.AddBlind(GPIOE, GPIO_PIN_11, "pokoj1_1_up", BlindDirection::UP);
	blinds.AddBlind(GPIOE, GPIO_PIN_12, "pokoj1_1_down", BlindDirection::DOWN);
	blinds.AddBlind(GPIOE, GPIO_PIN_13, "pokoj1_2_up", BlindDirection::UP);
	blinds.AddBlind(GPIOE, GPIO_PIN_14, "pokoj1_2_down", BlindDirection::DOWN);
	blinds.AddBlind(GPIOE, GPIO_PIN_15, "pokoj2_up", BlindDirection::UP);
	blinds.AddBlind(GPIOF, GPIO_PIN_9, "pokoj2_down", BlindDirection::DOWN);

	//////////////////////////////////////////////////////////////////////////////////////////

	blinds.AddBlind(GPIOF, GPIO_PIN_10, "salon1_up", BlindDirection::UP);
	blinds.AddBlind(GPIOF, GPIO_PIN_11, "salon1_down", BlindDirection::DOWN);
	blinds.AddBlind(GPIOF, GPIO_PIN_12, "salon2_up", BlindDirection::UP);
	blinds.AddBlind(GPIOF, GPIO_PIN_13, "salon2_down", BlindDirection::DOWN);
	blinds.AddBlind(GPIOF, GPIO_PIN_14, "jadalnia_up", BlindDirection::UP);
	blinds.AddBlind(GPIOF, GPIO_PIN_15, "jadalnia_down", BlindDirection::DOWN);
	blinds.AddBlind(GPIOG, GPIO_PIN_0, "kuchnia_up", BlindDirection::UP);
	blinds.AddBlind(GPIOG, GPIO_PIN_1, "kuchnia_down", BlindDirection::DOWN);
	blinds.AddBlind(GPIOG, GPIO_PIN_2, "gabinet_up", BlindDirection::UP);
	blinds.AddBlind(GPIOG, GPIO_PIN_3, "gabinet_down", BlindDirection::DOWN);
	blinds.AddBlind(GPIOG, GPIO_PIN_4, "garderoba_up", BlindDirection::UP);
	blinds.AddBlind(GPIOG, GPIO_PIN_5, "garderoba_down", BlindDirection::DOWN);
	blinds.AddBlind(GPIOG, GPIO_PIN_6, "kotlownia_up", BlindDirection::UP);
	blinds.AddBlind(GPIOG, GPIO_PIN_7, "kotlownia_down", BlindDirection::DOWN);
}

const char * TimeToString(RTC_TimeTypeDef sTime, RTC_DateTypeDef sDate)
{
	std::string time = "Time: ";
	time += std::to_string(sTime.Hours);
	time += ":";
	time += std::to_string(sTime.Minutes);
	time += ":";
	time += std::to_string(sTime.Seconds);
	time += "\n";
	time += "Date: ";
	time += std::to_string(sDate.Year);
	time += "-";
	time += std::to_string(sDate.Month);
	time += "-";
	time += std::to_string(sDate.Date);
	time += "\n";

	//length = time.length();
	return time.c_str();
}

#ifdef __cplusplus
}
#endif
